operation baseKeyWords(){
	return Sequence{"about", "abstract", "accept", "action", "actor",
					"after", "alias", "all", "allocate", "allocation",
					"analysis", "and", "as", "assign", "assert",
					"assoc", "assume", "at", "attribute", "bind",
					"binding", "block", "by", "calc", "case",
					"comment", "concern", "connect", "connection", "constraint",
					"crosses", "decide", "def", "default", "defined",
					"dependency", "derived", "do", "doc", "else",
					"end", "entry", "enum", "event", "exhibit",
					"exit", "expose", "filter", "first", "flow",
					"for", "fork", "frame", "from", "hastype",
					"if", "implies", "import", "in", "include",
					"individual", "inout", "interface", "istype", "Part",
					"join", "language", "loop", "merge", "message",
					"metadata", "nonunique", "not", "objective", "occurrence",
					"of", "or", "ordered", "out", "package",
					"parallel", "part", "perform", "port", "private",
					"protected", "public", "readonly", "redefines", "ref",
					"references", "render", "rendering", "rep", "require",
					"requirement", "return", "satisfy", "send", "snapshot",
					"specializes", "stakeholder", "state", "subject", "subsets",
					"succession", "terminate", "then", "timeslice", "to",
					"transition", "until", "use", "variant", "variation",
					"verification", "verify", "via", "view", "viewpoint",
					"when", "while", "xor", "value", "any",
					"library"
	  				};
}

operation SysMLine!Package addNamespaceImport(name: String){
	var namespaceImport = new SysMLine!NamespaceImport;
	namespaceImport.declaredName = name;
	namespaceImport.visibility = SysMLine!VisibilityKind#public;
	self.body.add(namespaceImport);
}

operation DSL!EObject addNodeTo(rootNode : SysMLine!Element){
	if (self.isEntity()){
		var node = self.equivalent();
		self.println("41: ");
		node.println("42: ");
		(self.isTypeOf(DSL!LangString)).println("43: ");
		
		rootNode.body.add(node);
		node.declaredName.println("("+(i++).asString()+"/"+eObjectSequence.size().asString()+")"+" >> ");
		for (child in self.eContents()){
			child.addNodeTo(node);
		}
		
//		if (node!=null){
//			rootNode.body.add(node);
//			node.declaredName.println("("+(i++).asString()+"/"+eObjectSequence.size().asString()+")"+" >> ");
//			for (child in self.eContents()){
//				child.addNodeTo(node);
//			}
//		}
		
	}
}

operation DSL!EObject isEntity(){
	return true;
}

operation Sequence getElementOf(typeName : String){
	return self.select(e|e.type().name == typeName);
}

operation Any getEAttribute(){
//	self.println();
	if (self == "" or self == null){
		return null;
	}
	else if (self.type().hasProperty("name") and self.type().name == "String"){
		return "\""+self+"\"";
	}
	else if (self.type().hasProperty("name") and self.type().name == "Boolean"){
		if (self == false){
			return null;
		}
		else{
			return self.asString();
		}
	}
		else if (self.type().hasProperty("name") and self.type().name == "Sequence"){
		if (self.size() == 0){
			return null;
		}
		else{
			return self.getSequenceEString();
		}
	}
	else if (self.type().hasProperty("name") and self.type().name == "OrderedSet"){
		if (self.size() == 0){
			return null;
		}
		else{
			return self.getOrderedSetEString();
		}
	}
	else if (self.hasProperty("value") and self.hasProperty("eClass") and (self.eClass.name == "EEnumLiteral")){
		if (self.value == 0){
			return null;
		}
		else{
			return self.eEnum.name+"::"+self.name;
		}
	}
	else{
		return self.asString();
	}
}

operation Any getEEnumLiteral(){
	if (self.hasProperty("value") and self.hasProperty("eClass") and (self.eClass.name == "EEnumLiteral")){
		if (self.value == 0){
			return null;
		}
		else{
			return self.eEnum.name+"::"+self.name;
		}
	}
}

operation SysMLine!PartUsage addNewEnumLiteral(name : String, valuePartString : String){
	var attr = new SysMLine!EnumerationUsage;
	attr.featureNote.add(":>");
	attr.featureSpecialization.add(name);
	attr.valuePart = valuePartString;
	self.body.add(attr);
}

operation SysMLine!PartUsage addNewAttribute(name : String, valuePartString : String){
	var attr = new SysMLine!AttributeUsage;
	attr.featureNote.add(":>>");
	attr.featureSpecialization.add(name);
	attr.valuePart = valuePartString;
	self.body.add(attr);
}

operation SysMLine!PartUsage addNewReference(name : String, valuePartString : String){
	var Part = new SysMLine!PartUsage;
	Part.isReference = true;
	Part.featureNote.add(":>");
	Part.featureSpecialization.add(name);
	Part.valuePart = valuePartString;
	self.body.add(Part);
}

operation Any getEReference(){
	if (self == null or self.size() == 0){
		return null;
	}
	else{
		var eReferences = self.asSequence();
		var eReferencesSequence = new Sequence;
		for (eReference in eReferences){
			eReferencesSequence.add(eReference.getExtendedDeclaredName());
		}
		if (eReferencesSequence.size() == 1){
			return eReferencesSequence.first();
		}
		else{
			return eReferencesSequence.getSequenceExpression();
		}
	}
}

operation Sequence getSequenceExpression(){
	var str = "";
	for (s in self){
		str += s;
		str += ", ";
	}
	str = "("+str.subString(0, str.length()-2)+")";
	return str;
}

operation Sequence getSequenceEString(){
	var str = "";
	for (s in self){
		if (s != ""){
			str += "\""+s+"\"";
			str += ", ";
		}
	}
	str = "("+str.subString(0, str.length()-2)+")";
	return str;
}

operation OrderedSet getOrderedSetEString(){
	var str = "";
	for (s in self){
		if (s != ""){
			str += "\""+s+"\"";
			str += ", ";
		}
	}
	str = "("+str.subString(0, str.length()-2)+")";
	return str;
}

operation DSL!EObject getExtendedDeclaredName(){
	var eObjectTuple = eObjectSequence.select(s|s.value == self).first();
	if (eObjectTuple == null){
		self.println("Failed to retrieve the EOject >>");
	}
	var str = eObjectTuple.value.extendEContainer("");
	if (str.length()>1){
		str = str.subString(1, str.length());
		str += "."+eObjectTuple.key;
	}
	else{
		str = eObjectTuple.key;
	}
	return str;
}

operation DSL!EObject extendEContainer(str : String){
	if (self.eContainer() != null and self.eContainer().getDeclaredName() != null){
		str = self.eContainer().extendEContainer(str);
		if (self.eContainer().eContainer().isUndefined()){
			return "";
		}
		return str+"."+self.eContainer().getDeclaredName();
	}
	else{
		return str;
	}
} 

operation DSL!EObject getDeclaredName(){
	var eObjectTuple = eObjectSequence.select(s|s.value == self).first();
	if (eObjectTuple != null){
		return eObjectTuple.key;
	}
	else{
		return null;
	}
}

operation DSL!EObject getfeatureSpecialization(){
	return self.type().name;
}

operation String clearKeyWord(){
	if (KeyWords.includes(self)){
		return "'"+self+"'";
	}
	else{
		return self;
	}
}