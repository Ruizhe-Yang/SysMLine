import "DSL2SysMLine-util.eol";

pre{
	var eObjectSequence = new Sequence;
	var KeyWords = baseKeyWords();
	init_gsn();
	main_gsn();
}

post{
	("[ETL] gsn2SysMLine >> " + SysMLine!Package.all.first().declaredName + ".sysmline").println();
}

operation main_gsn(){
	var rootEcore = DSL!EObject.all.first();
	var rootSysMLine = new SysMLine!Namespace;
	var rootPackage = new SysMLine!Package;
	rootPackage.declaredName = "gsn_model";
	rootSysMLine.body.add(rootPackage);
	rootPackage.addNamespaceImport("gsn");
	rootPackage.addNamespaceImport("argumentation");
	rootPackage.addNamespaceImport("base");
	rootEcore.addNodeTo(rootPackage);
}

operation init_gsn(){
	//gsn.Module -> Instantiation
	var idModule = 0;
	for (eModule in DSL!EObject.all.select(s|s.isTypeOf(DSL!Module))){
		var eModuleTuple = Tuple{"key"=eModule.type().name.asString()+"_"+(idModule++).asString(),"value"= eModule};
		eObjectSequence.add(eModuleTuple);
	}
	//gsn.ContractModule -> Instantiation
	var idContractModule = 0;
	for (eContractModule in DSL!EObject.all.select(s|s.isTypeOf(DSL!ContractModule))){
		var eContractModuleTuple = Tuple{"key"=eContractModule.type().name.asString()+"_"+(idContractModule++).asString(),"value"= eContractModule};
		eObjectSequence.add(eContractModuleTuple);
	}
	//gsn.ChoiceNode -> Instantiation
	var idChoiceNode = 0;
	for (eChoiceNode in DSL!EObject.all.select(s|s.isTypeOf(DSL!ChoiceNode))){
		var eChoiceNodeTuple = Tuple{"key"=eChoiceNode.type().name.asString()+"_"+(idChoiceNode++).asString(),"value"= eChoiceNode};
		eObjectSequence.add(eChoiceNodeTuple);
	}
	//gsn.Context -> Instantiation
	var idContext = 0;
	for (eContext in DSL!EObject.all.select(s|s.isTypeOf(DSL!Context))){
		var eContextTuple = Tuple{"key"=eContext.type().name.asString()+"_"+(idContext++).asString(),"value"= eContext};
		eObjectSequence.add(eContextTuple);
	}
	//gsn.Strategy -> Instantiation
	var idStrategy = 0;
	for (eStrategy in DSL!EObject.all.select(s|s.isTypeOf(DSL!Strategy))){
		var eStrategyTuple = Tuple{"key"=eStrategy.type().name.asString()+"_"+(idStrategy++).asString(),"value"= eStrategy};
		eObjectSequence.add(eStrategyTuple);
	}
	//gsn.Goal -> Instantiation
	var idGoal = 0;
	for (eGoal in DSL!EObject.all.select(s|s.isTypeOf(DSL!Goal))){
		var eGoalTuple = Tuple{"key"=eGoal.type().name.asString()+"_"+(idGoal++).asString(),"value"= eGoal};
		eObjectSequence.add(eGoalTuple);
	}
	//gsn.Justification -> Instantiation
	var idJustification = 0;
	for (eJustification in DSL!EObject.all.select(s|s.isTypeOf(DSL!Justification))){
		var eJustificationTuple = Tuple{"key"=eJustification.type().name.asString()+"_"+(idJustification++).asString(),"value"= eJustification};
		eObjectSequence.add(eJustificationTuple);
	}
	//gsn.Assumption -> Instantiation
	var idAssumption = 0;
	for (eAssumption in DSL!EObject.all.select(s|s.isTypeOf(DSL!Assumption))){
		var eAssumptionTuple = Tuple{"key"=eAssumption.type().name.asString()+"_"+(idAssumption++).asString(),"value"= eAssumption};
		eObjectSequence.add(eAssumptionTuple);
	}
	//gsn.AwayGoal -> Instantiation
	var idAwayGoal = 0;
	for (eAwayGoal in DSL!EObject.all.select(s|s.isTypeOf(DSL!AwayGoal))){
		var eAwayGoalTuple = Tuple{"key"=eAwayGoal.type().name.asString()+"_"+(idAwayGoal++).asString(),"value"= eAwayGoal};
		eObjectSequence.add(eAwayGoalTuple);
	}
	//gsn.AwaySolution -> Instantiation
	var idAwaySolution = 0;
	for (eAwaySolution in DSL!EObject.all.select(s|s.isTypeOf(DSL!AwaySolution))){
		var eAwaySolutionTuple = Tuple{"key"=eAwaySolution.type().name.asString()+"_"+(idAwaySolution++).asString(),"value"= eAwaySolution};
		eObjectSequence.add(eAwaySolutionTuple);
	}
	//gsn.AwayContext -> Instantiation
	var idAwayContext = 0;
	for (eAwayContext in DSL!EObject.all.select(s|s.isTypeOf(DSL!AwayContext))){
		var eAwayContextTuple = Tuple{"key"=eAwayContext.type().name.asString()+"_"+(idAwayContext++).asString(),"value"= eAwayContext};
		eObjectSequence.add(eAwayContextTuple);
	}
	//gsn.ModuleReference -> Instantiation
	var idModuleReference = 0;
	for (eModuleReference in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModuleReference))){
		var eModuleReferenceTuple = Tuple{"key"=eModuleReference.type().name.asString()+"_"+(idModuleReference++).asString(),"value"= eModuleReference};
		eObjectSequence.add(eModuleReferenceTuple);
	}
	//gsn.ContractModuleReference -> Instantiation
	var idContractModuleReference = 0;
	for (eContractModuleReference in DSL!EObject.all.select(s|s.isTypeOf(DSL!ContractModuleReference))){
		var eContractModuleReferenceTuple = Tuple{"key"=eContractModuleReference.type().name.asString()+"_"+(idContractModuleReference++).asString(),"value"= eContractModuleReference};
		eObjectSequence.add(eContractModuleReferenceTuple);
	}
	//gsn.Solution -> Instantiation
	var idSolution = 0;
	for (eSolution in DSL!EObject.all.select(s|s.isTypeOf(DSL!Solution))){
		var eSolutionTuple = Tuple{"key"=eSolution.type().name.asString()+"_"+(idSolution++).asString(),"value"= eSolution};
		eObjectSequence.add(eSolutionTuple);
	}
	//gsn.SupportedBy -> Instantiation
	var idSupportedBy = 0;
	for (eSupportedBy in DSL!EObject.all.select(s|s.isTypeOf(DSL!SupportedBy))){
		var eSupportedByTuple = Tuple{"key"=eSupportedBy.type().name.asString()+"_"+(idSupportedBy++).asString(),"value"= eSupportedBy};
		eObjectSequence.add(eSupportedByTuple);
	}
	//gsn.InContextOf -> Instantiation
	var idInContextOf = 0;
	for (eInContextOf in DSL!EObject.all.select(s|s.isTypeOf(DSL!InContextOf))){
		var eInContextOfTuple = Tuple{"key"=eInContextOf.type().name.asString()+"_"+(idInContextOf++).asString(),"value"= eInContextOf};
		eObjectSequence.add(eInContextOfTuple);
	}
	//argumentation.ArgumentationElement -> Instantiation
	var idArgumentationElement = 0;
	for (eArgumentationElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArgumentationElement))){
		var eArgumentationElementTuple = Tuple{"key"=eArgumentationElement.type().name.asString()+"_"+(idArgumentationElement++).asString(),"value"= eArgumentationElement};
		eObjectSequence.add(eArgumentationElementTuple);
	}
	//argumentation.ArgumentGroup -> Instantiation
	var idArgumentGroup = 0;
	for (eArgumentGroup in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArgumentGroup))){
		var eArgumentGroupTuple = Tuple{"key"=eArgumentGroup.type().name.asString()+"_"+(idArgumentGroup++).asString(),"value"= eArgumentGroup};
		eObjectSequence.add(eArgumentGroupTuple);
	}
	//argumentation.ArgumentPackage -> Instantiation
	var idArgumentPackage = 0;
	for (eArgumentPackage in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArgumentPackage))){
		var eArgumentPackageTuple = Tuple{"key"=eArgumentPackage.type().name.asString()+"_"+(idArgumentPackage++).asString(),"value"= eArgumentPackage};
		eObjectSequence.add(eArgumentPackageTuple);
	}
	//argumentation.ArgumentPackageInterface -> Instantiation
	var idArgumentPackageInterface = 0;
	for (eArgumentPackageInterface in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArgumentPackageInterface))){
		var eArgumentPackageInterfaceTuple = Tuple{"key"=eArgumentPackageInterface.type().name.asString()+"_"+(idArgumentPackageInterface++).asString(),"value"= eArgumentPackageInterface};
		eObjectSequence.add(eArgumentPackageInterfaceTuple);
	}
	//argumentation.ArgumentPackageBinding -> Instantiation
	var idArgumentPackageBinding = 0;
	for (eArgumentPackageBinding in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArgumentPackageBinding))){
		var eArgumentPackageBindingTuple = Tuple{"key"=eArgumentPackageBinding.type().name.asString()+"_"+(idArgumentPackageBinding++).asString(),"value"= eArgumentPackageBinding};
		eObjectSequence.add(eArgumentPackageBindingTuple);
	}
	//argumentation.ArgumentAsset -> Instantiation
	var idArgumentAsset = 0;
	for (eArgumentAsset in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArgumentAsset))){
		var eArgumentAssetTuple = Tuple{"key"=eArgumentAsset.type().name.asString()+"_"+(idArgumentAsset++).asString(),"value"= eArgumentAsset};
		eObjectSequence.add(eArgumentAssetTuple);
	}
	//argumentation.Assertion -> Instantiation
	var idAssertion = 0;
	for (eAssertion in DSL!EObject.all.select(s|s.isTypeOf(DSL!Assertion))){
		var eAssertionTuple = Tuple{"key"=eAssertion.type().name.asString()+"_"+(idAssertion++).asString(),"value"= eAssertion};
		eObjectSequence.add(eAssertionTuple);
	}
	//argumentation.ArgumentReasoning -> Instantiation
	var idArgumentReasoning = 0;
	for (eArgumentReasoning in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArgumentReasoning))){
		var eArgumentReasoningTuple = Tuple{"key"=eArgumentReasoning.type().name.asString()+"_"+(idArgumentReasoning++).asString(),"value"= eArgumentReasoning};
		eObjectSequence.add(eArgumentReasoningTuple);
	}
	//argumentation.Claim -> Instantiation
	var idClaim = 0;
	for (eClaim in DSL!EObject.all.select(s|s.isTypeOf(DSL!Claim))){
		var eClaimTuple = Tuple{"key"=eClaim.type().name.asString()+"_"+(idClaim++).asString(),"value"= eClaim};
		eObjectSequence.add(eClaimTuple);
	}
	//argumentation.AssertedRelationship -> Instantiation
	var idAssertedRelationship = 0;
	for (eAssertedRelationship in DSL!EObject.all.select(s|s.isTypeOf(DSL!AssertedRelationship))){
		var eAssertedRelationshipTuple = Tuple{"key"=eAssertedRelationship.type().name.asString()+"_"+(idAssertedRelationship++).asString(),"value"= eAssertedRelationship};
		eObjectSequence.add(eAssertedRelationshipTuple);
	}
	//argumentation.ArtifactReference -> Instantiation
	var idArtifactReference = 0;
	for (eArtifactReference in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArtifactReference))){
		var eArtifactReferenceTuple = Tuple{"key"=eArtifactReference.type().name.asString()+"_"+(idArtifactReference++).asString(),"value"= eArtifactReference};
		eObjectSequence.add(eArtifactReferenceTuple);
	}
	//argumentation.AssertedArtifactSupport -> Instantiation
	var idAssertedArtifactSupport = 0;
	for (eAssertedArtifactSupport in DSL!EObject.all.select(s|s.isTypeOf(DSL!AssertedArtifactSupport))){
		var eAssertedArtifactSupportTuple = Tuple{"key"=eAssertedArtifactSupport.type().name.asString()+"_"+(idAssertedArtifactSupport++).asString(),"value"= eAssertedArtifactSupport};
		eObjectSequence.add(eAssertedArtifactSupportTuple);
	}
	//argumentation.AssertedInference -> Instantiation
	var idAssertedInference = 0;
	for (eAssertedInference in DSL!EObject.all.select(s|s.isTypeOf(DSL!AssertedInference))){
		var eAssertedInferenceTuple = Tuple{"key"=eAssertedInference.type().name.asString()+"_"+(idAssertedInference++).asString(),"value"= eAssertedInference};
		eObjectSequence.add(eAssertedInferenceTuple);
	}
	//argumentation.AssertedEvidence -> Instantiation
	var idAssertedEvidence = 0;
	for (eAssertedEvidence in DSL!EObject.all.select(s|s.isTypeOf(DSL!AssertedEvidence))){
		var eAssertedEvidenceTuple = Tuple{"key"=eAssertedEvidence.type().name.asString()+"_"+(idAssertedEvidence++).asString(),"value"= eAssertedEvidence};
		eObjectSequence.add(eAssertedEvidenceTuple);
	}
	//argumentation.AssertedContext -> Instantiation
	var idAssertedContext = 0;
	for (eAssertedContext in DSL!EObject.all.select(s|s.isTypeOf(DSL!AssertedContext))){
		var eAssertedContextTuple = Tuple{"key"=eAssertedContext.type().name.asString()+"_"+(idAssertedContext++).asString(),"value"= eAssertedContext};
		eObjectSequence.add(eAssertedContextTuple);
	}
	//argumentation.AssertedArtifactContext -> Instantiation
	var idAssertedArtifactContext = 0;
	for (eAssertedArtifactContext in DSL!EObject.all.select(s|s.isTypeOf(DSL!AssertedArtifactContext))){
		var eAssertedArtifactContextTuple = Tuple{"key"=eAssertedArtifactContext.type().name.asString()+"_"+(idAssertedArtifactContext++).asString(),"value"= eAssertedArtifactContext};
		eObjectSequence.add(eAssertedArtifactContextTuple);
	}
	//base.Element -> Instantiation
	var idElement = 0;
	for (eElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!Element))){
		var eElementTuple = Tuple{"key"=eElement.type().name.asString()+"_"+(idElement++).asString(),"value"= eElement};
		eObjectSequence.add(eElementTuple);
	}
	//base.LangString -> Instantiation
	var idLangString = 0;
	for (eLangString in DSL!EObject.all.select(s|s.isTypeOf(DSL!LangString))){
		var eLangStringTuple = Tuple{"key"=eLangString.type().name.asString()+"_"+(idLangString++).asString(),"value"= eLangString};
		eObjectSequence.add(eLangStringTuple);
	}
	//base.ExpressionLangString -> Instantiation
	var idExpressionLangString = 0;
	for (eExpressionLangString in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExpressionLangString))){
		var eExpressionLangStringTuple = Tuple{"key"=eExpressionLangString.type().name.asString()+"_"+(idExpressionLangString++).asString(),"value"= eExpressionLangString};
		eObjectSequence.add(eExpressionLangStringTuple);
	}
	//base.MultiLangString -> Instantiation
	var idMultiLangString = 0;
	for (eMultiLangString in DSL!EObject.all.select(s|s.isTypeOf(DSL!MultiLangString))){
		var eMultiLangStringTuple = Tuple{"key"=eMultiLangString.type().name.asString()+"_"+(idMultiLangString++).asString(),"value"= eMultiLangString};
		eObjectSequence.add(eMultiLangStringTuple);
	}
	//base.SACMElement -> Instantiation
	var idSACMElement = 0;
	for (eSACMElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!SACMElement))){
		var eSACMElementTuple = Tuple{"key"=eSACMElement.type().name.asString()+"_"+(idSACMElement++).asString(),"value"= eSACMElement};
		eObjectSequence.add(eSACMElementTuple);
	}
	//base.UtilityElement -> Instantiation
	var idUtilityElement = 0;
	for (eUtilityElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!UtilityElement))){
		var eUtilityElementTuple = Tuple{"key"=eUtilityElement.type().name.asString()+"_"+(idUtilityElement++).asString(),"value"= eUtilityElement};
		eObjectSequence.add(eUtilityElementTuple);
	}
	//base.Description -> Instantiation
	var idDescription = 0;
	for (eDescription in DSL!EObject.all.select(s|s.isTypeOf(DSL!Description))){
		var eDescriptionTuple = Tuple{"key"=eDescription.type().name.asString()+"_"+(idDescription++).asString(),"value"= eDescription};
		eObjectSequence.add(eDescriptionTuple);
	}
	//base.ImplementationConstraint -> Instantiation
	var idImplementationConstraint = 0;
	for (eImplementationConstraint in DSL!EObject.all.select(s|s.isTypeOf(DSL!ImplementationConstraint))){
		var eImplementationConstraintTuple = Tuple{"key"=eImplementationConstraint.type().name.asString()+"_"+(idImplementationConstraint++).asString(),"value"= eImplementationConstraint};
		eObjectSequence.add(eImplementationConstraintTuple);
	}
	//base.Note -> Instantiation
	var idNote = 0;
	for (eNote in DSL!EObject.all.select(s|s.isTypeOf(DSL!Note))){
		var eNoteTuple = Tuple{"key"=eNote.type().name.asString()+"_"+(idNote++).asString(),"value"= eNote};
		eObjectSequence.add(eNoteTuple);
	}
	//base.TaggedValue -> Instantiation
	var idTaggedValue = 0;
	for (eTaggedValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!TaggedValue))){
		var eTaggedValueTuple = Tuple{"key"=eTaggedValue.type().name.asString()+"_"+(idTaggedValue++).asString(),"value"= eTaggedValue};
		eObjectSequence.add(eTaggedValueTuple);
	}
	//base.ModelElement -> Instantiation
	var idModelElement = 0;
	for (eModelElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModelElement))){
		var eModelElementTuple = Tuple{"key"=eModelElement.type().name.asString()+"_"+(idModelElement++).asString(),"value"= eModelElement};
		eObjectSequence.add(eModelElementTuple);
	}
	//base.ArtifactElement -> Instantiation
	var idArtifactElement = 0;
	for (eArtifactElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArtifactElement))){
		var eArtifactElementTuple = Tuple{"key"=eArtifactElement.type().name.asString()+"_"+(idArtifactElement++).asString(),"value"= eArtifactElement};
		eObjectSequence.add(eArtifactElementTuple);
	}
}

@abstract
rule Base
	transform s : DSL!EObject
	to t : SysMLine!ItemUsage{
	t.declaredName = s.getDeclaredName();
	t.featureNote.add(":");
	t.featureSpecialization.add(s.getfeatureSpecialization());
	if (s.eContainingFeature != null and s.eContainingFeature.name != null){
		t.featureNote.add(":>");
		t.featureSpecialization.add(s.eContainingFeature().name);
	}
}

// gsn.ecore
@lazy
rule Module
	transform s : DSL!Module
	to t : SysMLine!ItemUsage
	extends Base{
	//Module.Module -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Module.Module -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Module.Module -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Module.Module -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//Module.Module -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Module.Module -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Module.Module -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Module.Module -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Module.Module -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Module.Module -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Module.Module -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Module.Module -> EReference : argumentationElement
	if (s.argumentationElement.getEReference() != null) t.addNewReference("argumentationElement", s.argumentationElement.getEReference());
}

@lazy
rule ContractModule
	transform s : DSL!ContractModule
	to t : SysMLine!ItemUsage
	extends Base{
	//ContractModule.ContractModule -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ContractModule.ContractModule -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ContractModule.ContractModule -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ContractModule.ContractModule -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//ContractModule.ContractModule -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ContractModule.ContractModule -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ContractModule.ContractModule -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ContractModule.ContractModule -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ContractModule.ContractModule -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ContractModule.ContractModule -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ContractModule.ContractModule -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ContractModule.ContractModule -> EReference : argumentationElement
	if (s.argumentationElement.getEReference() != null) t.addNewReference("argumentationElement", s.argumentationElement.getEReference());
	//ContractModule.ContractModule -> EReference : participantPackage
	if (s.participantPackage.getEReference() != null) t.addNewReference("participantPackage", s.participantPackage.getEReference());
}

@lazy
rule ChoiceNode
	transform s : DSL!ChoiceNode
	to t : SysMLine!ItemUsage
	extends Base{
	//ChoiceNode.ChoiceNode -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ChoiceNode.ChoiceNode -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ChoiceNode.ChoiceNode -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ChoiceNode.ChoiceNode -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//ChoiceNode.ChoiceNode -> EAttribute : choice
	if (s.choice.getEAttribute() != null) t.addNewAttribute("choice", s.choice.getEAttribute());
	//ChoiceNode.ChoiceNode -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ChoiceNode.ChoiceNode -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ChoiceNode.ChoiceNode -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ChoiceNode.ChoiceNode -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ChoiceNode.ChoiceNode -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ChoiceNode.ChoiceNode -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ChoiceNode.ChoiceNode -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ChoiceNode.ChoiceNode -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
}

@lazy
rule Context
	transform s : DSL!Context
	to t : SysMLine!ItemUsage
	extends Base{
	//Context.Context -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Context.Context -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Context.Context -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Context.Context -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//Context.Context -> EAttribute : isPublic
	if (s.isPublic.getEAttribute() != null) t.addNewAttribute("isPublic", s.isPublic.getEAttribute());
	//Context.Context -> EAttribute : refersToExternalMaterial
	if (s.refersToExternalMaterial.getEAttribute() != null) t.addNewAttribute("refersToExternalMaterial", s.refersToExternalMaterial.getEAttribute());
	//Context.Context -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Context.Context -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Context.Context -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Context.Context -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Context.Context -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Context.Context -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Context.Context -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Context.Context -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
}

@lazy
rule Strategy
	transform s : DSL!Strategy
	to t : SysMLine!ItemUsage
	extends Base{
	//Strategy.Strategy -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Strategy.Strategy -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Strategy.Strategy -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Strategy.Strategy -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//Strategy.Strategy -> EAttribute : undeveloped
	if (s.undeveloped.getEAttribute() != null) t.addNewAttribute("undeveloped", s.undeveloped.getEAttribute());
	//Strategy.Strategy -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Strategy.Strategy -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Strategy.Strategy -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Strategy.Strategy -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Strategy.Strategy -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Strategy.Strategy -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Strategy.Strategy -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Strategy.Strategy -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//Strategy.Strategy -> EReference : structure
	if (s.structure.getEReference() != null) t.addNewReference("structure", s.structure.getEReference());
}

@lazy
rule Goal
	transform s : DSL!Goal
	to t : SysMLine!ItemUsage
	extends Base{
	//Goal.Goal -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Goal.Goal -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Goal.Goal -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Goal.Goal -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//Goal.Goal -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null) t.addNewAttribute("assertionDeclaration", s.assertionDeclaration.getEAttribute());
	//Goal.Goal -> EAttribute : isPublic
	if (s.isPublic.getEAttribute() != null) t.addNewAttribute("isPublic", s.isPublic.getEAttribute());
	//Goal.Goal -> EAttribute : undeveloped
	if (s.undeveloped.getEAttribute() != null) t.addNewAttribute("undeveloped", s.undeveloped.getEAttribute());
	//Goal.Goal -> EAttribute : toBeSupportedByContract
	if (s.toBeSupportedByContract.getEAttribute() != null) t.addNewAttribute("toBeSupportedByContract", s.toBeSupportedByContract.getEAttribute());
	//Goal.Goal -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Goal.Goal -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Goal.Goal -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Goal.Goal -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Goal.Goal -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Goal.Goal -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Goal.Goal -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Goal.Goal -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//Goal.Goal -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null) t.addNewReference("metaClaim", s.metaClaim.getEReference());
}

@lazy
rule Justification
	transform s : DSL!Justification
	to t : SysMLine!ItemUsage
	extends Base{
	//Justification.Justification -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Justification.Justification -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Justification.Justification -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Justification.Justification -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//Justification.Justification -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null) t.addNewAttribute("assertionDeclaration", s.assertionDeclaration.getEAttribute());
	//Justification.Justification -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Justification.Justification -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Justification.Justification -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Justification.Justification -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Justification.Justification -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Justification.Justification -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Justification.Justification -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Justification.Justification -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//Justification.Justification -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null) t.addNewReference("metaClaim", s.metaClaim.getEReference());
}

@lazy
rule Assumption
	transform s : DSL!Assumption
	to t : SysMLine!ItemUsage
	extends Base{
	//Assumption.Assumption -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Assumption.Assumption -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Assumption.Assumption -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Assumption.Assumption -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//Assumption.Assumption -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null) t.addNewAttribute("assertionDeclaration", s.assertionDeclaration.getEAttribute());
	//Assumption.Assumption -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Assumption.Assumption -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Assumption.Assumption -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Assumption.Assumption -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Assumption.Assumption -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Assumption.Assumption -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Assumption.Assumption -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Assumption.Assumption -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//Assumption.Assumption -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null) t.addNewReference("metaClaim", s.metaClaim.getEReference());
}

@lazy
rule AwayGoal
	transform s : DSL!AwayGoal
	to t : SysMLine!ItemUsage
	extends Base{
	//AwayGoal.AwayGoal -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//AwayGoal.AwayGoal -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//AwayGoal.AwayGoal -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//AwayGoal.AwayGoal -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//AwayGoal.AwayGoal -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null) t.addNewAttribute("assertionDeclaration", s.assertionDeclaration.getEAttribute());
	//AwayGoal.AwayGoal -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//AwayGoal.AwayGoal -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//AwayGoal.AwayGoal -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//AwayGoal.AwayGoal -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//AwayGoal.AwayGoal -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//AwayGoal.AwayGoal -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//AwayGoal.AwayGoal -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//AwayGoal.AwayGoal -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//AwayGoal.AwayGoal -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null) t.addNewReference("metaClaim", s.metaClaim.getEReference());
}

@lazy
rule AwaySolution
	transform s : DSL!AwaySolution
	to t : SysMLine!ItemUsage
	extends Base{
	//AwaySolution.AwaySolution -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//AwaySolution.AwaySolution -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//AwaySolution.AwaySolution -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//AwaySolution.AwaySolution -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//AwaySolution.AwaySolution -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//AwaySolution.AwaySolution -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//AwaySolution.AwaySolution -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//AwaySolution.AwaySolution -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//AwaySolution.AwaySolution -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//AwaySolution.AwaySolution -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//AwaySolution.AwaySolution -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//AwaySolution.AwaySolution -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//AwaySolution.AwaySolution -> EReference : referencedArtifactElement
	if (s.referencedArtifactElement.getEReference() != null) t.addNewReference("referencedArtifactElement", s.referencedArtifactElement.getEReference());
}

@lazy
rule AwayContext
	transform s : DSL!AwayContext
	to t : SysMLine!ItemUsage
	extends Base{
	//AwayContext.AwayContext -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//AwayContext.AwayContext -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//AwayContext.AwayContext -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//AwayContext.AwayContext -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//AwayContext.AwayContext -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//AwayContext.AwayContext -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//AwayContext.AwayContext -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//AwayContext.AwayContext -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//AwayContext.AwayContext -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//AwayContext.AwayContext -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//AwayContext.AwayContext -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//AwayContext.AwayContext -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
}

@lazy
rule ModuleReference
	transform s : DSL!ModuleReference
	to t : SysMLine!ItemUsage
	extends Base{
	//ModuleReference.ModuleReference -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ModuleReference.ModuleReference -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ModuleReference.ModuleReference -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ModuleReference.ModuleReference -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//ModuleReference.ModuleReference -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ModuleReference.ModuleReference -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ModuleReference.ModuleReference -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ModuleReference.ModuleReference -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ModuleReference.ModuleReference -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ModuleReference.ModuleReference -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ModuleReference.ModuleReference -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ModuleReference.ModuleReference -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//ModuleReference.ModuleReference -> EReference : referencedArtifactElement
	if (s.referencedArtifactElement.getEReference() != null) t.addNewReference("referencedArtifactElement", s.referencedArtifactElement.getEReference());
	//ModuleReference.ModuleReference -> EReference : module
	if (s.module.getEReference() != null) t.addNewReference("module", s.module.getEReference());
}

@lazy
rule ContractModuleReference
	transform s : DSL!ContractModuleReference
	to t : SysMLine!ItemUsage
	extends Base{
	//ContractModuleReference.ContractModuleReference -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ContractModuleReference.ContractModuleReference -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ContractModuleReference.ContractModuleReference -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ContractModuleReference.ContractModuleReference -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//ContractModuleReference.ContractModuleReference -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ContractModuleReference.ContractModuleReference -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ContractModuleReference.ContractModuleReference -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ContractModuleReference.ContractModuleReference -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ContractModuleReference.ContractModuleReference -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ContractModuleReference.ContractModuleReference -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ContractModuleReference.ContractModuleReference -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ContractModuleReference.ContractModuleReference -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//ContractModuleReference.ContractModuleReference -> EReference : referencedArtifactElement
	if (s.referencedArtifactElement.getEReference() != null) t.addNewReference("referencedArtifactElement", s.referencedArtifactElement.getEReference());
	//ContractModuleReference.ContractModuleReference -> EReference : module
	if (s.module.getEReference() != null) t.addNewReference("module", s.module.getEReference());
}

@lazy
rule Solution
	transform s : DSL!Solution
	to t : SysMLine!ItemUsage
	extends Base{
	//Solution.Solution -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Solution.Solution -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Solution.Solution -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Solution.Solution -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//Solution.Solution -> EAttribute : isPublic
	if (s.isPublic.getEAttribute() != null) t.addNewAttribute("isPublic", s.isPublic.getEAttribute());
	//Solution.Solution -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Solution.Solution -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Solution.Solution -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Solution.Solution -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Solution.Solution -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Solution.Solution -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Solution.Solution -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Solution.Solution -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//Solution.Solution -> EReference : referencedArtifactElement
	if (s.referencedArtifactElement.getEReference() != null) t.addNewReference("referencedArtifactElement", s.referencedArtifactElement.getEReference());
}

@lazy
rule SupportedBy
	transform s : DSL!SupportedBy
	to t : SysMLine!ItemUsage
	extends Base{
	//SupportedBy.SupportedBy -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//SupportedBy.SupportedBy -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//SupportedBy.SupportedBy -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//SupportedBy.SupportedBy -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//SupportedBy.SupportedBy -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null) t.addNewAttribute("assertionDeclaration", s.assertionDeclaration.getEAttribute());
	//SupportedBy.SupportedBy -> EAttribute : isCounter
	if (s.isCounter.getEAttribute() != null) t.addNewAttribute("isCounter", s.isCounter.getEAttribute());
	//SupportedBy.SupportedBy -> EAttribute : requies
	if (s.requies.getEAttribute() != null) t.addNewAttribute("requies", s.requies.getEAttribute());
	//SupportedBy.SupportedBy -> EAttribute : isMany
	if (s.isMany.getEAttribute() != null) t.addNewAttribute("isMany", s.isMany.getEAttribute());
	//SupportedBy.SupportedBy -> EAttribute : isOptional
	if (s.isOptional.getEAttribute() != null) t.addNewAttribute("isOptional", s.isOptional.getEAttribute());
	//SupportedBy.SupportedBy -> EAttribute : isChoice
	if (s.isChoice.getEAttribute() != null) t.addNewAttribute("isChoice", s.isChoice.getEAttribute());
	//SupportedBy.SupportedBy -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//SupportedBy.SupportedBy -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//SupportedBy.SupportedBy -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//SupportedBy.SupportedBy -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//SupportedBy.SupportedBy -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//SupportedBy.SupportedBy -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//SupportedBy.SupportedBy -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//SupportedBy.SupportedBy -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//SupportedBy.SupportedBy -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null) t.addNewReference("metaClaim", s.metaClaim.getEReference());
	//SupportedBy.SupportedBy -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//SupportedBy.SupportedBy -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//SupportedBy.SupportedBy -> EReference : reasoning
	if (s.reasoning.getEReference() != null) t.addNewReference("reasoning", s.reasoning.getEReference());
}

@lazy
rule InContextOf
	transform s : DSL!InContextOf
	to t : SysMLine!ItemUsage
	extends Base{
	//InContextOf.InContextOf -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//InContextOf.InContextOf -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//InContextOf.InContextOf -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//InContextOf.InContextOf -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//InContextOf.InContextOf -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null) t.addNewAttribute("assertionDeclaration", s.assertionDeclaration.getEAttribute());
	//InContextOf.InContextOf -> EAttribute : isCounter
	if (s.isCounter.getEAttribute() != null) t.addNewAttribute("isCounter", s.isCounter.getEAttribute());
	//InContextOf.InContextOf -> EAttribute : requies
	if (s.requies.getEAttribute() != null) t.addNewAttribute("requies", s.requies.getEAttribute());
	//InContextOf.InContextOf -> EAttribute : isMany
	if (s.isMany.getEAttribute() != null) t.addNewAttribute("isMany", s.isMany.getEAttribute());
	//InContextOf.InContextOf -> EAttribute : isOptional
	if (s.isOptional.getEAttribute() != null) t.addNewAttribute("isOptional", s.isOptional.getEAttribute());
	//InContextOf.InContextOf -> EAttribute : isChoice
	if (s.isChoice.getEAttribute() != null) t.addNewAttribute("isChoice", s.isChoice.getEAttribute());
	//InContextOf.InContextOf -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//InContextOf.InContextOf -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//InContextOf.InContextOf -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//InContextOf.InContextOf -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//InContextOf.InContextOf -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//InContextOf.InContextOf -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//InContextOf.InContextOf -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//InContextOf.InContextOf -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//InContextOf.InContextOf -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null) t.addNewReference("metaClaim", s.metaClaim.getEReference());
	//InContextOf.InContextOf -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//InContextOf.InContextOf -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//InContextOf.InContextOf -> EReference : reasoning
	if (s.reasoning.getEReference() != null) t.addNewReference("reasoning", s.reasoning.getEReference());
}


// argumentation.ecore
@lazy
rule ArgumentationElement
	transform s : DSL!ArgumentationElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ArgumentationElement.ArgumentationElement -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ArgumentationElement.ArgumentationElement -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ArgumentationElement.ArgumentationElement -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ArgumentationElement.ArgumentationElement -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//ArgumentationElement.ArgumentationElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ArgumentationElement.ArgumentationElement -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ArgumentationElement.ArgumentationElement -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ArgumentationElement.ArgumentationElement -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ArgumentationElement.ArgumentationElement -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ArgumentationElement.ArgumentationElement -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ArgumentationElement.ArgumentationElement -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
}

@lazy
rule ArgumentGroup
	transform s : DSL!ArgumentGroup
	to t : SysMLine!ItemUsage
	extends Base{
	//ArgumentGroup.ArgumentGroup -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ArgumentGroup.ArgumentGroup -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ArgumentGroup.ArgumentGroup -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ArgumentGroup.ArgumentGroup -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//ArgumentGroup.ArgumentGroup -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ArgumentGroup.ArgumentGroup -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ArgumentGroup.ArgumentGroup -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ArgumentGroup.ArgumentGroup -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ArgumentGroup.ArgumentGroup -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ArgumentGroup.ArgumentGroup -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ArgumentGroup.ArgumentGroup -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ArgumentGroup.ArgumentGroup -> EReference : argumentationElement
	if (s.argumentationElement.getEReference() != null) t.addNewReference("argumentationElement", s.argumentationElement.getEReference());
}

@lazy
rule ArgumentPackage
	transform s : DSL!ArgumentPackage
	to t : SysMLine!ItemUsage
	extends Base{
	//ArgumentPackage.ArgumentPackage -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ArgumentPackage.ArgumentPackage -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ArgumentPackage.ArgumentPackage -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ArgumentPackage.ArgumentPackage -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//ArgumentPackage.ArgumentPackage -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ArgumentPackage.ArgumentPackage -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ArgumentPackage.ArgumentPackage -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ArgumentPackage.ArgumentPackage -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ArgumentPackage.ArgumentPackage -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ArgumentPackage.ArgumentPackage -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ArgumentPackage.ArgumentPackage -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ArgumentPackage.ArgumentPackage -> EReference : argumentationElement
	if (s.argumentationElement.getEReference() != null) t.addNewReference("argumentationElement", s.argumentationElement.getEReference());
}

@lazy
rule ArgumentPackageInterface
	transform s : DSL!ArgumentPackageInterface
	to t : SysMLine!ItemUsage
	extends Base{
	//ArgumentPackageInterface.ArgumentPackageInterface -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ArgumentPackageInterface.ArgumentPackageInterface -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ArgumentPackageInterface.ArgumentPackageInterface -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ArgumentPackageInterface.ArgumentPackageInterface -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//ArgumentPackageInterface.ArgumentPackageInterface -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ArgumentPackageInterface.ArgumentPackageInterface -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ArgumentPackageInterface.ArgumentPackageInterface -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ArgumentPackageInterface.ArgumentPackageInterface -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ArgumentPackageInterface.ArgumentPackageInterface -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ArgumentPackageInterface.ArgumentPackageInterface -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ArgumentPackageInterface.ArgumentPackageInterface -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ArgumentPackageInterface.ArgumentPackageInterface -> EReference : argumentationElement
	if (s.argumentationElement.getEReference() != null) t.addNewReference("argumentationElement", s.argumentationElement.getEReference());
	//ArgumentPackageInterface.ArgumentPackageInterface -> EReference : implements
	if (s.implements.getEReference() != null) t.addNewReference("implements", s.implements.getEReference());
}

@lazy
rule ArgumentPackageBinding
	transform s : DSL!ArgumentPackageBinding
	to t : SysMLine!ItemUsage
	extends Base{
	//ArgumentPackageBinding.ArgumentPackageBinding -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ArgumentPackageBinding.ArgumentPackageBinding -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ArgumentPackageBinding.ArgumentPackageBinding -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ArgumentPackageBinding.ArgumentPackageBinding -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//ArgumentPackageBinding.ArgumentPackageBinding -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ArgumentPackageBinding.ArgumentPackageBinding -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ArgumentPackageBinding.ArgumentPackageBinding -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ArgumentPackageBinding.ArgumentPackageBinding -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ArgumentPackageBinding.ArgumentPackageBinding -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ArgumentPackageBinding.ArgumentPackageBinding -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ArgumentPackageBinding.ArgumentPackageBinding -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ArgumentPackageBinding.ArgumentPackageBinding -> EReference : argumentationElement
	if (s.argumentationElement.getEReference() != null) t.addNewReference("argumentationElement", s.argumentationElement.getEReference());
	//ArgumentPackageBinding.ArgumentPackageBinding -> EReference : participantPackage
	if (s.participantPackage.getEReference() != null) t.addNewReference("participantPackage", s.participantPackage.getEReference());
}

@lazy
rule ArgumentAsset
	transform s : DSL!ArgumentAsset
	to t : SysMLine!ItemUsage
	extends Base{
	//ArgumentAsset.ArgumentAsset -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ArgumentAsset.ArgumentAsset -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ArgumentAsset.ArgumentAsset -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ArgumentAsset.ArgumentAsset -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//ArgumentAsset.ArgumentAsset -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ArgumentAsset.ArgumentAsset -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ArgumentAsset.ArgumentAsset -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ArgumentAsset.ArgumentAsset -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ArgumentAsset.ArgumentAsset -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ArgumentAsset.ArgumentAsset -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ArgumentAsset.ArgumentAsset -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ArgumentAsset.ArgumentAsset -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
}

@lazy
rule Assertion
	transform s : DSL!Assertion
	to t : SysMLine!ItemUsage
	extends Base{
	//Assertion.Assertion -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Assertion.Assertion -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Assertion.Assertion -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Assertion.Assertion -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//Assertion.Assertion -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null) t.addNewAttribute("assertionDeclaration", s.assertionDeclaration.getEAttribute());
	//Assertion.Assertion -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Assertion.Assertion -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Assertion.Assertion -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Assertion.Assertion -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Assertion.Assertion -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Assertion.Assertion -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Assertion.Assertion -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Assertion.Assertion -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//Assertion.Assertion -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null) t.addNewReference("metaClaim", s.metaClaim.getEReference());
}

@lazy
rule ArgumentReasoning
	transform s : DSL!ArgumentReasoning
	to t : SysMLine!ItemUsage
	extends Base{
	//ArgumentReasoning.ArgumentReasoning -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ArgumentReasoning.ArgumentReasoning -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ArgumentReasoning.ArgumentReasoning -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ArgumentReasoning.ArgumentReasoning -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//ArgumentReasoning.ArgumentReasoning -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ArgumentReasoning.ArgumentReasoning -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ArgumentReasoning.ArgumentReasoning -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ArgumentReasoning.ArgumentReasoning -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ArgumentReasoning.ArgumentReasoning -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ArgumentReasoning.ArgumentReasoning -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ArgumentReasoning.ArgumentReasoning -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ArgumentReasoning.ArgumentReasoning -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//ArgumentReasoning.ArgumentReasoning -> EReference : structure
	if (s.structure.getEReference() != null) t.addNewReference("structure", s.structure.getEReference());
}

@lazy
rule Claim
	transform s : DSL!Claim
	to t : SysMLine!ItemUsage
	extends Base{
	//Claim.Claim -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Claim.Claim -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Claim.Claim -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Claim.Claim -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//Claim.Claim -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null) t.addNewAttribute("assertionDeclaration", s.assertionDeclaration.getEAttribute());
	//Claim.Claim -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Claim.Claim -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Claim.Claim -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Claim.Claim -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Claim.Claim -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Claim.Claim -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Claim.Claim -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Claim.Claim -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//Claim.Claim -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null) t.addNewReference("metaClaim", s.metaClaim.getEReference());
}

@lazy
rule AssertedRelationship
	transform s : DSL!AssertedRelationship
	to t : SysMLine!ItemUsage
	extends Base{
	//AssertedRelationship.AssertedRelationship -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//AssertedRelationship.AssertedRelationship -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//AssertedRelationship.AssertedRelationship -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//AssertedRelationship.AssertedRelationship -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//AssertedRelationship.AssertedRelationship -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null) t.addNewAttribute("assertionDeclaration", s.assertionDeclaration.getEAttribute());
	//AssertedRelationship.AssertedRelationship -> EAttribute : isCounter
	if (s.isCounter.getEAttribute() != null) t.addNewAttribute("isCounter", s.isCounter.getEAttribute());
	//AssertedRelationship.AssertedRelationship -> EAttribute : requies
	if (s.requies.getEAttribute() != null) t.addNewAttribute("requies", s.requies.getEAttribute());
	//AssertedRelationship.AssertedRelationship -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//AssertedRelationship.AssertedRelationship -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//AssertedRelationship.AssertedRelationship -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//AssertedRelationship.AssertedRelationship -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//AssertedRelationship.AssertedRelationship -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//AssertedRelationship.AssertedRelationship -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//AssertedRelationship.AssertedRelationship -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//AssertedRelationship.AssertedRelationship -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//AssertedRelationship.AssertedRelationship -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null) t.addNewReference("metaClaim", s.metaClaim.getEReference());
	//AssertedRelationship.AssertedRelationship -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//AssertedRelationship.AssertedRelationship -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//AssertedRelationship.AssertedRelationship -> EReference : reasoning
	if (s.reasoning.getEReference() != null) t.addNewReference("reasoning", s.reasoning.getEReference());
}

@lazy
rule ArtifactReference
	transform s : DSL!ArtifactReference
	to t : SysMLine!ItemUsage
	extends Base{
	//ArtifactReference.ArtifactReference -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ArtifactReference.ArtifactReference -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ArtifactReference.ArtifactReference -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ArtifactReference.ArtifactReference -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//ArtifactReference.ArtifactReference -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ArtifactReference.ArtifactReference -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ArtifactReference.ArtifactReference -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ArtifactReference.ArtifactReference -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ArtifactReference.ArtifactReference -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ArtifactReference.ArtifactReference -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ArtifactReference.ArtifactReference -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ArtifactReference.ArtifactReference -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//ArtifactReference.ArtifactReference -> EReference : referencedArtifactElement
	if (s.referencedArtifactElement.getEReference() != null) t.addNewReference("referencedArtifactElement", s.referencedArtifactElement.getEReference());
}

@lazy
rule AssertedArtifactSupport
	transform s : DSL!AssertedArtifactSupport
	to t : SysMLine!ItemUsage
	extends Base{
	//AssertedArtifactSupport.AssertedArtifactSupport -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//AssertedArtifactSupport.AssertedArtifactSupport -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//AssertedArtifactSupport.AssertedArtifactSupport -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//AssertedArtifactSupport.AssertedArtifactSupport -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//AssertedArtifactSupport.AssertedArtifactSupport -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null) t.addNewAttribute("assertionDeclaration", s.assertionDeclaration.getEAttribute());
	//AssertedArtifactSupport.AssertedArtifactSupport -> EAttribute : isCounter
	if (s.isCounter.getEAttribute() != null) t.addNewAttribute("isCounter", s.isCounter.getEAttribute());
	//AssertedArtifactSupport.AssertedArtifactSupport -> EAttribute : requies
	if (s.requies.getEAttribute() != null) t.addNewAttribute("requies", s.requies.getEAttribute());
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null) t.addNewReference("metaClaim", s.metaClaim.getEReference());
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : reasoning
	if (s.reasoning.getEReference() != null) t.addNewReference("reasoning", s.reasoning.getEReference());
}

@lazy
rule AssertedInference
	transform s : DSL!AssertedInference
	to t : SysMLine!ItemUsage
	extends Base{
	//AssertedInference.AssertedInference -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//AssertedInference.AssertedInference -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//AssertedInference.AssertedInference -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//AssertedInference.AssertedInference -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//AssertedInference.AssertedInference -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null) t.addNewAttribute("assertionDeclaration", s.assertionDeclaration.getEAttribute());
	//AssertedInference.AssertedInference -> EAttribute : isCounter
	if (s.isCounter.getEAttribute() != null) t.addNewAttribute("isCounter", s.isCounter.getEAttribute());
	//AssertedInference.AssertedInference -> EAttribute : requies
	if (s.requies.getEAttribute() != null) t.addNewAttribute("requies", s.requies.getEAttribute());
	//AssertedInference.AssertedInference -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//AssertedInference.AssertedInference -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//AssertedInference.AssertedInference -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//AssertedInference.AssertedInference -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//AssertedInference.AssertedInference -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//AssertedInference.AssertedInference -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//AssertedInference.AssertedInference -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//AssertedInference.AssertedInference -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//AssertedInference.AssertedInference -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null) t.addNewReference("metaClaim", s.metaClaim.getEReference());
	//AssertedInference.AssertedInference -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//AssertedInference.AssertedInference -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//AssertedInference.AssertedInference -> EReference : reasoning
	if (s.reasoning.getEReference() != null) t.addNewReference("reasoning", s.reasoning.getEReference());
}

@lazy
rule AssertedEvidence
	transform s : DSL!AssertedEvidence
	to t : SysMLine!ItemUsage
	extends Base{
	//AssertedEvidence.AssertedEvidence -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//AssertedEvidence.AssertedEvidence -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//AssertedEvidence.AssertedEvidence -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//AssertedEvidence.AssertedEvidence -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//AssertedEvidence.AssertedEvidence -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null) t.addNewAttribute("assertionDeclaration", s.assertionDeclaration.getEAttribute());
	//AssertedEvidence.AssertedEvidence -> EAttribute : isCounter
	if (s.isCounter.getEAttribute() != null) t.addNewAttribute("isCounter", s.isCounter.getEAttribute());
	//AssertedEvidence.AssertedEvidence -> EAttribute : requies
	if (s.requies.getEAttribute() != null) t.addNewAttribute("requies", s.requies.getEAttribute());
	//AssertedEvidence.AssertedEvidence -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//AssertedEvidence.AssertedEvidence -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//AssertedEvidence.AssertedEvidence -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//AssertedEvidence.AssertedEvidence -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//AssertedEvidence.AssertedEvidence -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//AssertedEvidence.AssertedEvidence -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//AssertedEvidence.AssertedEvidence -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//AssertedEvidence.AssertedEvidence -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//AssertedEvidence.AssertedEvidence -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null) t.addNewReference("metaClaim", s.metaClaim.getEReference());
	//AssertedEvidence.AssertedEvidence -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//AssertedEvidence.AssertedEvidence -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//AssertedEvidence.AssertedEvidence -> EReference : reasoning
	if (s.reasoning.getEReference() != null) t.addNewReference("reasoning", s.reasoning.getEReference());
}

@lazy
rule AssertedContext
	transform s : DSL!AssertedContext
	to t : SysMLine!ItemUsage
	extends Base{
	//AssertedContext.AssertedContext -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//AssertedContext.AssertedContext -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//AssertedContext.AssertedContext -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//AssertedContext.AssertedContext -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//AssertedContext.AssertedContext -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null) t.addNewAttribute("assertionDeclaration", s.assertionDeclaration.getEAttribute());
	//AssertedContext.AssertedContext -> EAttribute : isCounter
	if (s.isCounter.getEAttribute() != null) t.addNewAttribute("isCounter", s.isCounter.getEAttribute());
	//AssertedContext.AssertedContext -> EAttribute : requies
	if (s.requies.getEAttribute() != null) t.addNewAttribute("requies", s.requies.getEAttribute());
	//AssertedContext.AssertedContext -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//AssertedContext.AssertedContext -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//AssertedContext.AssertedContext -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//AssertedContext.AssertedContext -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//AssertedContext.AssertedContext -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//AssertedContext.AssertedContext -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//AssertedContext.AssertedContext -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//AssertedContext.AssertedContext -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//AssertedContext.AssertedContext -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null) t.addNewReference("metaClaim", s.metaClaim.getEReference());
	//AssertedContext.AssertedContext -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//AssertedContext.AssertedContext -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//AssertedContext.AssertedContext -> EReference : reasoning
	if (s.reasoning.getEReference() != null) t.addNewReference("reasoning", s.reasoning.getEReference());
}

@lazy
rule AssertedArtifactContext
	transform s : DSL!AssertedArtifactContext
	to t : SysMLine!ItemUsage
	extends Base{
	//AssertedArtifactContext.AssertedArtifactContext -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//AssertedArtifactContext.AssertedArtifactContext -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//AssertedArtifactContext.AssertedArtifactContext -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//AssertedArtifactContext.AssertedArtifactContext -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//AssertedArtifactContext.AssertedArtifactContext -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null) t.addNewAttribute("assertionDeclaration", s.assertionDeclaration.getEAttribute());
	//AssertedArtifactContext.AssertedArtifactContext -> EAttribute : isCounter
	if (s.isCounter.getEAttribute() != null) t.addNewAttribute("isCounter", s.isCounter.getEAttribute());
	//AssertedArtifactContext.AssertedArtifactContext -> EAttribute : requies
	if (s.requies.getEAttribute() != null) t.addNewAttribute("requies", s.requies.getEAttribute());
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null) t.addNewReference("metaClaim", s.metaClaim.getEReference());
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : reasoning
	if (s.reasoning.getEReference() != null) t.addNewReference("reasoning", s.reasoning.getEReference());
}


// base.ecore
@lazy
rule Element
	transform s : DSL!Element
	to t : SysMLine!ItemUsage
	extends Base{
}

@lazy
rule LangString
	transform s : DSL!LangString
	to t : SysMLine!ItemUsage
	extends Base{
	//LangString.LangString -> EAttribute : lang
	if (s.lang.getEAttribute() != null) t.addNewAttribute("lang", s.lang.getEAttribute());
	//LangString.LangString -> EAttribute : content
	if (s.content.getEAttribute() != null) t.addNewAttribute("content", s.content.getEAttribute());
}

@lazy
rule ExpressionLangString
	transform s : DSL!ExpressionLangString
	to t : SysMLine!ItemUsage
	extends Base{
	//ExpressionLangString.ExpressionLangString -> EAttribute : lang
	if (s.lang.getEAttribute() != null) t.addNewAttribute("lang", s.lang.getEAttribute());
	//ExpressionLangString.ExpressionLangString -> EAttribute : content
	if (s.content.getEAttribute() != null) t.addNewAttribute("content", s.content.getEAttribute());
	//ExpressionLangString.ExpressionLangString -> EReference : expression
	if (s.expression.getEReference() != null) t.addNewReference("expression", s.expression.getEReference());
}

@lazy
rule MultiLangString
	transform s : DSL!MultiLangString
	to t : SysMLine!ItemUsage
	extends Base{
	//MultiLangString.MultiLangString -> EReference : value
	if (s.value.getEReference() != null) t.addNewReference("value", s.value.getEReference());
}

@lazy
rule SACMElement
	transform s : DSL!SACMElement
	to t : SysMLine!ItemUsage
	extends Base{
	//SACMElement.SACMElement -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//SACMElement.SACMElement -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//SACMElement.SACMElement -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//SACMElement.SACMElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//SACMElement.SACMElement -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
}

@lazy
rule UtilityElement
	transform s : DSL!UtilityElement
	to t : SysMLine!ItemUsage
	extends Base{
	//UtilityElement.UtilityElement -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//UtilityElement.UtilityElement -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//UtilityElement.UtilityElement -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//UtilityElement.UtilityElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//UtilityElement.UtilityElement -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//UtilityElement.UtilityElement -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
}

@lazy
rule Description
	transform s : DSL!Description
	to t : SysMLine!ItemUsage
	extends Base{
	//Description.Description -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Description.Description -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Description.Description -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Description.Description -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Description.Description -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Description.Description -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
}

@lazy
rule ImplementationConstraint
	transform s : DSL!ImplementationConstraint
	to t : SysMLine!ItemUsage
	extends Base{
	//ImplementationConstraint.ImplementationConstraint -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ImplementationConstraint.ImplementationConstraint -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ImplementationConstraint.ImplementationConstraint -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ImplementationConstraint.ImplementationConstraint -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ImplementationConstraint.ImplementationConstraint -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ImplementationConstraint.ImplementationConstraint -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
}

@lazy
rule Note
	transform s : DSL!Note
	to t : SysMLine!ItemUsage
	extends Base{
	//Note.Note -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Note.Note -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Note.Note -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Note.Note -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Note.Note -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Note.Note -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
}

@lazy
rule TaggedValue
	transform s : DSL!TaggedValue
	to t : SysMLine!ItemUsage
	extends Base{
	//TaggedValue.TaggedValue -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//TaggedValue.TaggedValue -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//TaggedValue.TaggedValue -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//TaggedValue.TaggedValue -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//TaggedValue.TaggedValue -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//TaggedValue.TaggedValue -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//TaggedValue.TaggedValue -> EReference : key
	if (s.key.getEReference() != null) t.addNewReference("key", s.key.getEReference());
}

@lazy
rule ModelElement
	transform s : DSL!ModelElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ModelElement.ModelElement -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ModelElement.ModelElement -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ModelElement.ModelElement -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ModelElement.ModelElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ModelElement.ModelElement -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ModelElement.ModelElement -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ModelElement.ModelElement -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ModelElement.ModelElement -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ModelElement.ModelElement -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ModelElement.ModelElement -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
}

@lazy
rule ArtifactElement
	transform s : DSL!ArtifactElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ArtifactElement.ArtifactElement -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ArtifactElement.ArtifactElement -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ArtifactElement.ArtifactElement -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ArtifactElement.ArtifactElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ArtifactElement.ArtifactElement -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ArtifactElement.ArtifactElement -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ArtifactElement.ArtifactElement -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ArtifactElement.ArtifactElement -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ArtifactElement.ArtifactElement -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ArtifactElement.ArtifactElement -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
}


