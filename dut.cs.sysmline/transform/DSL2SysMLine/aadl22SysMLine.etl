import "DSL2SysMLine-util.eol";

pre{
	var eObjectSequence = new Sequence;
	var KeyWords = baseKeyWords();
	var i = 0;
	eObjectSequence.init_aadl2();
	main_aadl2();
}

post{
	("[ETL] aadl22SysMLine >> " + SysMLine!Package.all.first().declaredName + ".sysmline").println();
}

operation main_aadl2(){
	var rootEcore = DSL!EObject.all.first();
	var rootSysMLine = new SysMLine!Namespace;
	var rootPackage = new SysMLine!Package;
	rootPackage.declaredName = "aadl2_model";
	rootSysMLine.body.add(rootPackage);
	rootPackage.addNamespaceImport("aadl2");
	rootPackage.addNamespaceImport("errorModel");
	rootPackage.addNamespaceImport("ecore");
	rootEcore.addNodeTo(rootPackage);
}

operation Sequence init_aadl2(){
	//aadl2.Element -> Instantiation
	var idElement = 0;
	for (Element_ in DSL!EObject.all.select(s|s.type.name == "Element")){
		var Element_Tuple = Tuple{"key"="Element_"+(idElement++).asString(),"value"= Element_};
		self.add(Element_Tuple);
	}
	//aadl2.Comment -> Instantiation
	var idComment = 0;
	for (Comment_ in DSL!EObject.all.select(s|s.type.name == "Comment")){
		var Comment_Tuple = Tuple{"key"="Comment_"+(idComment++).asString(),"value"= Comment_};
		self.add(Comment_Tuple);
	}
	//aadl2.Type -> Instantiation
	var idType = 0;
	for (Type_ in DSL!EObject.all.select(s|s.type.name == "Type")){
		var Type_Tuple = Tuple{"key"="Type_"+(idType++).asString(),"value"= Type_};
		self.add(Type_Tuple);
	}
	//aadl2.NamedElement -> Instantiation
	var idNamedElement = 0;
	for (NamedElement_ in DSL!EObject.all.select(s|s.type.name == "NamedElement")){
		var NamedElement_Tuple = Tuple{"key"="NamedElement_"+(idNamedElement++).asString(),"value"= NamedElement_};
		self.add(NamedElement_Tuple);
	}
	//aadl2.PropertyAssociation -> Instantiation
	var idPropertyAssociation = 0;
	for (PropertyAssociation_ in DSL!EObject.all.select(s|s.type.name == "PropertyAssociation")){
		var PropertyAssociation_Tuple = Tuple{"key"="PropertyAssociation_"+(idPropertyAssociation++).asString(),"value"= PropertyAssociation_};
		self.add(PropertyAssociation_Tuple);
	}
	//aadl2.Property -> Instantiation
	var idProperty = 0;
	for (Property_ in DSL!EObject.all.select(s|s.type.name == "Property")){
		var Property_Tuple = Tuple{"key"="Property_"+(idProperty++).asString(),"value"= Property_};
		self.add(Property_Tuple);
	}
	//aadl2.BasicProperty -> Instantiation
	var idBasicProperty = 0;
	for (BasicProperty_ in DSL!EObject.all.select(s|s.type.name == "BasicProperty")){
		var BasicProperty_Tuple = Tuple{"key"="BasicProperty_"+(idBasicProperty++).asString(),"value"= BasicProperty_};
		self.add(BasicProperty_Tuple);
	}
	//aadl2.TypedElement -> Instantiation
	var idTypedElement = 0;
	for (TypedElement_ in DSL!EObject.all.select(s|s.type.name == "TypedElement")){
		var TypedElement_Tuple = Tuple{"key"="TypedElement_"+(idTypedElement++).asString(),"value"= TypedElement_};
		self.add(TypedElement_Tuple);
	}
	//aadl2.PropertyType -> Instantiation
	var idPropertyType = 0;
	for (PropertyType_ in DSL!EObject.all.select(s|s.type.name == "PropertyType")){
		var PropertyType_Tuple = Tuple{"key"="PropertyType_"+(idPropertyType++).asString(),"value"= PropertyType_};
		self.add(PropertyType_Tuple);
	}
	//aadl2.AbstractNamedValue -> Instantiation
	var idAbstractNamedValue = 0;
	for (AbstractNamedValue_ in DSL!EObject.all.select(s|s.type.name == "AbstractNamedValue")){
		var AbstractNamedValue_Tuple = Tuple{"key"="AbstractNamedValue_"+(idAbstractNamedValue++).asString(),"value"= AbstractNamedValue_};
		self.add(AbstractNamedValue_Tuple);
	}
	//aadl2.ArraySizeProperty -> Instantiation
	var idArraySizeProperty = 0;
	for (ArraySizeProperty_ in DSL!EObject.all.select(s|s.type.name == "ArraySizeProperty")){
		var ArraySizeProperty_Tuple = Tuple{"key"="ArraySizeProperty_"+(idArraySizeProperty++).asString(),"value"= ArraySizeProperty_};
		self.add(ArraySizeProperty_Tuple);
	}
	//aadl2.PropertyExpression -> Instantiation
	var idPropertyExpression = 0;
	for (PropertyExpression_ in DSL!EObject.all.select(s|s.type.name == "PropertyExpression")){
		var PropertyExpression_Tuple = Tuple{"key"="PropertyExpression_"+(idPropertyExpression++).asString(),"value"= PropertyExpression_};
		self.add(PropertyExpression_Tuple);
	}
	//aadl2.MetaclassReference -> Instantiation
	var idMetaclassReference = 0;
	for (MetaclassReference_ in DSL!EObject.all.select(s|s.type.name == "MetaclassReference")){
		var MetaclassReference_Tuple = Tuple{"key"="MetaclassReference_"+(idMetaclassReference++).asString(),"value"= MetaclassReference_};
		self.add(MetaclassReference_Tuple);
	}
	//aadl2.PropertyOwner -> Instantiation
	var idPropertyOwner = 0;
	for (PropertyOwner_ in DSL!EObject.all.select(s|s.type.name == "PropertyOwner")){
		var PropertyOwner_Tuple = Tuple{"key"="PropertyOwner_"+(idPropertyOwner++).asString(),"value"= PropertyOwner_};
		self.add(PropertyOwner_Tuple);
	}
	//aadl2.Classifier -> Instantiation
	var idClassifier = 0;
	for (Classifier_ in DSL!EObject.all.select(s|s.type.name == "Classifier")){
		var Classifier_Tuple = Tuple{"key"="Classifier_"+(idClassifier++).asString(),"value"= Classifier_};
		self.add(Classifier_Tuple);
	}
	//aadl2.Namespace -> Instantiation
	var idNamespace = 0;
	for (Namespace_ in DSL!EObject.all.select(s|s.type.name == "Namespace")){
		var Namespace_Tuple = Tuple{"key"="Namespace_"+(idNamespace++).asString(),"value"= Namespace_};
		self.add(Namespace_Tuple);
	}
	//aadl2.ClassifierFeature -> Instantiation
	var idClassifierFeature = 0;
	for (ClassifierFeature_ in DSL!EObject.all.select(s|s.type.name == "ClassifierFeature")){
		var ClassifierFeature_Tuple = Tuple{"key"="ClassifierFeature_"+(idClassifierFeature++).asString(),"value"= ClassifierFeature_};
		self.add(ClassifierFeature_Tuple);
	}
	//aadl2.Generalization -> Instantiation
	var idGeneralization = 0;
	for (Generalization_ in DSL!EObject.all.select(s|s.type.name == "Generalization")){
		var Generalization_Tuple = Tuple{"key"="Generalization_"+(idGeneralization++).asString(),"value"= Generalization_};
		self.add(Generalization_Tuple);
	}
	//aadl2.DirectedRelationship -> Instantiation
	var idDirectedRelationship = 0;
	for (DirectedRelationship_ in DSL!EObject.all.select(s|s.type.name == "DirectedRelationship")){
		var DirectedRelationship_Tuple = Tuple{"key"="DirectedRelationship_"+(idDirectedRelationship++).asString(),"value"= DirectedRelationship_};
		self.add(DirectedRelationship_Tuple);
	}
	//aadl2.Relationship -> Instantiation
	var idRelationship = 0;
	for (Relationship_ in DSL!EObject.all.select(s|s.type.name == "Relationship")){
		var Relationship_Tuple = Tuple{"key"="Relationship_"+(idRelationship++).asString(),"value"= Relationship_};
		self.add(Relationship_Tuple);
	}
	//aadl2.AnnexSubclause -> Instantiation
	var idAnnexSubclause = 0;
	for (AnnexSubclause_ in DSL!EObject.all.select(s|s.type.name == "AnnexSubclause")){
		var AnnexSubclause_Tuple = Tuple{"key"="AnnexSubclause_"+(idAnnexSubclause++).asString(),"value"= AnnexSubclause_};
		self.add(AnnexSubclause_Tuple);
	}
	//aadl2.ModalElement -> Instantiation
	var idModalElement = 0;
	for (ModalElement_ in DSL!EObject.all.select(s|s.type.name == "ModalElement")){
		var ModalElement_Tuple = Tuple{"key"="ModalElement_"+(idModalElement++).asString(),"value"= ModalElement_};
		self.add(ModalElement_Tuple);
	}
	//aadl2.Mode -> Instantiation
	var idMode = 0;
	for (Mode_ in DSL!EObject.all.select(s|s.type.name == "Mode")){
		var Mode_Tuple = Tuple{"key"="Mode_"+(idMode++).asString(),"value"= Mode_};
		self.add(Mode_Tuple);
	}
	//aadl2.ModeFeature -> Instantiation
	var idModeFeature = 0;
	for (ModeFeature_ in DSL!EObject.all.select(s|s.type.name == "ModeFeature")){
		var ModeFeature_Tuple = Tuple{"key"="ModeFeature_"+(idModeFeature++).asString(),"value"= ModeFeature_};
		self.add(ModeFeature_Tuple);
	}
	//aadl2.Prototype -> Instantiation
	var idPrototype = 0;
	for (Prototype_ in DSL!EObject.all.select(s|s.type.name == "Prototype")){
		var Prototype_Tuple = Tuple{"key"="Prototype_"+(idPrototype++).asString(),"value"= Prototype_};
		self.add(Prototype_Tuple);
	}
	//aadl2.StructuralFeature -> Instantiation
	var idStructuralFeature = 0;
	for (StructuralFeature_ in DSL!EObject.all.select(s|s.type.name == "StructuralFeature")){
		var StructuralFeature_Tuple = Tuple{"key"="StructuralFeature_"+(idStructuralFeature++).asString(),"value"= StructuralFeature_};
		self.add(StructuralFeature_Tuple);
	}
	//aadl2.RefinableElement -> Instantiation
	var idRefinableElement = 0;
	for (RefinableElement_ in DSL!EObject.all.select(s|s.type.name == "RefinableElement")){
		var RefinableElement_Tuple = Tuple{"key"="RefinableElement_"+(idRefinableElement++).asString(),"value"= RefinableElement_};
		self.add(RefinableElement_Tuple);
	}
	//aadl2.FeatureClassifier -> Instantiation
	var idFeatureClassifier = 0;
	for (FeatureClassifier_ in DSL!EObject.all.select(s|s.type.name == "FeatureClassifier")){
		var FeatureClassifier_Tuple = Tuple{"key"="FeatureClassifier_"+(idFeatureClassifier++).asString(),"value"= FeatureClassifier_};
		self.add(FeatureClassifier_Tuple);
	}
	//aadl2.CalledSubprogram -> Instantiation
	var idCalledSubprogram = 0;
	for (CalledSubprogram_ in DSL!EObject.all.select(s|s.type.name == "CalledSubprogram")){
		var CalledSubprogram_Tuple = Tuple{"key"="CalledSubprogram_"+(idCalledSubprogram++).asString(),"value"= CalledSubprogram_};
		self.add(CalledSubprogram_Tuple);
	}
	//aadl2.PrototypeBinding -> Instantiation
	var idPrototypeBinding = 0;
	for (PrototypeBinding_ in DSL!EObject.all.select(s|s.type.name == "PrototypeBinding")){
		var PrototypeBinding_Tuple = Tuple{"key"="PrototypeBinding_"+(idPrototypeBinding++).asString(),"value"= PrototypeBinding_};
		self.add(PrototypeBinding_Tuple);
	}
	//aadl2.ContainedNamedElement -> Instantiation
	var idContainedNamedElement = 0;
	for (ContainedNamedElement_ in DSL!EObject.all.select(s|s.type.name == "ContainedNamedElement")){
		var ContainedNamedElement_Tuple = Tuple{"key"="ContainedNamedElement_"+(idContainedNamedElement++).asString(),"value"= ContainedNamedElement_};
		self.add(ContainedNamedElement_Tuple);
	}
	//aadl2.ContainmentPathElement -> Instantiation
	var idContainmentPathElement = 0;
	for (ContainmentPathElement_ in DSL!EObject.all.select(s|s.type.name == "ContainmentPathElement")){
		var ContainmentPathElement_Tuple = Tuple{"key"="ContainmentPathElement_"+(idContainmentPathElement++).asString(),"value"= ContainmentPathElement_};
		self.add(ContainmentPathElement_Tuple);
	}
	//aadl2.ArrayRange -> Instantiation
	var idArrayRange = 0;
	for (ArrayRange_ in DSL!EObject.all.select(s|s.type.name == "ArrayRange")){
		var ArrayRange_Tuple = Tuple{"key"="ArrayRange_"+(idArrayRange++).asString(),"value"= ArrayRange_};
		self.add(ArrayRange_Tuple);
	}
	//aadl2.ModalPropertyValue -> Instantiation
	var idModalPropertyValue = 0;
	for (ModalPropertyValue_ in DSL!EObject.all.select(s|s.type.name == "ModalPropertyValue")){
		var ModalPropertyValue_Tuple = Tuple{"key"="ModalPropertyValue_"+(idModalPropertyValue++).asString(),"value"= ModalPropertyValue_};
		self.add(ModalPropertyValue_Tuple);
	}
	//aadl2.BehavioralFeature -> Instantiation
	var idBehavioralFeature = 0;
	for (BehavioralFeature_ in DSL!EObject.all.select(s|s.type.name == "BehavioralFeature")){
		var BehavioralFeature_Tuple = Tuple{"key"="BehavioralFeature_"+(idBehavioralFeature++).asString(),"value"= BehavioralFeature_};
		self.add(BehavioralFeature_Tuple);
	}
	//aadl2.ArrayDimension -> Instantiation
	var idArrayDimension = 0;
	for (ArrayDimension_ in DSL!EObject.all.select(s|s.type.name == "ArrayDimension")){
		var ArrayDimension_Tuple = Tuple{"key"="ArrayDimension_"+(idArrayDimension++).asString(),"value"= ArrayDimension_};
		self.add(ArrayDimension_Tuple);
	}
	//aadl2.ArraySize -> Instantiation
	var idArraySize = 0;
	for (ArraySize_ in DSL!EObject.all.select(s|s.type.name == "ArraySize")){
		var ArraySize_Tuple = Tuple{"key"="ArraySize_"+(idArraySize++).asString(),"value"= ArraySize_};
		self.add(ArraySize_Tuple);
	}
	//aadl2.ArrayableElement -> Instantiation
	var idArrayableElement = 0;
	for (ArrayableElement_ in DSL!EObject.all.select(s|s.type.name == "ArrayableElement")){
		var ArrayableElement_Tuple = Tuple{"key"="ArrayableElement_"+(idArrayableElement++).asString(),"value"= ArrayableElement_};
		self.add(ArrayableElement_Tuple);
	}
	//aadl2.ComponentImplementationReference -> Instantiation
	var idComponentImplementationReference = 0;
	for (ComponentImplementationReference_ in DSL!EObject.all.select(s|s.type.name == "ComponentImplementationReference")){
		var ComponentImplementationReference_Tuple = Tuple{"key"="ComponentImplementationReference_"+(idComponentImplementationReference++).asString(),"value"= ComponentImplementationReference_};
		self.add(ComponentImplementationReference_Tuple);
	}
	//aadl2.ComponentImplementation -> Instantiation
	var idComponentImplementation = 0;
	for (ComponentImplementation_ in DSL!EObject.all.select(s|s.type.name == "ComponentImplementation")){
		var ComponentImplementation_Tuple = Tuple{"key"="ComponentImplementation_"+(idComponentImplementation++).asString(),"value"= ComponentImplementation_};
		self.add(ComponentImplementation_Tuple);
	}
	//aadl2.ComponentClassifier -> Instantiation
	var idComponentClassifier = 0;
	for (ComponentClassifier_ in DSL!EObject.all.select(s|s.type.name == "ComponentClassifier")){
		var ComponentClassifier_Tuple = Tuple{"key"="ComponentClassifier_"+(idComponentClassifier++).asString(),"value"= ComponentClassifier_};
		self.add(ComponentClassifier_Tuple);
	}
	//aadl2.SubcomponentType -> Instantiation
	var idSubcomponentType = 0;
	for (SubcomponentType_ in DSL!EObject.all.select(s|s.type.name == "SubcomponentType")){
		var SubcomponentType_Tuple = Tuple{"key"="SubcomponentType_"+(idSubcomponentType++).asString(),"value"= SubcomponentType_};
		self.add(SubcomponentType_Tuple);
	}
	//aadl2.ModeTransition -> Instantiation
	var idModeTransition = 0;
	for (ModeTransition_ in DSL!EObject.all.select(s|s.type.name == "ModeTransition")){
		var ModeTransition_Tuple = Tuple{"key"="ModeTransition_"+(idModeTransition++).asString(),"value"= ModeTransition_};
		self.add(ModeTransition_Tuple);
	}
	//aadl2.ModeTransitionTrigger -> Instantiation
	var idModeTransitionTrigger = 0;
	for (ModeTransitionTrigger_ in DSL!EObject.all.select(s|s.type.name == "ModeTransitionTrigger")){
		var ModeTransitionTrigger_Tuple = Tuple{"key"="ModeTransitionTrigger_"+(idModeTransitionTrigger++).asString(),"value"= ModeTransitionTrigger_};
		self.add(ModeTransitionTrigger_Tuple);
	}
	//aadl2.ComponentType -> Instantiation
	var idComponentType = 0;
	for (ComponentType_ in DSL!EObject.all.select(s|s.type.name == "ComponentType")){
		var ComponentType_Tuple = Tuple{"key"="ComponentType_"+(idComponentType++).asString(),"value"= ComponentType_};
		self.add(ComponentType_Tuple);
	}
	//aadl2.Feature -> Instantiation
	var idFeature = 0;
	for (Feature_ in DSL!EObject.all.select(s|s.type.name == "Feature")){
		var Feature_Tuple = Tuple{"key"="Feature_"+(idFeature++).asString(),"value"= Feature_};
		self.add(Feature_Tuple);
	}
	//aadl2.FeatureConnectionEnd -> Instantiation
	var idFeatureConnectionEnd = 0;
	for (FeatureConnectionEnd_ in DSL!EObject.all.select(s|s.type.name == "FeatureConnectionEnd")){
		var FeatureConnectionEnd_Tuple = Tuple{"key"="FeatureConnectionEnd_"+(idFeatureConnectionEnd++).asString(),"value"= FeatureConnectionEnd_};
		self.add(FeatureConnectionEnd_Tuple);
	}
	//aadl2.ConnectionEnd -> Instantiation
	var idConnectionEnd = 0;
	for (ConnectionEnd_ in DSL!EObject.all.select(s|s.type.name == "ConnectionEnd")){
		var ConnectionEnd_Tuple = Tuple{"key"="ConnectionEnd_"+(idConnectionEnd++).asString(),"value"= ConnectionEnd_};
		self.add(ConnectionEnd_Tuple);
	}
	//aadl2.FlowSpecification -> Instantiation
	var idFlowSpecification = 0;
	for (FlowSpecification_ in DSL!EObject.all.select(s|s.type.name == "FlowSpecification")){
		var FlowSpecification_Tuple = Tuple{"key"="FlowSpecification_"+(idFlowSpecification++).asString(),"value"= FlowSpecification_};
		self.add(FlowSpecification_Tuple);
	}
	//aadl2.Flow -> Instantiation
	var idFlow = 0;
	for (Flow_ in DSL!EObject.all.select(s|s.type.name == "Flow")){
		var Flow_Tuple = Tuple{"key"="Flow_"+(idFlow++).asString(),"value"= Flow_};
		self.add(Flow_Tuple);
	}
	//aadl2.ModalPath -> Instantiation
	var idModalPath = 0;
	for (ModalPath_ in DSL!EObject.all.select(s|s.type.name == "ModalPath")){
		var ModalPath_Tuple = Tuple{"key"="ModalPath_"+(idModalPath++).asString(),"value"= ModalPath_};
		self.add(ModalPath_Tuple);
	}
	//aadl2.FlowElement -> Instantiation
	var idFlowElement = 0;
	for (FlowElement_ in DSL!EObject.all.select(s|s.type.name == "FlowElement")){
		var FlowElement_Tuple = Tuple{"key"="FlowElement_"+(idFlowElement++).asString(),"value"= FlowElement_};
		self.add(FlowElement_Tuple);
	}
	//aadl2.EndToEndFlowElement -> Instantiation
	var idEndToEndFlowElement = 0;
	for (EndToEndFlowElement_ in DSL!EObject.all.select(s|s.type.name == "EndToEndFlowElement")){
		var EndToEndFlowElement_Tuple = Tuple{"key"="EndToEndFlowElement_"+(idEndToEndFlowElement++).asString(),"value"= EndToEndFlowElement_};
		self.add(EndToEndFlowElement_Tuple);
	}
	//aadl2.FlowEnd -> Instantiation
	var idFlowEnd = 0;
	for (FlowEnd_ in DSL!EObject.all.select(s|s.type.name == "FlowEnd")){
		var FlowEnd_Tuple = Tuple{"key"="FlowEnd_"+(idFlowEnd++).asString(),"value"= FlowEnd_};
		self.add(FlowEnd_Tuple);
	}
	//aadl2.Context -> Instantiation
	var idContext = 0;
	for (Context_ in DSL!EObject.all.select(s|s.type.name == "Context")){
		var Context_Tuple = Tuple{"key"="Context_"+(idContext++).asString(),"value"= Context_};
		self.add(Context_Tuple);
	}
	//aadl2.TypeExtension -> Instantiation
	var idTypeExtension = 0;
	for (TypeExtension_ in DSL!EObject.all.select(s|s.type.name == "TypeExtension")){
		var TypeExtension_Tuple = Tuple{"key"="TypeExtension_"+(idTypeExtension++).asString(),"value"= TypeExtension_};
		self.add(TypeExtension_Tuple);
	}
	//aadl2.FeatureGroup -> Instantiation
	var idFeatureGroup = 0;
	for (FeatureGroup_ in DSL!EObject.all.select(s|s.type.name == "FeatureGroup")){
		var FeatureGroup_Tuple = Tuple{"key"="FeatureGroup_"+(idFeatureGroup++).asString(),"value"= FeatureGroup_};
		self.add(FeatureGroup_Tuple);
	}
	//aadl2.CallContext -> Instantiation
	var idCallContext = 0;
	for (CallContext_ in DSL!EObject.all.select(s|s.type.name == "CallContext")){
		var CallContext_Tuple = Tuple{"key"="CallContext_"+(idCallContext++).asString(),"value"= CallContext_};
		self.add(CallContext_Tuple);
	}
	//aadl2.DirectedFeature -> Instantiation
	var idDirectedFeature = 0;
	for (DirectedFeature_ in DSL!EObject.all.select(s|s.type.name == "DirectedFeature")){
		var DirectedFeature_Tuple = Tuple{"key"="DirectedFeature_"+(idDirectedFeature++).asString(),"value"= DirectedFeature_};
		self.add(DirectedFeature_Tuple);
	}
	//aadl2.FeatureGroupConnectionEnd -> Instantiation
	var idFeatureGroupConnectionEnd = 0;
	for (FeatureGroupConnectionEnd_ in DSL!EObject.all.select(s|s.type.name == "FeatureGroupConnectionEnd")){
		var FeatureGroupConnectionEnd_Tuple = Tuple{"key"="FeatureGroupConnectionEnd_"+(idFeatureGroupConnectionEnd++).asString(),"value"= FeatureGroupConnectionEnd_};
		self.add(FeatureGroupConnectionEnd_Tuple);
	}
	//aadl2.FeatureType -> Instantiation
	var idFeatureType = 0;
	for (FeatureType_ in DSL!EObject.all.select(s|s.type.name == "FeatureType")){
		var FeatureType_Tuple = Tuple{"key"="FeatureType_"+(idFeatureType++).asString(),"value"= FeatureType_};
		self.add(FeatureType_Tuple);
	}
	//aadl2.FeatureGroupType -> Instantiation
	var idFeatureGroupType = 0;
	for (FeatureGroupType_ in DSL!EObject.all.select(s|s.type.name == "FeatureGroupType")){
		var FeatureGroupType_Tuple = Tuple{"key"="FeatureGroupType_"+(idFeatureGroupType++).asString(),"value"= FeatureGroupType_};
		self.add(FeatureGroupType_Tuple);
	}
	//aadl2.GroupExtension -> Instantiation
	var idGroupExtension = 0;
	for (GroupExtension_ in DSL!EObject.all.select(s|s.type.name == "GroupExtension")){
		var GroupExtension_Tuple = Tuple{"key"="GroupExtension_"+(idGroupExtension++).asString(),"value"= GroupExtension_};
		self.add(GroupExtension_Tuple);
	}
	//aadl2.BusAccess -> Instantiation
	var idBusAccess = 0;
	for (BusAccess_ in DSL!EObject.all.select(s|s.type.name == "BusAccess")){
		var BusAccess_Tuple = Tuple{"key"="BusAccess_"+(idBusAccess++).asString(),"value"= BusAccess_};
		self.add(BusAccess_Tuple);
	}
	//aadl2.Access -> Instantiation
	var idAccess = 0;
	for (Access_ in DSL!EObject.all.select(s|s.type.name == "Access")){
		var Access_Tuple = Tuple{"key"="Access_"+(idAccess++).asString(),"value"= Access_};
		self.add(Access_Tuple);
	}
	//aadl2.AccessConnectionEnd -> Instantiation
	var idAccessConnectionEnd = 0;
	for (AccessConnectionEnd_ in DSL!EObject.all.select(s|s.type.name == "AccessConnectionEnd")){
		var AccessConnectionEnd_Tuple = Tuple{"key"="AccessConnectionEnd_"+(idAccessConnectionEnd++).asString(),"value"= AccessConnectionEnd_};
		self.add(AccessConnectionEnd_Tuple);
	}
	//aadl2.BusSubcomponentType -> Instantiation
	var idBusSubcomponentType = 0;
	for (BusSubcomponentType_ in DSL!EObject.all.select(s|s.type.name == "BusSubcomponentType")){
		var BusSubcomponentType_Tuple = Tuple{"key"="BusSubcomponentType_"+(idBusSubcomponentType++).asString(),"value"= BusSubcomponentType_};
		self.add(BusSubcomponentType_Tuple);
	}
	//aadl2.Bus -> Instantiation
	var idBus = 0;
	for (Bus_ in DSL!EObject.all.select(s|s.type.name == "Bus")){
		var Bus_Tuple = Tuple{"key"="Bus_"+(idBus++).asString(),"value"= Bus_};
		self.add(Bus_Tuple);
	}
	//aadl2.DataAccess -> Instantiation
	var idDataAccess = 0;
	for (DataAccess_ in DSL!EObject.all.select(s|s.type.name == "DataAccess")){
		var DataAccess_Tuple = Tuple{"key"="DataAccess_"+(idDataAccess++).asString(),"value"= DataAccess_};
		self.add(DataAccess_Tuple);
	}
	//aadl2.ParameterConnectionEnd -> Instantiation
	var idParameterConnectionEnd = 0;
	for (ParameterConnectionEnd_ in DSL!EObject.all.select(s|s.type.name == "ParameterConnectionEnd")){
		var ParameterConnectionEnd_Tuple = Tuple{"key"="ParameterConnectionEnd_"+(idParameterConnectionEnd++).asString(),"value"= ParameterConnectionEnd_};
		self.add(ParameterConnectionEnd_Tuple);
	}
	//aadl2.PortConnectionEnd -> Instantiation
	var idPortConnectionEnd = 0;
	for (PortConnectionEnd_ in DSL!EObject.all.select(s|s.type.name == "PortConnectionEnd")){
		var PortConnectionEnd_Tuple = Tuple{"key"="PortConnectionEnd_"+(idPortConnectionEnd++).asString(),"value"= PortConnectionEnd_};
		self.add(PortConnectionEnd_Tuple);
	}
	//aadl2.DataSubcomponentType -> Instantiation
	var idDataSubcomponentType = 0;
	for (DataSubcomponentType_ in DSL!EObject.all.select(s|s.type.name == "DataSubcomponentType")){
		var DataSubcomponentType_Tuple = Tuple{"key"="DataSubcomponentType_"+(idDataSubcomponentType++).asString(),"value"= DataSubcomponentType_};
		self.add(DataSubcomponentType_Tuple);
	}
	//aadl2.Data -> Instantiation
	var idData = 0;
	for (Data_ in DSL!EObject.all.select(s|s.type.name == "Data")){
		var Data_Tuple = Tuple{"key"="Data_"+(idData++).asString(),"value"= Data_};
		self.add(Data_Tuple);
	}
	//aadl2.DataPort -> Instantiation
	var idDataPort = 0;
	for (DataPort_ in DSL!EObject.all.select(s|s.type.name == "DataPort")){
		var DataPort_Tuple = Tuple{"key"="DataPort_"+(idDataPort++).asString(),"value"= DataPort_};
		self.add(DataPort_Tuple);
	}
	//aadl2.Port -> Instantiation
	var idPort = 0;
	for (Port_ in DSL!EObject.all.select(s|s.type.name == "Port")){
		var Port_Tuple = Tuple{"key"="Port_"+(idPort++).asString(),"value"= Port_};
		self.add(Port_Tuple);
	}
	//aadl2.EventDataPort -> Instantiation
	var idEventDataPort = 0;
	for (EventDataPort_ in DSL!EObject.all.select(s|s.type.name == "EventDataPort")){
		var EventDataPort_Tuple = Tuple{"key"="EventDataPort_"+(idEventDataPort++).asString(),"value"= EventDataPort_};
		self.add(EventDataPort_Tuple);
	}
	//aadl2.EventPort -> Instantiation
	var idEventPort = 0;
	for (EventPort_ in DSL!EObject.all.select(s|s.type.name == "EventPort")){
		var EventPort_Tuple = Tuple{"key"="EventPort_"+(idEventPort++).asString(),"value"= EventPort_};
		self.add(EventPort_Tuple);
	}
	//aadl2.Parameter -> Instantiation
	var idParameter = 0;
	for (Parameter_ in DSL!EObject.all.select(s|s.type.name == "Parameter")){
		var Parameter_Tuple = Tuple{"key"="Parameter_"+(idParameter++).asString(),"value"= Parameter_};
		self.add(Parameter_Tuple);
	}
	//aadl2.SubprogramAccess -> Instantiation
	var idSubprogramAccess = 0;
	for (SubprogramAccess_ in DSL!EObject.all.select(s|s.type.name == "SubprogramAccess")){
		var SubprogramAccess_Tuple = Tuple{"key"="SubprogramAccess_"+(idSubprogramAccess++).asString(),"value"= SubprogramAccess_};
		self.add(SubprogramAccess_Tuple);
	}
	//aadl2.SubprogramSubcomponentType -> Instantiation
	var idSubprogramSubcomponentType = 0;
	for (SubprogramSubcomponentType_ in DSL!EObject.all.select(s|s.type.name == "SubprogramSubcomponentType")){
		var SubprogramSubcomponentType_Tuple = Tuple{"key"="SubprogramSubcomponentType_"+(idSubprogramSubcomponentType++).asString(),"value"= SubprogramSubcomponentType_};
		self.add(SubprogramSubcomponentType_Tuple);
	}
	//aadl2.Subprogram -> Instantiation
	var idSubprogram = 0;
	for (Subprogram_ in DSL!EObject.all.select(s|s.type.name == "Subprogram")){
		var Subprogram_Tuple = Tuple{"key"="Subprogram_"+(idSubprogram++).asString(),"value"= Subprogram_};
		self.add(Subprogram_Tuple);
	}
	//aadl2.SubprogramGroupAccess -> Instantiation
	var idSubprogramGroupAccess = 0;
	for (SubprogramGroupAccess_ in DSL!EObject.all.select(s|s.type.name == "SubprogramGroupAccess")){
		var SubprogramGroupAccess_Tuple = Tuple{"key"="SubprogramGroupAccess_"+(idSubprogramGroupAccess++).asString(),"value"= SubprogramGroupAccess_};
		self.add(SubprogramGroupAccess_Tuple);
	}
	//aadl2.SubprogramGroupSubcomponentType -> Instantiation
	var idSubprogramGroupSubcomponentType = 0;
	for (SubprogramGroupSubcomponentType_ in DSL!EObject.all.select(s|s.type.name == "SubprogramGroupSubcomponentType")){
		var SubprogramGroupSubcomponentType_Tuple = Tuple{"key"="SubprogramGroupSubcomponentType_"+(idSubprogramGroupSubcomponentType++).asString(),"value"= SubprogramGroupSubcomponentType_};
		self.add(SubprogramGroupSubcomponentType_Tuple);
	}
	//aadl2.SubprogramGroup -> Instantiation
	var idSubprogramGroup = 0;
	for (SubprogramGroup_ in DSL!EObject.all.select(s|s.type.name == "SubprogramGroup")){
		var SubprogramGroup_Tuple = Tuple{"key"="SubprogramGroup_"+(idSubprogramGroup++).asString(),"value"= SubprogramGroup_};
		self.add(SubprogramGroup_Tuple);
	}
	//aadl2.AbstractFeature -> Instantiation
	var idAbstractFeature = 0;
	for (AbstractFeature_ in DSL!EObject.all.select(s|s.type.name == "AbstractFeature")){
		var AbstractFeature_Tuple = Tuple{"key"="AbstractFeature_"+(idAbstractFeature++).asString(),"value"= AbstractFeature_};
		self.add(AbstractFeature_Tuple);
	}
	//aadl2.FeatureGroupPrototype -> Instantiation
	var idFeatureGroupPrototype = 0;
	for (FeatureGroupPrototype_ in DSL!EObject.all.select(s|s.type.name == "FeatureGroupPrototype")){
		var FeatureGroupPrototype_Tuple = Tuple{"key"="FeatureGroupPrototype_"+(idFeatureGroupPrototype++).asString(),"value"= FeatureGroupPrototype_};
		self.add(FeatureGroupPrototype_Tuple);
	}
	//aadl2.Subcomponent -> Instantiation
	var idSubcomponent = 0;
	for (Subcomponent_ in DSL!EObject.all.select(s|s.type.name == "Subcomponent")){
		var Subcomponent_Tuple = Tuple{"key"="Subcomponent_"+(idSubcomponent++).asString(),"value"= Subcomponent_};
		self.add(Subcomponent_Tuple);
	}
	//aadl2.ComponentPrototype -> Instantiation
	var idComponentPrototype = 0;
	for (ComponentPrototype_ in DSL!EObject.all.select(s|s.type.name == "ComponentPrototype")){
		var ComponentPrototype_Tuple = Tuple{"key"="ComponentPrototype_"+(idComponentPrototype++).asString(),"value"= ComponentPrototype_};
		self.add(ComponentPrototype_Tuple);
	}
	//aadl2.ModeBinding -> Instantiation
	var idModeBinding = 0;
	for (ModeBinding_ in DSL!EObject.all.select(s|s.type.name == "ModeBinding")){
		var ModeBinding_Tuple = Tuple{"key"="ModeBinding_"+(idModeBinding++).asString(),"value"= ModeBinding_};
		self.add(ModeBinding_Tuple);
	}
	//aadl2.FlowImplementation -> Instantiation
	var idFlowImplementation = 0;
	for (FlowImplementation_ in DSL!EObject.all.select(s|s.type.name == "FlowImplementation")){
		var FlowImplementation_Tuple = Tuple{"key"="FlowImplementation_"+(idFlowImplementation++).asString(),"value"= FlowImplementation_};
		self.add(FlowImplementation_Tuple);
	}
	//aadl2.FlowSegment -> Instantiation
	var idFlowSegment = 0;
	for (FlowSegment_ in DSL!EObject.all.select(s|s.type.name == "FlowSegment")){
		var FlowSegment_Tuple = Tuple{"key"="FlowSegment_"+(idFlowSegment++).asString(),"value"= FlowSegment_};
		self.add(FlowSegment_Tuple);
	}
	//aadl2.Connection -> Instantiation
	var idConnection = 0;
	for (Connection_ in DSL!EObject.all.select(s|s.type.name == "Connection")){
		var Connection_Tuple = Tuple{"key"="Connection_"+(idConnection++).asString(),"value"= Connection_};
		self.add(Connection_Tuple);
	}
	//aadl2.AbstractConnectionEnd -> Instantiation
	var idAbstractConnectionEnd = 0;
	for (AbstractConnectionEnd_ in DSL!EObject.all.select(s|s.type.name == "AbstractConnectionEnd")){
		var AbstractConnectionEnd_Tuple = Tuple{"key"="AbstractConnectionEnd_"+(idAbstractConnectionEnd++).asString(),"value"= AbstractConnectionEnd_};
		self.add(AbstractConnectionEnd_Tuple);
	}
	//aadl2.ImplementationExtension -> Instantiation
	var idImplementationExtension = 0;
	for (ImplementationExtension_ in DSL!EObject.all.select(s|s.type.name == "ImplementationExtension")){
		var ImplementationExtension_Tuple = Tuple{"key"="ImplementationExtension_"+(idImplementationExtension++).asString(),"value"= ImplementationExtension_};
		self.add(ImplementationExtension_Tuple);
	}
	//aadl2.Realization -> Instantiation
	var idRealization = 0;
	for (Realization_ in DSL!EObject.all.select(s|s.type.name == "Realization")){
		var Realization_Tuple = Tuple{"key"="Realization_"+(idRealization++).asString(),"value"= Realization_};
		self.add(Realization_Tuple);
	}
	//aadl2.EndToEndFlow -> Instantiation
	var idEndToEndFlow = 0;
	for (EndToEndFlow_ in DSL!EObject.all.select(s|s.type.name == "EndToEndFlow")){
		var EndToEndFlow_Tuple = Tuple{"key"="EndToEndFlow_"+(idEndToEndFlow++).asString(),"value"= EndToEndFlow_};
		self.add(EndToEndFlow_Tuple);
	}
	//aadl2.EndToEndFlowSegment -> Instantiation
	var idEndToEndFlowSegment = 0;
	for (EndToEndFlowSegment_ in DSL!EObject.all.select(s|s.type.name == "EndToEndFlowSegment")){
		var EndToEndFlowSegment_Tuple = Tuple{"key"="EndToEndFlowSegment_"+(idEndToEndFlowSegment++).asString(),"value"= EndToEndFlowSegment_};
		self.add(EndToEndFlowSegment_Tuple);
	}
	//aadl2.AbstractSubcomponent -> Instantiation
	var idAbstractSubcomponent = 0;
	for (AbstractSubcomponent_ in DSL!EObject.all.select(s|s.type.name == "AbstractSubcomponent")){
		var AbstractSubcomponent_Tuple = Tuple{"key"="AbstractSubcomponent_"+(idAbstractSubcomponent++).asString(),"value"= AbstractSubcomponent_};
		self.add(AbstractSubcomponent_Tuple);
	}
	//aadl2.Abstract -> Instantiation
	var idAbstract = 0;
	for (Abstract_ in DSL!EObject.all.select(s|s.type.name == "Abstract")){
		var Abstract_Tuple = Tuple{"key"="Abstract_"+(idAbstract++).asString(),"value"= Abstract_};
		self.add(Abstract_Tuple);
	}
	//aadl2.AbstractSubcomponentType -> Instantiation
	var idAbstractSubcomponentType = 0;
	for (AbstractSubcomponentType_ in DSL!EObject.all.select(s|s.type.name == "AbstractSubcomponentType")){
		var AbstractSubcomponentType_Tuple = Tuple{"key"="AbstractSubcomponentType_"+(idAbstractSubcomponentType++).asString(),"value"= AbstractSubcomponentType_};
		self.add(AbstractSubcomponentType_Tuple);
	}
	//aadl2.AccessConnection -> Instantiation
	var idAccessConnection = 0;
	for (AccessConnection_ in DSL!EObject.all.select(s|s.type.name == "AccessConnection")){
		var AccessConnection_Tuple = Tuple{"key"="AccessConnection_"+(idAccessConnection++).asString(),"value"= AccessConnection_};
		self.add(AccessConnection_Tuple);
	}
	//aadl2.ParameterConnection -> Instantiation
	var idParameterConnection = 0;
	for (ParameterConnection_ in DSL!EObject.all.select(s|s.type.name == "ParameterConnection")){
		var ParameterConnection_Tuple = Tuple{"key"="ParameterConnection_"+(idParameterConnection++).asString(),"value"= ParameterConnection_};
		self.add(ParameterConnection_Tuple);
	}
	//aadl2.PortConnection -> Instantiation
	var idPortConnection = 0;
	for (PortConnection_ in DSL!EObject.all.select(s|s.type.name == "PortConnection")){
		var PortConnection_Tuple = Tuple{"key"="PortConnection_"+(idPortConnection++).asString(),"value"= PortConnection_};
		self.add(PortConnection_Tuple);
	}
	//aadl2.FeatureConnection -> Instantiation
	var idFeatureConnection = 0;
	for (FeatureConnection_ in DSL!EObject.all.select(s|s.type.name == "FeatureConnection")){
		var FeatureConnection_Tuple = Tuple{"key"="FeatureConnection_"+(idFeatureConnection++).asString(),"value"= FeatureConnection_};
		self.add(FeatureConnection_Tuple);
	}
	//aadl2.FeatureGroupConnection -> Instantiation
	var idFeatureGroupConnection = 0;
	for (FeatureGroupConnection_ in DSL!EObject.all.select(s|s.type.name == "FeatureGroupConnection")){
		var FeatureGroupConnection_Tuple = Tuple{"key"="FeatureGroupConnection_"+(idFeatureGroupConnection++).asString(),"value"= FeatureGroupConnection_};
		self.add(FeatureGroupConnection_Tuple);
	}
	//aadl2.ConnectedElement -> Instantiation
	var idConnectedElement = 0;
	for (ConnectedElement_ in DSL!EObject.all.select(s|s.type.name == "ConnectedElement")){
		var ConnectedElement_Tuple = Tuple{"key"="ConnectedElement_"+(idConnectedElement++).asString(),"value"= ConnectedElement_};
		self.add(ConnectedElement_Tuple);
	}
	//aadl2.ElementName -> Instantiation
	var idElementName = 0;
	for (ElementName_ in DSL!EObject.all.select(s|s.type.name == "ElementName")){
		var ElementName_Tuple = Tuple{"key"="ElementName_"+(idElementName++).asString(),"value"= ElementName_};
		self.add(ElementName_Tuple);
	}
	//aadl2.AnnexLibrary -> Instantiation
	var idAnnexLibrary = 0;
	for (AnnexLibrary_ in DSL!EObject.all.select(s|s.type.name == "AnnexLibrary")){
		var AnnexLibrary_Tuple = Tuple{"key"="AnnexLibrary_"+(idAnnexLibrary++).asString(),"value"= AnnexLibrary_};
		self.add(AnnexLibrary_Tuple);
	}
	//aadl2.DefaultAnnexLibrary -> Instantiation
	var idDefaultAnnexLibrary = 0;
	for (DefaultAnnexLibrary_ in DSL!EObject.all.select(s|s.type.name == "DefaultAnnexLibrary")){
		var DefaultAnnexLibrary_Tuple = Tuple{"key"="DefaultAnnexLibrary_"+(idDefaultAnnexLibrary++).asString(),"value"= DefaultAnnexLibrary_};
		self.add(DefaultAnnexLibrary_Tuple);
	}
	//aadl2.DefaultAnnexSubclause -> Instantiation
	var idDefaultAnnexSubclause = 0;
	for (DefaultAnnexSubclause_ in DSL!EObject.all.select(s|s.type.name == "DefaultAnnexSubclause")){
		var DefaultAnnexSubclause_Tuple = Tuple{"key"="DefaultAnnexSubclause_"+(idDefaultAnnexSubclause++).asString(),"value"= DefaultAnnexSubclause_};
		self.add(DefaultAnnexSubclause_Tuple);
	}
	//aadl2.TriggerPort -> Instantiation
	var idTriggerPort = 0;
	for (TriggerPort_ in DSL!EObject.all.select(s|s.type.name == "TriggerPort")){
		var TriggerPort_Tuple = Tuple{"key"="TriggerPort_"+(idTriggerPort++).asString(),"value"= TriggerPort_};
		self.add(TriggerPort_Tuple);
	}
	//aadl2.PublicPackageSection -> Instantiation
	var idPublicPackageSection = 0;
	for (PublicPackageSection_ in DSL!EObject.all.select(s|s.type.name == "PublicPackageSection")){
		var PublicPackageSection_Tuple = Tuple{"key"="PublicPackageSection_"+(idPublicPackageSection++).asString(),"value"= PublicPackageSection_};
		self.add(PublicPackageSection_Tuple);
	}
	//aadl2.PackageSection -> Instantiation
	var idPackageSection = 0;
	for (PackageSection_ in DSL!EObject.all.select(s|s.type.name == "PackageSection")){
		var PackageSection_Tuple = Tuple{"key"="PackageSection_"+(idPackageSection++).asString(),"value"= PackageSection_};
		self.add(PackageSection_Tuple);
	}
	//aadl2.PackageRename -> Instantiation
	var idPackageRename = 0;
	for (PackageRename_ in DSL!EObject.all.select(s|s.type.name == "PackageRename")){
		var PackageRename_Tuple = Tuple{"key"="PackageRename_"+(idPackageRename++).asString(),"value"= PackageRename_};
		self.add(PackageRename_Tuple);
	}
	//aadl2.AadlPackage -> Instantiation
	var idAadlPackage = 0;
	for (AadlPackage_ in DSL!EObject.all.select(s|s.type.name == "AadlPackage")){
		var AadlPackage_Tuple = Tuple{"key"="AadlPackage_"+(idAadlPackage++).asString(),"value"= AadlPackage_};
		self.add(AadlPackage_Tuple);
	}
	//aadl2.ModelUnit -> Instantiation
	var idModelUnit = 0;
	for (ModelUnit_ in DSL!EObject.all.select(s|s.type.name == "ModelUnit")){
		var ModelUnit_Tuple = Tuple{"key"="ModelUnit_"+(idModelUnit++).asString(),"value"= ModelUnit_};
		self.add(ModelUnit_Tuple);
	}
	//aadl2.PrivatePackageSection -> Instantiation
	var idPrivatePackageSection = 0;
	for (PrivatePackageSection_ in DSL!EObject.all.select(s|s.type.name == "PrivatePackageSection")){
		var PrivatePackageSection_Tuple = Tuple{"key"="PrivatePackageSection_"+(idPrivatePackageSection++).asString(),"value"= PrivatePackageSection_};
		self.add(PrivatePackageSection_Tuple);
	}
	//aadl2.ComponentTypeRename -> Instantiation
	var idComponentTypeRename = 0;
	for (ComponentTypeRename_ in DSL!EObject.all.select(s|s.type.name == "ComponentTypeRename")){
		var ComponentTypeRename_Tuple = Tuple{"key"="ComponentTypeRename_"+(idComponentTypeRename++).asString(),"value"= ComponentTypeRename_};
		self.add(ComponentTypeRename_Tuple);
	}
	//aadl2.FeatureGroupTypeRename -> Instantiation
	var idFeatureGroupTypeRename = 0;
	for (FeatureGroupTypeRename_ in DSL!EObject.all.select(s|s.type.name == "FeatureGroupTypeRename")){
		var FeatureGroupTypeRename_Tuple = Tuple{"key"="FeatureGroupTypeRename_"+(idFeatureGroupTypeRename++).asString(),"value"= FeatureGroupTypeRename_};
		self.add(FeatureGroupTypeRename_Tuple);
	}
	//aadl2.ComponentPrototypeBinding -> Instantiation
	var idComponentPrototypeBinding = 0;
	for (ComponentPrototypeBinding_ in DSL!EObject.all.select(s|s.type.name == "ComponentPrototypeBinding")){
		var ComponentPrototypeBinding_Tuple = Tuple{"key"="ComponentPrototypeBinding_"+(idComponentPrototypeBinding++).asString(),"value"= ComponentPrototypeBinding_};
		self.add(ComponentPrototypeBinding_Tuple);
	}
	//aadl2.ComponentPrototypeActual -> Instantiation
	var idComponentPrototypeActual = 0;
	for (ComponentPrototypeActual_ in DSL!EObject.all.select(s|s.type.name == "ComponentPrototypeActual")){
		var ComponentPrototypeActual_Tuple = Tuple{"key"="ComponentPrototypeActual_"+(idComponentPrototypeActual++).asString(),"value"= ComponentPrototypeActual_};
		self.add(ComponentPrototypeActual_Tuple);
	}
	//aadl2.FeatureGroupPrototypeBinding -> Instantiation
	var idFeatureGroupPrototypeBinding = 0;
	for (FeatureGroupPrototypeBinding_ in DSL!EObject.all.select(s|s.type.name == "FeatureGroupPrototypeBinding")){
		var FeatureGroupPrototypeBinding_Tuple = Tuple{"key"="FeatureGroupPrototypeBinding_"+(idFeatureGroupPrototypeBinding++).asString(),"value"= FeatureGroupPrototypeBinding_};
		self.add(FeatureGroupPrototypeBinding_Tuple);
	}
	//aadl2.FeatureGroupPrototypeActual -> Instantiation
	var idFeatureGroupPrototypeActual = 0;
	for (FeatureGroupPrototypeActual_ in DSL!EObject.all.select(s|s.type.name == "FeatureGroupPrototypeActual")){
		var FeatureGroupPrototypeActual_Tuple = Tuple{"key"="FeatureGroupPrototypeActual_"+(idFeatureGroupPrototypeActual++).asString(),"value"= FeatureGroupPrototypeActual_};
		self.add(FeatureGroupPrototypeActual_Tuple);
	}
	//aadl2.FeaturePrototypeActual -> Instantiation
	var idFeaturePrototypeActual = 0;
	for (FeaturePrototypeActual_ in DSL!EObject.all.select(s|s.type.name == "FeaturePrototypeActual")){
		var FeaturePrototypeActual_Tuple = Tuple{"key"="FeaturePrototypeActual_"+(idFeaturePrototypeActual++).asString(),"value"= FeaturePrototypeActual_};
		self.add(FeaturePrototypeActual_Tuple);
	}
	//aadl2.FeaturePrototype -> Instantiation
	var idFeaturePrototype = 0;
	for (FeaturePrototype_ in DSL!EObject.all.select(s|s.type.name == "FeaturePrototype")){
		var FeaturePrototype_Tuple = Tuple{"key"="FeaturePrototype_"+(idFeaturePrototype++).asString(),"value"= FeaturePrototype_};
		self.add(FeaturePrototype_Tuple);
	}
	//aadl2.FeaturePrototypeBinding -> Instantiation
	var idFeaturePrototypeBinding = 0;
	for (FeaturePrototypeBinding_ in DSL!EObject.all.select(s|s.type.name == "FeaturePrototypeBinding")){
		var FeaturePrototypeBinding_Tuple = Tuple{"key"="FeaturePrototypeBinding_"+(idFeaturePrototypeBinding++).asString(),"value"= FeaturePrototypeBinding_};
		self.add(FeaturePrototypeBinding_Tuple);
	}
	//aadl2.AccessSpecification -> Instantiation
	var idAccessSpecification = 0;
	for (AccessSpecification_ in DSL!EObject.all.select(s|s.type.name == "AccessSpecification")){
		var AccessSpecification_Tuple = Tuple{"key"="AccessSpecification_"+(idAccessSpecification++).asString(),"value"= AccessSpecification_};
		self.add(AccessSpecification_Tuple);
	}
	//aadl2.PortSpecification -> Instantiation
	var idPortSpecification = 0;
	for (PortSpecification_ in DSL!EObject.all.select(s|s.type.name == "PortSpecification")){
		var PortSpecification_Tuple = Tuple{"key"="PortSpecification_"+(idPortSpecification++).asString(),"value"= PortSpecification_};
		self.add(PortSpecification_Tuple);
	}
	//aadl2.FeaturePrototypeReference -> Instantiation
	var idFeaturePrototypeReference = 0;
	for (FeaturePrototypeReference_ in DSL!EObject.all.select(s|s.type.name == "FeaturePrototypeReference")){
		var FeaturePrototypeReference_Tuple = Tuple{"key"="FeaturePrototypeReference_"+(idFeaturePrototypeReference++).asString(),"value"= FeaturePrototypeReference_};
		self.add(FeaturePrototypeReference_Tuple);
	}
	//aadl2.SubprogramCallSequence -> Instantiation
	var idSubprogramCallSequence = 0;
	for (SubprogramCallSequence_ in DSL!EObject.all.select(s|s.type.name == "SubprogramCallSequence")){
		var SubprogramCallSequence_Tuple = Tuple{"key"="SubprogramCallSequence_"+(idSubprogramCallSequence++).asString(),"value"= SubprogramCallSequence_};
		self.add(SubprogramCallSequence_Tuple);
	}
	//aadl2.CallSpecification -> Instantiation
	var idCallSpecification = 0;
	for (CallSpecification_ in DSL!EObject.all.select(s|s.type.name == "CallSpecification")){
		var CallSpecification_Tuple = Tuple{"key"="CallSpecification_"+(idCallSpecification++).asString(),"value"= CallSpecification_};
		self.add(CallSpecification_Tuple);
	}
	//aadl2.ProcessorCall -> Instantiation
	var idProcessorCall = 0;
	for (ProcessorCall_ in DSL!EObject.all.select(s|s.type.name == "ProcessorCall")){
		var ProcessorCall_Tuple = Tuple{"key"="ProcessorCall_"+(idProcessorCall++).asString(),"value"= ProcessorCall_};
		self.add(ProcessorCall_Tuple);
	}
	//aadl2.BehavioredImplementation -> Instantiation
	var idBehavioredImplementation = 0;
	for (BehavioredImplementation_ in DSL!EObject.all.select(s|s.type.name == "BehavioredImplementation")){
		var BehavioredImplementation_Tuple = Tuple{"key"="BehavioredImplementation_"+(idBehavioredImplementation++).asString(),"value"= BehavioredImplementation_};
		self.add(BehavioredImplementation_Tuple);
	}
	//aadl2.SubprogramCall -> Instantiation
	var idSubprogramCall = 0;
	for (SubprogramCall_ in DSL!EObject.all.select(s|s.type.name == "SubprogramCall")){
		var SubprogramCall_Tuple = Tuple{"key"="SubprogramCall_"+(idSubprogramCall++).asString(),"value"= SubprogramCall_};
		self.add(SubprogramCall_Tuple);
	}
	//aadl2.AbstractType -> Instantiation
	var idAbstractType = 0;
	for (AbstractType_ in DSL!EObject.all.select(s|s.type.name == "AbstractType")){
		var AbstractType_Tuple = Tuple{"key"="AbstractType_"+(idAbstractType++).asString(),"value"= AbstractType_};
		self.add(AbstractType_Tuple);
	}
	//aadl2.AbstractClassifier -> Instantiation
	var idAbstractClassifier = 0;
	for (AbstractClassifier_ in DSL!EObject.all.select(s|s.type.name == "AbstractClassifier")){
		var AbstractClassifier_Tuple = Tuple{"key"="AbstractClassifier_"+(idAbstractClassifier++).asString(),"value"= AbstractClassifier_};
		self.add(AbstractClassifier_Tuple);
	}
	//aadl2.VirtualProcessorSubcomponentType -> Instantiation
	var idVirtualProcessorSubcomponentType = 0;
	for (VirtualProcessorSubcomponentType_ in DSL!EObject.all.select(s|s.type.name == "VirtualProcessorSubcomponentType")){
		var VirtualProcessorSubcomponentType_Tuple = Tuple{"key"="VirtualProcessorSubcomponentType_"+(idVirtualProcessorSubcomponentType++).asString(),"value"= VirtualProcessorSubcomponentType_};
		self.add(VirtualProcessorSubcomponentType_Tuple);
	}
	//aadl2.VirtualProcessor -> Instantiation
	var idVirtualProcessor = 0;
	for (VirtualProcessor_ in DSL!EObject.all.select(s|s.type.name == "VirtualProcessor")){
		var VirtualProcessor_Tuple = Tuple{"key"="VirtualProcessor_"+(idVirtualProcessor++).asString(),"value"= VirtualProcessor_};
		self.add(VirtualProcessor_Tuple);
	}
	//aadl2.VitualBusSubcomponentType -> Instantiation
	var idVitualBusSubcomponentType = 0;
	for (VitualBusSubcomponentType_ in DSL!EObject.all.select(s|s.type.name == "VitualBusSubcomponentType")){
		var VitualBusSubcomponentType_Tuple = Tuple{"key"="VitualBusSubcomponentType_"+(idVitualBusSubcomponentType++).asString(),"value"= VitualBusSubcomponentType_};
		self.add(VitualBusSubcomponentType_Tuple);
	}
	//aadl2.VirtualBus -> Instantiation
	var idVirtualBus = 0;
	for (VirtualBus_ in DSL!EObject.all.select(s|s.type.name == "VirtualBus")){
		var VirtualBus_Tuple = Tuple{"key"="VirtualBus_"+(idVirtualBus++).asString(),"value"= VirtualBus_};
		self.add(VirtualBus_Tuple);
	}
	//aadl2.ThreadGroupSubcomponentType -> Instantiation
	var idThreadGroupSubcomponentType = 0;
	for (ThreadGroupSubcomponentType_ in DSL!EObject.all.select(s|s.type.name == "ThreadGroupSubcomponentType")){
		var ThreadGroupSubcomponentType_Tuple = Tuple{"key"="ThreadGroupSubcomponentType_"+(idThreadGroupSubcomponentType++).asString(),"value"= ThreadGroupSubcomponentType_};
		self.add(ThreadGroupSubcomponentType_Tuple);
	}
	//aadl2.ThreadGroup -> Instantiation
	var idThreadGroup = 0;
	for (ThreadGroup_ in DSL!EObject.all.select(s|s.type.name == "ThreadGroup")){
		var ThreadGroup_Tuple = Tuple{"key"="ThreadGroup_"+(idThreadGroup++).asString(),"value"= ThreadGroup_};
		self.add(ThreadGroup_Tuple);
	}
	//aadl2.ThreadSubcomponentType -> Instantiation
	var idThreadSubcomponentType = 0;
	for (ThreadSubcomponentType_ in DSL!EObject.all.select(s|s.type.name == "ThreadSubcomponentType")){
		var ThreadSubcomponentType_Tuple = Tuple{"key"="ThreadSubcomponentType_"+(idThreadSubcomponentType++).asString(),"value"= ThreadSubcomponentType_};
		self.add(ThreadSubcomponentType_Tuple);
	}
	//aadl2.Thread -> Instantiation
	var idThread = 0;
	for (Thread_ in DSL!EObject.all.select(s|s.type.name == "Thread")){
		var Thread_Tuple = Tuple{"key"="Thread_"+(idThread++).asString(),"value"= Thread_};
		self.add(Thread_Tuple);
	}
	//aadl2.SystemSubcomponentType -> Instantiation
	var idSystemSubcomponentType = 0;
	for (SystemSubcomponentType_ in DSL!EObject.all.select(s|s.type.name == "SystemSubcomponentType")){
		var SystemSubcomponentType_Tuple = Tuple{"key"="SystemSubcomponentType_"+(idSystemSubcomponentType++).asString(),"value"= SystemSubcomponentType_};
		self.add(SystemSubcomponentType_Tuple);
	}
	//aadl2.System -> Instantiation
	var idSystem = 0;
	for (System_ in DSL!EObject.all.select(s|s.type.name == "System")){
		var System_Tuple = Tuple{"key"="System_"+(idSystem++).asString(),"value"= System_};
		self.add(System_Tuple);
	}
	//aadl2.ProcessSubcomponentType -> Instantiation
	var idProcessSubcomponentType = 0;
	for (ProcessSubcomponentType_ in DSL!EObject.all.select(s|s.type.name == "ProcessSubcomponentType")){
		var ProcessSubcomponentType_Tuple = Tuple{"key"="ProcessSubcomponentType_"+(idProcessSubcomponentType++).asString(),"value"= ProcessSubcomponentType_};
		self.add(ProcessSubcomponentType_Tuple);
	}
	//aadl2.Process -> Instantiation
	var idProcess = 0;
	for (Process_ in DSL!EObject.all.select(s|s.type.name == "Process")){
		var Process_Tuple = Tuple{"key"="Process_"+(idProcess++).asString(),"value"= Process_};
		self.add(Process_Tuple);
	}
	//aadl2.MemorySubcomponentType -> Instantiation
	var idMemorySubcomponentType = 0;
	for (MemorySubcomponentType_ in DSL!EObject.all.select(s|s.type.name == "MemorySubcomponentType")){
		var MemorySubcomponentType_Tuple = Tuple{"key"="MemorySubcomponentType_"+(idMemorySubcomponentType++).asString(),"value"= MemorySubcomponentType_};
		self.add(MemorySubcomponentType_Tuple);
	}
	//aadl2.Memory -> Instantiation
	var idMemory = 0;
	for (Memory_ in DSL!EObject.all.select(s|s.type.name == "Memory")){
		var Memory_Tuple = Tuple{"key"="Memory_"+(idMemory++).asString(),"value"= Memory_};
		self.add(Memory_Tuple);
	}
	//aadl2.DeviceSubcomponentType -> Instantiation
	var idDeviceSubcomponentType = 0;
	for (DeviceSubcomponentType_ in DSL!EObject.all.select(s|s.type.name == "DeviceSubcomponentType")){
		var DeviceSubcomponentType_Tuple = Tuple{"key"="DeviceSubcomponentType_"+(idDeviceSubcomponentType++).asString(),"value"= DeviceSubcomponentType_};
		self.add(DeviceSubcomponentType_Tuple);
	}
	//aadl2.Device -> Instantiation
	var idDevice = 0;
	for (Device_ in DSL!EObject.all.select(s|s.type.name == "Device")){
		var Device_Tuple = Tuple{"key"="Device_"+(idDevice++).asString(),"value"= Device_};
		self.add(Device_Tuple);
	}
	//aadl2.ProcessorSubcomponentType -> Instantiation
	var idProcessorSubcomponentType = 0;
	for (ProcessorSubcomponentType_ in DSL!EObject.all.select(s|s.type.name == "ProcessorSubcomponentType")){
		var ProcessorSubcomponentType_Tuple = Tuple{"key"="ProcessorSubcomponentType_"+(idProcessorSubcomponentType++).asString(),"value"= ProcessorSubcomponentType_};
		self.add(ProcessorSubcomponentType_Tuple);
	}
	//aadl2.Processor -> Instantiation
	var idProcessor = 0;
	for (Processor_ in DSL!EObject.all.select(s|s.type.name == "Processor")){
		var Processor_Tuple = Tuple{"key"="Processor_"+(idProcessor++).asString(),"value"= Processor_};
		self.add(Processor_Tuple);
	}
	//aadl2.AbstractImplementation -> Instantiation
	var idAbstractImplementation = 0;
	for (AbstractImplementation_ in DSL!EObject.all.select(s|s.type.name == "AbstractImplementation")){
		var AbstractImplementation_Tuple = Tuple{"key"="AbstractImplementation_"+(idAbstractImplementation++).asString(),"value"= AbstractImplementation_};
		self.add(AbstractImplementation_Tuple);
	}
	//aadl2.BusSubcomponent -> Instantiation
	var idBusSubcomponent = 0;
	for (BusSubcomponent_ in DSL!EObject.all.select(s|s.type.name == "BusSubcomponent")){
		var BusSubcomponent_Tuple = Tuple{"key"="BusSubcomponent_"+(idBusSubcomponent++).asString(),"value"= BusSubcomponent_};
		self.add(BusSubcomponent_Tuple);
	}
	//aadl2.DataSubcomponent -> Instantiation
	var idDataSubcomponent = 0;
	for (DataSubcomponent_ in DSL!EObject.all.select(s|s.type.name == "DataSubcomponent")){
		var DataSubcomponent_Tuple = Tuple{"key"="DataSubcomponent_"+(idDataSubcomponent++).asString(),"value"= DataSubcomponent_};
		self.add(DataSubcomponent_Tuple);
	}
	//aadl2.DeviceSubcomponent -> Instantiation
	var idDeviceSubcomponent = 0;
	for (DeviceSubcomponent_ in DSL!EObject.all.select(s|s.type.name == "DeviceSubcomponent")){
		var DeviceSubcomponent_Tuple = Tuple{"key"="DeviceSubcomponent_"+(idDeviceSubcomponent++).asString(),"value"= DeviceSubcomponent_};
		self.add(DeviceSubcomponent_Tuple);
	}
	//aadl2.MemorySubcomponent -> Instantiation
	var idMemorySubcomponent = 0;
	for (MemorySubcomponent_ in DSL!EObject.all.select(s|s.type.name == "MemorySubcomponent")){
		var MemorySubcomponent_Tuple = Tuple{"key"="MemorySubcomponent_"+(idMemorySubcomponent++).asString(),"value"= MemorySubcomponent_};
		self.add(MemorySubcomponent_Tuple);
	}
	//aadl2.ProcessSubcomponent -> Instantiation
	var idProcessSubcomponent = 0;
	for (ProcessSubcomponent_ in DSL!EObject.all.select(s|s.type.name == "ProcessSubcomponent")){
		var ProcessSubcomponent_Tuple = Tuple{"key"="ProcessSubcomponent_"+(idProcessSubcomponent++).asString(),"value"= ProcessSubcomponent_};
		self.add(ProcessSubcomponent_Tuple);
	}
	//aadl2.ProcessorSubcomponent -> Instantiation
	var idProcessorSubcomponent = 0;
	for (ProcessorSubcomponent_ in DSL!EObject.all.select(s|s.type.name == "ProcessorSubcomponent")){
		var ProcessorSubcomponent_Tuple = Tuple{"key"="ProcessorSubcomponent_"+(idProcessorSubcomponent++).asString(),"value"= ProcessorSubcomponent_};
		self.add(ProcessorSubcomponent_Tuple);
	}
	//aadl2.SystemSubcomponent -> Instantiation
	var idSystemSubcomponent = 0;
	for (SystemSubcomponent_ in DSL!EObject.all.select(s|s.type.name == "SystemSubcomponent")){
		var SystemSubcomponent_Tuple = Tuple{"key"="SystemSubcomponent_"+(idSystemSubcomponent++).asString(),"value"= SystemSubcomponent_};
		self.add(SystemSubcomponent_Tuple);
	}
	//aadl2.SubprogramSubcomponent -> Instantiation
	var idSubprogramSubcomponent = 0;
	for (SubprogramSubcomponent_ in DSL!EObject.all.select(s|s.type.name == "SubprogramSubcomponent")){
		var SubprogramSubcomponent_Tuple = Tuple{"key"="SubprogramSubcomponent_"+(idSubprogramSubcomponent++).asString(),"value"= SubprogramSubcomponent_};
		self.add(SubprogramSubcomponent_Tuple);
	}
	//aadl2.SubprogramGroupSubcomponent -> Instantiation
	var idSubprogramGroupSubcomponent = 0;
	for (SubprogramGroupSubcomponent_ in DSL!EObject.all.select(s|s.type.name == "SubprogramGroupSubcomponent")){
		var SubprogramGroupSubcomponent_Tuple = Tuple{"key"="SubprogramGroupSubcomponent_"+(idSubprogramGroupSubcomponent++).asString(),"value"= SubprogramGroupSubcomponent_};
		self.add(SubprogramGroupSubcomponent_Tuple);
	}
	//aadl2.ThreadSubcomponent -> Instantiation
	var idThreadSubcomponent = 0;
	for (ThreadSubcomponent_ in DSL!EObject.all.select(s|s.type.name == "ThreadSubcomponent")){
		var ThreadSubcomponent_Tuple = Tuple{"key"="ThreadSubcomponent_"+(idThreadSubcomponent++).asString(),"value"= ThreadSubcomponent_};
		self.add(ThreadSubcomponent_Tuple);
	}
	//aadl2.ThreadGroupSubcomponent -> Instantiation
	var idThreadGroupSubcomponent = 0;
	for (ThreadGroupSubcomponent_ in DSL!EObject.all.select(s|s.type.name == "ThreadGroupSubcomponent")){
		var ThreadGroupSubcomponent_Tuple = Tuple{"key"="ThreadGroupSubcomponent_"+(idThreadGroupSubcomponent++).asString(),"value"= ThreadGroupSubcomponent_};
		self.add(ThreadGroupSubcomponent_Tuple);
	}
	//aadl2.VirtualBusSubcomponent -> Instantiation
	var idVirtualBusSubcomponent = 0;
	for (VirtualBusSubcomponent_ in DSL!EObject.all.select(s|s.type.name == "VirtualBusSubcomponent")){
		var VirtualBusSubcomponent_Tuple = Tuple{"key"="VirtualBusSubcomponent_"+(idVirtualBusSubcomponent++).asString(),"value"= VirtualBusSubcomponent_};
		self.add(VirtualBusSubcomponent_Tuple);
	}
	//aadl2.VirtualProcessorSubcomponent -> Instantiation
	var idVirtualProcessorSubcomponent = 0;
	for (VirtualProcessorSubcomponent_ in DSL!EObject.all.select(s|s.type.name == "VirtualProcessorSubcomponent")){
		var VirtualProcessorSubcomponent_Tuple = Tuple{"key"="VirtualProcessorSubcomponent_"+(idVirtualProcessorSubcomponent++).asString(),"value"= VirtualProcessorSubcomponent_};
		self.add(VirtualProcessorSubcomponent_Tuple);
	}
	//aadl2.AbstractPrototype -> Instantiation
	var idAbstractPrototype = 0;
	for (AbstractPrototype_ in DSL!EObject.all.select(s|s.type.name == "AbstractPrototype")){
		var AbstractPrototype_Tuple = Tuple{"key"="AbstractPrototype_"+(idAbstractPrototype++).asString(),"value"= AbstractPrototype_};
		self.add(AbstractPrototype_Tuple);
	}
	//aadl2.BusClassifier -> Instantiation
	var idBusClassifier = 0;
	for (BusClassifier_ in DSL!EObject.all.select(s|s.type.name == "BusClassifier")){
		var BusClassifier_Tuple = Tuple{"key"="BusClassifier_"+(idBusClassifier++).asString(),"value"= BusClassifier_};
		self.add(BusClassifier_Tuple);
	}
	//aadl2.BusType -> Instantiation
	var idBusType = 0;
	for (BusType_ in DSL!EObject.all.select(s|s.type.name == "BusType")){
		var BusType_Tuple = Tuple{"key"="BusType_"+(idBusType++).asString(),"value"= BusType_};
		self.add(BusType_Tuple);
	}
	//aadl2.BusImplementation -> Instantiation
	var idBusImplementation = 0;
	for (BusImplementation_ in DSL!EObject.all.select(s|s.type.name == "BusImplementation")){
		var BusImplementation_Tuple = Tuple{"key"="BusImplementation_"+(idBusImplementation++).asString(),"value"= BusImplementation_};
		self.add(BusImplementation_Tuple);
	}
	//aadl2.BusPrototype -> Instantiation
	var idBusPrototype = 0;
	for (BusPrototype_ in DSL!EObject.all.select(s|s.type.name == "BusPrototype")){
		var BusPrototype_Tuple = Tuple{"key"="BusPrototype_"+(idBusPrototype++).asString(),"value"= BusPrototype_};
		self.add(BusPrototype_Tuple);
	}
	//aadl2.DataClassifier -> Instantiation
	var idDataClassifier = 0;
	for (DataClassifier_ in DSL!EObject.all.select(s|s.type.name == "DataClassifier")){
		var DataClassifier_Tuple = Tuple{"key"="DataClassifier_"+(idDataClassifier++).asString(),"value"= DataClassifier_};
		self.add(DataClassifier_Tuple);
	}
	//aadl2.DataType -> Instantiation
	var idDataType = 0;
	for (DataType_ in DSL!EObject.all.select(s|s.type.name == "DataType")){
		var DataType_Tuple = Tuple{"key"="DataType_"+(idDataType++).asString(),"value"= DataType_};
		self.add(DataType_Tuple);
	}
	//aadl2.DataImplementation -> Instantiation
	var idDataImplementation = 0;
	for (DataImplementation_ in DSL!EObject.all.select(s|s.type.name == "DataImplementation")){
		var DataImplementation_Tuple = Tuple{"key"="DataImplementation_"+(idDataImplementation++).asString(),"value"= DataImplementation_};
		self.add(DataImplementation_Tuple);
	}
	//aadl2.DataPrototype -> Instantiation
	var idDataPrototype = 0;
	for (DataPrototype_ in DSL!EObject.all.select(s|s.type.name == "DataPrototype")){
		var DataPrototype_Tuple = Tuple{"key"="DataPrototype_"+(idDataPrototype++).asString(),"value"= DataPrototype_};
		self.add(DataPrototype_Tuple);
	}
	//aadl2.DeviceClassifier -> Instantiation
	var idDeviceClassifier = 0;
	for (DeviceClassifier_ in DSL!EObject.all.select(s|s.type.name == "DeviceClassifier")){
		var DeviceClassifier_Tuple = Tuple{"key"="DeviceClassifier_"+(idDeviceClassifier++).asString(),"value"= DeviceClassifier_};
		self.add(DeviceClassifier_Tuple);
	}
	//aadl2.DeviceType -> Instantiation
	var idDeviceType = 0;
	for (DeviceType_ in DSL!EObject.all.select(s|s.type.name == "DeviceType")){
		var DeviceType_Tuple = Tuple{"key"="DeviceType_"+(idDeviceType++).asString(),"value"= DeviceType_};
		self.add(DeviceType_Tuple);
	}
	//aadl2.DeviceImplementation -> Instantiation
	var idDeviceImplementation = 0;
	for (DeviceImplementation_ in DSL!EObject.all.select(s|s.type.name == "DeviceImplementation")){
		var DeviceImplementation_Tuple = Tuple{"key"="DeviceImplementation_"+(idDeviceImplementation++).asString(),"value"= DeviceImplementation_};
		self.add(DeviceImplementation_Tuple);
	}
	//aadl2.DevicePrototype -> Instantiation
	var idDevicePrototype = 0;
	for (DevicePrototype_ in DSL!EObject.all.select(s|s.type.name == "DevicePrototype")){
		var DevicePrototype_Tuple = Tuple{"key"="DevicePrototype_"+(idDevicePrototype++).asString(),"value"= DevicePrototype_};
		self.add(DevicePrototype_Tuple);
	}
	//aadl2.MemoryClassifier -> Instantiation
	var idMemoryClassifier = 0;
	for (MemoryClassifier_ in DSL!EObject.all.select(s|s.type.name == "MemoryClassifier")){
		var MemoryClassifier_Tuple = Tuple{"key"="MemoryClassifier_"+(idMemoryClassifier++).asString(),"value"= MemoryClassifier_};
		self.add(MemoryClassifier_Tuple);
	}
	//aadl2.MemoryType -> Instantiation
	var idMemoryType = 0;
	for (MemoryType_ in DSL!EObject.all.select(s|s.type.name == "MemoryType")){
		var MemoryType_Tuple = Tuple{"key"="MemoryType_"+(idMemoryType++).asString(),"value"= MemoryType_};
		self.add(MemoryType_Tuple);
	}
	//aadl2.MemoryImplementation -> Instantiation
	var idMemoryImplementation = 0;
	for (MemoryImplementation_ in DSL!EObject.all.select(s|s.type.name == "MemoryImplementation")){
		var MemoryImplementation_Tuple = Tuple{"key"="MemoryImplementation_"+(idMemoryImplementation++).asString(),"value"= MemoryImplementation_};
		self.add(MemoryImplementation_Tuple);
	}
	//aadl2.MemoryPrototype -> Instantiation
	var idMemoryPrototype = 0;
	for (MemoryPrototype_ in DSL!EObject.all.select(s|s.type.name == "MemoryPrototype")){
		var MemoryPrototype_Tuple = Tuple{"key"="MemoryPrototype_"+(idMemoryPrototype++).asString(),"value"= MemoryPrototype_};
		self.add(MemoryPrototype_Tuple);
	}
	//aadl2.SubprogramClassifier -> Instantiation
	var idSubprogramClassifier = 0;
	for (SubprogramClassifier_ in DSL!EObject.all.select(s|s.type.name == "SubprogramClassifier")){
		var SubprogramClassifier_Tuple = Tuple{"key"="SubprogramClassifier_"+(idSubprogramClassifier++).asString(),"value"= SubprogramClassifier_};
		self.add(SubprogramClassifier_Tuple);
	}
	//aadl2.SubprogramType -> Instantiation
	var idSubprogramType = 0;
	for (SubprogramType_ in DSL!EObject.all.select(s|s.type.name == "SubprogramType")){
		var SubprogramType_Tuple = Tuple{"key"="SubprogramType_"+(idSubprogramType++).asString(),"value"= SubprogramType_};
		self.add(SubprogramType_Tuple);
	}
	//aadl2.SubprogramImplementation -> Instantiation
	var idSubprogramImplementation = 0;
	for (SubprogramImplementation_ in DSL!EObject.all.select(s|s.type.name == "SubprogramImplementation")){
		var SubprogramImplementation_Tuple = Tuple{"key"="SubprogramImplementation_"+(idSubprogramImplementation++).asString(),"value"= SubprogramImplementation_};
		self.add(SubprogramImplementation_Tuple);
	}
	//aadl2.SubprogramPrototype -> Instantiation
	var idSubprogramPrototype = 0;
	for (SubprogramPrototype_ in DSL!EObject.all.select(s|s.type.name == "SubprogramPrototype")){
		var SubprogramPrototype_Tuple = Tuple{"key"="SubprogramPrototype_"+(idSubprogramPrototype++).asString(),"value"= SubprogramPrototype_};
		self.add(SubprogramPrototype_Tuple);
	}
	//aadl2.SubprogramGroupClassifier -> Instantiation
	var idSubprogramGroupClassifier = 0;
	for (SubprogramGroupClassifier_ in DSL!EObject.all.select(s|s.type.name == "SubprogramGroupClassifier")){
		var SubprogramGroupClassifier_Tuple = Tuple{"key"="SubprogramGroupClassifier_"+(idSubprogramGroupClassifier++).asString(),"value"= SubprogramGroupClassifier_};
		self.add(SubprogramGroupClassifier_Tuple);
	}
	//aadl2.SubprogramGroupType -> Instantiation
	var idSubprogramGroupType = 0;
	for (SubprogramGroupType_ in DSL!EObject.all.select(s|s.type.name == "SubprogramGroupType")){
		var SubprogramGroupType_Tuple = Tuple{"key"="SubprogramGroupType_"+(idSubprogramGroupType++).asString(),"value"= SubprogramGroupType_};
		self.add(SubprogramGroupType_Tuple);
	}
	//aadl2.SubprogramGroupImplementation -> Instantiation
	var idSubprogramGroupImplementation = 0;
	for (SubprogramGroupImplementation_ in DSL!EObject.all.select(s|s.type.name == "SubprogramGroupImplementation")){
		var SubprogramGroupImplementation_Tuple = Tuple{"key"="SubprogramGroupImplementation_"+(idSubprogramGroupImplementation++).asString(),"value"= SubprogramGroupImplementation_};
		self.add(SubprogramGroupImplementation_Tuple);
	}
	//aadl2.SubprogramGroupPrototype -> Instantiation
	var idSubprogramGroupPrototype = 0;
	for (SubprogramGroupPrototype_ in DSL!EObject.all.select(s|s.type.name == "SubprogramGroupPrototype")){
		var SubprogramGroupPrototype_Tuple = Tuple{"key"="SubprogramGroupPrototype_"+(idSubprogramGroupPrototype++).asString(),"value"= SubprogramGroupPrototype_};
		self.add(SubprogramGroupPrototype_Tuple);
	}
	//aadl2.SystemClassifier -> Instantiation
	var idSystemClassifier = 0;
	for (SystemClassifier_ in DSL!EObject.all.select(s|s.type.name == "SystemClassifier")){
		var SystemClassifier_Tuple = Tuple{"key"="SystemClassifier_"+(idSystemClassifier++).asString(),"value"= SystemClassifier_};
		self.add(SystemClassifier_Tuple);
	}
	//aadl2.SystemType -> Instantiation
	var idSystemType = 0;
	for (SystemType_ in DSL!EObject.all.select(s|s.type.name == "SystemType")){
		var SystemType_Tuple = Tuple{"key"="SystemType_"+(idSystemType++).asString(),"value"= SystemType_};
		self.add(SystemType_Tuple);
	}
	//aadl2.SystemImplementation -> Instantiation
	var idSystemImplementation = 0;
	for (SystemImplementation_ in DSL!EObject.all.select(s|s.type.name == "SystemImplementation")){
		var SystemImplementation_Tuple = Tuple{"key"="SystemImplementation_"+(idSystemImplementation++).asString(),"value"= SystemImplementation_};
		self.add(SystemImplementation_Tuple);
	}
	//aadl2.SystemPrototype -> Instantiation
	var idSystemPrototype = 0;
	for (SystemPrototype_ in DSL!EObject.all.select(s|s.type.name == "SystemPrototype")){
		var SystemPrototype_Tuple = Tuple{"key"="SystemPrototype_"+(idSystemPrototype++).asString(),"value"= SystemPrototype_};
		self.add(SystemPrototype_Tuple);
	}
	//aadl2.ProcessorClassifier -> Instantiation
	var idProcessorClassifier = 0;
	for (ProcessorClassifier_ in DSL!EObject.all.select(s|s.type.name == "ProcessorClassifier")){
		var ProcessorClassifier_Tuple = Tuple{"key"="ProcessorClassifier_"+(idProcessorClassifier++).asString(),"value"= ProcessorClassifier_};
		self.add(ProcessorClassifier_Tuple);
	}
	//aadl2.ProcessorType -> Instantiation
	var idProcessorType = 0;
	for (ProcessorType_ in DSL!EObject.all.select(s|s.type.name == "ProcessorType")){
		var ProcessorType_Tuple = Tuple{"key"="ProcessorType_"+(idProcessorType++).asString(),"value"= ProcessorType_};
		self.add(ProcessorType_Tuple);
	}
	//aadl2.ProcessorImplementation -> Instantiation
	var idProcessorImplementation = 0;
	for (ProcessorImplementation_ in DSL!EObject.all.select(s|s.type.name == "ProcessorImplementation")){
		var ProcessorImplementation_Tuple = Tuple{"key"="ProcessorImplementation_"+(idProcessorImplementation++).asString(),"value"= ProcessorImplementation_};
		self.add(ProcessorImplementation_Tuple);
	}
	//aadl2.ProcessorPrototype -> Instantiation
	var idProcessorPrototype = 0;
	for (ProcessorPrototype_ in DSL!EObject.all.select(s|s.type.name == "ProcessorPrototype")){
		var ProcessorPrototype_Tuple = Tuple{"key"="ProcessorPrototype_"+(idProcessorPrototype++).asString(),"value"= ProcessorPrototype_};
		self.add(ProcessorPrototype_Tuple);
	}
	//aadl2.ProcessClassifier -> Instantiation
	var idProcessClassifier = 0;
	for (ProcessClassifier_ in DSL!EObject.all.select(s|s.type.name == "ProcessClassifier")){
		var ProcessClassifier_Tuple = Tuple{"key"="ProcessClassifier_"+(idProcessClassifier++).asString(),"value"= ProcessClassifier_};
		self.add(ProcessClassifier_Tuple);
	}
	//aadl2.ProcessType -> Instantiation
	var idProcessType = 0;
	for (ProcessType_ in DSL!EObject.all.select(s|s.type.name == "ProcessType")){
		var ProcessType_Tuple = Tuple{"key"="ProcessType_"+(idProcessType++).asString(),"value"= ProcessType_};
		self.add(ProcessType_Tuple);
	}
	//aadl2.ProcessImplementation -> Instantiation
	var idProcessImplementation = 0;
	for (ProcessImplementation_ in DSL!EObject.all.select(s|s.type.name == "ProcessImplementation")){
		var ProcessImplementation_Tuple = Tuple{"key"="ProcessImplementation_"+(idProcessImplementation++).asString(),"value"= ProcessImplementation_};
		self.add(ProcessImplementation_Tuple);
	}
	//aadl2.ProcessPrototype -> Instantiation
	var idProcessPrototype = 0;
	for (ProcessPrototype_ in DSL!EObject.all.select(s|s.type.name == "ProcessPrototype")){
		var ProcessPrototype_Tuple = Tuple{"key"="ProcessPrototype_"+(idProcessPrototype++).asString(),"value"= ProcessPrototype_};
		self.add(ProcessPrototype_Tuple);
	}
	//aadl2.ThreadClassifier -> Instantiation
	var idThreadClassifier = 0;
	for (ThreadClassifier_ in DSL!EObject.all.select(s|s.type.name == "ThreadClassifier")){
		var ThreadClassifier_Tuple = Tuple{"key"="ThreadClassifier_"+(idThreadClassifier++).asString(),"value"= ThreadClassifier_};
		self.add(ThreadClassifier_Tuple);
	}
	//aadl2.ThreadType -> Instantiation
	var idThreadType = 0;
	for (ThreadType_ in DSL!EObject.all.select(s|s.type.name == "ThreadType")){
		var ThreadType_Tuple = Tuple{"key"="ThreadType_"+(idThreadType++).asString(),"value"= ThreadType_};
		self.add(ThreadType_Tuple);
	}
	//aadl2.ThreadImplementation -> Instantiation
	var idThreadImplementation = 0;
	for (ThreadImplementation_ in DSL!EObject.all.select(s|s.type.name == "ThreadImplementation")){
		var ThreadImplementation_Tuple = Tuple{"key"="ThreadImplementation_"+(idThreadImplementation++).asString(),"value"= ThreadImplementation_};
		self.add(ThreadImplementation_Tuple);
	}
	//aadl2.ThreadPrototype -> Instantiation
	var idThreadPrototype = 0;
	for (ThreadPrototype_ in DSL!EObject.all.select(s|s.type.name == "ThreadPrototype")){
		var ThreadPrototype_Tuple = Tuple{"key"="ThreadPrototype_"+(idThreadPrototype++).asString(),"value"= ThreadPrototype_};
		self.add(ThreadPrototype_Tuple);
	}
	//aadl2.ThreadGroupClassifier -> Instantiation
	var idThreadGroupClassifier = 0;
	for (ThreadGroupClassifier_ in DSL!EObject.all.select(s|s.type.name == "ThreadGroupClassifier")){
		var ThreadGroupClassifier_Tuple = Tuple{"key"="ThreadGroupClassifier_"+(idThreadGroupClassifier++).asString(),"value"= ThreadGroupClassifier_};
		self.add(ThreadGroupClassifier_Tuple);
	}
	//aadl2.ThreadGroupType -> Instantiation
	var idThreadGroupType = 0;
	for (ThreadGroupType_ in DSL!EObject.all.select(s|s.type.name == "ThreadGroupType")){
		var ThreadGroupType_Tuple = Tuple{"key"="ThreadGroupType_"+(idThreadGroupType++).asString(),"value"= ThreadGroupType_};
		self.add(ThreadGroupType_Tuple);
	}
	//aadl2.ThreadGroupImplementation -> Instantiation
	var idThreadGroupImplementation = 0;
	for (ThreadGroupImplementation_ in DSL!EObject.all.select(s|s.type.name == "ThreadGroupImplementation")){
		var ThreadGroupImplementation_Tuple = Tuple{"key"="ThreadGroupImplementation_"+(idThreadGroupImplementation++).asString(),"value"= ThreadGroupImplementation_};
		self.add(ThreadGroupImplementation_Tuple);
	}
	//aadl2.ThreadGroupPrototype -> Instantiation
	var idThreadGroupPrototype = 0;
	for (ThreadGroupPrototype_ in DSL!EObject.all.select(s|s.type.name == "ThreadGroupPrototype")){
		var ThreadGroupPrototype_Tuple = Tuple{"key"="ThreadGroupPrototype_"+(idThreadGroupPrototype++).asString(),"value"= ThreadGroupPrototype_};
		self.add(ThreadGroupPrototype_Tuple);
	}
	//aadl2.VirtualBusClassifier -> Instantiation
	var idVirtualBusClassifier = 0;
	for (VirtualBusClassifier_ in DSL!EObject.all.select(s|s.type.name == "VirtualBusClassifier")){
		var VirtualBusClassifier_Tuple = Tuple{"key"="VirtualBusClassifier_"+(idVirtualBusClassifier++).asString(),"value"= VirtualBusClassifier_};
		self.add(VirtualBusClassifier_Tuple);
	}
	//aadl2.VirtualBusType -> Instantiation
	var idVirtualBusType = 0;
	for (VirtualBusType_ in DSL!EObject.all.select(s|s.type.name == "VirtualBusType")){
		var VirtualBusType_Tuple = Tuple{"key"="VirtualBusType_"+(idVirtualBusType++).asString(),"value"= VirtualBusType_};
		self.add(VirtualBusType_Tuple);
	}
	//aadl2.VirtualBusImplementation -> Instantiation
	var idVirtualBusImplementation = 0;
	for (VirtualBusImplementation_ in DSL!EObject.all.select(s|s.type.name == "VirtualBusImplementation")){
		var VirtualBusImplementation_Tuple = Tuple{"key"="VirtualBusImplementation_"+(idVirtualBusImplementation++).asString(),"value"= VirtualBusImplementation_};
		self.add(VirtualBusImplementation_Tuple);
	}
	//aadl2.VirtualBusPrototype -> Instantiation
	var idVirtualBusPrototype = 0;
	for (VirtualBusPrototype_ in DSL!EObject.all.select(s|s.type.name == "VirtualBusPrototype")){
		var VirtualBusPrototype_Tuple = Tuple{"key"="VirtualBusPrototype_"+(idVirtualBusPrototype++).asString(),"value"= VirtualBusPrototype_};
		self.add(VirtualBusPrototype_Tuple);
	}
	//aadl2.VirtualProcessorClassifier -> Instantiation
	var idVirtualProcessorClassifier = 0;
	for (VirtualProcessorClassifier_ in DSL!EObject.all.select(s|s.type.name == "VirtualProcessorClassifier")){
		var VirtualProcessorClassifier_Tuple = Tuple{"key"="VirtualProcessorClassifier_"+(idVirtualProcessorClassifier++).asString(),"value"= VirtualProcessorClassifier_};
		self.add(VirtualProcessorClassifier_Tuple);
	}
	//aadl2.VirtualProcessorType -> Instantiation
	var idVirtualProcessorType = 0;
	for (VirtualProcessorType_ in DSL!EObject.all.select(s|s.type.name == "VirtualProcessorType")){
		var VirtualProcessorType_Tuple = Tuple{"key"="VirtualProcessorType_"+(idVirtualProcessorType++).asString(),"value"= VirtualProcessorType_};
		self.add(VirtualProcessorType_Tuple);
	}
	//aadl2.VirtualProcessorImplementation -> Instantiation
	var idVirtualProcessorImplementation = 0;
	for (VirtualProcessorImplementation_ in DSL!EObject.all.select(s|s.type.name == "VirtualProcessorImplementation")){
		var VirtualProcessorImplementation_Tuple = Tuple{"key"="VirtualProcessorImplementation_"+(idVirtualProcessorImplementation++).asString(),"value"= VirtualProcessorImplementation_};
		self.add(VirtualProcessorImplementation_Tuple);
	}
	//aadl2.VirtualProcessorPrototype -> Instantiation
	var idVirtualProcessorPrototype = 0;
	for (VirtualProcessorPrototype_ in DSL!EObject.all.select(s|s.type.name == "VirtualProcessorPrototype")){
		var VirtualProcessorPrototype_Tuple = Tuple{"key"="VirtualProcessorPrototype_"+(idVirtualProcessorPrototype++).asString(),"value"= VirtualProcessorPrototype_};
		self.add(VirtualProcessorPrototype_Tuple);
	}
	//aadl2.BasicPropertyAssociation -> Instantiation
	var idBasicPropertyAssociation = 0;
	for (BasicPropertyAssociation_ in DSL!EObject.all.select(s|s.type.name == "BasicPropertyAssociation")){
		var BasicPropertyAssociation_Tuple = Tuple{"key"="BasicPropertyAssociation_"+(idBasicPropertyAssociation++).asString(),"value"= BasicPropertyAssociation_};
		self.add(BasicPropertyAssociation_Tuple);
	}
	//aadl2.PropertyConstant -> Instantiation
	var idPropertyConstant = 0;
	for (PropertyConstant_ in DSL!EObject.all.select(s|s.type.name == "PropertyConstant")){
		var PropertyConstant_Tuple = Tuple{"key"="PropertyConstant_"+(idPropertyConstant++).asString(),"value"= PropertyConstant_};
		self.add(PropertyConstant_Tuple);
	}
	//aadl2.StringLiteral -> Instantiation
	var idStringLiteral = 0;
	for (StringLiteral_ in DSL!EObject.all.select(s|s.type.name == "StringLiteral")){
		var StringLiteral_Tuple = Tuple{"key"="StringLiteral_"+(idStringLiteral++).asString(),"value"= StringLiteral_};
		self.add(StringLiteral_Tuple);
	}
	//aadl2.PropertyValue -> Instantiation
	var idPropertyValue = 0;
	for (PropertyValue_ in DSL!EObject.all.select(s|s.type.name == "PropertyValue")){
		var PropertyValue_Tuple = Tuple{"key"="PropertyValue_"+(idPropertyValue++).asString(),"value"= PropertyValue_};
		self.add(PropertyValue_Tuple);
	}
	//aadl2.NumberValue -> Instantiation
	var idNumberValue = 0;
	for (NumberValue_ in DSL!EObject.all.select(s|s.type.name == "NumberValue")){
		var NumberValue_Tuple = Tuple{"key"="NumberValue_"+(idNumberValue++).asString(),"value"= NumberValue_};
		self.add(NumberValue_Tuple);
	}
	//aadl2.UnitLiteral -> Instantiation
	var idUnitLiteral = 0;
	for (UnitLiteral_ in DSL!EObject.all.select(s|s.type.name == "UnitLiteral")){
		var UnitLiteral_Tuple = Tuple{"key"="UnitLiteral_"+(idUnitLiteral++).asString(),"value"= UnitLiteral_};
		self.add(UnitLiteral_Tuple);
	}
	//aadl2.EnumerationLiteral -> Instantiation
	var idEnumerationLiteral = 0;
	for (EnumerationLiteral_ in DSL!EObject.all.select(s|s.type.name == "EnumerationLiteral")){
		var EnumerationLiteral_Tuple = Tuple{"key"="EnumerationLiteral_"+(idEnumerationLiteral++).asString(),"value"= EnumerationLiteral_};
		self.add(EnumerationLiteral_Tuple);
	}
	//aadl2.ClassifierValue -> Instantiation
	var idClassifierValue = 0;
	for (ClassifierValue_ in DSL!EObject.all.select(s|s.type.name == "ClassifierValue")){
		var ClassifierValue_Tuple = Tuple{"key"="ClassifierValue_"+(idClassifierValue++).asString(),"value"= ClassifierValue_};
		self.add(ClassifierValue_Tuple);
	}
	//aadl2.ReferenceValue -> Instantiation
	var idReferenceValue = 0;
	for (ReferenceValue_ in DSL!EObject.all.select(s|s.type.name == "ReferenceValue")){
		var ReferenceValue_Tuple = Tuple{"key"="ReferenceValue_"+(idReferenceValue++).asString(),"value"= ReferenceValue_};
		self.add(ReferenceValue_Tuple);
	}
	//aadl2.BooleanLiteral -> Instantiation
	var idBooleanLiteral = 0;
	for (BooleanLiteral_ in DSL!EObject.all.select(s|s.type.name == "BooleanLiteral")){
		var BooleanLiteral_Tuple = Tuple{"key"="BooleanLiteral_"+(idBooleanLiteral++).asString(),"value"= BooleanLiteral_};
		self.add(BooleanLiteral_Tuple);
	}
	//aadl2.RangeValue -> Instantiation
	var idRangeValue = 0;
	for (RangeValue_ in DSL!EObject.all.select(s|s.type.name == "RangeValue")){
		var RangeValue_Tuple = Tuple{"key"="RangeValue_"+(idRangeValue++).asString(),"value"= RangeValue_};
		self.add(RangeValue_Tuple);
	}
	//aadl2.IntegerLiteral -> Instantiation
	var idIntegerLiteral = 0;
	for (IntegerLiteral_ in DSL!EObject.all.select(s|s.type.name == "IntegerLiteral")){
		var IntegerLiteral_Tuple = Tuple{"key"="IntegerLiteral_"+(idIntegerLiteral++).asString(),"value"= IntegerLiteral_};
		self.add(IntegerLiteral_Tuple);
	}
	//aadl2.RealLiteral -> Instantiation
	var idRealLiteral = 0;
	for (RealLiteral_ in DSL!EObject.all.select(s|s.type.name == "RealLiteral")){
		var RealLiteral_Tuple = Tuple{"key"="RealLiteral_"+(idRealLiteral++).asString(),"value"= RealLiteral_};
		self.add(RealLiteral_Tuple);
	}
	//aadl2.Operation -> Instantiation
	var idOperation = 0;
	for (Operation_ in DSL!EObject.all.select(s|s.type.name == "Operation")){
		var Operation_Tuple = Tuple{"key"="Operation_"+(idOperation++).asString(),"value"= Operation_};
		self.add(Operation_Tuple);
	}
	//aadl2.RecordValue -> Instantiation
	var idRecordValue = 0;
	for (RecordValue_ in DSL!EObject.all.select(s|s.type.name == "RecordValue")){
		var RecordValue_Tuple = Tuple{"key"="RecordValue_"+(idRecordValue++).asString(),"value"= RecordValue_};
		self.add(RecordValue_Tuple);
	}
	//aadl2.ComputedValue -> Instantiation
	var idComputedValue = 0;
	for (ComputedValue_ in DSL!EObject.all.select(s|s.type.name == "ComputedValue")){
		var ComputedValue_Tuple = Tuple{"key"="ComputedValue_"+(idComputedValue++).asString(),"value"= ComputedValue_};
		self.add(ComputedValue_Tuple);
	}
	//aadl2.ListValue -> Instantiation
	var idListValue = 0;
	for (ListValue_ in DSL!EObject.all.select(s|s.type.name == "ListValue")){
		var ListValue_Tuple = Tuple{"key"="ListValue_"+(idListValue++).asString(),"value"= ListValue_};
		self.add(ListValue_Tuple);
	}
	//aadl2.NamedValue -> Instantiation
	var idNamedValue = 0;
	for (NamedValue_ in DSL!EObject.all.select(s|s.type.name == "NamedValue")){
		var NamedValue_Tuple = Tuple{"key"="NamedValue_"+(idNamedValue++).asString(),"value"= NamedValue_};
		self.add(NamedValue_Tuple);
	}
	//aadl2.PropertySet -> Instantiation
	var idPropertySet = 0;
	for (PropertySet_ in DSL!EObject.all.select(s|s.type.name == "PropertySet")){
		var PropertySet_Tuple = Tuple{"key"="PropertySet_"+(idPropertySet++).asString(),"value"= PropertySet_};
		self.add(PropertySet_Tuple);
	}
	//aadl2.GlobalNamespace -> Instantiation
	var idGlobalNamespace = 0;
	for (GlobalNamespace_ in DSL!EObject.all.select(s|s.type.name == "GlobalNamespace")){
		var GlobalNamespace_Tuple = Tuple{"key"="GlobalNamespace_"+(idGlobalNamespace++).asString(),"value"= GlobalNamespace_};
		self.add(GlobalNamespace_Tuple);
	}
	//aadl2.NonListType -> Instantiation
	var idNonListType = 0;
	for (NonListType_ in DSL!EObject.all.select(s|s.type.name == "NonListType")){
		var NonListType_Tuple = Tuple{"key"="NonListType_"+(idNonListType++).asString(),"value"= NonListType_};
		self.add(NonListType_Tuple);
	}
	//aadl2.AadlBoolean -> Instantiation
	var idAadlBoolean = 0;
	for (AadlBoolean_ in DSL!EObject.all.select(s|s.type.name == "AadlBoolean")){
		var AadlBoolean_Tuple = Tuple{"key"="AadlBoolean_"+(idAadlBoolean++).asString(),"value"= AadlBoolean_};
		self.add(AadlBoolean_Tuple);
	}
	//aadl2.AadlString -> Instantiation
	var idAadlString = 0;
	for (AadlString_ in DSL!EObject.all.select(s|s.type.name == "AadlString")){
		var AadlString_Tuple = Tuple{"key"="AadlString_"+(idAadlString++).asString(),"value"= AadlString_};
		self.add(AadlString_Tuple);
	}
	//aadl2.AadlInteger -> Instantiation
	var idAadlInteger = 0;
	for (AadlInteger_ in DSL!EObject.all.select(s|s.type.name == "AadlInteger")){
		var AadlInteger_Tuple = Tuple{"key"="AadlInteger_"+(idAadlInteger++).asString(),"value"= AadlInteger_};
		self.add(AadlInteger_Tuple);
	}
	//aadl2.NumberType -> Instantiation
	var idNumberType = 0;
	for (NumberType_ in DSL!EObject.all.select(s|s.type.name == "NumberType")){
		var NumberType_Tuple = Tuple{"key"="NumberType_"+(idNumberType++).asString(),"value"= NumberType_};
		self.add(NumberType_Tuple);
	}
	//aadl2.UnitsType -> Instantiation
	var idUnitsType = 0;
	for (UnitsType_ in DSL!EObject.all.select(s|s.type.name == "UnitsType")){
		var UnitsType_Tuple = Tuple{"key"="UnitsType_"+(idUnitsType++).asString(),"value"= UnitsType_};
		self.add(UnitsType_Tuple);
	}
	//aadl2.EnumerationType -> Instantiation
	var idEnumerationType = 0;
	for (EnumerationType_ in DSL!EObject.all.select(s|s.type.name == "EnumerationType")){
		var EnumerationType_Tuple = Tuple{"key"="EnumerationType_"+(idEnumerationType++).asString(),"value"= EnumerationType_};
		self.add(EnumerationType_Tuple);
	}
	//aadl2.NumericRange -> Instantiation
	var idNumericRange = 0;
	for (NumericRange_ in DSL!EObject.all.select(s|s.type.name == "NumericRange")){
		var NumericRange_Tuple = Tuple{"key"="NumericRange_"+(idNumericRange++).asString(),"value"= NumericRange_};
		self.add(NumericRange_Tuple);
	}
	//aadl2.AadlReal -> Instantiation
	var idAadlReal = 0;
	for (AadlReal_ in DSL!EObject.all.select(s|s.type.name == "AadlReal")){
		var AadlReal_Tuple = Tuple{"key"="AadlReal_"+(idAadlReal++).asString(),"value"= AadlReal_};
		self.add(AadlReal_Tuple);
	}
	//aadl2.ClassifierType -> Instantiation
	var idClassifierType = 0;
	for (ClassifierType_ in DSL!EObject.all.select(s|s.type.name == "ClassifierType")){
		var ClassifierType_Tuple = Tuple{"key"="ClassifierType_"+(idClassifierType++).asString(),"value"= ClassifierType_};
		self.add(ClassifierType_Tuple);
	}
	//aadl2.RangeType -> Instantiation
	var idRangeType = 0;
	for (RangeType_ in DSL!EObject.all.select(s|s.type.name == "RangeType")){
		var RangeType_Tuple = Tuple{"key"="RangeType_"+(idRangeType++).asString(),"value"= RangeType_};
		self.add(RangeType_Tuple);
	}
	//aadl2.RecordType -> Instantiation
	var idRecordType = 0;
	for (RecordType_ in DSL!EObject.all.select(s|s.type.name == "RecordType")){
		var RecordType_Tuple = Tuple{"key"="RecordType_"+(idRecordType++).asString(),"value"= RecordType_};
		self.add(RecordType_Tuple);
	}
	//aadl2.RecordField -> Instantiation
	var idRecordField = 0;
	for (RecordField_ in DSL!EObject.all.select(s|s.type.name == "RecordField")){
		var RecordField_Tuple = Tuple{"key"="RecordField_"+(idRecordField++).asString(),"value"= RecordField_};
		self.add(RecordField_Tuple);
	}
	//aadl2.ReferenceType -> Instantiation
	var idReferenceType = 0;
	for (ReferenceType_ in DSL!EObject.all.select(s|s.type.name == "ReferenceType")){
		var ReferenceType_Tuple = Tuple{"key"="ReferenceType_"+(idReferenceType++).asString(),"value"= ReferenceType_};
		self.add(ReferenceType_Tuple);
	}
	//aadl2.ListType -> Instantiation
	var idListType = 0;
	for (ListType_ in DSL!EObject.all.select(s|s.type.name == "ListType")){
		var ListType_Tuple = Tuple{"key"="ListType_"+(idListType++).asString(),"value"= ListType_};
		self.add(ListType_Tuple);
	}
	//aadl2.ProcessorPort -> Instantiation
	var idProcessorPort = 0;
	for (ProcessorPort_ in DSL!EObject.all.select(s|s.type.name == "ProcessorPort")){
		var ProcessorPort_Tuple = Tuple{"key"="ProcessorPort_"+(idProcessorPort++).asString(),"value"= ProcessorPort_};
		self.add(ProcessorPort_Tuple);
	}
	//aadl2.InternalEvent -> Instantiation
	var idInternalEvent = 0;
	for (InternalEvent_ in DSL!EObject.all.select(s|s.type.name == "InternalEvent")){
		var InternalEvent_Tuple = Tuple{"key"="InternalEvent_"+(idInternalEvent++).asString(),"value"= InternalEvent_};
		self.add(InternalEvent_Tuple);
	}
	//aadl2.ProcessorSubprogram -> Instantiation
	var idProcessorSubprogram = 0;
	for (ProcessorSubprogram_ in DSL!EObject.all.select(s|s.type.name == "ProcessorSubprogram")){
		var ProcessorSubprogram_Tuple = Tuple{"key"="ProcessorSubprogram_"+(idProcessorSubprogram++).asString(),"value"= ProcessorSubprogram_};
		self.add(ProcessorSubprogram_Tuple);
	}
	//errorModel.ErrorModelSubclause -> Instantiation
	var idErrorModelSubclause = 0;
	for (ErrorModelSubclause_ in DSL!EObject.all.select(s|s.type.name == "ErrorModelSubclause")){
		var ErrorModelSubclause_Tuple = Tuple{"key"="ErrorModelSubclause_"+(idErrorModelSubclause++).asString(),"value"= ErrorModelSubclause_};
		self.add(ErrorModelSubclause_Tuple);
	}
	//errorModel.ErrorModelLibrary -> Instantiation
	var idErrorModelLibrary = 0;
	for (ErrorModelLibrary_ in DSL!EObject.all.select(s|s.type.name == "ErrorModelLibrary")){
		var ErrorModelLibrary_Tuple = Tuple{"key"="ErrorModelLibrary_"+(idErrorModelLibrary++).asString(),"value"= ErrorModelLibrary_};
		self.add(ErrorModelLibrary_Tuple);
	}
	//errorModel.EMV2PropertyAssociation -> Instantiation
	var idEMV2PropertyAssociation = 0;
	for (EMV2PropertyAssociation_ in DSL!EObject.all.select(s|s.type.name == "EMV2PropertyAssociation")){
		var EMV2PropertyAssociation_Tuple = Tuple{"key"="EMV2PropertyAssociation_"+(idEMV2PropertyAssociation++).asString(),"value"= EMV2PropertyAssociation_};
		self.add(EMV2PropertyAssociation_Tuple);
	}
	//errorModel.EMV2Path -> Instantiation
	var idEMV2Path = 0;
	for (EMV2Path_ in DSL!EObject.all.select(s|s.type.name == "EMV2Path")){
		var EMV2Path_Tuple = Tuple{"key"="EMV2Path_"+(idEMV2Path++).asString(),"value"= EMV2Path_};
		self.add(EMV2Path_Tuple);
	}
	//errorModel.EMV2PathElement -> Instantiation
	var idEMV2PathElement = 0;
	for (EMV2PathElement_ in DSL!EObject.all.select(s|s.type.name == "EMV2PathElement")){
		var EMV2PathElement_Tuple = Tuple{"key"="EMV2PathElement_"+(idEMV2PathElement++).asString(),"value"= EMV2PathElement_};
		self.add(EMV2PathElement_Tuple);
	}
	//errorModel.ErrorTypes -> Instantiation
	var idErrorTypes = 0;
	for (ErrorTypes_ in DSL!EObject.all.select(s|s.type.name == "ErrorTypes")){
		var ErrorTypes_Tuple = Tuple{"key"="ErrorTypes_"+(idErrorTypes++).asString(),"value"= ErrorTypes_};
		self.add(ErrorTypes_Tuple);
	}
	//errorModel.ErrorType -> Instantiation
	var idErrorType = 0;
	for (ErrorType_ in DSL!EObject.all.select(s|s.type.name == "ErrorType")){
		var ErrorType_Tuple = Tuple{"key"="ErrorType_"+(idErrorType++).asString(),"value"= ErrorType_};
		self.add(ErrorType_Tuple);
	}
	//errorModel.TypeSet -> Instantiation
	var idTypeSet = 0;
	for (TypeSet_ in DSL!EObject.all.select(s|s.type.name == "TypeSet")){
		var TypeSet_Tuple = Tuple{"key"="TypeSet_"+(idTypeSet++).asString(),"value"= TypeSet_};
		self.add(TypeSet_Tuple);
	}
	//errorModel.TypeToken -> Instantiation
	var idTypeToken = 0;
	for (TypeToken_ in DSL!EObject.all.select(s|s.type.name == "TypeToken")){
		var TypeToken_Tuple = Tuple{"key"="TypeToken_"+(idTypeToken++).asString(),"value"= TypeToken_};
		self.add(TypeToken_Tuple);
	}
	//errorModel.TypeTransformationSet -> Instantiation
	var idTypeTransformationSet = 0;
	for (TypeTransformationSet_ in DSL!EObject.all.select(s|s.type.name == "TypeTransformationSet")){
		var TypeTransformationSet_Tuple = Tuple{"key"="TypeTransformationSet_"+(idTypeTransformationSet++).asString(),"value"= TypeTransformationSet_};
		self.add(TypeTransformationSet_Tuple);
	}
	//errorModel.TypeTransformation -> Instantiation
	var idTypeTransformation = 0;
	for (TypeTransformation_ in DSL!EObject.all.select(s|s.type.name == "TypeTransformation")){
		var TypeTransformation_Tuple = Tuple{"key"="TypeTransformation_"+(idTypeTransformation++).asString(),"value"= TypeTransformation_};
		self.add(TypeTransformation_Tuple);
	}
	//errorModel.TypeMappingSet -> Instantiation
	var idTypeMappingSet = 0;
	for (TypeMappingSet_ in DSL!EObject.all.select(s|s.type.name == "TypeMappingSet")){
		var TypeMappingSet_Tuple = Tuple{"key"="TypeMappingSet_"+(idTypeMappingSet++).asString(),"value"= TypeMappingSet_};
		self.add(TypeMappingSet_Tuple);
	}
	//errorModel.TypeMapping -> Instantiation
	var idTypeMapping = 0;
	for (TypeMapping_ in DSL!EObject.all.select(s|s.type.name == "TypeMapping")){
		var TypeMapping_Tuple = Tuple{"key"="TypeMapping_"+(idTypeMapping++).asString(),"value"= TypeMapping_};
		self.add(TypeMapping_Tuple);
	}
	//errorModel.ErrorPropagation -> Instantiation
	var idErrorPropagation = 0;
	for (ErrorPropagation_ in DSL!EObject.all.select(s|s.type.name == "ErrorPropagation")){
		var ErrorPropagation_Tuple = Tuple{"key"="ErrorPropagation_"+(idErrorPropagation++).asString(),"value"= ErrorPropagation_};
		self.add(ErrorPropagation_Tuple);
	}
	//errorModel.FeatureorPPReference -> Instantiation
	var idFeatureorPPReference = 0;
	for (FeatureorPPReference_ in DSL!EObject.all.select(s|s.type.name == "FeatureorPPReference")){
		var FeatureorPPReference_Tuple = Tuple{"key"="FeatureorPPReference_"+(idFeatureorPPReference++).asString(),"value"= FeatureorPPReference_};
		self.add(FeatureorPPReference_Tuple);
	}
	//errorModel.ErrorFlow -> Instantiation
	var idErrorFlow = 0;
	for (ErrorFlow_ in DSL!EObject.all.select(s|s.type.name == "ErrorFlow")){
		var ErrorFlow_Tuple = Tuple{"key"="ErrorFlow_"+(idErrorFlow++).asString(),"value"= ErrorFlow_};
		self.add(ErrorFlow_Tuple);
	}
	//errorModel.ErrorSource -> Instantiation
	var idErrorSource = 0;
	for (ErrorSource_ in DSL!EObject.all.select(s|s.type.name == "ErrorSource")){
		var ErrorSource_Tuple = Tuple{"key"="ErrorSource_"+(idErrorSource++).asString(),"value"= ErrorSource_};
		self.add(ErrorSource_Tuple);
	}
	//errorModel.ErrorSink -> Instantiation
	var idErrorSink = 0;
	for (ErrorSink_ in DSL!EObject.all.select(s|s.type.name == "ErrorSink")){
		var ErrorSink_Tuple = Tuple{"key"="ErrorSink_"+(idErrorSink++).asString(),"value"= ErrorSink_};
		self.add(ErrorSink_Tuple);
	}
	//errorModel.ErrorPath -> Instantiation
	var idErrorPath = 0;
	for (ErrorPath_ in DSL!EObject.all.select(s|s.type.name == "ErrorPath")){
		var ErrorPath_Tuple = Tuple{"key"="ErrorPath_"+(idErrorPath++).asString(),"value"= ErrorPath_};
		self.add(ErrorPath_Tuple);
	}
	//errorModel.PropagationPoint -> Instantiation
	var idPropagationPoint = 0;
	for (PropagationPoint_ in DSL!EObject.all.select(s|s.type.name == "PropagationPoint")){
		var PropagationPoint_Tuple = Tuple{"key"="PropagationPoint_"+(idPropagationPoint++).asString(),"value"= PropagationPoint_};
		self.add(PropagationPoint_Tuple);
	}
	//errorModel.PropagationPath -> Instantiation
	var idPropagationPath = 0;
	for (PropagationPath_ in DSL!EObject.all.select(s|s.type.name == "PropagationPath")){
		var PropagationPath_Tuple = Tuple{"key"="PropagationPath_"+(idPropagationPath++).asString(),"value"= PropagationPath_};
		self.add(PropagationPath_Tuple);
	}
	//errorModel.QualifiedPropagationPoint -> Instantiation
	var idQualifiedPropagationPoint = 0;
	for (QualifiedPropagationPoint_ in DSL!EObject.all.select(s|s.type.name == "QualifiedPropagationPoint")){
		var QualifiedPropagationPoint_Tuple = Tuple{"key"="QualifiedPropagationPoint_"+(idQualifiedPropagationPoint++).asString(),"value"= QualifiedPropagationPoint_};
		self.add(QualifiedPropagationPoint_Tuple);
	}
	//errorModel.ErrorBehaviorStateMachine -> Instantiation
	var idErrorBehaviorStateMachine = 0;
	for (ErrorBehaviorStateMachine_ in DSL!EObject.all.select(s|s.type.name == "ErrorBehaviorStateMachine")){
		var ErrorBehaviorStateMachine_Tuple = Tuple{"key"="ErrorBehaviorStateMachine_"+(idErrorBehaviorStateMachine++).asString(),"value"= ErrorBehaviorStateMachine_};
		self.add(ErrorBehaviorStateMachine_Tuple);
	}
	//errorModel.ErrorBehaviorEvent -> Instantiation
	var idErrorBehaviorEvent = 0;
	for (ErrorBehaviorEvent_ in DSL!EObject.all.select(s|s.type.name == "ErrorBehaviorEvent")){
		var ErrorBehaviorEvent_Tuple = Tuple{"key"="ErrorBehaviorEvent_"+(idErrorBehaviorEvent++).asString(),"value"= ErrorBehaviorEvent_};
		self.add(ErrorBehaviorEvent_Tuple);
	}
	//errorModel.ErrorEvent -> Instantiation
	var idErrorEvent = 0;
	for (ErrorEvent_ in DSL!EObject.all.select(s|s.type.name == "ErrorEvent")){
		var ErrorEvent_Tuple = Tuple{"key"="ErrorEvent_"+(idErrorEvent++).asString(),"value"= ErrorEvent_};
		self.add(ErrorEvent_Tuple);
	}
	//errorModel.RepairEvent -> Instantiation
	var idRepairEvent = 0;
	for (RepairEvent_ in DSL!EObject.all.select(s|s.type.name == "RepairEvent")){
		var RepairEvent_Tuple = Tuple{"key"="RepairEvent_"+(idRepairEvent++).asString(),"value"= RepairEvent_};
		self.add(RepairEvent_Tuple);
	}
	//errorModel.RecoverEvent -> Instantiation
	var idRecoverEvent = 0;
	for (RecoverEvent_ in DSL!EObject.all.select(s|s.type.name == "RecoverEvent")){
		var RecoverEvent_Tuple = Tuple{"key"="RecoverEvent_"+(idRecoverEvent++).asString(),"value"= RecoverEvent_};
		self.add(RecoverEvent_Tuple);
	}
	//errorModel.ErrorBehaviorState -> Instantiation
	var idErrorBehaviorState = 0;
	for (ErrorBehaviorState_ in DSL!EObject.all.select(s|s.type.name == "ErrorBehaviorState")){
		var ErrorBehaviorState_Tuple = Tuple{"key"="ErrorBehaviorState_"+(idErrorBehaviorState++).asString(),"value"= ErrorBehaviorState_};
		self.add(ErrorBehaviorState_Tuple);
	}
	//errorModel.ErrorBehaviorTransition -> Instantiation
	var idErrorBehaviorTransition = 0;
	for (ErrorBehaviorTransition_ in DSL!EObject.all.select(s|s.type.name == "ErrorBehaviorTransition")){
		var ErrorBehaviorTransition_Tuple = Tuple{"key"="ErrorBehaviorTransition_"+(idErrorBehaviorTransition++).asString(),"value"= ErrorBehaviorTransition_};
		self.add(ErrorBehaviorTransition_Tuple);
	}
	//errorModel.TransitionBranch -> Instantiation
	var idTransitionBranch = 0;
	for (TransitionBranch_ in DSL!EObject.all.select(s|s.type.name == "TransitionBranch")){
		var TransitionBranch_Tuple = Tuple{"key"="TransitionBranch_"+(idTransitionBranch++).asString(),"value"= TransitionBranch_};
		self.add(TransitionBranch_Tuple);
	}
	//errorModel.BranchValue -> Instantiation
	var idBranchValue = 0;
	for (BranchValue_ in DSL!EObject.all.select(s|s.type.name == "BranchValue")){
		var BranchValue_Tuple = Tuple{"key"="BranchValue_"+(idBranchValue++).asString(),"value"= BranchValue_};
		self.add(BranchValue_Tuple);
	}
	//errorModel.ConditionExpression -> Instantiation
	var idConditionExpression = 0;
	for (ConditionExpression_ in DSL!EObject.all.select(s|s.type.name == "ConditionExpression")){
		var ConditionExpression_Tuple = Tuple{"key"="ConditionExpression_"+(idConditionExpression++).asString(),"value"= ConditionExpression_};
		self.add(ConditionExpression_Tuple);
	}
	//errorModel.OrmoreExpression -> Instantiation
	var idOrmoreExpression = 0;
	for (OrmoreExpression_ in DSL!EObject.all.select(s|s.type.name == "OrmoreExpression")){
		var OrmoreExpression_Tuple = Tuple{"key"="OrmoreExpression_"+(idOrmoreExpression++).asString(),"value"= OrmoreExpression_};
		self.add(OrmoreExpression_Tuple);
	}
	//errorModel.OrlessExpression -> Instantiation
	var idOrlessExpression = 0;
	for (OrlessExpression_ in DSL!EObject.all.select(s|s.type.name == "OrlessExpression")){
		var OrlessExpression_Tuple = Tuple{"key"="OrlessExpression_"+(idOrlessExpression++).asString(),"value"= OrlessExpression_};
		self.add(OrlessExpression_Tuple);
	}
	//errorModel.ConditionElement -> Instantiation
	var idConditionElement = 0;
	for (ConditionElement_ in DSL!EObject.all.select(s|s.type.name == "ConditionElement")){
		var ConditionElement_Tuple = Tuple{"key"="ConditionElement_"+(idConditionElement++).asString(),"value"= ConditionElement_};
		self.add(ConditionElement_Tuple);
	}
	//errorModel.EventOrPropagation -> Instantiation
	var idEventOrPropagation = 0;
	for (EventOrPropagation_ in DSL!EObject.all.select(s|s.type.name == "EventOrPropagation")){
		var EventOrPropagation_Tuple = Tuple{"key"="EventOrPropagation_"+(idEventOrPropagation++).asString(),"value"= EventOrPropagation_};
		self.add(EventOrPropagation_Tuple);
	}
	//errorModel.OutgoingPropagationCondition -> Instantiation
	var idOutgoingPropagationCondition = 0;
	for (OutgoingPropagationCondition_ in DSL!EObject.all.select(s|s.type.name == "OutgoingPropagationCondition")){
		var OutgoingPropagationCondition_Tuple = Tuple{"key"="OutgoingPropagationCondition_"+(idOutgoingPropagationCondition++).asString(),"value"= OutgoingPropagationCondition_};
		self.add(OutgoingPropagationCondition_Tuple);
	}
	//errorModel.ErrorDetection -> Instantiation
	var idErrorDetection = 0;
	for (ErrorDetection_ in DSL!EObject.all.select(s|s.type.name == "ErrorDetection")){
		var ErrorDetection_Tuple = Tuple{"key"="ErrorDetection_"+(idErrorDetection++).asString(),"value"= ErrorDetection_};
		self.add(ErrorDetection_Tuple);
	}
	//errorModel.ErrorCodeValue -> Instantiation
	var idErrorCodeValue = 0;
	for (ErrorCodeValue_ in DSL!EObject.all.select(s|s.type.name == "ErrorCodeValue")){
		var ErrorCodeValue_Tuple = Tuple{"key"="ErrorCodeValue_"+(idErrorCodeValue++).asString(),"value"= ErrorCodeValue_};
		self.add(ErrorCodeValue_Tuple);
	}
	//errorModel.ErrorStateToModeMapping -> Instantiation
	var idErrorStateToModeMapping = 0;
	for (ErrorStateToModeMapping_ in DSL!EObject.all.select(s|s.type.name == "ErrorStateToModeMapping")){
		var ErrorStateToModeMapping_Tuple = Tuple{"key"="ErrorStateToModeMapping_"+(idErrorStateToModeMapping++).asString(),"value"= ErrorStateToModeMapping_};
		self.add(ErrorStateToModeMapping_Tuple);
	}
	//errorModel.CompositeState -> Instantiation
	var idCompositeState = 0;
	for (CompositeState_ in DSL!EObject.all.select(s|s.type.name == "CompositeState")){
		var CompositeState_Tuple = Tuple{"key"="CompositeState_"+(idCompositeState++).asString(),"value"= CompositeState_};
		self.add(CompositeState_Tuple);
	}
	//errorModel.QualifiedErrorBehaviorState -> Instantiation
	var idQualifiedErrorBehaviorState = 0;
	for (QualifiedErrorBehaviorState_ in DSL!EObject.all.select(s|s.type.name == "QualifiedErrorBehaviorState")){
		var QualifiedErrorBehaviorState_Tuple = Tuple{"key"="QualifiedErrorBehaviorState_"+(idQualifiedErrorBehaviorState++).asString(),"value"= QualifiedErrorBehaviorState_};
		self.add(QualifiedErrorBehaviorState_Tuple);
	}
	//errorModel.SubcomponentElement -> Instantiation
	var idSubcomponentElement = 0;
	for (SubcomponentElement_ in DSL!EObject.all.select(s|s.type.name == "SubcomponentElement")){
		var SubcomponentElement_Tuple = Tuple{"key"="SubcomponentElement_"+(idSubcomponentElement++).asString(),"value"= SubcomponentElement_};
		self.add(SubcomponentElement_Tuple);
	}
	//errorModel.EMV2Root -> Instantiation
	var idEMV2Root = 0;
	for (EMV2Root_ in DSL!EObject.all.select(s|s.type.name == "EMV2Root")){
		var EMV2Root_Tuple = Tuple{"key"="EMV2Root_"+(idEMV2Root++).asString(),"value"= EMV2Root_};
		self.add(EMV2Root_Tuple);
	}
	//errorModel.OrExpression -> Instantiation
	var idOrExpression = 0;
	for (OrExpression_ in DSL!EObject.all.select(s|s.type.name == "OrExpression")){
		var OrExpression_Tuple = Tuple{"key"="OrExpression_"+(idOrExpression++).asString(),"value"= OrExpression_};
		self.add(OrExpression_Tuple);
	}
	//errorModel.AndExpression -> Instantiation
	var idAndExpression = 0;
	for (AndExpression_ in DSL!EObject.all.select(s|s.type.name == "AndExpression")){
		var AndExpression_Tuple = Tuple{"key"="AndExpression_"+(idAndExpression++).asString(),"value"= AndExpression_};
		self.add(AndExpression_Tuple);
	}
	//errorModel.AllExpression -> Instantiation
	var idAllExpression = 0;
	for (AllExpression_ in DSL!EObject.all.select(s|s.type.name == "AllExpression")){
		var AllExpression_Tuple = Tuple{"key"="AllExpression_"+(idAllExpression++).asString(),"value"= AllExpression_};
		self.add(AllExpression_Tuple);
	}
	//errorModel.QualifiedErrorEventOrPropagation -> Instantiation
	var idQualifiedErrorEventOrPropagation = 0;
	for (QualifiedErrorEventOrPropagation_ in DSL!EObject.all.select(s|s.type.name == "QualifiedErrorEventOrPropagation")){
		var QualifiedErrorEventOrPropagation_Tuple = Tuple{"key"="QualifiedErrorEventOrPropagation_"+(idQualifiedErrorEventOrPropagation++).asString(),"value"= QualifiedErrorEventOrPropagation_};
		self.add(QualifiedErrorEventOrPropagation_Tuple);
	}
	//errorModel.QualifiedErrorPropagation -> Instantiation
	var idQualifiedErrorPropagation = 0;
	for (QualifiedErrorPropagation_ in DSL!EObject.all.select(s|s.type.name == "QualifiedErrorPropagation")){
		var QualifiedErrorPropagation_Tuple = Tuple{"key"="QualifiedErrorPropagation_"+(idQualifiedErrorPropagation++).asString(),"value"= QualifiedErrorPropagation_};
		self.add(QualifiedErrorPropagation_Tuple);
	}
	//errorModel.SConditionElement -> Instantiation
	var idSConditionElement = 0;
	for (SConditionElement_ in DSL!EObject.all.select(s|s.type.name == "SConditionElement")){
		var SConditionElement_Tuple = Tuple{"key"="SConditionElement_"+(idSConditionElement++).asString(),"value"= SConditionElement_};
		self.add(SConditionElement_Tuple);
	}
	//ecore.EAttribute -> Instantiation
	var idEAttribute = 0;
	for (EAttribute_ in DSL!EObject.all.select(s|s.type.name == "EAttribute")){
		var EAttribute_Tuple = Tuple{"key"="EAttribute_"+(idEAttribute++).asString(),"value"= EAttribute_};
		self.add(EAttribute_Tuple);
	}
	//ecore.EAnnotation -> Instantiation
	var idEAnnotation = 0;
	for (EAnnotation_ in DSL!EObject.all.select(s|s.type.name == "EAnnotation")){
		var EAnnotation_Tuple = Tuple{"key"="EAnnotation_"+(idEAnnotation++).asString(),"value"= EAnnotation_};
		self.add(EAnnotation_Tuple);
	}
	//ecore.EClass -> Instantiation
	var idEClass = 0;
	for (EClass_ in DSL!EObject.all.select(s|s.type.name == "EClass")){
		var EClass_Tuple = Tuple{"key"="EClass_"+(idEClass++).asString(),"value"= EClass_};
		self.add(EClass_Tuple);
	}
	//ecore.EClassifier -> Instantiation
	var idEClassifier = 0;
	for (EClassifier_ in DSL!EObject.all.select(s|s.type.name == "EClassifier")){
		var EClassifier_Tuple = Tuple{"key"="EClassifier_"+(idEClassifier++).asString(),"value"= EClassifier_};
		self.add(EClassifier_Tuple);
	}
	//ecore.EDataType -> Instantiation
	var idEDataType = 0;
	for (EDataType_ in DSL!EObject.all.select(s|s.type.name == "EDataType")){
		var EDataType_Tuple = Tuple{"key"="EDataType_"+(idEDataType++).asString(),"value"= EDataType_};
		self.add(EDataType_Tuple);
	}
	//ecore.EEnum -> Instantiation
	var idEEnum = 0;
	for (EEnum_ in DSL!EObject.all.select(s|s.type.name == "EEnum")){
		var EEnum_Tuple = Tuple{"key"="EEnum_"+(idEEnum++).asString(),"value"= EEnum_};
		self.add(EEnum_Tuple);
	}
	//ecore.EEnumLiteral -> Instantiation
	var idEEnumLiteral = 0;
	for (EEnumLiteral_ in DSL!EObject.all.select(s|s.type.name == "EEnumLiteral")){
		var EEnumLiteral_Tuple = Tuple{"key"="EEnumLiteral_"+(idEEnumLiteral++).asString(),"value"= EEnumLiteral_};
		self.add(EEnumLiteral_Tuple);
	}
	//ecore.EFactory -> Instantiation
	var idEFactory = 0;
	for (EFactory_ in DSL!EObject.all.select(s|s.type.name == "EFactory")){
		var EFactory_Tuple = Tuple{"key"="EFactory_"+(idEFactory++).asString(),"value"= EFactory_};
		self.add(EFactory_Tuple);
	}
	//ecore.EModelElement -> Instantiation
	var idEModelElement = 0;
	for (EModelElement_ in DSL!EObject.all.select(s|s.type.name == "EModelElement")){
		var EModelElement_Tuple = Tuple{"key"="EModelElement_"+(idEModelElement++).asString(),"value"= EModelElement_};
		self.add(EModelElement_Tuple);
	}
	//ecore.ENamedElement -> Instantiation
	var idENamedElement = 0;
	for (ENamedElement_ in DSL!EObject.all.select(s|s.type.name == "ENamedElement")){
		var ENamedElement_Tuple = Tuple{"key"="ENamedElement_"+(idENamedElement++).asString(),"value"= ENamedElement_};
		self.add(ENamedElement_Tuple);
	}
	//ecore.EObject -> Instantiation
	var idEObject = 0;
	for (EObject_ in DSL!EObject.all.select(s|s.type.name == "EObject")){
		var EObject_Tuple = Tuple{"key"="EObject_"+(idEObject++).asString(),"value"= EObject_};
		self.add(EObject_Tuple);
	}
	//ecore.EOperation -> Instantiation
	var idEOperation = 0;
	for (EOperation_ in DSL!EObject.all.select(s|s.type.name == "EOperation")){
		var EOperation_Tuple = Tuple{"key"="EOperation_"+(idEOperation++).asString(),"value"= EOperation_};
		self.add(EOperation_Tuple);
	}
	//ecore.EPackage -> Instantiation
	var idEPackage = 0;
	for (EPackage_ in DSL!EObject.all.select(s|s.type.name == "EPackage")){
		var EPackage_Tuple = Tuple{"key"="EPackage_"+(idEPackage++).asString(),"value"= EPackage_};
		self.add(EPackage_Tuple);
	}
	//ecore.EParameter -> Instantiation
	var idEParameter = 0;
	for (EParameter_ in DSL!EObject.all.select(s|s.type.name == "EParameter")){
		var EParameter_Tuple = Tuple{"key"="EParameter_"+(idEParameter++).asString(),"value"= EParameter_};
		self.add(EParameter_Tuple);
	}
	//ecore.EReference -> Instantiation
	var idEReference = 0;
	for (EReference_ in DSL!EObject.all.select(s|s.type.name == "EReference")){
		var EReference_Tuple = Tuple{"key"="EReference_"+(idEReference++).asString(),"value"= EReference_};
		self.add(EReference_Tuple);
	}
	//ecore.EStructuralFeature -> Instantiation
	var idEStructuralFeature = 0;
	for (EStructuralFeature_ in DSL!EObject.all.select(s|s.type.name == "EStructuralFeature")){
		var EStructuralFeature_Tuple = Tuple{"key"="EStructuralFeature_"+(idEStructuralFeature++).asString(),"value"= EStructuralFeature_};
		self.add(EStructuralFeature_Tuple);
	}
	//ecore.ETypedElement -> Instantiation
	var idETypedElement = 0;
	for (ETypedElement_ in DSL!EObject.all.select(s|s.type.name == "ETypedElement")){
		var ETypedElement_Tuple = Tuple{"key"="ETypedElement_"+(idETypedElement++).asString(),"value"= ETypedElement_};
		self.add(ETypedElement_Tuple);
	}
	//ecore.EStringToStringMapEntry -> Instantiation
	var idEStringToStringMapEntry = 0;
	for (EStringToStringMapEntry_ in DSL!EObject.all.select(s|s.type.name == "EStringToStringMapEntry")){
		var EStringToStringMapEntry_Tuple = Tuple{"key"="EStringToStringMapEntry_"+(idEStringToStringMapEntry++).asString(),"value"= EStringToStringMapEntry_};
		self.add(EStringToStringMapEntry_Tuple);
	}
	//ecore.EGenericType -> Instantiation
	var idEGenericType = 0;
	for (EGenericType_ in DSL!EObject.all.select(s|s.type.name == "EGenericType")){
		var EGenericType_Tuple = Tuple{"key"="EGenericType_"+(idEGenericType++).asString(),"value"= EGenericType_};
		self.add(EGenericType_Tuple);
	}
	//ecore.ETypeParameter -> Instantiation
	var idETypeParameter = 0;
	for (ETypeParameter_ in DSL!EObject.all.select(s|s.type.name == "ETypeParameter")){
		var ETypeParameter_Tuple = Tuple{"key"="ETypeParameter_"+(idETypeParameter++).asString(),"value"= ETypeParameter_};
		self.add(ETypeParameter_Tuple);
	}
}

@abstract
rule Base
	transform s : DSL!EObject
	to t : SysMLine!ItemUsage{
	t.declaredName = s.getDeclaredName();
	t.featureNote.add(":");
	t.featureSpecialization.add(s.getfeatureSpecialization());
	if (s.eContainingFeature != null and s.eContainingFeature.name != null){
		t.featureNote.add(":>");
		t.featureSpecialization.add(s.eContainingFeature().name);
	}
}

// aadl2.ecore
@lazy
rule Element
	transform s : DSL!Element //aadl2.Element
	to t : SysMLine!ItemUsage
	extends Base{
	//Element.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Element.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
}

@lazy
rule Comment
	transform s : DSL!Comment //aadl2.Comment
	to t : SysMLine!ItemUsage
	extends Base{
	//Comment.body -> EAttribute : body
	if (s.body.getEAttribute() != null) t.addNewAttribute("body".clearKeyWord(), s.body.getEAttribute());
	//Comment.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Comment.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
}

@lazy
rule Type
	transform s : DSL!Type //aadl2.Type
	to t : SysMLine!ItemUsage
	extends Base{
	//Type.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Type.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Type.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Type.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Type.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule NamedElement
	transform s : DSL!NamedElement //aadl2.NamedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//NamedElement.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//NamedElement.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//NamedElement.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//NamedElement.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//NamedElement.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule PropertyAssociation
	transform s : DSL!PropertyAssociation //aadl2.PropertyAssociation
	to t : SysMLine!ItemUsage
	extends Base{
	//PropertyAssociation.append -> EAttribute : append
	if (s.append.getEAttribute() != null) t.addNewAttribute("append".clearKeyWord(), s.append.getEAttribute());
	//PropertyAssociation.constant -> EAttribute : constant
	if (s.constant.getEAttribute() != null) t.addNewAttribute("constant".clearKeyWord(), s.constant.getEAttribute());
	//PropertyAssociation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//PropertyAssociation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//PropertyAssociation.property -> EReference : property
	if (s.property.getEReference() != null) t.addNewReference("property".clearKeyWord(), s.property.getEReference());
	//PropertyAssociation.appliesTo -> EReference : appliesTo
	if (s.appliesTo.getEReference() != null) t.addNewReference("appliesTo".clearKeyWord(), s.appliesTo.getEReference());
	//PropertyAssociation.inBinding -> EReference : inBinding
	if (s.inBinding.getEReference() != null) t.addNewReference("inBinding".clearKeyWord(), s.inBinding.getEReference());
	//PropertyAssociation.ownedValue -> EReference : ownedValue
	if (s.ownedValue.getEReference() != null) t.addNewReference("ownedValue".clearKeyWord(), s.ownedValue.getEReference());
}

@lazy
rule Property
	transform s : DSL!Property //aadl2.Property
	to t : SysMLine!ItemUsage
	extends Base{
	//Property.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Property.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Property.inherit -> EAttribute : inherit
	if (s.inherit.getEAttribute() != null) t.addNewAttribute("inherit".clearKeyWord(), s.inherit.getEAttribute());
	//Property.emptyListDefault -> EAttribute : emptyListDefault
	if (s.emptyListDefault.getEAttribute() != null) t.addNewAttribute("emptyListDefault".clearKeyWord(), s.emptyListDefault.getEAttribute());
	//Property.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Property.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Property.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//Property.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
	//Property.propertyType -> EReference : propertyType
	if (s.propertyType.getEReference() != null) t.addNewReference("propertyType".clearKeyWord(), s.propertyType.getEReference());
	//Property.ownedPropertyType -> EReference : ownedPropertyType
	if (s.ownedPropertyType.getEReference() != null) t.addNewReference("ownedPropertyType".clearKeyWord(), s.ownedPropertyType.getEReference());
	//Property.defaultValue -> EReference : defaultValue
	if (s.defaultValue.getEReference() != null) t.addNewReference("defaultValue".clearKeyWord(), s.defaultValue.getEReference());
	//Property.appliesToMetaclass -> EReference : appliesToMetaclass
	if (s.appliesToMetaclass.getEReference() != null) t.addNewReference("appliesToMetaclass".clearKeyWord(), s.appliesToMetaclass.getEReference());
	//Property.appliesToClassifier -> EReference : appliesToClassifier
	if (s.appliesToClassifier.getEReference() != null) t.addNewReference("appliesToClassifier".clearKeyWord(), s.appliesToClassifier.getEReference());
	//Property.appliesTo -> EReference : appliesTo
	if (s.appliesTo.getEReference() != null) t.addNewReference("appliesTo".clearKeyWord(), s.appliesTo.getEReference());
}

@lazy
rule BasicProperty
	transform s : DSL!BasicProperty //aadl2.BasicProperty
	to t : SysMLine!ItemUsage
	extends Base{
	//BasicProperty.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//BasicProperty.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//BasicProperty.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//BasicProperty.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//BasicProperty.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//BasicProperty.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
	//BasicProperty.propertyType -> EReference : propertyType
	if (s.propertyType.getEReference() != null) t.addNewReference("propertyType".clearKeyWord(), s.propertyType.getEReference());
	//BasicProperty.ownedPropertyType -> EReference : ownedPropertyType
	if (s.ownedPropertyType.getEReference() != null) t.addNewReference("ownedPropertyType".clearKeyWord(), s.ownedPropertyType.getEReference());
}

@lazy
rule TypedElement
	transform s : DSL!TypedElement //aadl2.TypedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//TypedElement.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//TypedElement.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//TypedElement.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//TypedElement.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//TypedElement.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//TypedElement.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
}

@lazy
rule PropertyType
	transform s : DSL!PropertyType //aadl2.PropertyType
	to t : SysMLine!ItemUsage
	extends Base{
	//PropertyType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//PropertyType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//PropertyType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//PropertyType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//PropertyType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule AbstractNamedValue
	transform s : DSL!AbstractNamedValue //aadl2.AbstractNamedValue
	to t : SysMLine!ItemUsage
	extends Base{
}

@lazy
rule ArraySizeProperty
	transform s : DSL!ArraySizeProperty //aadl2.ArraySizeProperty
	to t : SysMLine!ItemUsage
	extends Base{
}

@lazy
rule PropertyExpression
	transform s : DSL!PropertyExpression //aadl2.PropertyExpression
	to t : SysMLine!ItemUsage
	extends Base{
	//PropertyExpression.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//PropertyExpression.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
}

@lazy
rule MetaclassReference
	transform s : DSL!MetaclassReference //aadl2.MetaclassReference
	to t : SysMLine!ItemUsage
	extends Base{
	//MetaclassReference.annexName -> EAttribute : annexName
	if (s.annexName.getEAttribute() != null) t.addNewAttribute("annexName".clearKeyWord(), s.annexName.getEAttribute());
	//MetaclassReference.metaclassName -> EAttribute : metaclassName
	if (s.metaclassName.getEAttribute() != null) t.addNewAttribute("metaclassName".clearKeyWord(), s.metaclassName.getEAttribute());
	//MetaclassReference.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//MetaclassReference.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
}

@lazy
rule PropertyOwner
	transform s : DSL!PropertyOwner //aadl2.PropertyOwner
	to t : SysMLine!ItemUsage
	extends Base{
	//PropertyOwner.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//PropertyOwner.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
}

@lazy
rule Classifier
	transform s : DSL!Classifier //aadl2.Classifier
	to t : SysMLine!ItemUsage
	extends Base{
	//Classifier.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Classifier.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Classifier.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//Classifier.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//Classifier.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//Classifier.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Classifier.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Classifier.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//Classifier.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//Classifier.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//Classifier.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//Classifier.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//Classifier.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//Classifier.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//Classifier.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//Classifier.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//Classifier.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
}

@lazy
rule Namespace
	transform s : DSL!Namespace //aadl2.Namespace
	to t : SysMLine!ItemUsage
	extends Base{
	//Namespace.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Namespace.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Namespace.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Namespace.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Namespace.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//Namespace.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//Namespace.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
}

@lazy
rule ClassifierFeature
	transform s : DSL!ClassifierFeature //aadl2.ClassifierFeature
	to t : SysMLine!ItemUsage
	extends Base{
	//ClassifierFeature.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ClassifierFeature.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ClassifierFeature.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ClassifierFeature.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ClassifierFeature.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ClassifierFeature.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
}

@lazy
rule Generalization
	transform s : DSL!Generalization //aadl2.Generalization
	to t : SysMLine!ItemUsage
	extends Base{
	//Generalization.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Generalization.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Generalization.relatedElement -> EReference : relatedElement
	if (s.relatedElement.getEReference() != null) t.addNewReference("relatedElement".clearKeyWord(), s.relatedElement.getEReference());
	//Generalization.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source".clearKeyWord(), s.source.getEReference());
	//Generalization.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target".clearKeyWord(), s.target.getEReference());
	//Generalization.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//Generalization.specific -> EReference : specific
	if (s.specific.getEReference() != null) t.addNewReference("specific".clearKeyWord(), s.specific.getEReference());
}

@lazy
rule DirectedRelationship
	transform s : DSL!DirectedRelationship //aadl2.DirectedRelationship
	to t : SysMLine!ItemUsage
	extends Base{
	//DirectedRelationship.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//DirectedRelationship.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//DirectedRelationship.relatedElement -> EReference : relatedElement
	if (s.relatedElement.getEReference() != null) t.addNewReference("relatedElement".clearKeyWord(), s.relatedElement.getEReference());
	//DirectedRelationship.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source".clearKeyWord(), s.source.getEReference());
	//DirectedRelationship.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target".clearKeyWord(), s.target.getEReference());
}

@lazy
rule Relationship
	transform s : DSL!Relationship //aadl2.Relationship
	to t : SysMLine!ItemUsage
	extends Base{
	//Relationship.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Relationship.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Relationship.relatedElement -> EReference : relatedElement
	if (s.relatedElement.getEReference() != null) t.addNewReference("relatedElement".clearKeyWord(), s.relatedElement.getEReference());
}

@lazy
rule AnnexSubclause
	transform s : DSL!AnnexSubclause //aadl2.AnnexSubclause
	to t : SysMLine!ItemUsage
	extends Base{
	//AnnexSubclause.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//AnnexSubclause.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//AnnexSubclause.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//AnnexSubclause.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//AnnexSubclause.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//AnnexSubclause.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
}

@lazy
rule ModalElement
	transform s : DSL!ModalElement //aadl2.ModalElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ModalElement.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ModalElement.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ModalElement.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ModalElement.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ModalElement.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ModalElement.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
}

@lazy
rule Mode
	transform s : DSL!Mode //aadl2.Mode
	to t : SysMLine!ItemUsage
	extends Base{
	//Mode.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Mode.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Mode.initial -> EAttribute : initial
	if (s.initial.getEAttribute() != null) t.addNewAttribute("initial".clearKeyWord(), s.initial.getEAttribute());
	//Mode.derived -> EAttribute : derived
	if (s.derived.getEAttribute() != null) t.addNewAttribute("derived".clearKeyWord(), s.derived.getEAttribute());
	//Mode.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Mode.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Mode.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//Mode.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
}

@lazy
rule ModeFeature
	transform s : DSL!ModeFeature //aadl2.ModeFeature
	to t : SysMLine!ItemUsage
	extends Base{
	//ModeFeature.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ModeFeature.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ModeFeature.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ModeFeature.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ModeFeature.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ModeFeature.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
}

@lazy
rule Prototype
	transform s : DSL!Prototype //aadl2.Prototype
	to t : SysMLine!ItemUsage
	extends Base{
	//Prototype.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Prototype.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Prototype.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Prototype.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Prototype.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//Prototype.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//Prototype.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//Prototype.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//Prototype.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
}

@lazy
rule StructuralFeature
	transform s : DSL!StructuralFeature //aadl2.StructuralFeature
	to t : SysMLine!ItemUsage
	extends Base{
	//StructuralFeature.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//StructuralFeature.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//StructuralFeature.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//StructuralFeature.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//StructuralFeature.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//StructuralFeature.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//StructuralFeature.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//StructuralFeature.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
}

@lazy
rule RefinableElement
	transform s : DSL!RefinableElement //aadl2.RefinableElement
	to t : SysMLine!ItemUsage
	extends Base{
	//RefinableElement.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//RefinableElement.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//RefinableElement.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//RefinableElement.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//RefinableElement.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//RefinableElement.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//RefinableElement.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
}

@lazy
rule FeatureClassifier
	transform s : DSL!FeatureClassifier //aadl2.FeatureClassifier
	to t : SysMLine!ItemUsage
	extends Base{
}

@lazy
rule CalledSubprogram
	transform s : DSL!CalledSubprogram //aadl2.CalledSubprogram
	to t : SysMLine!ItemUsage
	extends Base{
}

@lazy
rule PrototypeBinding
	transform s : DSL!PrototypeBinding //aadl2.PrototypeBinding
	to t : SysMLine!ItemUsage
	extends Base{
	//PrototypeBinding.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//PrototypeBinding.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//PrototypeBinding.formal -> EReference : formal
	if (s.formal.getEReference() != null) t.addNewReference("formal".clearKeyWord(), s.formal.getEReference());
}

@lazy
rule ContainedNamedElement
	transform s : DSL!ContainedNamedElement //aadl2.ContainedNamedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ContainedNamedElement.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ContainedNamedElement.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ContainedNamedElement.containmentPathElement -> EReference : containmentPathElement
	if (s.containmentPathElement.getEReference() != null) t.addNewReference("containmentPathElement".clearKeyWord(), s.containmentPathElement.getEReference());
}

@lazy
rule ContainmentPathElement
	transform s : DSL!ContainmentPathElement //aadl2.ContainmentPathElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ContainmentPathElement.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ContainmentPathElement.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ContainmentPathElement.arrayRange -> EReference : arrayRange
	if (s.arrayRange.getEReference() != null) t.addNewReference("arrayRange".clearKeyWord(), s.arrayRange.getEReference());
	//ContainmentPathElement.namedElement -> EReference : namedElement
	if (s.namedElement.getEReference() != null) t.addNewReference("namedElement".clearKeyWord(), s.namedElement.getEReference());
}

@lazy
rule ArrayRange
	transform s : DSL!ArrayRange //aadl2.ArrayRange
	to t : SysMLine!ItemUsage
	extends Base{
	//ArrayRange.lowerBound -> EAttribute : lowerBound
	if (s.lowerBound.getEAttribute() != null) t.addNewAttribute("lowerBound".clearKeyWord(), s.lowerBound.getEAttribute());
	//ArrayRange.upperBound -> EAttribute : upperBound
	if (s.upperBound.getEAttribute() != null) t.addNewAttribute("upperBound".clearKeyWord(), s.upperBound.getEAttribute());
	//ArrayRange.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ArrayRange.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
}

@lazy
rule ModalPropertyValue
	transform s : DSL!ModalPropertyValue //aadl2.ModalPropertyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//ModalPropertyValue.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ModalPropertyValue.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ModalPropertyValue.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ModalPropertyValue.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ModalPropertyValue.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ModalPropertyValue.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//ModalPropertyValue.ownedValue -> EReference : ownedValue
	if (s.ownedValue.getEReference() != null) t.addNewReference("ownedValue".clearKeyWord(), s.ownedValue.getEReference());
}

@lazy
rule BehavioralFeature
	transform s : DSL!BehavioralFeature //aadl2.BehavioralFeature
	to t : SysMLine!ItemUsage
	extends Base{
	//BehavioralFeature.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//BehavioralFeature.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//BehavioralFeature.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//BehavioralFeature.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//BehavioralFeature.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//BehavioralFeature.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
}

@lazy
rule ArrayDimension
	transform s : DSL!ArrayDimension //aadl2.ArrayDimension
	to t : SysMLine!ItemUsage
	extends Base{
	//ArrayDimension.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ArrayDimension.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ArrayDimension.size -> EReference : size
	if (s.size.getEReference() != null) t.addNewReference("size".clearKeyWord(), s.size.getEReference());
}

@lazy
rule ArraySize
	transform s : DSL!ArraySize //aadl2.ArraySize
	to t : SysMLine!ItemUsage
	extends Base{
	//ArraySize.size -> EAttribute : size
	if (s.size.getEAttribute() != null) t.addNewAttribute("size".clearKeyWord(), s.size.getEAttribute());
	//ArraySize.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ArraySize.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ArraySize.sizeProperty -> EReference : sizeProperty
	if (s.sizeProperty.getEReference() != null) t.addNewReference("sizeProperty".clearKeyWord(), s.sizeProperty.getEReference());
}

@lazy
rule ArrayableElement
	transform s : DSL!ArrayableElement //aadl2.ArrayableElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ArrayableElement.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ArrayableElement.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ArrayableElement.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
}

@lazy
rule ComponentImplementationReference
	transform s : DSL!ComponentImplementationReference //aadl2.ComponentImplementationReference
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentImplementationReference.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ComponentImplementationReference.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ComponentImplementationReference.implementation -> EReference : implementation
	if (s.implementation.getEReference() != null) t.addNewReference("implementation".clearKeyWord(), s.implementation.getEReference());
	//ComponentImplementationReference.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
}

@lazy
rule ComponentImplementation
	transform s : DSL!ComponentImplementation //aadl2.ComponentImplementation
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentImplementation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ComponentImplementation.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ComponentImplementation.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//ComponentImplementation.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//ComponentImplementation.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//ComponentImplementation.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//ComponentImplementation.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//ComponentImplementation.noSubcomponents -> EAttribute : noSubcomponents
	if (s.noSubcomponents.getEAttribute() != null) t.addNewAttribute("noSubcomponents".clearKeyWord(), s.noSubcomponents.getEAttribute());
	//ComponentImplementation.noConnections -> EAttribute : noConnections
	if (s.noConnections.getEAttribute() != null) t.addNewAttribute("noConnections".clearKeyWord(), s.noConnections.getEAttribute());
	//ComponentImplementation.noCalls -> EAttribute : noCalls
	if (s.noCalls.getEAttribute() != null) t.addNewAttribute("noCalls".clearKeyWord(), s.noCalls.getEAttribute());
	//ComponentImplementation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ComponentImplementation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ComponentImplementation.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ComponentImplementation.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//ComponentImplementation.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//ComponentImplementation.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//ComponentImplementation.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//ComponentImplementation.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//ComponentImplementation.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//ComponentImplementation.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//ComponentImplementation.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//ComponentImplementation.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//ComponentImplementation.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//ComponentImplementation.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//ComponentImplementation.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
	//ComponentImplementation.ownedSubcomponent -> EReference : ownedSubcomponent
	if (s.ownedSubcomponent.getEReference() != null) t.addNewReference("ownedSubcomponent".clearKeyWord(), s.ownedSubcomponent.getEReference());
	//ComponentImplementation.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//ComponentImplementation.ownedFlowImplementation -> EReference : ownedFlowImplementation
	if (s.ownedFlowImplementation.getEReference() != null) t.addNewReference("ownedFlowImplementation".clearKeyWord(), s.ownedFlowImplementation.getEReference());
	//ComponentImplementation.ownedConnection -> EReference : ownedConnection
	if (s.ownedConnection.getEReference() != null) t.addNewReference("ownedConnection".clearKeyWord(), s.ownedConnection.getEReference());
	//ComponentImplementation.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//ComponentImplementation.ownedRealization -> EReference : ownedRealization
	if (s.ownedRealization.getEReference() != null) t.addNewReference("ownedRealization".clearKeyWord(), s.ownedRealization.getEReference());
	//ComponentImplementation.ownedEndToEndFlow -> EReference : ownedEndToEndFlow
	if (s.ownedEndToEndFlow.getEReference() != null) t.addNewReference("ownedEndToEndFlow".clearKeyWord(), s.ownedEndToEndFlow.getEReference());
	//ComponentImplementation.ownedAbstractSubcomponent -> EReference : ownedAbstractSubcomponent
	if (s.ownedAbstractSubcomponent.getEReference() != null) t.addNewReference("ownedAbstractSubcomponent".clearKeyWord(), s.ownedAbstractSubcomponent.getEReference());
	//ComponentImplementation.ownedAccessConnection -> EReference : ownedAccessConnection
	if (s.ownedAccessConnection.getEReference() != null) t.addNewReference("ownedAccessConnection".clearKeyWord(), s.ownedAccessConnection.getEReference());
	//ComponentImplementation.ownedParameterConnection -> EReference : ownedParameterConnection
	if (s.ownedParameterConnection.getEReference() != null) t.addNewReference("ownedParameterConnection".clearKeyWord(), s.ownedParameterConnection.getEReference());
	//ComponentImplementation.ownedPortConnection -> EReference : ownedPortConnection
	if (s.ownedPortConnection.getEReference() != null) t.addNewReference("ownedPortConnection".clearKeyWord(), s.ownedPortConnection.getEReference());
	//ComponentImplementation.ownedFeatureConnection -> EReference : ownedFeatureConnection
	if (s.ownedFeatureConnection.getEReference() != null) t.addNewReference("ownedFeatureConnection".clearKeyWord(), s.ownedFeatureConnection.getEReference());
	//ComponentImplementation.ownedFeatureGroupConnection -> EReference : ownedFeatureGroupConnection
	if (s.ownedFeatureGroupConnection.getEReference() != null) t.addNewReference("ownedFeatureGroupConnection".clearKeyWord(), s.ownedFeatureGroupConnection.getEReference());
}

@lazy
rule ComponentClassifier
	transform s : DSL!ComponentClassifier //aadl2.ComponentClassifier
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentClassifier.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ComponentClassifier.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ComponentClassifier.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//ComponentClassifier.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//ComponentClassifier.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//ComponentClassifier.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//ComponentClassifier.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//ComponentClassifier.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ComponentClassifier.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ComponentClassifier.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ComponentClassifier.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//ComponentClassifier.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//ComponentClassifier.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//ComponentClassifier.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//ComponentClassifier.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//ComponentClassifier.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//ComponentClassifier.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//ComponentClassifier.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//ComponentClassifier.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//ComponentClassifier.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//ComponentClassifier.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
}

@lazy
rule SubcomponentType
	transform s : DSL!SubcomponentType //aadl2.SubcomponentType
	to t : SysMLine!ItemUsage
	extends Base{
	//SubcomponentType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SubcomponentType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SubcomponentType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SubcomponentType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SubcomponentType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule ModeTransition
	transform s : DSL!ModeTransition //aadl2.ModeTransition
	to t : SysMLine!ItemUsage
	extends Base{
	//ModeTransition.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ModeTransition.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ModeTransition.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ModeTransition.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ModeTransition.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ModeTransition.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//ModeTransition.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source".clearKeyWord(), s.source.getEReference());
	//ModeTransition.destination -> EReference : destination
	if (s.destination.getEReference() != null) t.addNewReference("destination".clearKeyWord(), s.destination.getEReference());
	//ModeTransition.ownedTrigger -> EReference : ownedTrigger
	if (s.ownedTrigger.getEReference() != null) t.addNewReference("ownedTrigger".clearKeyWord(), s.ownedTrigger.getEReference());
}

@lazy
rule ModeTransitionTrigger
	transform s : DSL!ModeTransitionTrigger //aadl2.ModeTransitionTrigger
	to t : SysMLine!ItemUsage
	extends Base{
	//ModeTransitionTrigger.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ModeTransitionTrigger.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
}

@lazy
rule ComponentType
	transform s : DSL!ComponentType //aadl2.ComponentType
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ComponentType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ComponentType.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//ComponentType.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//ComponentType.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//ComponentType.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//ComponentType.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//ComponentType.noFeatures -> EAttribute : noFeatures
	if (s.noFeatures.getEAttribute() != null) t.addNewAttribute("noFeatures".clearKeyWord(), s.noFeatures.getEAttribute());
	//ComponentType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ComponentType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ComponentType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ComponentType.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//ComponentType.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//ComponentType.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//ComponentType.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//ComponentType.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//ComponentType.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//ComponentType.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//ComponentType.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//ComponentType.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//ComponentType.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//ComponentType.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//ComponentType.ownedFeature -> EReference : ownedFeature
	if (s.ownedFeature.getEReference() != null) t.addNewReference("ownedFeature".clearKeyWord(), s.ownedFeature.getEReference());
	//ComponentType.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//ComponentType.ownedFlowSpecification -> EReference : ownedFlowSpecification
	if (s.ownedFlowSpecification.getEReference() != null) t.addNewReference("ownedFlowSpecification".clearKeyWord(), s.ownedFlowSpecification.getEReference());
	//ComponentType.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//ComponentType.ownedFeatureGroup -> EReference : ownedFeatureGroup
	if (s.ownedFeatureGroup.getEReference() != null) t.addNewReference("ownedFeatureGroup".clearKeyWord(), s.ownedFeatureGroup.getEReference());
	//ComponentType.ownedAbstractFeature -> EReference : ownedAbstractFeature
	if (s.ownedAbstractFeature.getEReference() != null) t.addNewReference("ownedAbstractFeature".clearKeyWord(), s.ownedAbstractFeature.getEReference());
}

@lazy
rule Feature
	transform s : DSL!Feature //aadl2.Feature
	to t : SysMLine!ItemUsage
	extends Base{
	//Feature.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Feature.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Feature.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Feature.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Feature.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//Feature.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//Feature.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//Feature.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//Feature.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//Feature.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//Feature.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//Feature.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
}

@lazy
rule FeatureConnectionEnd
	transform s : DSL!FeatureConnectionEnd //aadl2.FeatureConnectionEnd
	to t : SysMLine!ItemUsage
	extends Base{
	//FeatureConnectionEnd.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//FeatureConnectionEnd.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//FeatureConnectionEnd.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//FeatureConnectionEnd.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//FeatureConnectionEnd.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule ConnectionEnd
	transform s : DSL!ConnectionEnd //aadl2.ConnectionEnd
	to t : SysMLine!ItemUsage
	extends Base{
	//ConnectionEnd.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ConnectionEnd.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ConnectionEnd.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ConnectionEnd.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ConnectionEnd.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule FlowSpecification
	transform s : DSL!FlowSpecification //aadl2.FlowSpecification
	to t : SysMLine!ItemUsage
	extends Base{
	//FlowSpecification.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//FlowSpecification.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//FlowSpecification.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind".clearKeyWord(), s.kind.getEAttribute());
	//FlowSpecification.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//FlowSpecification.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//FlowSpecification.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//FlowSpecification.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//FlowSpecification.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//FlowSpecification.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//FlowSpecification.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//FlowSpecification.inModeOrTransition -> EReference : inModeOrTransition
	if (s.inModeOrTransition.getEReference() != null) t.addNewReference("inModeOrTransition".clearKeyWord(), s.inModeOrTransition.getEReference());
	//FlowSpecification.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//FlowSpecification.outEnd -> EReference : outEnd
	if (s.outEnd.getEReference() != null) t.addNewReference("outEnd".clearKeyWord(), s.outEnd.getEReference());
	//FlowSpecification.InEnd -> EReference : InEnd
	if (s.InEnd.getEReference() != null) t.addNewReference("InEnd".clearKeyWord(), s.InEnd.getEReference());
}

@lazy
rule Flow
	transform s : DSL!Flow //aadl2.Flow
	to t : SysMLine!ItemUsage
	extends Base{
	//Flow.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Flow.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Flow.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Flow.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Flow.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//Flow.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//Flow.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//Flow.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
}

@lazy
rule ModalPath
	transform s : DSL!ModalPath //aadl2.ModalPath
	to t : SysMLine!ItemUsage
	extends Base{
	//ModalPath.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ModalPath.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ModalPath.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ModalPath.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ModalPath.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ModalPath.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//ModalPath.inModeOrTransition -> EReference : inModeOrTransition
	if (s.inModeOrTransition.getEReference() != null) t.addNewReference("inModeOrTransition".clearKeyWord(), s.inModeOrTransition.getEReference());
}

@lazy
rule FlowElement
	transform s : DSL!FlowElement //aadl2.FlowElement
	to t : SysMLine!ItemUsage
	extends Base{
	//FlowElement.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//FlowElement.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//FlowElement.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//FlowElement.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//FlowElement.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule EndToEndFlowElement
	transform s : DSL!EndToEndFlowElement //aadl2.EndToEndFlowElement
	to t : SysMLine!ItemUsage
	extends Base{
	//EndToEndFlowElement.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//EndToEndFlowElement.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//EndToEndFlowElement.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//EndToEndFlowElement.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//EndToEndFlowElement.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule FlowEnd
	transform s : DSL!FlowEnd //aadl2.FlowEnd
	to t : SysMLine!ItemUsage
	extends Base{
	//FlowEnd.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//FlowEnd.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//FlowEnd.context -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context".clearKeyWord(), s.context.getEReference());
	//FlowEnd.feature -> EReference : feature
	if (s.feature.getEReference() != null) t.addNewReference("feature".clearKeyWord(), s.feature.getEReference());
}

@lazy
rule Context
	transform s : DSL!Context //aadl2.Context
	to t : SysMLine!ItemUsage
	extends Base{
	//Context.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Context.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Context.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Context.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Context.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule TypeExtension
	transform s : DSL!TypeExtension //aadl2.TypeExtension
	to t : SysMLine!ItemUsage
	extends Base{
	//TypeExtension.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//TypeExtension.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//TypeExtension.relatedElement -> EReference : relatedElement
	if (s.relatedElement.getEReference() != null) t.addNewReference("relatedElement".clearKeyWord(), s.relatedElement.getEReference());
	//TypeExtension.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source".clearKeyWord(), s.source.getEReference());
	//TypeExtension.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target".clearKeyWord(), s.target.getEReference());
	//TypeExtension.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//TypeExtension.specific -> EReference : specific
	if (s.specific.getEReference() != null) t.addNewReference("specific".clearKeyWord(), s.specific.getEReference());
	//TypeExtension.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
}

@lazy
rule FeatureGroup
	transform s : DSL!FeatureGroup //aadl2.FeatureGroup
	to t : SysMLine!ItemUsage
	extends Base{
	//FeatureGroup.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//FeatureGroup.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//FeatureGroup.direction -> EAttribute : direction
	if (s.direction.getEAttribute() != null) t.addNewAttribute("direction".clearKeyWord(), s.direction.getEAttribute());
	//FeatureGroup.inverse -> EAttribute : inverse
	if (s.inverse.getEAttribute() != null) t.addNewAttribute("inverse".clearKeyWord(), s.inverse.getEAttribute());
	//FeatureGroup.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//FeatureGroup.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//FeatureGroup.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//FeatureGroup.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//FeatureGroup.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//FeatureGroup.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//FeatureGroup.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//FeatureGroup.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//FeatureGroup.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//FeatureGroup.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//FeatureGroup.featureType -> EReference : featureType
	if (s.featureType.getEReference() != null) t.addNewReference("featureType".clearKeyWord(), s.featureType.getEReference());
	//FeatureGroup.featureGroupType -> EReference : featureGroupType
	if (s.featureGroupType.getEReference() != null) t.addNewReference("featureGroupType".clearKeyWord(), s.featureGroupType.getEReference());
	//FeatureGroup.featureGroupPrototype -> EReference : featureGroupPrototype
	if (s.featureGroupPrototype.getEReference() != null) t.addNewReference("featureGroupPrototype".clearKeyWord(), s.featureGroupPrototype.getEReference());
}

@lazy
rule CallContext
	transform s : DSL!CallContext //aadl2.CallContext
	to t : SysMLine!ItemUsage
	extends Base{
}

@lazy
rule DirectedFeature
	transform s : DSL!DirectedFeature //aadl2.DirectedFeature
	to t : SysMLine!ItemUsage
	extends Base{
	//DirectedFeature.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//DirectedFeature.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//DirectedFeature.direction -> EAttribute : direction
	if (s.direction.getEAttribute() != null) t.addNewAttribute("direction".clearKeyWord(), s.direction.getEAttribute());
	//DirectedFeature.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//DirectedFeature.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//DirectedFeature.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//DirectedFeature.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//DirectedFeature.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//DirectedFeature.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//DirectedFeature.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//DirectedFeature.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//DirectedFeature.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//DirectedFeature.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
}

@lazy
rule FeatureGroupConnectionEnd
	transform s : DSL!FeatureGroupConnectionEnd //aadl2.FeatureGroupConnectionEnd
	to t : SysMLine!ItemUsage
	extends Base{
	//FeatureGroupConnectionEnd.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//FeatureGroupConnectionEnd.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//FeatureGroupConnectionEnd.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//FeatureGroupConnectionEnd.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//FeatureGroupConnectionEnd.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule FeatureType
	transform s : DSL!FeatureType //aadl2.FeatureType
	to t : SysMLine!ItemUsage
	extends Base{
}

@lazy
rule FeatureGroupType
	transform s : DSL!FeatureGroupType //aadl2.FeatureGroupType
	to t : SysMLine!ItemUsage
	extends Base{
	//FeatureGroupType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//FeatureGroupType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//FeatureGroupType.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//FeatureGroupType.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//FeatureGroupType.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//FeatureGroupType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//FeatureGroupType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//FeatureGroupType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//FeatureGroupType.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//FeatureGroupType.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//FeatureGroupType.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//FeatureGroupType.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//FeatureGroupType.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//FeatureGroupType.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//FeatureGroupType.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//FeatureGroupType.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//FeatureGroupType.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//FeatureGroupType.ownedFeature -> EReference : ownedFeature
	if (s.ownedFeature.getEReference() != null) t.addNewReference("ownedFeature".clearKeyWord(), s.ownedFeature.getEReference());
	//FeatureGroupType.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//FeatureGroupType.inverse -> EReference : inverse
	if (s.inverse.getEReference() != null) t.addNewReference("inverse".clearKeyWord(), s.inverse.getEReference());
	//FeatureGroupType.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//FeatureGroupType.ownedBusAccess -> EReference : ownedBusAccess
	if (s.ownedBusAccess.getEReference() != null) t.addNewReference("ownedBusAccess".clearKeyWord(), s.ownedBusAccess.getEReference());
	//FeatureGroupType.ownedDataAccess -> EReference : ownedDataAccess
	if (s.ownedDataAccess.getEReference() != null) t.addNewReference("ownedDataAccess".clearKeyWord(), s.ownedDataAccess.getEReference());
	//FeatureGroupType.ownedDataPort -> EReference : ownedDataPort
	if (s.ownedDataPort.getEReference() != null) t.addNewReference("ownedDataPort".clearKeyWord(), s.ownedDataPort.getEReference());
	//FeatureGroupType.ownedEventDataPort -> EReference : ownedEventDataPort
	if (s.ownedEventDataPort.getEReference() != null) t.addNewReference("ownedEventDataPort".clearKeyWord(), s.ownedEventDataPort.getEReference());
	//FeatureGroupType.ownedEventPort -> EReference : ownedEventPort
	if (s.ownedEventPort.getEReference() != null) t.addNewReference("ownedEventPort".clearKeyWord(), s.ownedEventPort.getEReference());
	//FeatureGroupType.ownedFeatureGroup -> EReference : ownedFeatureGroup
	if (s.ownedFeatureGroup.getEReference() != null) t.addNewReference("ownedFeatureGroup".clearKeyWord(), s.ownedFeatureGroup.getEReference());
	//FeatureGroupType.ownedParameter -> EReference : ownedParameter
	if (s.ownedParameter.getEReference() != null) t.addNewReference("ownedParameter".clearKeyWord(), s.ownedParameter.getEReference());
	//FeatureGroupType.ownedSubprogramAccess -> EReference : ownedSubprogramAccess
	if (s.ownedSubprogramAccess.getEReference() != null) t.addNewReference("ownedSubprogramAccess".clearKeyWord(), s.ownedSubprogramAccess.getEReference());
	//FeatureGroupType.ownedSubprogramGroupAccess -> EReference : ownedSubprogramGroupAccess
	if (s.ownedSubprogramGroupAccess.getEReference() != null) t.addNewReference("ownedSubprogramGroupAccess".clearKeyWord(), s.ownedSubprogramGroupAccess.getEReference());
	//FeatureGroupType.ownedAbstractFeature -> EReference : ownedAbstractFeature
	if (s.ownedAbstractFeature.getEReference() != null) t.addNewReference("ownedAbstractFeature".clearKeyWord(), s.ownedAbstractFeature.getEReference());
}

@lazy
rule GroupExtension
	transform s : DSL!GroupExtension //aadl2.GroupExtension
	to t : SysMLine!ItemUsage
	extends Base{
	//GroupExtension.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//GroupExtension.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//GroupExtension.relatedElement -> EReference : relatedElement
	if (s.relatedElement.getEReference() != null) t.addNewReference("relatedElement".clearKeyWord(), s.relatedElement.getEReference());
	//GroupExtension.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source".clearKeyWord(), s.source.getEReference());
	//GroupExtension.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target".clearKeyWord(), s.target.getEReference());
	//GroupExtension.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//GroupExtension.specific -> EReference : specific
	if (s.specific.getEReference() != null) t.addNewReference("specific".clearKeyWord(), s.specific.getEReference());
	//GroupExtension.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
}

@lazy
rule BusAccess
	transform s : DSL!BusAccess //aadl2.BusAccess
	to t : SysMLine!ItemUsage
	extends Base{
	//BusAccess.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//BusAccess.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//BusAccess.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind".clearKeyWord(), s.kind.getEAttribute());
	//BusAccess.category -> EAttribute : category
	if (s.category.getEAttribute() != null) t.addNewAttribute("category".clearKeyWord(), s.category.getEAttribute());
	//BusAccess.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//BusAccess.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//BusAccess.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//BusAccess.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//BusAccess.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//BusAccess.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//BusAccess.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//BusAccess.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//BusAccess.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//BusAccess.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//BusAccess.busFeatureClassifier -> EReference : busFeatureClassifier
	if (s.busFeatureClassifier.getEReference() != null) t.addNewReference("busFeatureClassifier".clearKeyWord(), s.busFeatureClassifier.getEReference());
}

@lazy
rule Access
	transform s : DSL!Access //aadl2.Access
	to t : SysMLine!ItemUsage
	extends Base{
	//Access.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Access.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Access.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind".clearKeyWord(), s.kind.getEAttribute());
	//Access.category -> EAttribute : category
	if (s.category.getEAttribute() != null) t.addNewAttribute("category".clearKeyWord(), s.category.getEAttribute());
	//Access.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Access.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Access.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//Access.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//Access.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//Access.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//Access.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//Access.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//Access.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//Access.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
}

@lazy
rule AccessConnectionEnd
	transform s : DSL!AccessConnectionEnd //aadl2.AccessConnectionEnd
	to t : SysMLine!ItemUsage
	extends Base{
	//AccessConnectionEnd.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//AccessConnectionEnd.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//AccessConnectionEnd.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//AccessConnectionEnd.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//AccessConnectionEnd.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule BusSubcomponentType
	transform s : DSL!BusSubcomponentType //aadl2.BusSubcomponentType
	to t : SysMLine!ItemUsage
	extends Base{
	//BusSubcomponentType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//BusSubcomponentType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//BusSubcomponentType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//BusSubcomponentType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//BusSubcomponentType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule Bus
	transform s : DSL!Bus //aadl2.Bus
	to t : SysMLine!ItemUsage
	extends Base{
	//Bus.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Bus.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Bus.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Bus.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Bus.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule DataAccess
	transform s : DSL!DataAccess //aadl2.DataAccess
	to t : SysMLine!ItemUsage
	extends Base{
	//DataAccess.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//DataAccess.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//DataAccess.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind".clearKeyWord(), s.kind.getEAttribute());
	//DataAccess.category -> EAttribute : category
	if (s.category.getEAttribute() != null) t.addNewAttribute("category".clearKeyWord(), s.category.getEAttribute());
	//DataAccess.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//DataAccess.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//DataAccess.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//DataAccess.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//DataAccess.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//DataAccess.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//DataAccess.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//DataAccess.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//DataAccess.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//DataAccess.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//DataAccess.dataFeatureClassifier -> EReference : dataFeatureClassifier
	if (s.dataFeatureClassifier.getEReference() != null) t.addNewReference("dataFeatureClassifier".clearKeyWord(), s.dataFeatureClassifier.getEReference());
}

@lazy
rule ParameterConnectionEnd
	transform s : DSL!ParameterConnectionEnd //aadl2.ParameterConnectionEnd
	to t : SysMLine!ItemUsage
	extends Base{
	//ParameterConnectionEnd.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ParameterConnectionEnd.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ParameterConnectionEnd.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ParameterConnectionEnd.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ParameterConnectionEnd.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule PortConnectionEnd
	transform s : DSL!PortConnectionEnd //aadl2.PortConnectionEnd
	to t : SysMLine!ItemUsage
	extends Base{
	//PortConnectionEnd.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//PortConnectionEnd.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//PortConnectionEnd.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//PortConnectionEnd.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//PortConnectionEnd.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule DataSubcomponentType
	transform s : DSL!DataSubcomponentType //aadl2.DataSubcomponentType
	to t : SysMLine!ItemUsage
	extends Base{
	//DataSubcomponentType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//DataSubcomponentType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//DataSubcomponentType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//DataSubcomponentType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//DataSubcomponentType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule Data
	transform s : DSL!Data //aadl2.Data
	to t : SysMLine!ItemUsage
	extends Base{
	//Data.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Data.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Data.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Data.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Data.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule DataPort
	transform s : DSL!DataPort //aadl2.DataPort
	to t : SysMLine!ItemUsage
	extends Base{
	//DataPort.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//DataPort.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//DataPort.direction -> EAttribute : direction
	if (s.direction.getEAttribute() != null) t.addNewAttribute("direction".clearKeyWord(), s.direction.getEAttribute());
	//DataPort.category -> EAttribute : category
	if (s.category.getEAttribute() != null) t.addNewAttribute("category".clearKeyWord(), s.category.getEAttribute());
	//DataPort.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//DataPort.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//DataPort.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//DataPort.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//DataPort.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//DataPort.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//DataPort.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//DataPort.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//DataPort.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//DataPort.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//DataPort.dataFeatureClassifier -> EReference : dataFeatureClassifier
	if (s.dataFeatureClassifier.getEReference() != null) t.addNewReference("dataFeatureClassifier".clearKeyWord(), s.dataFeatureClassifier.getEReference());
}

@lazy
rule Port
	transform s : DSL!Port //aadl2.Port
	to t : SysMLine!ItemUsage
	extends Base{
	//Port.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Port.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Port.direction -> EAttribute : direction
	if (s.direction.getEAttribute() != null) t.addNewAttribute("direction".clearKeyWord(), s.direction.getEAttribute());
	//Port.category -> EAttribute : category
	if (s.category.getEAttribute() != null) t.addNewAttribute("category".clearKeyWord(), s.category.getEAttribute());
	//Port.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Port.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Port.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//Port.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//Port.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//Port.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//Port.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//Port.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//Port.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//Port.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
}

@lazy
rule EventDataPort
	transform s : DSL!EventDataPort //aadl2.EventDataPort
	to t : SysMLine!ItemUsage
	extends Base{
	//EventDataPort.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//EventDataPort.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//EventDataPort.direction -> EAttribute : direction
	if (s.direction.getEAttribute() != null) t.addNewAttribute("direction".clearKeyWord(), s.direction.getEAttribute());
	//EventDataPort.category -> EAttribute : category
	if (s.category.getEAttribute() != null) t.addNewAttribute("category".clearKeyWord(), s.category.getEAttribute());
	//EventDataPort.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//EventDataPort.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//EventDataPort.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//EventDataPort.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//EventDataPort.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//EventDataPort.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//EventDataPort.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//EventDataPort.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//EventDataPort.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//EventDataPort.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//EventDataPort.dataFeatureClassifier -> EReference : dataFeatureClassifier
	if (s.dataFeatureClassifier.getEReference() != null) t.addNewReference("dataFeatureClassifier".clearKeyWord(), s.dataFeatureClassifier.getEReference());
}

@lazy
rule EventPort
	transform s : DSL!EventPort //aadl2.EventPort
	to t : SysMLine!ItemUsage
	extends Base{
	//EventPort.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//EventPort.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//EventPort.direction -> EAttribute : direction
	if (s.direction.getEAttribute() != null) t.addNewAttribute("direction".clearKeyWord(), s.direction.getEAttribute());
	//EventPort.category -> EAttribute : category
	if (s.category.getEAttribute() != null) t.addNewAttribute("category".clearKeyWord(), s.category.getEAttribute());
	//EventPort.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//EventPort.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//EventPort.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//EventPort.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//EventPort.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//EventPort.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//EventPort.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//EventPort.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//EventPort.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//EventPort.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
}

@lazy
rule Parameter
	transform s : DSL!Parameter //aadl2.Parameter
	to t : SysMLine!ItemUsage
	extends Base{
	//Parameter.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Parameter.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Parameter.direction -> EAttribute : direction
	if (s.direction.getEAttribute() != null) t.addNewAttribute("direction".clearKeyWord(), s.direction.getEAttribute());
	//Parameter.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Parameter.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Parameter.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//Parameter.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//Parameter.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//Parameter.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//Parameter.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//Parameter.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//Parameter.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//Parameter.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//Parameter.dataFeatureClassifier -> EReference : dataFeatureClassifier
	if (s.dataFeatureClassifier.getEReference() != null) t.addNewReference("dataFeatureClassifier".clearKeyWord(), s.dataFeatureClassifier.getEReference());
}

@lazy
rule SubprogramAccess
	transform s : DSL!SubprogramAccess //aadl2.SubprogramAccess
	to t : SysMLine!ItemUsage
	extends Base{
	//SubprogramAccess.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SubprogramAccess.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SubprogramAccess.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind".clearKeyWord(), s.kind.getEAttribute());
	//SubprogramAccess.category -> EAttribute : category
	if (s.category.getEAttribute() != null) t.addNewAttribute("category".clearKeyWord(), s.category.getEAttribute());
	//SubprogramAccess.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SubprogramAccess.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SubprogramAccess.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//SubprogramAccess.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//SubprogramAccess.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//SubprogramAccess.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//SubprogramAccess.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//SubprogramAccess.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//SubprogramAccess.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//SubprogramAccess.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//SubprogramAccess.subprogramFeatureClassifier -> EReference : subprogramFeatureClassifier
	if (s.subprogramFeatureClassifier.getEReference() != null) t.addNewReference("subprogramFeatureClassifier".clearKeyWord(), s.subprogramFeatureClassifier.getEReference());
}

@lazy
rule SubprogramSubcomponentType
	transform s : DSL!SubprogramSubcomponentType //aadl2.SubprogramSubcomponentType
	to t : SysMLine!ItemUsage
	extends Base{
	//SubprogramSubcomponentType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SubprogramSubcomponentType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SubprogramSubcomponentType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SubprogramSubcomponentType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SubprogramSubcomponentType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule Subprogram
	transform s : DSL!Subprogram //aadl2.Subprogram
	to t : SysMLine!ItemUsage
	extends Base{
	//Subprogram.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Subprogram.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Subprogram.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Subprogram.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Subprogram.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule SubprogramGroupAccess
	transform s : DSL!SubprogramGroupAccess //aadl2.SubprogramGroupAccess
	to t : SysMLine!ItemUsage
	extends Base{
	//SubprogramGroupAccess.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SubprogramGroupAccess.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SubprogramGroupAccess.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind".clearKeyWord(), s.kind.getEAttribute());
	//SubprogramGroupAccess.category -> EAttribute : category
	if (s.category.getEAttribute() != null) t.addNewAttribute("category".clearKeyWord(), s.category.getEAttribute());
	//SubprogramGroupAccess.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SubprogramGroupAccess.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SubprogramGroupAccess.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//SubprogramGroupAccess.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//SubprogramGroupAccess.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//SubprogramGroupAccess.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//SubprogramGroupAccess.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//SubprogramGroupAccess.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//SubprogramGroupAccess.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//SubprogramGroupAccess.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//SubprogramGroupAccess.subprogramGroupFeatureClassifier -> EReference : subprogramGroupFeatureClassifier
	if (s.subprogramGroupFeatureClassifier.getEReference() != null) t.addNewReference("subprogramGroupFeatureClassifier".clearKeyWord(), s.subprogramGroupFeatureClassifier.getEReference());
}

@lazy
rule SubprogramGroupSubcomponentType
	transform s : DSL!SubprogramGroupSubcomponentType //aadl2.SubprogramGroupSubcomponentType
	to t : SysMLine!ItemUsage
	extends Base{
	//SubprogramGroupSubcomponentType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SubprogramGroupSubcomponentType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SubprogramGroupSubcomponentType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SubprogramGroupSubcomponentType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SubprogramGroupSubcomponentType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule SubprogramGroup
	transform s : DSL!SubprogramGroup //aadl2.SubprogramGroup
	to t : SysMLine!ItemUsage
	extends Base{
	//SubprogramGroup.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SubprogramGroup.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SubprogramGroup.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SubprogramGroup.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SubprogramGroup.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule AbstractFeature
	transform s : DSL!AbstractFeature //aadl2.AbstractFeature
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractFeature.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//AbstractFeature.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//AbstractFeature.direction -> EAttribute : direction
	if (s.direction.getEAttribute() != null) t.addNewAttribute("direction".clearKeyWord(), s.direction.getEAttribute());
	//AbstractFeature.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//AbstractFeature.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//AbstractFeature.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//AbstractFeature.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//AbstractFeature.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//AbstractFeature.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//AbstractFeature.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//AbstractFeature.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//AbstractFeature.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//AbstractFeature.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//AbstractFeature.featureClassifier -> EReference : featureClassifier
	if (s.featureClassifier.getEReference() != null) t.addNewReference("featureClassifier".clearKeyWord(), s.featureClassifier.getEReference());
}

@lazy
rule FeatureGroupPrototype
	transform s : DSL!FeatureGroupPrototype //aadl2.FeatureGroupPrototype
	to t : SysMLine!ItemUsage
	extends Base{
	//FeatureGroupPrototype.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//FeatureGroupPrototype.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//FeatureGroupPrototype.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//FeatureGroupPrototype.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//FeatureGroupPrototype.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//FeatureGroupPrototype.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//FeatureGroupPrototype.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//FeatureGroupPrototype.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//FeatureGroupPrototype.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//FeatureGroupPrototype.constrainingFeatureGroupType -> EReference : constrainingFeatureGroupType
	if (s.constrainingFeatureGroupType.getEReference() != null) t.addNewReference("constrainingFeatureGroupType".clearKeyWord(), s.constrainingFeatureGroupType.getEReference());
}

@lazy
rule Subcomponent
	transform s : DSL!Subcomponent //aadl2.Subcomponent
	to t : SysMLine!ItemUsage
	extends Base{
	//Subcomponent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Subcomponent.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Subcomponent.allModes -> EAttribute : allModes
	if (s.allModes.getEAttribute() != null) t.addNewAttribute("allModes".clearKeyWord(), s.allModes.getEAttribute());
	//Subcomponent.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Subcomponent.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Subcomponent.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//Subcomponent.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//Subcomponent.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//Subcomponent.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//Subcomponent.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//Subcomponent.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//Subcomponent.subcomponentType -> EReference : subcomponentType
	if (s.subcomponentType.getEReference() != null) t.addNewReference("subcomponentType".clearKeyWord(), s.subcomponentType.getEReference());
	//Subcomponent.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//Subcomponent.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//Subcomponent.ownedModeBinding -> EReference : ownedModeBinding
	if (s.ownedModeBinding.getEReference() != null) t.addNewReference("ownedModeBinding".clearKeyWord(), s.ownedModeBinding.getEReference());
	//Subcomponent.implementationReference -> EReference : implementationReference
	if (s.implementationReference.getEReference() != null) t.addNewReference("implementationReference".clearKeyWord(), s.implementationReference.getEReference());
	//Subcomponent.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//Subcomponent.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
}

@lazy
rule ComponentPrototype
	transform s : DSL!ComponentPrototype //aadl2.ComponentPrototype
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentPrototype.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ComponentPrototype.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ComponentPrototype.array -> EAttribute : array
	if (s.array.getEAttribute() != null) t.addNewAttribute("array".clearKeyWord(), s.array.getEAttribute());
	//ComponentPrototype.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ComponentPrototype.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ComponentPrototype.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ComponentPrototype.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//ComponentPrototype.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//ComponentPrototype.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//ComponentPrototype.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//ComponentPrototype.constrainingClassifier -> EReference : constrainingClassifier
	if (s.constrainingClassifier.getEReference() != null) t.addNewReference("constrainingClassifier".clearKeyWord(), s.constrainingClassifier.getEReference());
}

@lazy
rule ModeBinding
	transform s : DSL!ModeBinding //aadl2.ModeBinding
	to t : SysMLine!ItemUsage
	extends Base{
	//ModeBinding.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ModeBinding.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ModeBinding.parentMode -> EReference : parentMode
	if (s.parentMode.getEReference() != null) t.addNewReference("parentMode".clearKeyWord(), s.parentMode.getEReference());
	//ModeBinding.derivedMode -> EReference : derivedMode
	if (s.derivedMode.getEReference() != null) t.addNewReference("derivedMode".clearKeyWord(), s.derivedMode.getEReference());
}

@lazy
rule FlowImplementation
	transform s : DSL!FlowImplementation //aadl2.FlowImplementation
	to t : SysMLine!ItemUsage
	extends Base{
	//FlowImplementation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//FlowImplementation.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//FlowImplementation.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind".clearKeyWord(), s.kind.getEAttribute());
	//FlowImplementation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//FlowImplementation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//FlowImplementation.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//FlowImplementation.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//FlowImplementation.inModeOrTransition -> EReference : inModeOrTransition
	if (s.inModeOrTransition.getEReference() != null) t.addNewReference("inModeOrTransition".clearKeyWord(), s.inModeOrTransition.getEReference());
	//FlowImplementation.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//FlowImplementation.specification -> EReference : specification
	if (s.specification.getEReference() != null) t.addNewReference("specification".clearKeyWord(), s.specification.getEReference());
	//FlowImplementation.ownedFlowSegment -> EReference : ownedFlowSegment
	if (s.ownedFlowSegment.getEReference() != null) t.addNewReference("ownedFlowSegment".clearKeyWord(), s.ownedFlowSegment.getEReference());
}

@lazy
rule FlowSegment
	transform s : DSL!FlowSegment //aadl2.FlowSegment
	to t : SysMLine!ItemUsage
	extends Base{
	//FlowSegment.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//FlowSegment.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//FlowSegment.flowElement -> EReference : flowElement
	if (s.flowElement.getEReference() != null) t.addNewReference("flowElement".clearKeyWord(), s.flowElement.getEReference());
	//FlowSegment.context -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context".clearKeyWord(), s.context.getEReference());
}

@lazy
rule Connection
	transform s : DSL!Connection //aadl2.Connection
	to t : SysMLine!ItemUsage
	extends Base{
	//Connection.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Connection.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Connection.bidirectional -> EAttribute : bidirectional
	if (s.bidirectional.getEAttribute() != null) t.addNewAttribute("bidirectional".clearKeyWord(), s.bidirectional.getEAttribute());
	//Connection.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Connection.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Connection.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//Connection.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//Connection.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//Connection.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//Connection.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//Connection.inModeOrTransition -> EReference : inModeOrTransition
	if (s.inModeOrTransition.getEReference() != null) t.addNewReference("inModeOrTransition".clearKeyWord(), s.inModeOrTransition.getEReference());
	//Connection.destination -> EReference : destination
	if (s.destination.getEReference() != null) t.addNewReference("destination".clearKeyWord(), s.destination.getEReference());
	//Connection.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source".clearKeyWord(), s.source.getEReference());
	//Connection.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
}

@lazy
rule AbstractConnectionEnd
	transform s : DSL!AbstractConnectionEnd //aadl2.AbstractConnectionEnd
	to t : SysMLine!ItemUsage
	extends Base{
}

@lazy
rule ImplementationExtension
	transform s : DSL!ImplementationExtension //aadl2.ImplementationExtension
	to t : SysMLine!ItemUsage
	extends Base{
	//ImplementationExtension.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ImplementationExtension.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ImplementationExtension.relatedElement -> EReference : relatedElement
	if (s.relatedElement.getEReference() != null) t.addNewReference("relatedElement".clearKeyWord(), s.relatedElement.getEReference());
	//ImplementationExtension.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source".clearKeyWord(), s.source.getEReference());
	//ImplementationExtension.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target".clearKeyWord(), s.target.getEReference());
	//ImplementationExtension.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//ImplementationExtension.specific -> EReference : specific
	if (s.specific.getEReference() != null) t.addNewReference("specific".clearKeyWord(), s.specific.getEReference());
	//ImplementationExtension.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
}

@lazy
rule Realization
	transform s : DSL!Realization //aadl2.Realization
	to t : SysMLine!ItemUsage
	extends Base{
	//Realization.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Realization.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Realization.relatedElement -> EReference : relatedElement
	if (s.relatedElement.getEReference() != null) t.addNewReference("relatedElement".clearKeyWord(), s.relatedElement.getEReference());
	//Realization.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source".clearKeyWord(), s.source.getEReference());
	//Realization.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target".clearKeyWord(), s.target.getEReference());
	//Realization.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//Realization.specific -> EReference : specific
	if (s.specific.getEReference() != null) t.addNewReference("specific".clearKeyWord(), s.specific.getEReference());
	//Realization.implemented -> EReference : implemented
	if (s.implemented.getEReference() != null) t.addNewReference("implemented".clearKeyWord(), s.implemented.getEReference());
}

@lazy
rule EndToEndFlow
	transform s : DSL!EndToEndFlow //aadl2.EndToEndFlow
	to t : SysMLine!ItemUsage
	extends Base{
	//EndToEndFlow.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//EndToEndFlow.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//EndToEndFlow.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//EndToEndFlow.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//EndToEndFlow.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//EndToEndFlow.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//EndToEndFlow.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//EndToEndFlow.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//EndToEndFlow.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//EndToEndFlow.inModeOrTransition -> EReference : inModeOrTransition
	if (s.inModeOrTransition.getEReference() != null) t.addNewReference("inModeOrTransition".clearKeyWord(), s.inModeOrTransition.getEReference());
	//EndToEndFlow.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//EndToEndFlow.ownedEndToEndFlowSegment -> EReference : ownedEndToEndFlowSegment
	if (s.ownedEndToEndFlowSegment.getEReference() != null) t.addNewReference("ownedEndToEndFlowSegment".clearKeyWord(), s.ownedEndToEndFlowSegment.getEReference());
}

@lazy
rule EndToEndFlowSegment
	transform s : DSL!EndToEndFlowSegment //aadl2.EndToEndFlowSegment
	to t : SysMLine!ItemUsage
	extends Base{
	//EndToEndFlowSegment.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//EndToEndFlowSegment.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//EndToEndFlowSegment.flowElement -> EReference : flowElement
	if (s.flowElement.getEReference() != null) t.addNewReference("flowElement".clearKeyWord(), s.flowElement.getEReference());
	//EndToEndFlowSegment.context -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context".clearKeyWord(), s.context.getEReference());
}

@lazy
rule AbstractSubcomponent
	transform s : DSL!AbstractSubcomponent //aadl2.AbstractSubcomponent
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractSubcomponent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//AbstractSubcomponent.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//AbstractSubcomponent.allModes -> EAttribute : allModes
	if (s.allModes.getEAttribute() != null) t.addNewAttribute("allModes".clearKeyWord(), s.allModes.getEAttribute());
	//AbstractSubcomponent.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//AbstractSubcomponent.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//AbstractSubcomponent.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//AbstractSubcomponent.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//AbstractSubcomponent.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//AbstractSubcomponent.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//AbstractSubcomponent.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//AbstractSubcomponent.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//AbstractSubcomponent.subcomponentType -> EReference : subcomponentType
	if (s.subcomponentType.getEReference() != null) t.addNewReference("subcomponentType".clearKeyWord(), s.subcomponentType.getEReference());
	//AbstractSubcomponent.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//AbstractSubcomponent.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//AbstractSubcomponent.ownedModeBinding -> EReference : ownedModeBinding
	if (s.ownedModeBinding.getEReference() != null) t.addNewReference("ownedModeBinding".clearKeyWord(), s.ownedModeBinding.getEReference());
	//AbstractSubcomponent.implementationReference -> EReference : implementationReference
	if (s.implementationReference.getEReference() != null) t.addNewReference("implementationReference".clearKeyWord(), s.implementationReference.getEReference());
	//AbstractSubcomponent.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//AbstractSubcomponent.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//AbstractSubcomponent.abstractSubcomponentType -> EReference : abstractSubcomponentType
	if (s.abstractSubcomponentType.getEReference() != null) t.addNewReference("abstractSubcomponentType".clearKeyWord(), s.abstractSubcomponentType.getEReference());
}

@lazy
rule Abstract
	transform s : DSL!Abstract //aadl2.Abstract
	to t : SysMLine!ItemUsage
	extends Base{
	//Abstract.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Abstract.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Abstract.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Abstract.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Abstract.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule AbstractSubcomponentType
	transform s : DSL!AbstractSubcomponentType //aadl2.AbstractSubcomponentType
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractSubcomponentType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//AbstractSubcomponentType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//AbstractSubcomponentType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//AbstractSubcomponentType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//AbstractSubcomponentType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule AccessConnection
	transform s : DSL!AccessConnection //aadl2.AccessConnection
	to t : SysMLine!ItemUsage
	extends Base{
	//AccessConnection.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//AccessConnection.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//AccessConnection.bidirectional -> EAttribute : bidirectional
	if (s.bidirectional.getEAttribute() != null) t.addNewAttribute("bidirectional".clearKeyWord(), s.bidirectional.getEAttribute());
	//AccessConnection.accessCategory -> EAttribute : accessCategory
	if (s.accessCategory.getEAttribute() != null) t.addNewAttribute("accessCategory".clearKeyWord(), s.accessCategory.getEAttribute());
	//AccessConnection.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//AccessConnection.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//AccessConnection.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//AccessConnection.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//AccessConnection.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//AccessConnection.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//AccessConnection.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//AccessConnection.inModeOrTransition -> EReference : inModeOrTransition
	if (s.inModeOrTransition.getEReference() != null) t.addNewReference("inModeOrTransition".clearKeyWord(), s.inModeOrTransition.getEReference());
	//AccessConnection.destination -> EReference : destination
	if (s.destination.getEReference() != null) t.addNewReference("destination".clearKeyWord(), s.destination.getEReference());
	//AccessConnection.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source".clearKeyWord(), s.source.getEReference());
	//AccessConnection.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
}

@lazy
rule ParameterConnection
	transform s : DSL!ParameterConnection //aadl2.ParameterConnection
	to t : SysMLine!ItemUsage
	extends Base{
	//ParameterConnection.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ParameterConnection.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ParameterConnection.bidirectional -> EAttribute : bidirectional
	if (s.bidirectional.getEAttribute() != null) t.addNewAttribute("bidirectional".clearKeyWord(), s.bidirectional.getEAttribute());
	//ParameterConnection.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ParameterConnection.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ParameterConnection.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ParameterConnection.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//ParameterConnection.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//ParameterConnection.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//ParameterConnection.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//ParameterConnection.inModeOrTransition -> EReference : inModeOrTransition
	if (s.inModeOrTransition.getEReference() != null) t.addNewReference("inModeOrTransition".clearKeyWord(), s.inModeOrTransition.getEReference());
	//ParameterConnection.destination -> EReference : destination
	if (s.destination.getEReference() != null) t.addNewReference("destination".clearKeyWord(), s.destination.getEReference());
	//ParameterConnection.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source".clearKeyWord(), s.source.getEReference());
	//ParameterConnection.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
}

@lazy
rule PortConnection
	transform s : DSL!PortConnection //aadl2.PortConnection
	to t : SysMLine!ItemUsage
	extends Base{
	//PortConnection.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//PortConnection.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//PortConnection.bidirectional -> EAttribute : bidirectional
	if (s.bidirectional.getEAttribute() != null) t.addNewAttribute("bidirectional".clearKeyWord(), s.bidirectional.getEAttribute());
	//PortConnection.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//PortConnection.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//PortConnection.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//PortConnection.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//PortConnection.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//PortConnection.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//PortConnection.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//PortConnection.inModeOrTransition -> EReference : inModeOrTransition
	if (s.inModeOrTransition.getEReference() != null) t.addNewReference("inModeOrTransition".clearKeyWord(), s.inModeOrTransition.getEReference());
	//PortConnection.destination -> EReference : destination
	if (s.destination.getEReference() != null) t.addNewReference("destination".clearKeyWord(), s.destination.getEReference());
	//PortConnection.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source".clearKeyWord(), s.source.getEReference());
	//PortConnection.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
}

@lazy
rule FeatureConnection
	transform s : DSL!FeatureConnection //aadl2.FeatureConnection
	to t : SysMLine!ItemUsage
	extends Base{
	//FeatureConnection.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//FeatureConnection.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//FeatureConnection.bidirectional -> EAttribute : bidirectional
	if (s.bidirectional.getEAttribute() != null) t.addNewAttribute("bidirectional".clearKeyWord(), s.bidirectional.getEAttribute());
	//FeatureConnection.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//FeatureConnection.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//FeatureConnection.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//FeatureConnection.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//FeatureConnection.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//FeatureConnection.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//FeatureConnection.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//FeatureConnection.inModeOrTransition -> EReference : inModeOrTransition
	if (s.inModeOrTransition.getEReference() != null) t.addNewReference("inModeOrTransition".clearKeyWord(), s.inModeOrTransition.getEReference());
	//FeatureConnection.destination -> EReference : destination
	if (s.destination.getEReference() != null) t.addNewReference("destination".clearKeyWord(), s.destination.getEReference());
	//FeatureConnection.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source".clearKeyWord(), s.source.getEReference());
	//FeatureConnection.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
}

@lazy
rule FeatureGroupConnection
	transform s : DSL!FeatureGroupConnection //aadl2.FeatureGroupConnection
	to t : SysMLine!ItemUsage
	extends Base{
	//FeatureGroupConnection.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//FeatureGroupConnection.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//FeatureGroupConnection.bidirectional -> EAttribute : bidirectional
	if (s.bidirectional.getEAttribute() != null) t.addNewAttribute("bidirectional".clearKeyWord(), s.bidirectional.getEAttribute());
	//FeatureGroupConnection.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//FeatureGroupConnection.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//FeatureGroupConnection.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//FeatureGroupConnection.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//FeatureGroupConnection.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//FeatureGroupConnection.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//FeatureGroupConnection.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//FeatureGroupConnection.inModeOrTransition -> EReference : inModeOrTransition
	if (s.inModeOrTransition.getEReference() != null) t.addNewReference("inModeOrTransition".clearKeyWord(), s.inModeOrTransition.getEReference());
	//FeatureGroupConnection.destination -> EReference : destination
	if (s.destination.getEReference() != null) t.addNewReference("destination".clearKeyWord(), s.destination.getEReference());
	//FeatureGroupConnection.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source".clearKeyWord(), s.source.getEReference());
	//FeatureGroupConnection.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
}

@lazy
rule ConnectedElement
	transform s : DSL!ConnectedElement //aadl2.ConnectedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ConnectedElement.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ConnectedElement.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ConnectedElement.context -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context".clearKeyWord(), s.context.getEReference());
	//ConnectedElement.connectionEnd -> EReference : connectionEnd
	if (s.connectionEnd.getEReference() != null) t.addNewReference("connectionEnd".clearKeyWord(), s.connectionEnd.getEReference());
}

@lazy
rule ElementName
	transform s : DSL!ElementName //aadl2.ElementName
	to t : SysMLine!ItemUsage
	extends Base{
	//ElementName.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ElementName.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ElementName.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind".clearKeyWord(), s.kind.getEAttribute());
	//ElementName.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ElementName.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ElementName.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule AnnexLibrary
	transform s : DSL!AnnexLibrary //aadl2.AnnexLibrary
	to t : SysMLine!ItemUsage
	extends Base{
	//AnnexLibrary.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//AnnexLibrary.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//AnnexLibrary.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//AnnexLibrary.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//AnnexLibrary.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule DefaultAnnexLibrary
	transform s : DSL!DefaultAnnexLibrary //aadl2.DefaultAnnexLibrary
	to t : SysMLine!ItemUsage
	extends Base{
	//DefaultAnnexLibrary.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//DefaultAnnexLibrary.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//DefaultAnnexLibrary.sourceText -> EAttribute : sourceText
	if (s.sourceText.getEAttribute() != null) t.addNewAttribute("sourceText".clearKeyWord(), s.sourceText.getEAttribute());
	//DefaultAnnexLibrary.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//DefaultAnnexLibrary.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//DefaultAnnexLibrary.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule DefaultAnnexSubclause
	transform s : DSL!DefaultAnnexSubclause //aadl2.DefaultAnnexSubclause
	to t : SysMLine!ItemUsage
	extends Base{
	//DefaultAnnexSubclause.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//DefaultAnnexSubclause.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//DefaultAnnexSubclause.sourceText -> EAttribute : sourceText
	if (s.sourceText.getEAttribute() != null) t.addNewAttribute("sourceText".clearKeyWord(), s.sourceText.getEAttribute());
	//DefaultAnnexSubclause.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//DefaultAnnexSubclause.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//DefaultAnnexSubclause.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//DefaultAnnexSubclause.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
}

@lazy
rule TriggerPort
	transform s : DSL!TriggerPort //aadl2.TriggerPort
	to t : SysMLine!ItemUsage
	extends Base{
	//TriggerPort.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//TriggerPort.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//TriggerPort.context -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context".clearKeyWord(), s.context.getEReference());
	//TriggerPort.port -> EReference : port
	if (s.port.getEReference() != null) t.addNewReference("port".clearKeyWord(), s.port.getEReference());
}

@lazy
rule PublicPackageSection
	transform s : DSL!PublicPackageSection //aadl2.PublicPackageSection
	to t : SysMLine!ItemUsage
	extends Base{
	//PublicPackageSection.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//PublicPackageSection.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//PublicPackageSection.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//PublicPackageSection.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//PublicPackageSection.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//PublicPackageSection.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//PublicPackageSection.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//PublicPackageSection.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//PublicPackageSection.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//PublicPackageSection.ownedPackageRename -> EReference : ownedPackageRename
	if (s.ownedPackageRename.getEReference() != null) t.addNewReference("ownedPackageRename".clearKeyWord(), s.ownedPackageRename.getEReference());
	//PublicPackageSection.ownedComponentTypeRename -> EReference : ownedComponentTypeRename
	if (s.ownedComponentTypeRename.getEReference() != null) t.addNewReference("ownedComponentTypeRename".clearKeyWord(), s.ownedComponentTypeRename.getEReference());
	//PublicPackageSection.ownedClassifier -> EReference : ownedClassifier
	if (s.ownedClassifier.getEReference() != null) t.addNewReference("ownedClassifier".clearKeyWord(), s.ownedClassifier.getEReference());
	//PublicPackageSection.ownedFeatureGroupTypeRename -> EReference : ownedFeatureGroupTypeRename
	if (s.ownedFeatureGroupTypeRename.getEReference() != null) t.addNewReference("ownedFeatureGroupTypeRename".clearKeyWord(), s.ownedFeatureGroupTypeRename.getEReference());
	//PublicPackageSection.ownedAnnexLibrary -> EReference : ownedAnnexLibrary
	if (s.ownedAnnexLibrary.getEReference() != null) t.addNewReference("ownedAnnexLibrary".clearKeyWord(), s.ownedAnnexLibrary.getEReference());
	//PublicPackageSection.importedUnit -> EReference : importedUnit
	if (s.importedUnit.getEReference() != null) t.addNewReference("importedUnit".clearKeyWord(), s.importedUnit.getEReference());
	//PublicPackageSection.privateSection -> EReference : privateSection
	if (s.privateSection.getEReference() != null) t.addNewReference("privateSection".clearKeyWord(), s.privateSection.getEReference());
}

@lazy
rule PackageSection
	transform s : DSL!PackageSection //aadl2.PackageSection
	to t : SysMLine!ItemUsage
	extends Base{
	//PackageSection.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//PackageSection.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//PackageSection.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//PackageSection.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//PackageSection.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//PackageSection.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//PackageSection.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//PackageSection.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//PackageSection.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//PackageSection.ownedPackageRename -> EReference : ownedPackageRename
	if (s.ownedPackageRename.getEReference() != null) t.addNewReference("ownedPackageRename".clearKeyWord(), s.ownedPackageRename.getEReference());
	//PackageSection.ownedComponentTypeRename -> EReference : ownedComponentTypeRename
	if (s.ownedComponentTypeRename.getEReference() != null) t.addNewReference("ownedComponentTypeRename".clearKeyWord(), s.ownedComponentTypeRename.getEReference());
	//PackageSection.ownedClassifier -> EReference : ownedClassifier
	if (s.ownedClassifier.getEReference() != null) t.addNewReference("ownedClassifier".clearKeyWord(), s.ownedClassifier.getEReference());
	//PackageSection.ownedFeatureGroupTypeRename -> EReference : ownedFeatureGroupTypeRename
	if (s.ownedFeatureGroupTypeRename.getEReference() != null) t.addNewReference("ownedFeatureGroupTypeRename".clearKeyWord(), s.ownedFeatureGroupTypeRename.getEReference());
	//PackageSection.ownedAnnexLibrary -> EReference : ownedAnnexLibrary
	if (s.ownedAnnexLibrary.getEReference() != null) t.addNewReference("ownedAnnexLibrary".clearKeyWord(), s.ownedAnnexLibrary.getEReference());
	//PackageSection.importedUnit -> EReference : importedUnit
	if (s.importedUnit.getEReference() != null) t.addNewReference("importedUnit".clearKeyWord(), s.importedUnit.getEReference());
}

@lazy
rule PackageRename
	transform s : DSL!PackageRename //aadl2.PackageRename
	to t : SysMLine!ItemUsage
	extends Base{
	//PackageRename.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//PackageRename.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//PackageRename.renameAll -> EAttribute : renameAll
	if (s.renameAll.getEAttribute() != null) t.addNewAttribute("renameAll".clearKeyWord(), s.renameAll.getEAttribute());
	//PackageRename.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//PackageRename.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//PackageRename.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//PackageRename.renamedPackage -> EReference : renamedPackage
	if (s.renamedPackage.getEReference() != null) t.addNewReference("renamedPackage".clearKeyWord(), s.renamedPackage.getEReference());
}

@lazy
rule AadlPackage
	transform s : DSL!AadlPackage //aadl2.AadlPackage
	to t : SysMLine!ItemUsage
	extends Base{
	//AadlPackage.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//AadlPackage.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//AadlPackage.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//AadlPackage.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//AadlPackage.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//AadlPackage.ownedPublicSection -> EReference : ownedPublicSection
	if (s.ownedPublicSection.getEReference() != null) t.addNewReference("ownedPublicSection".clearKeyWord(), s.ownedPublicSection.getEReference());
	//AadlPackage.ownedPrivateSection -> EReference : ownedPrivateSection
	if (s.ownedPrivateSection.getEReference() != null) t.addNewReference("ownedPrivateSection".clearKeyWord(), s.ownedPrivateSection.getEReference());
	//AadlPackage.publicSection -> EReference : publicSection
	if (s.publicSection.getEReference() != null) t.addNewReference("publicSection".clearKeyWord(), s.publicSection.getEReference());
	//AadlPackage.privateSection -> EReference : privateSection
	if (s.privateSection.getEReference() != null) t.addNewReference("privateSection".clearKeyWord(), s.privateSection.getEReference());
}

@lazy
rule ModelUnit
	transform s : DSL!ModelUnit //aadl2.ModelUnit
	to t : SysMLine!ItemUsage
	extends Base{
	//ModelUnit.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ModelUnit.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ModelUnit.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ModelUnit.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ModelUnit.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule PrivatePackageSection
	transform s : DSL!PrivatePackageSection //aadl2.PrivatePackageSection
	to t : SysMLine!ItemUsage
	extends Base{
	//PrivatePackageSection.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//PrivatePackageSection.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//PrivatePackageSection.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//PrivatePackageSection.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//PrivatePackageSection.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//PrivatePackageSection.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//PrivatePackageSection.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//PrivatePackageSection.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//PrivatePackageSection.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//PrivatePackageSection.ownedPackageRename -> EReference : ownedPackageRename
	if (s.ownedPackageRename.getEReference() != null) t.addNewReference("ownedPackageRename".clearKeyWord(), s.ownedPackageRename.getEReference());
	//PrivatePackageSection.ownedComponentTypeRename -> EReference : ownedComponentTypeRename
	if (s.ownedComponentTypeRename.getEReference() != null) t.addNewReference("ownedComponentTypeRename".clearKeyWord(), s.ownedComponentTypeRename.getEReference());
	//PrivatePackageSection.ownedClassifier -> EReference : ownedClassifier
	if (s.ownedClassifier.getEReference() != null) t.addNewReference("ownedClassifier".clearKeyWord(), s.ownedClassifier.getEReference());
	//PrivatePackageSection.ownedFeatureGroupTypeRename -> EReference : ownedFeatureGroupTypeRename
	if (s.ownedFeatureGroupTypeRename.getEReference() != null) t.addNewReference("ownedFeatureGroupTypeRename".clearKeyWord(), s.ownedFeatureGroupTypeRename.getEReference());
	//PrivatePackageSection.ownedAnnexLibrary -> EReference : ownedAnnexLibrary
	if (s.ownedAnnexLibrary.getEReference() != null) t.addNewReference("ownedAnnexLibrary".clearKeyWord(), s.ownedAnnexLibrary.getEReference());
	//PrivatePackageSection.importedUnit -> EReference : importedUnit
	if (s.importedUnit.getEReference() != null) t.addNewReference("importedUnit".clearKeyWord(), s.importedUnit.getEReference());
	//PrivatePackageSection.publicSection -> EReference : publicSection
	if (s.publicSection.getEReference() != null) t.addNewReference("publicSection".clearKeyWord(), s.publicSection.getEReference());
}

@lazy
rule ComponentTypeRename
	transform s : DSL!ComponentTypeRename //aadl2.ComponentTypeRename
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentTypeRename.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ComponentTypeRename.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ComponentTypeRename.category -> EAttribute : category
	if (s.category.getEAttribute() != null) t.addNewAttribute("category".clearKeyWord(), s.category.getEAttribute());
	//ComponentTypeRename.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ComponentTypeRename.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ComponentTypeRename.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ComponentTypeRename.renamedComponentType -> EReference : renamedComponentType
	if (s.renamedComponentType.getEReference() != null) t.addNewReference("renamedComponentType".clearKeyWord(), s.renamedComponentType.getEReference());
}

@lazy
rule FeatureGroupTypeRename
	transform s : DSL!FeatureGroupTypeRename //aadl2.FeatureGroupTypeRename
	to t : SysMLine!ItemUsage
	extends Base{
	//FeatureGroupTypeRename.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//FeatureGroupTypeRename.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//FeatureGroupTypeRename.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//FeatureGroupTypeRename.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//FeatureGroupTypeRename.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//FeatureGroupTypeRename.renamedFeatureGroupType -> EReference : renamedFeatureGroupType
	if (s.renamedFeatureGroupType.getEReference() != null) t.addNewReference("renamedFeatureGroupType".clearKeyWord(), s.renamedFeatureGroupType.getEReference());
}

@lazy
rule ComponentPrototypeBinding
	transform s : DSL!ComponentPrototypeBinding //aadl2.ComponentPrototypeBinding
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentPrototypeBinding.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ComponentPrototypeBinding.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ComponentPrototypeBinding.formal -> EReference : formal
	if (s.formal.getEReference() != null) t.addNewReference("formal".clearKeyWord(), s.formal.getEReference());
	//ComponentPrototypeBinding.actual -> EReference : actual
	if (s.actual.getEReference() != null) t.addNewReference("actual".clearKeyWord(), s.actual.getEReference());
}

@lazy
rule ComponentPrototypeActual
	transform s : DSL!ComponentPrototypeActual //aadl2.ComponentPrototypeActual
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentPrototypeActual.category -> EAttribute : category
	if (s.category.getEAttribute() != null) t.addNewAttribute("category".clearKeyWord(), s.category.getEAttribute());
	//ComponentPrototypeActual.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ComponentPrototypeActual.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ComponentPrototypeActual.binding -> EReference : binding
	if (s.binding.getEReference() != null) t.addNewReference("binding".clearKeyWord(), s.binding.getEReference());
	//ComponentPrototypeActual.subcomponentType -> EReference : subcomponentType
	if (s.subcomponentType.getEReference() != null) t.addNewReference("subcomponentType".clearKeyWord(), s.subcomponentType.getEReference());
}

@lazy
rule FeatureGroupPrototypeBinding
	transform s : DSL!FeatureGroupPrototypeBinding //aadl2.FeatureGroupPrototypeBinding
	to t : SysMLine!ItemUsage
	extends Base{
	//FeatureGroupPrototypeBinding.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//FeatureGroupPrototypeBinding.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//FeatureGroupPrototypeBinding.formal -> EReference : formal
	if (s.formal.getEReference() != null) t.addNewReference("formal".clearKeyWord(), s.formal.getEReference());
	//FeatureGroupPrototypeBinding.actual -> EReference : actual
	if (s.actual.getEReference() != null) t.addNewReference("actual".clearKeyWord(), s.actual.getEReference());
}

@lazy
rule FeatureGroupPrototypeActual
	transform s : DSL!FeatureGroupPrototypeActual //aadl2.FeatureGroupPrototypeActual
	to t : SysMLine!ItemUsage
	extends Base{
	//FeatureGroupPrototypeActual.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//FeatureGroupPrototypeActual.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//FeatureGroupPrototypeActual.binding -> EReference : binding
	if (s.binding.getEReference() != null) t.addNewReference("binding".clearKeyWord(), s.binding.getEReference());
	//FeatureGroupPrototypeActual.featureType -> EReference : featureType
	if (s.featureType.getEReference() != null) t.addNewReference("featureType".clearKeyWord(), s.featureType.getEReference());
}

@lazy
rule FeaturePrototypeActual
	transform s : DSL!FeaturePrototypeActual //aadl2.FeaturePrototypeActual
	to t : SysMLine!ItemUsage
	extends Base{
	//FeaturePrototypeActual.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//FeaturePrototypeActual.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
}

@lazy
rule FeaturePrototype
	transform s : DSL!FeaturePrototype //aadl2.FeaturePrototype
	to t : SysMLine!ItemUsage
	extends Base{
	//FeaturePrototype.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//FeaturePrototype.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//FeaturePrototype.direction -> EAttribute : direction
	if (s.direction.getEAttribute() != null) t.addNewAttribute("direction".clearKeyWord(), s.direction.getEAttribute());
	//FeaturePrototype.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//FeaturePrototype.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//FeaturePrototype.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//FeaturePrototype.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//FeaturePrototype.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//FeaturePrototype.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//FeaturePrototype.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//FeaturePrototype.constrainingClassifier -> EReference : constrainingClassifier
	if (s.constrainingClassifier.getEReference() != null) t.addNewReference("constrainingClassifier".clearKeyWord(), s.constrainingClassifier.getEReference());
}

@lazy
rule FeaturePrototypeBinding
	transform s : DSL!FeaturePrototypeBinding //aadl2.FeaturePrototypeBinding
	to t : SysMLine!ItemUsage
	extends Base{
	//FeaturePrototypeBinding.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//FeaturePrototypeBinding.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//FeaturePrototypeBinding.formal -> EReference : formal
	if (s.formal.getEReference() != null) t.addNewReference("formal".clearKeyWord(), s.formal.getEReference());
	//FeaturePrototypeBinding.actual -> EReference : actual
	if (s.actual.getEReference() != null) t.addNewReference("actual".clearKeyWord(), s.actual.getEReference());
}

@lazy
rule AccessSpecification
	transform s : DSL!AccessSpecification //aadl2.AccessSpecification
	to t : SysMLine!ItemUsage
	extends Base{
	//AccessSpecification.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind".clearKeyWord(), s.kind.getEAttribute());
	//AccessSpecification.category -> EAttribute : category
	if (s.category.getEAttribute() != null) t.addNewAttribute("category".clearKeyWord(), s.category.getEAttribute());
	//AccessSpecification.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//AccessSpecification.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//AccessSpecification.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
}

@lazy
rule PortSpecification
	transform s : DSL!PortSpecification //aadl2.PortSpecification
	to t : SysMLine!ItemUsage
	extends Base{
	//PortSpecification.direction -> EAttribute : direction
	if (s.direction.getEAttribute() != null) t.addNewAttribute("direction".clearKeyWord(), s.direction.getEAttribute());
	//PortSpecification.category -> EAttribute : category
	if (s.category.getEAttribute() != null) t.addNewAttribute("category".clearKeyWord(), s.category.getEAttribute());
	//PortSpecification.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//PortSpecification.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//PortSpecification.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
}

@lazy
rule FeaturePrototypeReference
	transform s : DSL!FeaturePrototypeReference //aadl2.FeaturePrototypeReference
	to t : SysMLine!ItemUsage
	extends Base{
	//FeaturePrototypeReference.direction -> EAttribute : direction
	if (s.direction.getEAttribute() != null) t.addNewAttribute("direction".clearKeyWord(), s.direction.getEAttribute());
	//FeaturePrototypeReference.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//FeaturePrototypeReference.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//FeaturePrototypeReference.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
}

@lazy
rule SubprogramCallSequence
	transform s : DSL!SubprogramCallSequence //aadl2.SubprogramCallSequence
	to t : SysMLine!ItemUsage
	extends Base{
	//SubprogramCallSequence.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SubprogramCallSequence.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SubprogramCallSequence.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SubprogramCallSequence.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SubprogramCallSequence.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//SubprogramCallSequence.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//SubprogramCallSequence.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//SubprogramCallSequence.ownedCallSpecification -> EReference : ownedCallSpecification
	if (s.ownedCallSpecification.getEReference() != null) t.addNewReference("ownedCallSpecification".clearKeyWord(), s.ownedCallSpecification.getEReference());
}

@lazy
rule CallSpecification
	transform s : DSL!CallSpecification //aadl2.CallSpecification
	to t : SysMLine!ItemUsage
	extends Base{
	//CallSpecification.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//CallSpecification.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//CallSpecification.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//CallSpecification.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//CallSpecification.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//CallSpecification.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
}

@lazy
rule ProcessorCall
	transform s : DSL!ProcessorCall //aadl2.ProcessorCall
	to t : SysMLine!ItemUsage
	extends Base{
	//ProcessorCall.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ProcessorCall.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ProcessorCall.subprogramAccessName -> EAttribute : subprogramAccessName
	if (s.subprogramAccessName.getEAttribute() != null) t.addNewAttribute("subprogramAccessName".clearKeyWord(), s.subprogramAccessName.getEAttribute());
	//ProcessorCall.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ProcessorCall.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ProcessorCall.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ProcessorCall.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
}

@lazy
rule BehavioredImplementation
	transform s : DSL!BehavioredImplementation //aadl2.BehavioredImplementation
	to t : SysMLine!ItemUsage
	extends Base{
	//BehavioredImplementation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//BehavioredImplementation.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//BehavioredImplementation.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//BehavioredImplementation.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//BehavioredImplementation.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//BehavioredImplementation.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//BehavioredImplementation.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//BehavioredImplementation.noSubcomponents -> EAttribute : noSubcomponents
	if (s.noSubcomponents.getEAttribute() != null) t.addNewAttribute("noSubcomponents".clearKeyWord(), s.noSubcomponents.getEAttribute());
	//BehavioredImplementation.noConnections -> EAttribute : noConnections
	if (s.noConnections.getEAttribute() != null) t.addNewAttribute("noConnections".clearKeyWord(), s.noConnections.getEAttribute());
	//BehavioredImplementation.noCalls -> EAttribute : noCalls
	if (s.noCalls.getEAttribute() != null) t.addNewAttribute("noCalls".clearKeyWord(), s.noCalls.getEAttribute());
	//BehavioredImplementation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//BehavioredImplementation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//BehavioredImplementation.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//BehavioredImplementation.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//BehavioredImplementation.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//BehavioredImplementation.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//BehavioredImplementation.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//BehavioredImplementation.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//BehavioredImplementation.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//BehavioredImplementation.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//BehavioredImplementation.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//BehavioredImplementation.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//BehavioredImplementation.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//BehavioredImplementation.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//BehavioredImplementation.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
	//BehavioredImplementation.ownedSubcomponent -> EReference : ownedSubcomponent
	if (s.ownedSubcomponent.getEReference() != null) t.addNewReference("ownedSubcomponent".clearKeyWord(), s.ownedSubcomponent.getEReference());
	//BehavioredImplementation.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//BehavioredImplementation.ownedFlowImplementation -> EReference : ownedFlowImplementation
	if (s.ownedFlowImplementation.getEReference() != null) t.addNewReference("ownedFlowImplementation".clearKeyWord(), s.ownedFlowImplementation.getEReference());
	//BehavioredImplementation.ownedConnection -> EReference : ownedConnection
	if (s.ownedConnection.getEReference() != null) t.addNewReference("ownedConnection".clearKeyWord(), s.ownedConnection.getEReference());
	//BehavioredImplementation.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//BehavioredImplementation.ownedRealization -> EReference : ownedRealization
	if (s.ownedRealization.getEReference() != null) t.addNewReference("ownedRealization".clearKeyWord(), s.ownedRealization.getEReference());
	//BehavioredImplementation.ownedEndToEndFlow -> EReference : ownedEndToEndFlow
	if (s.ownedEndToEndFlow.getEReference() != null) t.addNewReference("ownedEndToEndFlow".clearKeyWord(), s.ownedEndToEndFlow.getEReference());
	//BehavioredImplementation.ownedAbstractSubcomponent -> EReference : ownedAbstractSubcomponent
	if (s.ownedAbstractSubcomponent.getEReference() != null) t.addNewReference("ownedAbstractSubcomponent".clearKeyWord(), s.ownedAbstractSubcomponent.getEReference());
	//BehavioredImplementation.ownedAccessConnection -> EReference : ownedAccessConnection
	if (s.ownedAccessConnection.getEReference() != null) t.addNewReference("ownedAccessConnection".clearKeyWord(), s.ownedAccessConnection.getEReference());
	//BehavioredImplementation.ownedParameterConnection -> EReference : ownedParameterConnection
	if (s.ownedParameterConnection.getEReference() != null) t.addNewReference("ownedParameterConnection".clearKeyWord(), s.ownedParameterConnection.getEReference());
	//BehavioredImplementation.ownedPortConnection -> EReference : ownedPortConnection
	if (s.ownedPortConnection.getEReference() != null) t.addNewReference("ownedPortConnection".clearKeyWord(), s.ownedPortConnection.getEReference());
	//BehavioredImplementation.ownedFeatureConnection -> EReference : ownedFeatureConnection
	if (s.ownedFeatureConnection.getEReference() != null) t.addNewReference("ownedFeatureConnection".clearKeyWord(), s.ownedFeatureConnection.getEReference());
	//BehavioredImplementation.ownedFeatureGroupConnection -> EReference : ownedFeatureGroupConnection
	if (s.ownedFeatureGroupConnection.getEReference() != null) t.addNewReference("ownedFeatureGroupConnection".clearKeyWord(), s.ownedFeatureGroupConnection.getEReference());
	//BehavioredImplementation.callSpecification -> EReference : callSpecification
	if (s.callSpecification.getEReference() != null) t.addNewReference("callSpecification".clearKeyWord(), s.callSpecification.getEReference());
	//BehavioredImplementation.ownedSubprogramCallSequence -> EReference : ownedSubprogramCallSequence
	if (s.ownedSubprogramCallSequence.getEReference() != null) t.addNewReference("ownedSubprogramCallSequence".clearKeyWord(), s.ownedSubprogramCallSequence.getEReference());
}

@lazy
rule SubprogramCall
	transform s : DSL!SubprogramCall //aadl2.SubprogramCall
	to t : SysMLine!ItemUsage
	extends Base{
	//SubprogramCall.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SubprogramCall.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SubprogramCall.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SubprogramCall.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SubprogramCall.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//SubprogramCall.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//SubprogramCall.calledSubprogram -> EReference : calledSubprogram
	if (s.calledSubprogram.getEReference() != null) t.addNewReference("calledSubprogram".clearKeyWord(), s.calledSubprogram.getEReference());
	//SubprogramCall.context -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context".clearKeyWord(), s.context.getEReference());
}

@lazy
rule AbstractType
	transform s : DSL!AbstractType //aadl2.AbstractType
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//AbstractType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//AbstractType.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//AbstractType.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//AbstractType.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//AbstractType.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//AbstractType.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//AbstractType.noFeatures -> EAttribute : noFeatures
	if (s.noFeatures.getEAttribute() != null) t.addNewAttribute("noFeatures".clearKeyWord(), s.noFeatures.getEAttribute());
	//AbstractType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//AbstractType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//AbstractType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//AbstractType.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//AbstractType.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//AbstractType.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//AbstractType.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//AbstractType.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//AbstractType.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//AbstractType.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//AbstractType.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//AbstractType.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//AbstractType.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//AbstractType.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//AbstractType.ownedFeature -> EReference : ownedFeature
	if (s.ownedFeature.getEReference() != null) t.addNewReference("ownedFeature".clearKeyWord(), s.ownedFeature.getEReference());
	//AbstractType.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//AbstractType.ownedFlowSpecification -> EReference : ownedFlowSpecification
	if (s.ownedFlowSpecification.getEReference() != null) t.addNewReference("ownedFlowSpecification".clearKeyWord(), s.ownedFlowSpecification.getEReference());
	//AbstractType.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//AbstractType.ownedFeatureGroup -> EReference : ownedFeatureGroup
	if (s.ownedFeatureGroup.getEReference() != null) t.addNewReference("ownedFeatureGroup".clearKeyWord(), s.ownedFeatureGroup.getEReference());
	//AbstractType.ownedAbstractFeature -> EReference : ownedAbstractFeature
	if (s.ownedAbstractFeature.getEReference() != null) t.addNewReference("ownedAbstractFeature".clearKeyWord(), s.ownedAbstractFeature.getEReference());
	//AbstractType.ownedBusAccess -> EReference : ownedBusAccess
	if (s.ownedBusAccess.getEReference() != null) t.addNewReference("ownedBusAccess".clearKeyWord(), s.ownedBusAccess.getEReference());
	//AbstractType.ownedDataAccess -> EReference : ownedDataAccess
	if (s.ownedDataAccess.getEReference() != null) t.addNewReference("ownedDataAccess".clearKeyWord(), s.ownedDataAccess.getEReference());
	//AbstractType.ownedSubprogramAccess -> EReference : ownedSubprogramAccess
	if (s.ownedSubprogramAccess.getEReference() != null) t.addNewReference("ownedSubprogramAccess".clearKeyWord(), s.ownedSubprogramAccess.getEReference());
	//AbstractType.ownedDataPort -> EReference : ownedDataPort
	if (s.ownedDataPort.getEReference() != null) t.addNewReference("ownedDataPort".clearKeyWord(), s.ownedDataPort.getEReference());
	//AbstractType.ownedEventPort -> EReference : ownedEventPort
	if (s.ownedEventPort.getEReference() != null) t.addNewReference("ownedEventPort".clearKeyWord(), s.ownedEventPort.getEReference());
	//AbstractType.ownedEventDataPort -> EReference : ownedEventDataPort
	if (s.ownedEventDataPort.getEReference() != null) t.addNewReference("ownedEventDataPort".clearKeyWord(), s.ownedEventDataPort.getEReference());
	//AbstractType.ownedSubprogramGroupAccess -> EReference : ownedSubprogramGroupAccess
	if (s.ownedSubprogramGroupAccess.getEReference() != null) t.addNewReference("ownedSubprogramGroupAccess".clearKeyWord(), s.ownedSubprogramGroupAccess.getEReference());
}

@lazy
rule AbstractClassifier
	transform s : DSL!AbstractClassifier //aadl2.AbstractClassifier
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractClassifier.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//AbstractClassifier.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//AbstractClassifier.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//AbstractClassifier.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//AbstractClassifier.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//AbstractClassifier.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//AbstractClassifier.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//AbstractClassifier.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//AbstractClassifier.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//AbstractClassifier.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//AbstractClassifier.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//AbstractClassifier.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//AbstractClassifier.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//AbstractClassifier.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//AbstractClassifier.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//AbstractClassifier.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//AbstractClassifier.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//AbstractClassifier.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//AbstractClassifier.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//AbstractClassifier.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//AbstractClassifier.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
}

@lazy
rule VirtualProcessorSubcomponentType
	transform s : DSL!VirtualProcessorSubcomponentType //aadl2.VirtualProcessorSubcomponentType
	to t : SysMLine!ItemUsage
	extends Base{
	//VirtualProcessorSubcomponentType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//VirtualProcessorSubcomponentType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//VirtualProcessorSubcomponentType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//VirtualProcessorSubcomponentType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//VirtualProcessorSubcomponentType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule VirtualProcessor
	transform s : DSL!VirtualProcessor //aadl2.VirtualProcessor
	to t : SysMLine!ItemUsage
	extends Base{
	//VirtualProcessor.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//VirtualProcessor.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//VirtualProcessor.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//VirtualProcessor.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//VirtualProcessor.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule VitualBusSubcomponentType
	transform s : DSL!VitualBusSubcomponentType //aadl2.VitualBusSubcomponentType
	to t : SysMLine!ItemUsage
	extends Base{
	//VitualBusSubcomponentType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//VitualBusSubcomponentType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//VitualBusSubcomponentType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//VitualBusSubcomponentType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//VitualBusSubcomponentType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule VirtualBus
	transform s : DSL!VirtualBus //aadl2.VirtualBus
	to t : SysMLine!ItemUsage
	extends Base{
	//VirtualBus.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//VirtualBus.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//VirtualBus.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//VirtualBus.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//VirtualBus.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule ThreadGroupSubcomponentType
	transform s : DSL!ThreadGroupSubcomponentType //aadl2.ThreadGroupSubcomponentType
	to t : SysMLine!ItemUsage
	extends Base{
	//ThreadGroupSubcomponentType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ThreadGroupSubcomponentType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ThreadGroupSubcomponentType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ThreadGroupSubcomponentType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ThreadGroupSubcomponentType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule ThreadGroup
	transform s : DSL!ThreadGroup //aadl2.ThreadGroup
	to t : SysMLine!ItemUsage
	extends Base{
	//ThreadGroup.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ThreadGroup.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ThreadGroup.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ThreadGroup.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ThreadGroup.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule ThreadSubcomponentType
	transform s : DSL!ThreadSubcomponentType //aadl2.ThreadSubcomponentType
	to t : SysMLine!ItemUsage
	extends Base{
	//ThreadSubcomponentType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ThreadSubcomponentType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ThreadSubcomponentType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ThreadSubcomponentType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ThreadSubcomponentType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule Thread
	transform s : DSL!Thread //aadl2.Thread
	to t : SysMLine!ItemUsage
	extends Base{
	//Thread.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Thread.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Thread.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Thread.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Thread.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule SystemSubcomponentType
	transform s : DSL!SystemSubcomponentType //aadl2.SystemSubcomponentType
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemSubcomponentType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SystemSubcomponentType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SystemSubcomponentType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SystemSubcomponentType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SystemSubcomponentType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule System
	transform s : DSL!System //aadl2.System
	to t : SysMLine!ItemUsage
	extends Base{
	//System.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//System.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//System.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//System.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//System.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule ProcessSubcomponentType
	transform s : DSL!ProcessSubcomponentType //aadl2.ProcessSubcomponentType
	to t : SysMLine!ItemUsage
	extends Base{
	//ProcessSubcomponentType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ProcessSubcomponentType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ProcessSubcomponentType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ProcessSubcomponentType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ProcessSubcomponentType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule Process
	transform s : DSL!Process //aadl2.Process
	to t : SysMLine!ItemUsage
	extends Base{
	//Process.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Process.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Process.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Process.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Process.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule MemorySubcomponentType
	transform s : DSL!MemorySubcomponentType //aadl2.MemorySubcomponentType
	to t : SysMLine!ItemUsage
	extends Base{
	//MemorySubcomponentType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//MemorySubcomponentType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//MemorySubcomponentType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//MemorySubcomponentType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//MemorySubcomponentType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule Memory
	transform s : DSL!Memory //aadl2.Memory
	to t : SysMLine!ItemUsage
	extends Base{
	//Memory.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Memory.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Memory.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Memory.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Memory.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule DeviceSubcomponentType
	transform s : DSL!DeviceSubcomponentType //aadl2.DeviceSubcomponentType
	to t : SysMLine!ItemUsage
	extends Base{
	//DeviceSubcomponentType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//DeviceSubcomponentType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//DeviceSubcomponentType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//DeviceSubcomponentType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//DeviceSubcomponentType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule Device
	transform s : DSL!Device //aadl2.Device
	to t : SysMLine!ItemUsage
	extends Base{
	//Device.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Device.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Device.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Device.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Device.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule ProcessorSubcomponentType
	transform s : DSL!ProcessorSubcomponentType //aadl2.ProcessorSubcomponentType
	to t : SysMLine!ItemUsage
	extends Base{
	//ProcessorSubcomponentType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ProcessorSubcomponentType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ProcessorSubcomponentType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ProcessorSubcomponentType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ProcessorSubcomponentType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule Processor
	transform s : DSL!Processor //aadl2.Processor
	to t : SysMLine!ItemUsage
	extends Base{
	//Processor.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//Processor.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//Processor.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Processor.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Processor.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule AbstractImplementation
	transform s : DSL!AbstractImplementation //aadl2.AbstractImplementation
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractImplementation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//AbstractImplementation.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//AbstractImplementation.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//AbstractImplementation.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//AbstractImplementation.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//AbstractImplementation.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//AbstractImplementation.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//AbstractImplementation.noSubcomponents -> EAttribute : noSubcomponents
	if (s.noSubcomponents.getEAttribute() != null) t.addNewAttribute("noSubcomponents".clearKeyWord(), s.noSubcomponents.getEAttribute());
	//AbstractImplementation.noConnections -> EAttribute : noConnections
	if (s.noConnections.getEAttribute() != null) t.addNewAttribute("noConnections".clearKeyWord(), s.noConnections.getEAttribute());
	//AbstractImplementation.noCalls -> EAttribute : noCalls
	if (s.noCalls.getEAttribute() != null) t.addNewAttribute("noCalls".clearKeyWord(), s.noCalls.getEAttribute());
	//AbstractImplementation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//AbstractImplementation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//AbstractImplementation.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//AbstractImplementation.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//AbstractImplementation.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//AbstractImplementation.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//AbstractImplementation.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//AbstractImplementation.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//AbstractImplementation.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//AbstractImplementation.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//AbstractImplementation.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//AbstractImplementation.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//AbstractImplementation.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//AbstractImplementation.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//AbstractImplementation.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
	//AbstractImplementation.ownedSubcomponent -> EReference : ownedSubcomponent
	if (s.ownedSubcomponent.getEReference() != null) t.addNewReference("ownedSubcomponent".clearKeyWord(), s.ownedSubcomponent.getEReference());
	//AbstractImplementation.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//AbstractImplementation.ownedFlowImplementation -> EReference : ownedFlowImplementation
	if (s.ownedFlowImplementation.getEReference() != null) t.addNewReference("ownedFlowImplementation".clearKeyWord(), s.ownedFlowImplementation.getEReference());
	//AbstractImplementation.ownedConnection -> EReference : ownedConnection
	if (s.ownedConnection.getEReference() != null) t.addNewReference("ownedConnection".clearKeyWord(), s.ownedConnection.getEReference());
	//AbstractImplementation.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//AbstractImplementation.ownedRealization -> EReference : ownedRealization
	if (s.ownedRealization.getEReference() != null) t.addNewReference("ownedRealization".clearKeyWord(), s.ownedRealization.getEReference());
	//AbstractImplementation.ownedEndToEndFlow -> EReference : ownedEndToEndFlow
	if (s.ownedEndToEndFlow.getEReference() != null) t.addNewReference("ownedEndToEndFlow".clearKeyWord(), s.ownedEndToEndFlow.getEReference());
	//AbstractImplementation.ownedAbstractSubcomponent -> EReference : ownedAbstractSubcomponent
	if (s.ownedAbstractSubcomponent.getEReference() != null) t.addNewReference("ownedAbstractSubcomponent".clearKeyWord(), s.ownedAbstractSubcomponent.getEReference());
	//AbstractImplementation.ownedAccessConnection -> EReference : ownedAccessConnection
	if (s.ownedAccessConnection.getEReference() != null) t.addNewReference("ownedAccessConnection".clearKeyWord(), s.ownedAccessConnection.getEReference());
	//AbstractImplementation.ownedParameterConnection -> EReference : ownedParameterConnection
	if (s.ownedParameterConnection.getEReference() != null) t.addNewReference("ownedParameterConnection".clearKeyWord(), s.ownedParameterConnection.getEReference());
	//AbstractImplementation.ownedPortConnection -> EReference : ownedPortConnection
	if (s.ownedPortConnection.getEReference() != null) t.addNewReference("ownedPortConnection".clearKeyWord(), s.ownedPortConnection.getEReference());
	//AbstractImplementation.ownedFeatureConnection -> EReference : ownedFeatureConnection
	if (s.ownedFeatureConnection.getEReference() != null) t.addNewReference("ownedFeatureConnection".clearKeyWord(), s.ownedFeatureConnection.getEReference());
	//AbstractImplementation.ownedFeatureGroupConnection -> EReference : ownedFeatureGroupConnection
	if (s.ownedFeatureGroupConnection.getEReference() != null) t.addNewReference("ownedFeatureGroupConnection".clearKeyWord(), s.ownedFeatureGroupConnection.getEReference());
	//AbstractImplementation.callSpecification -> EReference : callSpecification
	if (s.callSpecification.getEReference() != null) t.addNewReference("callSpecification".clearKeyWord(), s.callSpecification.getEReference());
	//AbstractImplementation.ownedSubprogramCallSequence -> EReference : ownedSubprogramCallSequence
	if (s.ownedSubprogramCallSequence.getEReference() != null) t.addNewReference("ownedSubprogramCallSequence".clearKeyWord(), s.ownedSubprogramCallSequence.getEReference());
	//AbstractImplementation.ownedBusSubcomponent -> EReference : ownedBusSubcomponent
	if (s.ownedBusSubcomponent.getEReference() != null) t.addNewReference("ownedBusSubcomponent".clearKeyWord(), s.ownedBusSubcomponent.getEReference());
	//AbstractImplementation.ownedDataSubcomponent -> EReference : ownedDataSubcomponent
	if (s.ownedDataSubcomponent.getEReference() != null) t.addNewReference("ownedDataSubcomponent".clearKeyWord(), s.ownedDataSubcomponent.getEReference());
	//AbstractImplementation.ownedDeviceSubcomponent -> EReference : ownedDeviceSubcomponent
	if (s.ownedDeviceSubcomponent.getEReference() != null) t.addNewReference("ownedDeviceSubcomponent".clearKeyWord(), s.ownedDeviceSubcomponent.getEReference());
	//AbstractImplementation.ownedMemorySubcomponent -> EReference : ownedMemorySubcomponent
	if (s.ownedMemorySubcomponent.getEReference() != null) t.addNewReference("ownedMemorySubcomponent".clearKeyWord(), s.ownedMemorySubcomponent.getEReference());
	//AbstractImplementation.ownedProcessSubcomponent -> EReference : ownedProcessSubcomponent
	if (s.ownedProcessSubcomponent.getEReference() != null) t.addNewReference("ownedProcessSubcomponent".clearKeyWord(), s.ownedProcessSubcomponent.getEReference());
	//AbstractImplementation.ownedProcessorSubcomponent -> EReference : ownedProcessorSubcomponent
	if (s.ownedProcessorSubcomponent.getEReference() != null) t.addNewReference("ownedProcessorSubcomponent".clearKeyWord(), s.ownedProcessorSubcomponent.getEReference());
	//AbstractImplementation.ownedSystemSubcomponent -> EReference : ownedSystemSubcomponent
	if (s.ownedSystemSubcomponent.getEReference() != null) t.addNewReference("ownedSystemSubcomponent".clearKeyWord(), s.ownedSystemSubcomponent.getEReference());
	//AbstractImplementation.ownedSubprogramSubcomponent -> EReference : ownedSubprogramSubcomponent
	if (s.ownedSubprogramSubcomponent.getEReference() != null) t.addNewReference("ownedSubprogramSubcomponent".clearKeyWord(), s.ownedSubprogramSubcomponent.getEReference());
	//AbstractImplementation.ownedSubprogramGroupSubcomponent -> EReference : ownedSubprogramGroupSubcomponent
	if (s.ownedSubprogramGroupSubcomponent.getEReference() != null) t.addNewReference("ownedSubprogramGroupSubcomponent".clearKeyWord(), s.ownedSubprogramGroupSubcomponent.getEReference());
	//AbstractImplementation.ownedThreadSubcomponent -> EReference : ownedThreadSubcomponent
	if (s.ownedThreadSubcomponent.getEReference() != null) t.addNewReference("ownedThreadSubcomponent".clearKeyWord(), s.ownedThreadSubcomponent.getEReference());
	//AbstractImplementation.ownedThreadGroupSubcomponent -> EReference : ownedThreadGroupSubcomponent
	if (s.ownedThreadGroupSubcomponent.getEReference() != null) t.addNewReference("ownedThreadGroupSubcomponent".clearKeyWord(), s.ownedThreadGroupSubcomponent.getEReference());
	//AbstractImplementation.ownedVirtualBusSubcomponent -> EReference : ownedVirtualBusSubcomponent
	if (s.ownedVirtualBusSubcomponent.getEReference() != null) t.addNewReference("ownedVirtualBusSubcomponent".clearKeyWord(), s.ownedVirtualBusSubcomponent.getEReference());
	//AbstractImplementation.ownedVirtualProcessorSubcomponent -> EReference : ownedVirtualProcessorSubcomponent
	if (s.ownedVirtualProcessorSubcomponent.getEReference() != null) t.addNewReference("ownedVirtualProcessorSubcomponent".clearKeyWord(), s.ownedVirtualProcessorSubcomponent.getEReference());
}

@lazy
rule BusSubcomponent
	transform s : DSL!BusSubcomponent //aadl2.BusSubcomponent
	to t : SysMLine!ItemUsage
	extends Base{
	//BusSubcomponent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//BusSubcomponent.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//BusSubcomponent.allModes -> EAttribute : allModes
	if (s.allModes.getEAttribute() != null) t.addNewAttribute("allModes".clearKeyWord(), s.allModes.getEAttribute());
	//BusSubcomponent.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//BusSubcomponent.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//BusSubcomponent.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//BusSubcomponent.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//BusSubcomponent.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//BusSubcomponent.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//BusSubcomponent.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//BusSubcomponent.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//BusSubcomponent.subcomponentType -> EReference : subcomponentType
	if (s.subcomponentType.getEReference() != null) t.addNewReference("subcomponentType".clearKeyWord(), s.subcomponentType.getEReference());
	//BusSubcomponent.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//BusSubcomponent.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//BusSubcomponent.ownedModeBinding -> EReference : ownedModeBinding
	if (s.ownedModeBinding.getEReference() != null) t.addNewReference("ownedModeBinding".clearKeyWord(), s.ownedModeBinding.getEReference());
	//BusSubcomponent.implementationReference -> EReference : implementationReference
	if (s.implementationReference.getEReference() != null) t.addNewReference("implementationReference".clearKeyWord(), s.implementationReference.getEReference());
	//BusSubcomponent.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//BusSubcomponent.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//BusSubcomponent.busSubcomponentType -> EReference : busSubcomponentType
	if (s.busSubcomponentType.getEReference() != null) t.addNewReference("busSubcomponentType".clearKeyWord(), s.busSubcomponentType.getEReference());
}

@lazy
rule DataSubcomponent
	transform s : DSL!DataSubcomponent //aadl2.DataSubcomponent
	to t : SysMLine!ItemUsage
	extends Base{
	//DataSubcomponent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//DataSubcomponent.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//DataSubcomponent.allModes -> EAttribute : allModes
	if (s.allModes.getEAttribute() != null) t.addNewAttribute("allModes".clearKeyWord(), s.allModes.getEAttribute());
	//DataSubcomponent.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//DataSubcomponent.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//DataSubcomponent.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//DataSubcomponent.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//DataSubcomponent.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//DataSubcomponent.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//DataSubcomponent.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//DataSubcomponent.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//DataSubcomponent.subcomponentType -> EReference : subcomponentType
	if (s.subcomponentType.getEReference() != null) t.addNewReference("subcomponentType".clearKeyWord(), s.subcomponentType.getEReference());
	//DataSubcomponent.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//DataSubcomponent.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//DataSubcomponent.ownedModeBinding -> EReference : ownedModeBinding
	if (s.ownedModeBinding.getEReference() != null) t.addNewReference("ownedModeBinding".clearKeyWord(), s.ownedModeBinding.getEReference());
	//DataSubcomponent.implementationReference -> EReference : implementationReference
	if (s.implementationReference.getEReference() != null) t.addNewReference("implementationReference".clearKeyWord(), s.implementationReference.getEReference());
	//DataSubcomponent.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//DataSubcomponent.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//DataSubcomponent.dataSubcomponentType -> EReference : dataSubcomponentType
	if (s.dataSubcomponentType.getEReference() != null) t.addNewReference("dataSubcomponentType".clearKeyWord(), s.dataSubcomponentType.getEReference());
}

@lazy
rule DeviceSubcomponent
	transform s : DSL!DeviceSubcomponent //aadl2.DeviceSubcomponent
	to t : SysMLine!ItemUsage
	extends Base{
	//DeviceSubcomponent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//DeviceSubcomponent.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//DeviceSubcomponent.allModes -> EAttribute : allModes
	if (s.allModes.getEAttribute() != null) t.addNewAttribute("allModes".clearKeyWord(), s.allModes.getEAttribute());
	//DeviceSubcomponent.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//DeviceSubcomponent.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//DeviceSubcomponent.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//DeviceSubcomponent.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//DeviceSubcomponent.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//DeviceSubcomponent.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//DeviceSubcomponent.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//DeviceSubcomponent.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//DeviceSubcomponent.subcomponentType -> EReference : subcomponentType
	if (s.subcomponentType.getEReference() != null) t.addNewReference("subcomponentType".clearKeyWord(), s.subcomponentType.getEReference());
	//DeviceSubcomponent.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//DeviceSubcomponent.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//DeviceSubcomponent.ownedModeBinding -> EReference : ownedModeBinding
	if (s.ownedModeBinding.getEReference() != null) t.addNewReference("ownedModeBinding".clearKeyWord(), s.ownedModeBinding.getEReference());
	//DeviceSubcomponent.implementationReference -> EReference : implementationReference
	if (s.implementationReference.getEReference() != null) t.addNewReference("implementationReference".clearKeyWord(), s.implementationReference.getEReference());
	//DeviceSubcomponent.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//DeviceSubcomponent.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//DeviceSubcomponent.deviceSubcomponentType -> EReference : deviceSubcomponentType
	if (s.deviceSubcomponentType.getEReference() != null) t.addNewReference("deviceSubcomponentType".clearKeyWord(), s.deviceSubcomponentType.getEReference());
}

@lazy
rule MemorySubcomponent
	transform s : DSL!MemorySubcomponent //aadl2.MemorySubcomponent
	to t : SysMLine!ItemUsage
	extends Base{
	//MemorySubcomponent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//MemorySubcomponent.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//MemorySubcomponent.allModes -> EAttribute : allModes
	if (s.allModes.getEAttribute() != null) t.addNewAttribute("allModes".clearKeyWord(), s.allModes.getEAttribute());
	//MemorySubcomponent.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//MemorySubcomponent.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//MemorySubcomponent.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//MemorySubcomponent.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//MemorySubcomponent.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//MemorySubcomponent.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//MemorySubcomponent.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//MemorySubcomponent.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//MemorySubcomponent.subcomponentType -> EReference : subcomponentType
	if (s.subcomponentType.getEReference() != null) t.addNewReference("subcomponentType".clearKeyWord(), s.subcomponentType.getEReference());
	//MemorySubcomponent.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//MemorySubcomponent.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//MemorySubcomponent.ownedModeBinding -> EReference : ownedModeBinding
	if (s.ownedModeBinding.getEReference() != null) t.addNewReference("ownedModeBinding".clearKeyWord(), s.ownedModeBinding.getEReference());
	//MemorySubcomponent.implementationReference -> EReference : implementationReference
	if (s.implementationReference.getEReference() != null) t.addNewReference("implementationReference".clearKeyWord(), s.implementationReference.getEReference());
	//MemorySubcomponent.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//MemorySubcomponent.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//MemorySubcomponent.memorySubcomponentType -> EReference : memorySubcomponentType
	if (s.memorySubcomponentType.getEReference() != null) t.addNewReference("memorySubcomponentType".clearKeyWord(), s.memorySubcomponentType.getEReference());
}

@lazy
rule ProcessSubcomponent
	transform s : DSL!ProcessSubcomponent //aadl2.ProcessSubcomponent
	to t : SysMLine!ItemUsage
	extends Base{
	//ProcessSubcomponent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ProcessSubcomponent.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ProcessSubcomponent.allModes -> EAttribute : allModes
	if (s.allModes.getEAttribute() != null) t.addNewAttribute("allModes".clearKeyWord(), s.allModes.getEAttribute());
	//ProcessSubcomponent.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ProcessSubcomponent.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ProcessSubcomponent.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ProcessSubcomponent.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//ProcessSubcomponent.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//ProcessSubcomponent.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//ProcessSubcomponent.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//ProcessSubcomponent.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//ProcessSubcomponent.subcomponentType -> EReference : subcomponentType
	if (s.subcomponentType.getEReference() != null) t.addNewReference("subcomponentType".clearKeyWord(), s.subcomponentType.getEReference());
	//ProcessSubcomponent.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//ProcessSubcomponent.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//ProcessSubcomponent.ownedModeBinding -> EReference : ownedModeBinding
	if (s.ownedModeBinding.getEReference() != null) t.addNewReference("ownedModeBinding".clearKeyWord(), s.ownedModeBinding.getEReference());
	//ProcessSubcomponent.implementationReference -> EReference : implementationReference
	if (s.implementationReference.getEReference() != null) t.addNewReference("implementationReference".clearKeyWord(), s.implementationReference.getEReference());
	//ProcessSubcomponent.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//ProcessSubcomponent.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//ProcessSubcomponent.processSubcomponentType -> EReference : processSubcomponentType
	if (s.processSubcomponentType.getEReference() != null) t.addNewReference("processSubcomponentType".clearKeyWord(), s.processSubcomponentType.getEReference());
}

@lazy
rule ProcessorSubcomponent
	transform s : DSL!ProcessorSubcomponent //aadl2.ProcessorSubcomponent
	to t : SysMLine!ItemUsage
	extends Base{
	//ProcessorSubcomponent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ProcessorSubcomponent.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ProcessorSubcomponent.allModes -> EAttribute : allModes
	if (s.allModes.getEAttribute() != null) t.addNewAttribute("allModes".clearKeyWord(), s.allModes.getEAttribute());
	//ProcessorSubcomponent.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ProcessorSubcomponent.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ProcessorSubcomponent.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ProcessorSubcomponent.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//ProcessorSubcomponent.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//ProcessorSubcomponent.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//ProcessorSubcomponent.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//ProcessorSubcomponent.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//ProcessorSubcomponent.subcomponentType -> EReference : subcomponentType
	if (s.subcomponentType.getEReference() != null) t.addNewReference("subcomponentType".clearKeyWord(), s.subcomponentType.getEReference());
	//ProcessorSubcomponent.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//ProcessorSubcomponent.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//ProcessorSubcomponent.ownedModeBinding -> EReference : ownedModeBinding
	if (s.ownedModeBinding.getEReference() != null) t.addNewReference("ownedModeBinding".clearKeyWord(), s.ownedModeBinding.getEReference());
	//ProcessorSubcomponent.implementationReference -> EReference : implementationReference
	if (s.implementationReference.getEReference() != null) t.addNewReference("implementationReference".clearKeyWord(), s.implementationReference.getEReference());
	//ProcessorSubcomponent.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//ProcessorSubcomponent.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//ProcessorSubcomponent.processorSubcomponentType -> EReference : processorSubcomponentType
	if (s.processorSubcomponentType.getEReference() != null) t.addNewReference("processorSubcomponentType".clearKeyWord(), s.processorSubcomponentType.getEReference());
}

@lazy
rule SystemSubcomponent
	transform s : DSL!SystemSubcomponent //aadl2.SystemSubcomponent
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemSubcomponent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SystemSubcomponent.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SystemSubcomponent.allModes -> EAttribute : allModes
	if (s.allModes.getEAttribute() != null) t.addNewAttribute("allModes".clearKeyWord(), s.allModes.getEAttribute());
	//SystemSubcomponent.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SystemSubcomponent.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SystemSubcomponent.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//SystemSubcomponent.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//SystemSubcomponent.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//SystemSubcomponent.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//SystemSubcomponent.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//SystemSubcomponent.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//SystemSubcomponent.subcomponentType -> EReference : subcomponentType
	if (s.subcomponentType.getEReference() != null) t.addNewReference("subcomponentType".clearKeyWord(), s.subcomponentType.getEReference());
	//SystemSubcomponent.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//SystemSubcomponent.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//SystemSubcomponent.ownedModeBinding -> EReference : ownedModeBinding
	if (s.ownedModeBinding.getEReference() != null) t.addNewReference("ownedModeBinding".clearKeyWord(), s.ownedModeBinding.getEReference());
	//SystemSubcomponent.implementationReference -> EReference : implementationReference
	if (s.implementationReference.getEReference() != null) t.addNewReference("implementationReference".clearKeyWord(), s.implementationReference.getEReference());
	//SystemSubcomponent.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//SystemSubcomponent.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//SystemSubcomponent.systemSubcomponentType -> EReference : systemSubcomponentType
	if (s.systemSubcomponentType.getEReference() != null) t.addNewReference("systemSubcomponentType".clearKeyWord(), s.systemSubcomponentType.getEReference());
}

@lazy
rule SubprogramSubcomponent
	transform s : DSL!SubprogramSubcomponent //aadl2.SubprogramSubcomponent
	to t : SysMLine!ItemUsage
	extends Base{
	//SubprogramSubcomponent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SubprogramSubcomponent.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SubprogramSubcomponent.allModes -> EAttribute : allModes
	if (s.allModes.getEAttribute() != null) t.addNewAttribute("allModes".clearKeyWord(), s.allModes.getEAttribute());
	//SubprogramSubcomponent.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SubprogramSubcomponent.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SubprogramSubcomponent.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//SubprogramSubcomponent.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//SubprogramSubcomponent.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//SubprogramSubcomponent.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//SubprogramSubcomponent.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//SubprogramSubcomponent.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//SubprogramSubcomponent.subcomponentType -> EReference : subcomponentType
	if (s.subcomponentType.getEReference() != null) t.addNewReference("subcomponentType".clearKeyWord(), s.subcomponentType.getEReference());
	//SubprogramSubcomponent.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//SubprogramSubcomponent.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//SubprogramSubcomponent.ownedModeBinding -> EReference : ownedModeBinding
	if (s.ownedModeBinding.getEReference() != null) t.addNewReference("ownedModeBinding".clearKeyWord(), s.ownedModeBinding.getEReference());
	//SubprogramSubcomponent.implementationReference -> EReference : implementationReference
	if (s.implementationReference.getEReference() != null) t.addNewReference("implementationReference".clearKeyWord(), s.implementationReference.getEReference());
	//SubprogramSubcomponent.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//SubprogramSubcomponent.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//SubprogramSubcomponent.subprogramSubcomponentType -> EReference : subprogramSubcomponentType
	if (s.subprogramSubcomponentType.getEReference() != null) t.addNewReference("subprogramSubcomponentType".clearKeyWord(), s.subprogramSubcomponentType.getEReference());
}

@lazy
rule SubprogramGroupSubcomponent
	transform s : DSL!SubprogramGroupSubcomponent //aadl2.SubprogramGroupSubcomponent
	to t : SysMLine!ItemUsage
	extends Base{
	//SubprogramGroupSubcomponent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SubprogramGroupSubcomponent.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SubprogramGroupSubcomponent.allModes -> EAttribute : allModes
	if (s.allModes.getEAttribute() != null) t.addNewAttribute("allModes".clearKeyWord(), s.allModes.getEAttribute());
	//SubprogramGroupSubcomponent.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SubprogramGroupSubcomponent.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SubprogramGroupSubcomponent.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//SubprogramGroupSubcomponent.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//SubprogramGroupSubcomponent.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//SubprogramGroupSubcomponent.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//SubprogramGroupSubcomponent.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//SubprogramGroupSubcomponent.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//SubprogramGroupSubcomponent.subcomponentType -> EReference : subcomponentType
	if (s.subcomponentType.getEReference() != null) t.addNewReference("subcomponentType".clearKeyWord(), s.subcomponentType.getEReference());
	//SubprogramGroupSubcomponent.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//SubprogramGroupSubcomponent.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//SubprogramGroupSubcomponent.ownedModeBinding -> EReference : ownedModeBinding
	if (s.ownedModeBinding.getEReference() != null) t.addNewReference("ownedModeBinding".clearKeyWord(), s.ownedModeBinding.getEReference());
	//SubprogramGroupSubcomponent.implementationReference -> EReference : implementationReference
	if (s.implementationReference.getEReference() != null) t.addNewReference("implementationReference".clearKeyWord(), s.implementationReference.getEReference());
	//SubprogramGroupSubcomponent.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//SubprogramGroupSubcomponent.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//SubprogramGroupSubcomponent.subprogramGroupSubcomponentType -> EReference : subprogramGroupSubcomponentType
	if (s.subprogramGroupSubcomponentType.getEReference() != null) t.addNewReference("subprogramGroupSubcomponentType".clearKeyWord(), s.subprogramGroupSubcomponentType.getEReference());
}

@lazy
rule ThreadSubcomponent
	transform s : DSL!ThreadSubcomponent //aadl2.ThreadSubcomponent
	to t : SysMLine!ItemUsage
	extends Base{
	//ThreadSubcomponent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ThreadSubcomponent.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ThreadSubcomponent.allModes -> EAttribute : allModes
	if (s.allModes.getEAttribute() != null) t.addNewAttribute("allModes".clearKeyWord(), s.allModes.getEAttribute());
	//ThreadSubcomponent.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ThreadSubcomponent.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ThreadSubcomponent.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ThreadSubcomponent.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//ThreadSubcomponent.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//ThreadSubcomponent.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//ThreadSubcomponent.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//ThreadSubcomponent.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//ThreadSubcomponent.subcomponentType -> EReference : subcomponentType
	if (s.subcomponentType.getEReference() != null) t.addNewReference("subcomponentType".clearKeyWord(), s.subcomponentType.getEReference());
	//ThreadSubcomponent.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//ThreadSubcomponent.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//ThreadSubcomponent.ownedModeBinding -> EReference : ownedModeBinding
	if (s.ownedModeBinding.getEReference() != null) t.addNewReference("ownedModeBinding".clearKeyWord(), s.ownedModeBinding.getEReference());
	//ThreadSubcomponent.implementationReference -> EReference : implementationReference
	if (s.implementationReference.getEReference() != null) t.addNewReference("implementationReference".clearKeyWord(), s.implementationReference.getEReference());
	//ThreadSubcomponent.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//ThreadSubcomponent.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//ThreadSubcomponent.threadSubcomponentType -> EReference : threadSubcomponentType
	if (s.threadSubcomponentType.getEReference() != null) t.addNewReference("threadSubcomponentType".clearKeyWord(), s.threadSubcomponentType.getEReference());
}

@lazy
rule ThreadGroupSubcomponent
	transform s : DSL!ThreadGroupSubcomponent //aadl2.ThreadGroupSubcomponent
	to t : SysMLine!ItemUsage
	extends Base{
	//ThreadGroupSubcomponent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ThreadGroupSubcomponent.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ThreadGroupSubcomponent.allModes -> EAttribute : allModes
	if (s.allModes.getEAttribute() != null) t.addNewAttribute("allModes".clearKeyWord(), s.allModes.getEAttribute());
	//ThreadGroupSubcomponent.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ThreadGroupSubcomponent.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ThreadGroupSubcomponent.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ThreadGroupSubcomponent.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//ThreadGroupSubcomponent.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//ThreadGroupSubcomponent.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//ThreadGroupSubcomponent.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//ThreadGroupSubcomponent.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//ThreadGroupSubcomponent.subcomponentType -> EReference : subcomponentType
	if (s.subcomponentType.getEReference() != null) t.addNewReference("subcomponentType".clearKeyWord(), s.subcomponentType.getEReference());
	//ThreadGroupSubcomponent.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//ThreadGroupSubcomponent.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//ThreadGroupSubcomponent.ownedModeBinding -> EReference : ownedModeBinding
	if (s.ownedModeBinding.getEReference() != null) t.addNewReference("ownedModeBinding".clearKeyWord(), s.ownedModeBinding.getEReference());
	//ThreadGroupSubcomponent.implementationReference -> EReference : implementationReference
	if (s.implementationReference.getEReference() != null) t.addNewReference("implementationReference".clearKeyWord(), s.implementationReference.getEReference());
	//ThreadGroupSubcomponent.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//ThreadGroupSubcomponent.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//ThreadGroupSubcomponent.threadGroupSubcomponentType -> EReference : threadGroupSubcomponentType
	if (s.threadGroupSubcomponentType.getEReference() != null) t.addNewReference("threadGroupSubcomponentType".clearKeyWord(), s.threadGroupSubcomponentType.getEReference());
}

@lazy
rule VirtualBusSubcomponent
	transform s : DSL!VirtualBusSubcomponent //aadl2.VirtualBusSubcomponent
	to t : SysMLine!ItemUsage
	extends Base{
	//VirtualBusSubcomponent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//VirtualBusSubcomponent.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//VirtualBusSubcomponent.allModes -> EAttribute : allModes
	if (s.allModes.getEAttribute() != null) t.addNewAttribute("allModes".clearKeyWord(), s.allModes.getEAttribute());
	//VirtualBusSubcomponent.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//VirtualBusSubcomponent.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//VirtualBusSubcomponent.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//VirtualBusSubcomponent.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//VirtualBusSubcomponent.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//VirtualBusSubcomponent.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//VirtualBusSubcomponent.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//VirtualBusSubcomponent.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//VirtualBusSubcomponent.subcomponentType -> EReference : subcomponentType
	if (s.subcomponentType.getEReference() != null) t.addNewReference("subcomponentType".clearKeyWord(), s.subcomponentType.getEReference());
	//VirtualBusSubcomponent.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//VirtualBusSubcomponent.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//VirtualBusSubcomponent.ownedModeBinding -> EReference : ownedModeBinding
	if (s.ownedModeBinding.getEReference() != null) t.addNewReference("ownedModeBinding".clearKeyWord(), s.ownedModeBinding.getEReference());
	//VirtualBusSubcomponent.implementationReference -> EReference : implementationReference
	if (s.implementationReference.getEReference() != null) t.addNewReference("implementationReference".clearKeyWord(), s.implementationReference.getEReference());
	//VirtualBusSubcomponent.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//VirtualBusSubcomponent.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//VirtualBusSubcomponent.virtualBusSubcomponentType -> EReference : virtualBusSubcomponentType
	if (s.virtualBusSubcomponentType.getEReference() != null) t.addNewReference("virtualBusSubcomponentType".clearKeyWord(), s.virtualBusSubcomponentType.getEReference());
}

@lazy
rule VirtualProcessorSubcomponent
	transform s : DSL!VirtualProcessorSubcomponent //aadl2.VirtualProcessorSubcomponent
	to t : SysMLine!ItemUsage
	extends Base{
	//VirtualProcessorSubcomponent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//VirtualProcessorSubcomponent.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//VirtualProcessorSubcomponent.allModes -> EAttribute : allModes
	if (s.allModes.getEAttribute() != null) t.addNewAttribute("allModes".clearKeyWord(), s.allModes.getEAttribute());
	//VirtualProcessorSubcomponent.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//VirtualProcessorSubcomponent.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//VirtualProcessorSubcomponent.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//VirtualProcessorSubcomponent.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//VirtualProcessorSubcomponent.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//VirtualProcessorSubcomponent.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//VirtualProcessorSubcomponent.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//VirtualProcessorSubcomponent.arrayDimension -> EReference : arrayDimension
	if (s.arrayDimension.getEReference() != null) t.addNewReference("arrayDimension".clearKeyWord(), s.arrayDimension.getEReference());
	//VirtualProcessorSubcomponent.subcomponentType -> EReference : subcomponentType
	if (s.subcomponentType.getEReference() != null) t.addNewReference("subcomponentType".clearKeyWord(), s.subcomponentType.getEReference());
	//VirtualProcessorSubcomponent.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//VirtualProcessorSubcomponent.prototype -> EReference : prototype
	if (s.prototype.getEReference() != null) t.addNewReference("prototype".clearKeyWord(), s.prototype.getEReference());
	//VirtualProcessorSubcomponent.ownedModeBinding -> EReference : ownedModeBinding
	if (s.ownedModeBinding.getEReference() != null) t.addNewReference("ownedModeBinding".clearKeyWord(), s.ownedModeBinding.getEReference());
	//VirtualProcessorSubcomponent.implementationReference -> EReference : implementationReference
	if (s.implementationReference.getEReference() != null) t.addNewReference("implementationReference".clearKeyWord(), s.implementationReference.getEReference());
	//VirtualProcessorSubcomponent.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//VirtualProcessorSubcomponent.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
	//VirtualProcessorSubcomponent.virtualProcessorSubcomponentType -> EReference : virtualProcessorSubcomponentType
	if (s.virtualProcessorSubcomponentType.getEReference() != null) t.addNewReference("virtualProcessorSubcomponentType".clearKeyWord(), s.virtualProcessorSubcomponentType.getEReference());
}

@lazy
rule AbstractPrototype
	transform s : DSL!AbstractPrototype //aadl2.AbstractPrototype
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractPrototype.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//AbstractPrototype.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//AbstractPrototype.array -> EAttribute : array
	if (s.array.getEAttribute() != null) t.addNewAttribute("array".clearKeyWord(), s.array.getEAttribute());
	//AbstractPrototype.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//AbstractPrototype.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//AbstractPrototype.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//AbstractPrototype.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//AbstractPrototype.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//AbstractPrototype.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//AbstractPrototype.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//AbstractPrototype.constrainingClassifier -> EReference : constrainingClassifier
	if (s.constrainingClassifier.getEReference() != null) t.addNewReference("constrainingClassifier".clearKeyWord(), s.constrainingClassifier.getEReference());
}

@lazy
rule BusClassifier
	transform s : DSL!BusClassifier //aadl2.BusClassifier
	to t : SysMLine!ItemUsage
	extends Base{
	//BusClassifier.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//BusClassifier.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//BusClassifier.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//BusClassifier.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//BusClassifier.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//BusClassifier.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//BusClassifier.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//BusClassifier.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//BusClassifier.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//BusClassifier.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//BusClassifier.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//BusClassifier.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//BusClassifier.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//BusClassifier.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//BusClassifier.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//BusClassifier.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//BusClassifier.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//BusClassifier.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//BusClassifier.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//BusClassifier.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//BusClassifier.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
}

@lazy
rule BusType
	transform s : DSL!BusType //aadl2.BusType
	to t : SysMLine!ItemUsage
	extends Base{
	//BusType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//BusType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//BusType.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//BusType.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//BusType.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//BusType.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//BusType.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//BusType.noFeatures -> EAttribute : noFeatures
	if (s.noFeatures.getEAttribute() != null) t.addNewAttribute("noFeatures".clearKeyWord(), s.noFeatures.getEAttribute());
	//BusType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//BusType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//BusType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//BusType.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//BusType.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//BusType.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//BusType.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//BusType.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//BusType.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//BusType.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//BusType.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//BusType.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//BusType.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//BusType.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//BusType.ownedFeature -> EReference : ownedFeature
	if (s.ownedFeature.getEReference() != null) t.addNewReference("ownedFeature".clearKeyWord(), s.ownedFeature.getEReference());
	//BusType.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//BusType.ownedFlowSpecification -> EReference : ownedFlowSpecification
	if (s.ownedFlowSpecification.getEReference() != null) t.addNewReference("ownedFlowSpecification".clearKeyWord(), s.ownedFlowSpecification.getEReference());
	//BusType.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//BusType.ownedFeatureGroup -> EReference : ownedFeatureGroup
	if (s.ownedFeatureGroup.getEReference() != null) t.addNewReference("ownedFeatureGroup".clearKeyWord(), s.ownedFeatureGroup.getEReference());
	//BusType.ownedAbstractFeature -> EReference : ownedAbstractFeature
	if (s.ownedAbstractFeature.getEReference() != null) t.addNewReference("ownedAbstractFeature".clearKeyWord(), s.ownedAbstractFeature.getEReference());
	//BusType.ownedBusAccess -> EReference : ownedBusAccess
	if (s.ownedBusAccess.getEReference() != null) t.addNewReference("ownedBusAccess".clearKeyWord(), s.ownedBusAccess.getEReference());
	//BusType.ownedDataPort -> EReference : ownedDataPort
	if (s.ownedDataPort.getEReference() != null) t.addNewReference("ownedDataPort".clearKeyWord(), s.ownedDataPort.getEReference());
	//BusType.ownedEventDataPort -> EReference : ownedEventDataPort
	if (s.ownedEventDataPort.getEReference() != null) t.addNewReference("ownedEventDataPort".clearKeyWord(), s.ownedEventDataPort.getEReference());
	//BusType.ownedEventPort -> EReference : ownedEventPort
	if (s.ownedEventPort.getEReference() != null) t.addNewReference("ownedEventPort".clearKeyWord(), s.ownedEventPort.getEReference());
}

@lazy
rule BusImplementation
	transform s : DSL!BusImplementation //aadl2.BusImplementation
	to t : SysMLine!ItemUsage
	extends Base{
	//BusImplementation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//BusImplementation.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//BusImplementation.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//BusImplementation.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//BusImplementation.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//BusImplementation.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//BusImplementation.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//BusImplementation.noSubcomponents -> EAttribute : noSubcomponents
	if (s.noSubcomponents.getEAttribute() != null) t.addNewAttribute("noSubcomponents".clearKeyWord(), s.noSubcomponents.getEAttribute());
	//BusImplementation.noConnections -> EAttribute : noConnections
	if (s.noConnections.getEAttribute() != null) t.addNewAttribute("noConnections".clearKeyWord(), s.noConnections.getEAttribute());
	//BusImplementation.noCalls -> EAttribute : noCalls
	if (s.noCalls.getEAttribute() != null) t.addNewAttribute("noCalls".clearKeyWord(), s.noCalls.getEAttribute());
	//BusImplementation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//BusImplementation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//BusImplementation.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//BusImplementation.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//BusImplementation.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//BusImplementation.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//BusImplementation.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//BusImplementation.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//BusImplementation.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//BusImplementation.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//BusImplementation.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//BusImplementation.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//BusImplementation.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//BusImplementation.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//BusImplementation.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
	//BusImplementation.ownedSubcomponent -> EReference : ownedSubcomponent
	if (s.ownedSubcomponent.getEReference() != null) t.addNewReference("ownedSubcomponent".clearKeyWord(), s.ownedSubcomponent.getEReference());
	//BusImplementation.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//BusImplementation.ownedFlowImplementation -> EReference : ownedFlowImplementation
	if (s.ownedFlowImplementation.getEReference() != null) t.addNewReference("ownedFlowImplementation".clearKeyWord(), s.ownedFlowImplementation.getEReference());
	//BusImplementation.ownedConnection -> EReference : ownedConnection
	if (s.ownedConnection.getEReference() != null) t.addNewReference("ownedConnection".clearKeyWord(), s.ownedConnection.getEReference());
	//BusImplementation.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//BusImplementation.ownedRealization -> EReference : ownedRealization
	if (s.ownedRealization.getEReference() != null) t.addNewReference("ownedRealization".clearKeyWord(), s.ownedRealization.getEReference());
	//BusImplementation.ownedEndToEndFlow -> EReference : ownedEndToEndFlow
	if (s.ownedEndToEndFlow.getEReference() != null) t.addNewReference("ownedEndToEndFlow".clearKeyWord(), s.ownedEndToEndFlow.getEReference());
	//BusImplementation.ownedAbstractSubcomponent -> EReference : ownedAbstractSubcomponent
	if (s.ownedAbstractSubcomponent.getEReference() != null) t.addNewReference("ownedAbstractSubcomponent".clearKeyWord(), s.ownedAbstractSubcomponent.getEReference());
	//BusImplementation.ownedAccessConnection -> EReference : ownedAccessConnection
	if (s.ownedAccessConnection.getEReference() != null) t.addNewReference("ownedAccessConnection".clearKeyWord(), s.ownedAccessConnection.getEReference());
	//BusImplementation.ownedParameterConnection -> EReference : ownedParameterConnection
	if (s.ownedParameterConnection.getEReference() != null) t.addNewReference("ownedParameterConnection".clearKeyWord(), s.ownedParameterConnection.getEReference());
	//BusImplementation.ownedPortConnection -> EReference : ownedPortConnection
	if (s.ownedPortConnection.getEReference() != null) t.addNewReference("ownedPortConnection".clearKeyWord(), s.ownedPortConnection.getEReference());
	//BusImplementation.ownedFeatureConnection -> EReference : ownedFeatureConnection
	if (s.ownedFeatureConnection.getEReference() != null) t.addNewReference("ownedFeatureConnection".clearKeyWord(), s.ownedFeatureConnection.getEReference());
	//BusImplementation.ownedFeatureGroupConnection -> EReference : ownedFeatureGroupConnection
	if (s.ownedFeatureGroupConnection.getEReference() != null) t.addNewReference("ownedFeatureGroupConnection".clearKeyWord(), s.ownedFeatureGroupConnection.getEReference());
	//BusImplementation.ownedVirtualBusSubcomponent -> EReference : ownedVirtualBusSubcomponent
	if (s.ownedVirtualBusSubcomponent.getEReference() != null) t.addNewReference("ownedVirtualBusSubcomponent".clearKeyWord(), s.ownedVirtualBusSubcomponent.getEReference());
}

@lazy
rule BusPrototype
	transform s : DSL!BusPrototype //aadl2.BusPrototype
	to t : SysMLine!ItemUsage
	extends Base{
	//BusPrototype.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//BusPrototype.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//BusPrototype.array -> EAttribute : array
	if (s.array.getEAttribute() != null) t.addNewAttribute("array".clearKeyWord(), s.array.getEAttribute());
	//BusPrototype.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//BusPrototype.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//BusPrototype.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//BusPrototype.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//BusPrototype.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//BusPrototype.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//BusPrototype.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//BusPrototype.constrainingClassifier -> EReference : constrainingClassifier
	if (s.constrainingClassifier.getEReference() != null) t.addNewReference("constrainingClassifier".clearKeyWord(), s.constrainingClassifier.getEReference());
}

@lazy
rule DataClassifier
	transform s : DSL!DataClassifier //aadl2.DataClassifier
	to t : SysMLine!ItemUsage
	extends Base{
	//DataClassifier.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//DataClassifier.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//DataClassifier.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//DataClassifier.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//DataClassifier.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//DataClassifier.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//DataClassifier.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//DataClassifier.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//DataClassifier.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//DataClassifier.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//DataClassifier.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//DataClassifier.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//DataClassifier.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//DataClassifier.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//DataClassifier.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//DataClassifier.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//DataClassifier.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//DataClassifier.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//DataClassifier.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//DataClassifier.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//DataClassifier.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
}

@lazy
rule DataType
	transform s : DSL!DataType //aadl2.DataType
	to t : SysMLine!ItemUsage
	extends Base{
	//DataType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//DataType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//DataType.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//DataType.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//DataType.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//DataType.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//DataType.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//DataType.noFeatures -> EAttribute : noFeatures
	if (s.noFeatures.getEAttribute() != null) t.addNewAttribute("noFeatures".clearKeyWord(), s.noFeatures.getEAttribute());
	//DataType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//DataType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//DataType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//DataType.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//DataType.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//DataType.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//DataType.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//DataType.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//DataType.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//DataType.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//DataType.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//DataType.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//DataType.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//DataType.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//DataType.ownedFeature -> EReference : ownedFeature
	if (s.ownedFeature.getEReference() != null) t.addNewReference("ownedFeature".clearKeyWord(), s.ownedFeature.getEReference());
	//DataType.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//DataType.ownedFlowSpecification -> EReference : ownedFlowSpecification
	if (s.ownedFlowSpecification.getEReference() != null) t.addNewReference("ownedFlowSpecification".clearKeyWord(), s.ownedFlowSpecification.getEReference());
	//DataType.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//DataType.ownedFeatureGroup -> EReference : ownedFeatureGroup
	if (s.ownedFeatureGroup.getEReference() != null) t.addNewReference("ownedFeatureGroup".clearKeyWord(), s.ownedFeatureGroup.getEReference());
	//DataType.ownedAbstractFeature -> EReference : ownedAbstractFeature
	if (s.ownedAbstractFeature.getEReference() != null) t.addNewReference("ownedAbstractFeature".clearKeyWord(), s.ownedAbstractFeature.getEReference());
	//DataType.ownedSubprogramAccess -> EReference : ownedSubprogramAccess
	if (s.ownedSubprogramAccess.getEReference() != null) t.addNewReference("ownedSubprogramAccess".clearKeyWord(), s.ownedSubprogramAccess.getEReference());
	//DataType.ownedSubprogramGroupAccess -> EReference : ownedSubprogramGroupAccess
	if (s.ownedSubprogramGroupAccess.getEReference() != null) t.addNewReference("ownedSubprogramGroupAccess".clearKeyWord(), s.ownedSubprogramGroupAccess.getEReference());
}

@lazy
rule DataImplementation
	transform s : DSL!DataImplementation //aadl2.DataImplementation
	to t : SysMLine!ItemUsage
	extends Base{
	//DataImplementation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//DataImplementation.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//DataImplementation.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//DataImplementation.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//DataImplementation.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//DataImplementation.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//DataImplementation.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//DataImplementation.noSubcomponents -> EAttribute : noSubcomponents
	if (s.noSubcomponents.getEAttribute() != null) t.addNewAttribute("noSubcomponents".clearKeyWord(), s.noSubcomponents.getEAttribute());
	//DataImplementation.noConnections -> EAttribute : noConnections
	if (s.noConnections.getEAttribute() != null) t.addNewAttribute("noConnections".clearKeyWord(), s.noConnections.getEAttribute());
	//DataImplementation.noCalls -> EAttribute : noCalls
	if (s.noCalls.getEAttribute() != null) t.addNewAttribute("noCalls".clearKeyWord(), s.noCalls.getEAttribute());
	//DataImplementation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//DataImplementation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//DataImplementation.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//DataImplementation.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//DataImplementation.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//DataImplementation.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//DataImplementation.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//DataImplementation.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//DataImplementation.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//DataImplementation.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//DataImplementation.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//DataImplementation.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//DataImplementation.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//DataImplementation.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//DataImplementation.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
	//DataImplementation.ownedSubcomponent -> EReference : ownedSubcomponent
	if (s.ownedSubcomponent.getEReference() != null) t.addNewReference("ownedSubcomponent".clearKeyWord(), s.ownedSubcomponent.getEReference());
	//DataImplementation.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//DataImplementation.ownedFlowImplementation -> EReference : ownedFlowImplementation
	if (s.ownedFlowImplementation.getEReference() != null) t.addNewReference("ownedFlowImplementation".clearKeyWord(), s.ownedFlowImplementation.getEReference());
	//DataImplementation.ownedConnection -> EReference : ownedConnection
	if (s.ownedConnection.getEReference() != null) t.addNewReference("ownedConnection".clearKeyWord(), s.ownedConnection.getEReference());
	//DataImplementation.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//DataImplementation.ownedRealization -> EReference : ownedRealization
	if (s.ownedRealization.getEReference() != null) t.addNewReference("ownedRealization".clearKeyWord(), s.ownedRealization.getEReference());
	//DataImplementation.ownedEndToEndFlow -> EReference : ownedEndToEndFlow
	if (s.ownedEndToEndFlow.getEReference() != null) t.addNewReference("ownedEndToEndFlow".clearKeyWord(), s.ownedEndToEndFlow.getEReference());
	//DataImplementation.ownedAbstractSubcomponent -> EReference : ownedAbstractSubcomponent
	if (s.ownedAbstractSubcomponent.getEReference() != null) t.addNewReference("ownedAbstractSubcomponent".clearKeyWord(), s.ownedAbstractSubcomponent.getEReference());
	//DataImplementation.ownedAccessConnection -> EReference : ownedAccessConnection
	if (s.ownedAccessConnection.getEReference() != null) t.addNewReference("ownedAccessConnection".clearKeyWord(), s.ownedAccessConnection.getEReference());
	//DataImplementation.ownedParameterConnection -> EReference : ownedParameterConnection
	if (s.ownedParameterConnection.getEReference() != null) t.addNewReference("ownedParameterConnection".clearKeyWord(), s.ownedParameterConnection.getEReference());
	//DataImplementation.ownedPortConnection -> EReference : ownedPortConnection
	if (s.ownedPortConnection.getEReference() != null) t.addNewReference("ownedPortConnection".clearKeyWord(), s.ownedPortConnection.getEReference());
	//DataImplementation.ownedFeatureConnection -> EReference : ownedFeatureConnection
	if (s.ownedFeatureConnection.getEReference() != null) t.addNewReference("ownedFeatureConnection".clearKeyWord(), s.ownedFeatureConnection.getEReference());
	//DataImplementation.ownedFeatureGroupConnection -> EReference : ownedFeatureGroupConnection
	if (s.ownedFeatureGroupConnection.getEReference() != null) t.addNewReference("ownedFeatureGroupConnection".clearKeyWord(), s.ownedFeatureGroupConnection.getEReference());
	//DataImplementation.ownedDataSubcomponent -> EReference : ownedDataSubcomponent
	if (s.ownedDataSubcomponent.getEReference() != null) t.addNewReference("ownedDataSubcomponent".clearKeyWord(), s.ownedDataSubcomponent.getEReference());
	//DataImplementation.ownedSubprogramSubcomponent -> EReference : ownedSubprogramSubcomponent
	if (s.ownedSubprogramSubcomponent.getEReference() != null) t.addNewReference("ownedSubprogramSubcomponent".clearKeyWord(), s.ownedSubprogramSubcomponent.getEReference());
}

@lazy
rule DataPrototype
	transform s : DSL!DataPrototype //aadl2.DataPrototype
	to t : SysMLine!ItemUsage
	extends Base{
	//DataPrototype.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//DataPrototype.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//DataPrototype.array -> EAttribute : array
	if (s.array.getEAttribute() != null) t.addNewAttribute("array".clearKeyWord(), s.array.getEAttribute());
	//DataPrototype.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//DataPrototype.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//DataPrototype.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//DataPrototype.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//DataPrototype.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//DataPrototype.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//DataPrototype.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//DataPrototype.constrainingClassifier -> EReference : constrainingClassifier
	if (s.constrainingClassifier.getEReference() != null) t.addNewReference("constrainingClassifier".clearKeyWord(), s.constrainingClassifier.getEReference());
}

@lazy
rule DeviceClassifier
	transform s : DSL!DeviceClassifier //aadl2.DeviceClassifier
	to t : SysMLine!ItemUsage
	extends Base{
	//DeviceClassifier.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//DeviceClassifier.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//DeviceClassifier.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//DeviceClassifier.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//DeviceClassifier.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//DeviceClassifier.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//DeviceClassifier.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//DeviceClassifier.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//DeviceClassifier.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//DeviceClassifier.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//DeviceClassifier.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//DeviceClassifier.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//DeviceClassifier.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//DeviceClassifier.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//DeviceClassifier.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//DeviceClassifier.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//DeviceClassifier.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//DeviceClassifier.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//DeviceClassifier.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//DeviceClassifier.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//DeviceClassifier.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
}

@lazy
rule DeviceType
	transform s : DSL!DeviceType //aadl2.DeviceType
	to t : SysMLine!ItemUsage
	extends Base{
	//DeviceType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//DeviceType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//DeviceType.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//DeviceType.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//DeviceType.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//DeviceType.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//DeviceType.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//DeviceType.noFeatures -> EAttribute : noFeatures
	if (s.noFeatures.getEAttribute() != null) t.addNewAttribute("noFeatures".clearKeyWord(), s.noFeatures.getEAttribute());
	//DeviceType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//DeviceType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//DeviceType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//DeviceType.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//DeviceType.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//DeviceType.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//DeviceType.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//DeviceType.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//DeviceType.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//DeviceType.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//DeviceType.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//DeviceType.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//DeviceType.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//DeviceType.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//DeviceType.ownedFeature -> EReference : ownedFeature
	if (s.ownedFeature.getEReference() != null) t.addNewReference("ownedFeature".clearKeyWord(), s.ownedFeature.getEReference());
	//DeviceType.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//DeviceType.ownedFlowSpecification -> EReference : ownedFlowSpecification
	if (s.ownedFlowSpecification.getEReference() != null) t.addNewReference("ownedFlowSpecification".clearKeyWord(), s.ownedFlowSpecification.getEReference());
	//DeviceType.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//DeviceType.ownedFeatureGroup -> EReference : ownedFeatureGroup
	if (s.ownedFeatureGroup.getEReference() != null) t.addNewReference("ownedFeatureGroup".clearKeyWord(), s.ownedFeatureGroup.getEReference());
	//DeviceType.ownedAbstractFeature -> EReference : ownedAbstractFeature
	if (s.ownedAbstractFeature.getEReference() != null) t.addNewReference("ownedAbstractFeature".clearKeyWord(), s.ownedAbstractFeature.getEReference());
	//DeviceType.ownedDataPort -> EReference : ownedDataPort
	if (s.ownedDataPort.getEReference() != null) t.addNewReference("ownedDataPort".clearKeyWord(), s.ownedDataPort.getEReference());
	//DeviceType.ownedEventDataPort -> EReference : ownedEventDataPort
	if (s.ownedEventDataPort.getEReference() != null) t.addNewReference("ownedEventDataPort".clearKeyWord(), s.ownedEventDataPort.getEReference());
	//DeviceType.ownedEventPort -> EReference : ownedEventPort
	if (s.ownedEventPort.getEReference() != null) t.addNewReference("ownedEventPort".clearKeyWord(), s.ownedEventPort.getEReference());
	//DeviceType.ownedBusAccess -> EReference : ownedBusAccess
	if (s.ownedBusAccess.getEReference() != null) t.addNewReference("ownedBusAccess".clearKeyWord(), s.ownedBusAccess.getEReference());
	//DeviceType.ownedSubprogramAccess -> EReference : ownedSubprogramAccess
	if (s.ownedSubprogramAccess.getEReference() != null) t.addNewReference("ownedSubprogramAccess".clearKeyWord(), s.ownedSubprogramAccess.getEReference());
	//DeviceType.ownedSubprogramGroupAccess -> EReference : ownedSubprogramGroupAccess
	if (s.ownedSubprogramGroupAccess.getEReference() != null) t.addNewReference("ownedSubprogramGroupAccess".clearKeyWord(), s.ownedSubprogramGroupAccess.getEReference());
}

@lazy
rule DeviceImplementation
	transform s : DSL!DeviceImplementation //aadl2.DeviceImplementation
	to t : SysMLine!ItemUsage
	extends Base{
	//DeviceImplementation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//DeviceImplementation.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//DeviceImplementation.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//DeviceImplementation.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//DeviceImplementation.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//DeviceImplementation.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//DeviceImplementation.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//DeviceImplementation.noSubcomponents -> EAttribute : noSubcomponents
	if (s.noSubcomponents.getEAttribute() != null) t.addNewAttribute("noSubcomponents".clearKeyWord(), s.noSubcomponents.getEAttribute());
	//DeviceImplementation.noConnections -> EAttribute : noConnections
	if (s.noConnections.getEAttribute() != null) t.addNewAttribute("noConnections".clearKeyWord(), s.noConnections.getEAttribute());
	//DeviceImplementation.noCalls -> EAttribute : noCalls
	if (s.noCalls.getEAttribute() != null) t.addNewAttribute("noCalls".clearKeyWord(), s.noCalls.getEAttribute());
	//DeviceImplementation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//DeviceImplementation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//DeviceImplementation.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//DeviceImplementation.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//DeviceImplementation.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//DeviceImplementation.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//DeviceImplementation.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//DeviceImplementation.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//DeviceImplementation.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//DeviceImplementation.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//DeviceImplementation.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//DeviceImplementation.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//DeviceImplementation.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//DeviceImplementation.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//DeviceImplementation.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
	//DeviceImplementation.ownedSubcomponent -> EReference : ownedSubcomponent
	if (s.ownedSubcomponent.getEReference() != null) t.addNewReference("ownedSubcomponent".clearKeyWord(), s.ownedSubcomponent.getEReference());
	//DeviceImplementation.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//DeviceImplementation.ownedFlowImplementation -> EReference : ownedFlowImplementation
	if (s.ownedFlowImplementation.getEReference() != null) t.addNewReference("ownedFlowImplementation".clearKeyWord(), s.ownedFlowImplementation.getEReference());
	//DeviceImplementation.ownedConnection -> EReference : ownedConnection
	if (s.ownedConnection.getEReference() != null) t.addNewReference("ownedConnection".clearKeyWord(), s.ownedConnection.getEReference());
	//DeviceImplementation.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//DeviceImplementation.ownedRealization -> EReference : ownedRealization
	if (s.ownedRealization.getEReference() != null) t.addNewReference("ownedRealization".clearKeyWord(), s.ownedRealization.getEReference());
	//DeviceImplementation.ownedEndToEndFlow -> EReference : ownedEndToEndFlow
	if (s.ownedEndToEndFlow.getEReference() != null) t.addNewReference("ownedEndToEndFlow".clearKeyWord(), s.ownedEndToEndFlow.getEReference());
	//DeviceImplementation.ownedAbstractSubcomponent -> EReference : ownedAbstractSubcomponent
	if (s.ownedAbstractSubcomponent.getEReference() != null) t.addNewReference("ownedAbstractSubcomponent".clearKeyWord(), s.ownedAbstractSubcomponent.getEReference());
	//DeviceImplementation.ownedAccessConnection -> EReference : ownedAccessConnection
	if (s.ownedAccessConnection.getEReference() != null) t.addNewReference("ownedAccessConnection".clearKeyWord(), s.ownedAccessConnection.getEReference());
	//DeviceImplementation.ownedParameterConnection -> EReference : ownedParameterConnection
	if (s.ownedParameterConnection.getEReference() != null) t.addNewReference("ownedParameterConnection".clearKeyWord(), s.ownedParameterConnection.getEReference());
	//DeviceImplementation.ownedPortConnection -> EReference : ownedPortConnection
	if (s.ownedPortConnection.getEReference() != null) t.addNewReference("ownedPortConnection".clearKeyWord(), s.ownedPortConnection.getEReference());
	//DeviceImplementation.ownedFeatureConnection -> EReference : ownedFeatureConnection
	if (s.ownedFeatureConnection.getEReference() != null) t.addNewReference("ownedFeatureConnection".clearKeyWord(), s.ownedFeatureConnection.getEReference());
	//DeviceImplementation.ownedFeatureGroupConnection -> EReference : ownedFeatureGroupConnection
	if (s.ownedFeatureGroupConnection.getEReference() != null) t.addNewReference("ownedFeatureGroupConnection".clearKeyWord(), s.ownedFeatureGroupConnection.getEReference());
	//DeviceImplementation.ownedBusSubcomponent -> EReference : ownedBusSubcomponent
	if (s.ownedBusSubcomponent.getEReference() != null) t.addNewReference("ownedBusSubcomponent".clearKeyWord(), s.ownedBusSubcomponent.getEReference());
	//DeviceImplementation.ownedDataSubcomponent -> EReference : ownedDataSubcomponent
	if (s.ownedDataSubcomponent.getEReference() != null) t.addNewReference("ownedDataSubcomponent".clearKeyWord(), s.ownedDataSubcomponent.getEReference());
	//DeviceImplementation.ownedVirtualBusSubcomponent -> EReference : ownedVirtualBusSubcomponent
	if (s.ownedVirtualBusSubcomponent.getEReference() != null) t.addNewReference("ownedVirtualBusSubcomponent".clearKeyWord(), s.ownedVirtualBusSubcomponent.getEReference());
}

@lazy
rule DevicePrototype
	transform s : DSL!DevicePrototype //aadl2.DevicePrototype
	to t : SysMLine!ItemUsage
	extends Base{
	//DevicePrototype.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//DevicePrototype.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//DevicePrototype.array -> EAttribute : array
	if (s.array.getEAttribute() != null) t.addNewAttribute("array".clearKeyWord(), s.array.getEAttribute());
	//DevicePrototype.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//DevicePrototype.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//DevicePrototype.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//DevicePrototype.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//DevicePrototype.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//DevicePrototype.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//DevicePrototype.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//DevicePrototype.constrainingClassifier -> EReference : constrainingClassifier
	if (s.constrainingClassifier.getEReference() != null) t.addNewReference("constrainingClassifier".clearKeyWord(), s.constrainingClassifier.getEReference());
}

@lazy
rule MemoryClassifier
	transform s : DSL!MemoryClassifier //aadl2.MemoryClassifier
	to t : SysMLine!ItemUsage
	extends Base{
	//MemoryClassifier.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//MemoryClassifier.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//MemoryClassifier.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//MemoryClassifier.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//MemoryClassifier.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//MemoryClassifier.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//MemoryClassifier.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//MemoryClassifier.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//MemoryClassifier.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//MemoryClassifier.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//MemoryClassifier.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//MemoryClassifier.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//MemoryClassifier.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//MemoryClassifier.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//MemoryClassifier.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//MemoryClassifier.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//MemoryClassifier.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//MemoryClassifier.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//MemoryClassifier.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//MemoryClassifier.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//MemoryClassifier.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
}

@lazy
rule MemoryType
	transform s : DSL!MemoryType //aadl2.MemoryType
	to t : SysMLine!ItemUsage
	extends Base{
	//MemoryType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//MemoryType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//MemoryType.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//MemoryType.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//MemoryType.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//MemoryType.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//MemoryType.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//MemoryType.noFeatures -> EAttribute : noFeatures
	if (s.noFeatures.getEAttribute() != null) t.addNewAttribute("noFeatures".clearKeyWord(), s.noFeatures.getEAttribute());
	//MemoryType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//MemoryType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//MemoryType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//MemoryType.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//MemoryType.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//MemoryType.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//MemoryType.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//MemoryType.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//MemoryType.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//MemoryType.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//MemoryType.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//MemoryType.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//MemoryType.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//MemoryType.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//MemoryType.ownedFeature -> EReference : ownedFeature
	if (s.ownedFeature.getEReference() != null) t.addNewReference("ownedFeature".clearKeyWord(), s.ownedFeature.getEReference());
	//MemoryType.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//MemoryType.ownedFlowSpecification -> EReference : ownedFlowSpecification
	if (s.ownedFlowSpecification.getEReference() != null) t.addNewReference("ownedFlowSpecification".clearKeyWord(), s.ownedFlowSpecification.getEReference());
	//MemoryType.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//MemoryType.ownedFeatureGroup -> EReference : ownedFeatureGroup
	if (s.ownedFeatureGroup.getEReference() != null) t.addNewReference("ownedFeatureGroup".clearKeyWord(), s.ownedFeatureGroup.getEReference());
	//MemoryType.ownedAbstractFeature -> EReference : ownedAbstractFeature
	if (s.ownedAbstractFeature.getEReference() != null) t.addNewReference("ownedAbstractFeature".clearKeyWord(), s.ownedAbstractFeature.getEReference());
	//MemoryType.ownedBusAccess -> EReference : ownedBusAccess
	if (s.ownedBusAccess.getEReference() != null) t.addNewReference("ownedBusAccess".clearKeyWord(), s.ownedBusAccess.getEReference());
	//MemoryType.ownedDataPort -> EReference : ownedDataPort
	if (s.ownedDataPort.getEReference() != null) t.addNewReference("ownedDataPort".clearKeyWord(), s.ownedDataPort.getEReference());
	//MemoryType.ownedEventDataPort -> EReference : ownedEventDataPort
	if (s.ownedEventDataPort.getEReference() != null) t.addNewReference("ownedEventDataPort".clearKeyWord(), s.ownedEventDataPort.getEReference());
	//MemoryType.ownedEventPort -> EReference : ownedEventPort
	if (s.ownedEventPort.getEReference() != null) t.addNewReference("ownedEventPort".clearKeyWord(), s.ownedEventPort.getEReference());
}

@lazy
rule MemoryImplementation
	transform s : DSL!MemoryImplementation //aadl2.MemoryImplementation
	to t : SysMLine!ItemUsage
	extends Base{
	//MemoryImplementation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//MemoryImplementation.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//MemoryImplementation.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//MemoryImplementation.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//MemoryImplementation.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//MemoryImplementation.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//MemoryImplementation.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//MemoryImplementation.noSubcomponents -> EAttribute : noSubcomponents
	if (s.noSubcomponents.getEAttribute() != null) t.addNewAttribute("noSubcomponents".clearKeyWord(), s.noSubcomponents.getEAttribute());
	//MemoryImplementation.noConnections -> EAttribute : noConnections
	if (s.noConnections.getEAttribute() != null) t.addNewAttribute("noConnections".clearKeyWord(), s.noConnections.getEAttribute());
	//MemoryImplementation.noCalls -> EAttribute : noCalls
	if (s.noCalls.getEAttribute() != null) t.addNewAttribute("noCalls".clearKeyWord(), s.noCalls.getEAttribute());
	//MemoryImplementation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//MemoryImplementation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//MemoryImplementation.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//MemoryImplementation.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//MemoryImplementation.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//MemoryImplementation.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//MemoryImplementation.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//MemoryImplementation.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//MemoryImplementation.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//MemoryImplementation.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//MemoryImplementation.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//MemoryImplementation.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//MemoryImplementation.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//MemoryImplementation.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//MemoryImplementation.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
	//MemoryImplementation.ownedSubcomponent -> EReference : ownedSubcomponent
	if (s.ownedSubcomponent.getEReference() != null) t.addNewReference("ownedSubcomponent".clearKeyWord(), s.ownedSubcomponent.getEReference());
	//MemoryImplementation.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//MemoryImplementation.ownedFlowImplementation -> EReference : ownedFlowImplementation
	if (s.ownedFlowImplementation.getEReference() != null) t.addNewReference("ownedFlowImplementation".clearKeyWord(), s.ownedFlowImplementation.getEReference());
	//MemoryImplementation.ownedConnection -> EReference : ownedConnection
	if (s.ownedConnection.getEReference() != null) t.addNewReference("ownedConnection".clearKeyWord(), s.ownedConnection.getEReference());
	//MemoryImplementation.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//MemoryImplementation.ownedRealization -> EReference : ownedRealization
	if (s.ownedRealization.getEReference() != null) t.addNewReference("ownedRealization".clearKeyWord(), s.ownedRealization.getEReference());
	//MemoryImplementation.ownedEndToEndFlow -> EReference : ownedEndToEndFlow
	if (s.ownedEndToEndFlow.getEReference() != null) t.addNewReference("ownedEndToEndFlow".clearKeyWord(), s.ownedEndToEndFlow.getEReference());
	//MemoryImplementation.ownedAbstractSubcomponent -> EReference : ownedAbstractSubcomponent
	if (s.ownedAbstractSubcomponent.getEReference() != null) t.addNewReference("ownedAbstractSubcomponent".clearKeyWord(), s.ownedAbstractSubcomponent.getEReference());
	//MemoryImplementation.ownedAccessConnection -> EReference : ownedAccessConnection
	if (s.ownedAccessConnection.getEReference() != null) t.addNewReference("ownedAccessConnection".clearKeyWord(), s.ownedAccessConnection.getEReference());
	//MemoryImplementation.ownedParameterConnection -> EReference : ownedParameterConnection
	if (s.ownedParameterConnection.getEReference() != null) t.addNewReference("ownedParameterConnection".clearKeyWord(), s.ownedParameterConnection.getEReference());
	//MemoryImplementation.ownedPortConnection -> EReference : ownedPortConnection
	if (s.ownedPortConnection.getEReference() != null) t.addNewReference("ownedPortConnection".clearKeyWord(), s.ownedPortConnection.getEReference());
	//MemoryImplementation.ownedFeatureConnection -> EReference : ownedFeatureConnection
	if (s.ownedFeatureConnection.getEReference() != null) t.addNewReference("ownedFeatureConnection".clearKeyWord(), s.ownedFeatureConnection.getEReference());
	//MemoryImplementation.ownedFeatureGroupConnection -> EReference : ownedFeatureGroupConnection
	if (s.ownedFeatureGroupConnection.getEReference() != null) t.addNewReference("ownedFeatureGroupConnection".clearKeyWord(), s.ownedFeatureGroupConnection.getEReference());
	//MemoryImplementation.ownedBusSubcomponent -> EReference : ownedBusSubcomponent
	if (s.ownedBusSubcomponent.getEReference() != null) t.addNewReference("ownedBusSubcomponent".clearKeyWord(), s.ownedBusSubcomponent.getEReference());
	//MemoryImplementation.ownedMemorySubcomponent -> EReference : ownedMemorySubcomponent
	if (s.ownedMemorySubcomponent.getEReference() != null) t.addNewReference("ownedMemorySubcomponent".clearKeyWord(), s.ownedMemorySubcomponent.getEReference());
}

@lazy
rule MemoryPrototype
	transform s : DSL!MemoryPrototype //aadl2.MemoryPrototype
	to t : SysMLine!ItemUsage
	extends Base{
	//MemoryPrototype.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//MemoryPrototype.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//MemoryPrototype.array -> EAttribute : array
	if (s.array.getEAttribute() != null) t.addNewAttribute("array".clearKeyWord(), s.array.getEAttribute());
	//MemoryPrototype.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//MemoryPrototype.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//MemoryPrototype.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//MemoryPrototype.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//MemoryPrototype.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//MemoryPrototype.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//MemoryPrototype.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//MemoryPrototype.constrainingClassifier -> EReference : constrainingClassifier
	if (s.constrainingClassifier.getEReference() != null) t.addNewReference("constrainingClassifier".clearKeyWord(), s.constrainingClassifier.getEReference());
}

@lazy
rule SubprogramClassifier
	transform s : DSL!SubprogramClassifier //aadl2.SubprogramClassifier
	to t : SysMLine!ItemUsage
	extends Base{
	//SubprogramClassifier.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SubprogramClassifier.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SubprogramClassifier.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//SubprogramClassifier.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//SubprogramClassifier.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//SubprogramClassifier.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//SubprogramClassifier.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//SubprogramClassifier.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SubprogramClassifier.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SubprogramClassifier.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//SubprogramClassifier.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//SubprogramClassifier.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//SubprogramClassifier.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//SubprogramClassifier.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//SubprogramClassifier.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//SubprogramClassifier.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//SubprogramClassifier.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//SubprogramClassifier.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//SubprogramClassifier.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//SubprogramClassifier.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//SubprogramClassifier.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
}

@lazy
rule SubprogramType
	transform s : DSL!SubprogramType //aadl2.SubprogramType
	to t : SysMLine!ItemUsage
	extends Base{
	//SubprogramType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SubprogramType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SubprogramType.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//SubprogramType.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//SubprogramType.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//SubprogramType.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//SubprogramType.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//SubprogramType.noFeatures -> EAttribute : noFeatures
	if (s.noFeatures.getEAttribute() != null) t.addNewAttribute("noFeatures".clearKeyWord(), s.noFeatures.getEAttribute());
	//SubprogramType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SubprogramType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SubprogramType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//SubprogramType.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//SubprogramType.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//SubprogramType.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//SubprogramType.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//SubprogramType.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//SubprogramType.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//SubprogramType.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//SubprogramType.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//SubprogramType.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//SubprogramType.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//SubprogramType.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//SubprogramType.ownedFeature -> EReference : ownedFeature
	if (s.ownedFeature.getEReference() != null) t.addNewReference("ownedFeature".clearKeyWord(), s.ownedFeature.getEReference());
	//SubprogramType.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//SubprogramType.ownedFlowSpecification -> EReference : ownedFlowSpecification
	if (s.ownedFlowSpecification.getEReference() != null) t.addNewReference("ownedFlowSpecification".clearKeyWord(), s.ownedFlowSpecification.getEReference());
	//SubprogramType.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//SubprogramType.ownedFeatureGroup -> EReference : ownedFeatureGroup
	if (s.ownedFeatureGroup.getEReference() != null) t.addNewReference("ownedFeatureGroup".clearKeyWord(), s.ownedFeatureGroup.getEReference());
	//SubprogramType.ownedAbstractFeature -> EReference : ownedAbstractFeature
	if (s.ownedAbstractFeature.getEReference() != null) t.addNewReference("ownedAbstractFeature".clearKeyWord(), s.ownedAbstractFeature.getEReference());
	//SubprogramType.ownedEventDataPort -> EReference : ownedEventDataPort
	if (s.ownedEventDataPort.getEReference() != null) t.addNewReference("ownedEventDataPort".clearKeyWord(), s.ownedEventDataPort.getEReference());
	//SubprogramType.ownedEventPort -> EReference : ownedEventPort
	if (s.ownedEventPort.getEReference() != null) t.addNewReference("ownedEventPort".clearKeyWord(), s.ownedEventPort.getEReference());
	//SubprogramType.ownedParameter -> EReference : ownedParameter
	if (s.ownedParameter.getEReference() != null) t.addNewReference("ownedParameter".clearKeyWord(), s.ownedParameter.getEReference());
	//SubprogramType.ownedDataAccess -> EReference : ownedDataAccess
	if (s.ownedDataAccess.getEReference() != null) t.addNewReference("ownedDataAccess".clearKeyWord(), s.ownedDataAccess.getEReference());
	//SubprogramType.ownedSubprogramAccess -> EReference : ownedSubprogramAccess
	if (s.ownedSubprogramAccess.getEReference() != null) t.addNewReference("ownedSubprogramAccess".clearKeyWord(), s.ownedSubprogramAccess.getEReference());
	//SubprogramType.ownedSubprogramGroupAccess -> EReference : ownedSubprogramGroupAccess
	if (s.ownedSubprogramGroupAccess.getEReference() != null) t.addNewReference("ownedSubprogramGroupAccess".clearKeyWord(), s.ownedSubprogramGroupAccess.getEReference());
}

@lazy
rule SubprogramImplementation
	transform s : DSL!SubprogramImplementation //aadl2.SubprogramImplementation
	to t : SysMLine!ItemUsage
	extends Base{
	//SubprogramImplementation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SubprogramImplementation.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SubprogramImplementation.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//SubprogramImplementation.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//SubprogramImplementation.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//SubprogramImplementation.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//SubprogramImplementation.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//SubprogramImplementation.noSubcomponents -> EAttribute : noSubcomponents
	if (s.noSubcomponents.getEAttribute() != null) t.addNewAttribute("noSubcomponents".clearKeyWord(), s.noSubcomponents.getEAttribute());
	//SubprogramImplementation.noConnections -> EAttribute : noConnections
	if (s.noConnections.getEAttribute() != null) t.addNewAttribute("noConnections".clearKeyWord(), s.noConnections.getEAttribute());
	//SubprogramImplementation.noCalls -> EAttribute : noCalls
	if (s.noCalls.getEAttribute() != null) t.addNewAttribute("noCalls".clearKeyWord(), s.noCalls.getEAttribute());
	//SubprogramImplementation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SubprogramImplementation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SubprogramImplementation.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//SubprogramImplementation.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//SubprogramImplementation.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//SubprogramImplementation.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//SubprogramImplementation.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//SubprogramImplementation.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//SubprogramImplementation.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//SubprogramImplementation.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//SubprogramImplementation.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//SubprogramImplementation.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//SubprogramImplementation.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//SubprogramImplementation.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//SubprogramImplementation.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
	//SubprogramImplementation.ownedSubcomponent -> EReference : ownedSubcomponent
	if (s.ownedSubcomponent.getEReference() != null) t.addNewReference("ownedSubcomponent".clearKeyWord(), s.ownedSubcomponent.getEReference());
	//SubprogramImplementation.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//SubprogramImplementation.ownedFlowImplementation -> EReference : ownedFlowImplementation
	if (s.ownedFlowImplementation.getEReference() != null) t.addNewReference("ownedFlowImplementation".clearKeyWord(), s.ownedFlowImplementation.getEReference());
	//SubprogramImplementation.ownedConnection -> EReference : ownedConnection
	if (s.ownedConnection.getEReference() != null) t.addNewReference("ownedConnection".clearKeyWord(), s.ownedConnection.getEReference());
	//SubprogramImplementation.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//SubprogramImplementation.ownedRealization -> EReference : ownedRealization
	if (s.ownedRealization.getEReference() != null) t.addNewReference("ownedRealization".clearKeyWord(), s.ownedRealization.getEReference());
	//SubprogramImplementation.ownedEndToEndFlow -> EReference : ownedEndToEndFlow
	if (s.ownedEndToEndFlow.getEReference() != null) t.addNewReference("ownedEndToEndFlow".clearKeyWord(), s.ownedEndToEndFlow.getEReference());
	//SubprogramImplementation.ownedAbstractSubcomponent -> EReference : ownedAbstractSubcomponent
	if (s.ownedAbstractSubcomponent.getEReference() != null) t.addNewReference("ownedAbstractSubcomponent".clearKeyWord(), s.ownedAbstractSubcomponent.getEReference());
	//SubprogramImplementation.ownedAccessConnection -> EReference : ownedAccessConnection
	if (s.ownedAccessConnection.getEReference() != null) t.addNewReference("ownedAccessConnection".clearKeyWord(), s.ownedAccessConnection.getEReference());
	//SubprogramImplementation.ownedParameterConnection -> EReference : ownedParameterConnection
	if (s.ownedParameterConnection.getEReference() != null) t.addNewReference("ownedParameterConnection".clearKeyWord(), s.ownedParameterConnection.getEReference());
	//SubprogramImplementation.ownedPortConnection -> EReference : ownedPortConnection
	if (s.ownedPortConnection.getEReference() != null) t.addNewReference("ownedPortConnection".clearKeyWord(), s.ownedPortConnection.getEReference());
	//SubprogramImplementation.ownedFeatureConnection -> EReference : ownedFeatureConnection
	if (s.ownedFeatureConnection.getEReference() != null) t.addNewReference("ownedFeatureConnection".clearKeyWord(), s.ownedFeatureConnection.getEReference());
	//SubprogramImplementation.ownedFeatureGroupConnection -> EReference : ownedFeatureGroupConnection
	if (s.ownedFeatureGroupConnection.getEReference() != null) t.addNewReference("ownedFeatureGroupConnection".clearKeyWord(), s.ownedFeatureGroupConnection.getEReference());
	//SubprogramImplementation.callSpecification -> EReference : callSpecification
	if (s.callSpecification.getEReference() != null) t.addNewReference("callSpecification".clearKeyWord(), s.callSpecification.getEReference());
	//SubprogramImplementation.ownedSubprogramCallSequence -> EReference : ownedSubprogramCallSequence
	if (s.ownedSubprogramCallSequence.getEReference() != null) t.addNewReference("ownedSubprogramCallSequence".clearKeyWord(), s.ownedSubprogramCallSequence.getEReference());
	//SubprogramImplementation.ownedDataSubcomponent -> EReference : ownedDataSubcomponent
	if (s.ownedDataSubcomponent.getEReference() != null) t.addNewReference("ownedDataSubcomponent".clearKeyWord(), s.ownedDataSubcomponent.getEReference());
}

@lazy
rule SubprogramPrototype
	transform s : DSL!SubprogramPrototype //aadl2.SubprogramPrototype
	to t : SysMLine!ItemUsage
	extends Base{
	//SubprogramPrototype.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SubprogramPrototype.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SubprogramPrototype.array -> EAttribute : array
	if (s.array.getEAttribute() != null) t.addNewAttribute("array".clearKeyWord(), s.array.getEAttribute());
	//SubprogramPrototype.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SubprogramPrototype.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SubprogramPrototype.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//SubprogramPrototype.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//SubprogramPrototype.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//SubprogramPrototype.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//SubprogramPrototype.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//SubprogramPrototype.constrainingClassifier -> EReference : constrainingClassifier
	if (s.constrainingClassifier.getEReference() != null) t.addNewReference("constrainingClassifier".clearKeyWord(), s.constrainingClassifier.getEReference());
}

@lazy
rule SubprogramGroupClassifier
	transform s : DSL!SubprogramGroupClassifier //aadl2.SubprogramGroupClassifier
	to t : SysMLine!ItemUsage
	extends Base{
	//SubprogramGroupClassifier.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SubprogramGroupClassifier.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SubprogramGroupClassifier.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//SubprogramGroupClassifier.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//SubprogramGroupClassifier.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//SubprogramGroupClassifier.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//SubprogramGroupClassifier.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//SubprogramGroupClassifier.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SubprogramGroupClassifier.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SubprogramGroupClassifier.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//SubprogramGroupClassifier.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//SubprogramGroupClassifier.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//SubprogramGroupClassifier.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//SubprogramGroupClassifier.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//SubprogramGroupClassifier.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//SubprogramGroupClassifier.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//SubprogramGroupClassifier.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//SubprogramGroupClassifier.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//SubprogramGroupClassifier.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//SubprogramGroupClassifier.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//SubprogramGroupClassifier.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
}

@lazy
rule SubprogramGroupType
	transform s : DSL!SubprogramGroupType //aadl2.SubprogramGroupType
	to t : SysMLine!ItemUsage
	extends Base{
	//SubprogramGroupType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SubprogramGroupType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SubprogramGroupType.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//SubprogramGroupType.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//SubprogramGroupType.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//SubprogramGroupType.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//SubprogramGroupType.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//SubprogramGroupType.noFeatures -> EAttribute : noFeatures
	if (s.noFeatures.getEAttribute() != null) t.addNewAttribute("noFeatures".clearKeyWord(), s.noFeatures.getEAttribute());
	//SubprogramGroupType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SubprogramGroupType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SubprogramGroupType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//SubprogramGroupType.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//SubprogramGroupType.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//SubprogramGroupType.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//SubprogramGroupType.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//SubprogramGroupType.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//SubprogramGroupType.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//SubprogramGroupType.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//SubprogramGroupType.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//SubprogramGroupType.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//SubprogramGroupType.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//SubprogramGroupType.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//SubprogramGroupType.ownedFeature -> EReference : ownedFeature
	if (s.ownedFeature.getEReference() != null) t.addNewReference("ownedFeature".clearKeyWord(), s.ownedFeature.getEReference());
	//SubprogramGroupType.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//SubprogramGroupType.ownedFlowSpecification -> EReference : ownedFlowSpecification
	if (s.ownedFlowSpecification.getEReference() != null) t.addNewReference("ownedFlowSpecification".clearKeyWord(), s.ownedFlowSpecification.getEReference());
	//SubprogramGroupType.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//SubprogramGroupType.ownedFeatureGroup -> EReference : ownedFeatureGroup
	if (s.ownedFeatureGroup.getEReference() != null) t.addNewReference("ownedFeatureGroup".clearKeyWord(), s.ownedFeatureGroup.getEReference());
	//SubprogramGroupType.ownedAbstractFeature -> EReference : ownedAbstractFeature
	if (s.ownedAbstractFeature.getEReference() != null) t.addNewReference("ownedAbstractFeature".clearKeyWord(), s.ownedAbstractFeature.getEReference());
	//SubprogramGroupType.ownedSubprogramAccess -> EReference : ownedSubprogramAccess
	if (s.ownedSubprogramAccess.getEReference() != null) t.addNewReference("ownedSubprogramAccess".clearKeyWord(), s.ownedSubprogramAccess.getEReference());
	//SubprogramGroupType.ownedSubprogramGroupAccess -> EReference : ownedSubprogramGroupAccess
	if (s.ownedSubprogramGroupAccess.getEReference() != null) t.addNewReference("ownedSubprogramGroupAccess".clearKeyWord(), s.ownedSubprogramGroupAccess.getEReference());
}

@lazy
rule SubprogramGroupImplementation
	transform s : DSL!SubprogramGroupImplementation //aadl2.SubprogramGroupImplementation
	to t : SysMLine!ItemUsage
	extends Base{
	//SubprogramGroupImplementation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SubprogramGroupImplementation.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SubprogramGroupImplementation.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//SubprogramGroupImplementation.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//SubprogramGroupImplementation.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//SubprogramGroupImplementation.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//SubprogramGroupImplementation.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//SubprogramGroupImplementation.noSubcomponents -> EAttribute : noSubcomponents
	if (s.noSubcomponents.getEAttribute() != null) t.addNewAttribute("noSubcomponents".clearKeyWord(), s.noSubcomponents.getEAttribute());
	//SubprogramGroupImplementation.noConnections -> EAttribute : noConnections
	if (s.noConnections.getEAttribute() != null) t.addNewAttribute("noConnections".clearKeyWord(), s.noConnections.getEAttribute());
	//SubprogramGroupImplementation.noCalls -> EAttribute : noCalls
	if (s.noCalls.getEAttribute() != null) t.addNewAttribute("noCalls".clearKeyWord(), s.noCalls.getEAttribute());
	//SubprogramGroupImplementation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SubprogramGroupImplementation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SubprogramGroupImplementation.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//SubprogramGroupImplementation.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//SubprogramGroupImplementation.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//SubprogramGroupImplementation.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//SubprogramGroupImplementation.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//SubprogramGroupImplementation.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//SubprogramGroupImplementation.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//SubprogramGroupImplementation.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//SubprogramGroupImplementation.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//SubprogramGroupImplementation.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//SubprogramGroupImplementation.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//SubprogramGroupImplementation.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//SubprogramGroupImplementation.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
	//SubprogramGroupImplementation.ownedSubcomponent -> EReference : ownedSubcomponent
	if (s.ownedSubcomponent.getEReference() != null) t.addNewReference("ownedSubcomponent".clearKeyWord(), s.ownedSubcomponent.getEReference());
	//SubprogramGroupImplementation.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//SubprogramGroupImplementation.ownedFlowImplementation -> EReference : ownedFlowImplementation
	if (s.ownedFlowImplementation.getEReference() != null) t.addNewReference("ownedFlowImplementation".clearKeyWord(), s.ownedFlowImplementation.getEReference());
	//SubprogramGroupImplementation.ownedConnection -> EReference : ownedConnection
	if (s.ownedConnection.getEReference() != null) t.addNewReference("ownedConnection".clearKeyWord(), s.ownedConnection.getEReference());
	//SubprogramGroupImplementation.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//SubprogramGroupImplementation.ownedRealization -> EReference : ownedRealization
	if (s.ownedRealization.getEReference() != null) t.addNewReference("ownedRealization".clearKeyWord(), s.ownedRealization.getEReference());
	//SubprogramGroupImplementation.ownedEndToEndFlow -> EReference : ownedEndToEndFlow
	if (s.ownedEndToEndFlow.getEReference() != null) t.addNewReference("ownedEndToEndFlow".clearKeyWord(), s.ownedEndToEndFlow.getEReference());
	//SubprogramGroupImplementation.ownedAbstractSubcomponent -> EReference : ownedAbstractSubcomponent
	if (s.ownedAbstractSubcomponent.getEReference() != null) t.addNewReference("ownedAbstractSubcomponent".clearKeyWord(), s.ownedAbstractSubcomponent.getEReference());
	//SubprogramGroupImplementation.ownedAccessConnection -> EReference : ownedAccessConnection
	if (s.ownedAccessConnection.getEReference() != null) t.addNewReference("ownedAccessConnection".clearKeyWord(), s.ownedAccessConnection.getEReference());
	//SubprogramGroupImplementation.ownedParameterConnection -> EReference : ownedParameterConnection
	if (s.ownedParameterConnection.getEReference() != null) t.addNewReference("ownedParameterConnection".clearKeyWord(), s.ownedParameterConnection.getEReference());
	//SubprogramGroupImplementation.ownedPortConnection -> EReference : ownedPortConnection
	if (s.ownedPortConnection.getEReference() != null) t.addNewReference("ownedPortConnection".clearKeyWord(), s.ownedPortConnection.getEReference());
	//SubprogramGroupImplementation.ownedFeatureConnection -> EReference : ownedFeatureConnection
	if (s.ownedFeatureConnection.getEReference() != null) t.addNewReference("ownedFeatureConnection".clearKeyWord(), s.ownedFeatureConnection.getEReference());
	//SubprogramGroupImplementation.ownedFeatureGroupConnection -> EReference : ownedFeatureGroupConnection
	if (s.ownedFeatureGroupConnection.getEReference() != null) t.addNewReference("ownedFeatureGroupConnection".clearKeyWord(), s.ownedFeatureGroupConnection.getEReference());
	//SubprogramGroupImplementation.ownedSubprogramSubcomponent -> EReference : ownedSubprogramSubcomponent
	if (s.ownedSubprogramSubcomponent.getEReference() != null) t.addNewReference("ownedSubprogramSubcomponent".clearKeyWord(), s.ownedSubprogramSubcomponent.getEReference());
	//SubprogramGroupImplementation.ownedSubprogramGroupSubcomponent -> EReference : ownedSubprogramGroupSubcomponent
	if (s.ownedSubprogramGroupSubcomponent.getEReference() != null) t.addNewReference("ownedSubprogramGroupSubcomponent".clearKeyWord(), s.ownedSubprogramGroupSubcomponent.getEReference());
}

@lazy
rule SubprogramGroupPrototype
	transform s : DSL!SubprogramGroupPrototype //aadl2.SubprogramGroupPrototype
	to t : SysMLine!ItemUsage
	extends Base{
	//SubprogramGroupPrototype.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SubprogramGroupPrototype.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SubprogramGroupPrototype.array -> EAttribute : array
	if (s.array.getEAttribute() != null) t.addNewAttribute("array".clearKeyWord(), s.array.getEAttribute());
	//SubprogramGroupPrototype.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SubprogramGroupPrototype.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SubprogramGroupPrototype.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//SubprogramGroupPrototype.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//SubprogramGroupPrototype.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//SubprogramGroupPrototype.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//SubprogramGroupPrototype.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//SubprogramGroupPrototype.constrainingClassifier -> EReference : constrainingClassifier
	if (s.constrainingClassifier.getEReference() != null) t.addNewReference("constrainingClassifier".clearKeyWord(), s.constrainingClassifier.getEReference());
}

@lazy
rule SystemClassifier
	transform s : DSL!SystemClassifier //aadl2.SystemClassifier
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemClassifier.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SystemClassifier.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SystemClassifier.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//SystemClassifier.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//SystemClassifier.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//SystemClassifier.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//SystemClassifier.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//SystemClassifier.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SystemClassifier.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SystemClassifier.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//SystemClassifier.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//SystemClassifier.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//SystemClassifier.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//SystemClassifier.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//SystemClassifier.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//SystemClassifier.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//SystemClassifier.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//SystemClassifier.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//SystemClassifier.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//SystemClassifier.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//SystemClassifier.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
}

@lazy
rule SystemType
	transform s : DSL!SystemType //aadl2.SystemType
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SystemType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SystemType.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//SystemType.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//SystemType.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//SystemType.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//SystemType.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//SystemType.noFeatures -> EAttribute : noFeatures
	if (s.noFeatures.getEAttribute() != null) t.addNewAttribute("noFeatures".clearKeyWord(), s.noFeatures.getEAttribute());
	//SystemType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SystemType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SystemType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//SystemType.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//SystemType.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//SystemType.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//SystemType.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//SystemType.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//SystemType.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//SystemType.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//SystemType.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//SystemType.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//SystemType.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//SystemType.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//SystemType.ownedFeature -> EReference : ownedFeature
	if (s.ownedFeature.getEReference() != null) t.addNewReference("ownedFeature".clearKeyWord(), s.ownedFeature.getEReference());
	//SystemType.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//SystemType.ownedFlowSpecification -> EReference : ownedFlowSpecification
	if (s.ownedFlowSpecification.getEReference() != null) t.addNewReference("ownedFlowSpecification".clearKeyWord(), s.ownedFlowSpecification.getEReference());
	//SystemType.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//SystemType.ownedFeatureGroup -> EReference : ownedFeatureGroup
	if (s.ownedFeatureGroup.getEReference() != null) t.addNewReference("ownedFeatureGroup".clearKeyWord(), s.ownedFeatureGroup.getEReference());
	//SystemType.ownedAbstractFeature -> EReference : ownedAbstractFeature
	if (s.ownedAbstractFeature.getEReference() != null) t.addNewReference("ownedAbstractFeature".clearKeyWord(), s.ownedAbstractFeature.getEReference());
	//SystemType.ownedBusAccess -> EReference : ownedBusAccess
	if (s.ownedBusAccess.getEReference() != null) t.addNewReference("ownedBusAccess".clearKeyWord(), s.ownedBusAccess.getEReference());
	//SystemType.ownedDataAccess -> EReference : ownedDataAccess
	if (s.ownedDataAccess.getEReference() != null) t.addNewReference("ownedDataAccess".clearKeyWord(), s.ownedDataAccess.getEReference());
	//SystemType.ownedDataPort -> EReference : ownedDataPort
	if (s.ownedDataPort.getEReference() != null) t.addNewReference("ownedDataPort".clearKeyWord(), s.ownedDataPort.getEReference());
	//SystemType.ownedSubprogramGroupAccess -> EReference : ownedSubprogramGroupAccess
	if (s.ownedSubprogramGroupAccess.getEReference() != null) t.addNewReference("ownedSubprogramGroupAccess".clearKeyWord(), s.ownedSubprogramGroupAccess.getEReference());
	//SystemType.ownedSubprogramAccess -> EReference : ownedSubprogramAccess
	if (s.ownedSubprogramAccess.getEReference() != null) t.addNewReference("ownedSubprogramAccess".clearKeyWord(), s.ownedSubprogramAccess.getEReference());
	//SystemType.ownedEventPort -> EReference : ownedEventPort
	if (s.ownedEventPort.getEReference() != null) t.addNewReference("ownedEventPort".clearKeyWord(), s.ownedEventPort.getEReference());
	//SystemType.ownedEventDataPort -> EReference : ownedEventDataPort
	if (s.ownedEventDataPort.getEReference() != null) t.addNewReference("ownedEventDataPort".clearKeyWord(), s.ownedEventDataPort.getEReference());
}

@lazy
rule SystemImplementation
	transform s : DSL!SystemImplementation //aadl2.SystemImplementation
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemImplementation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SystemImplementation.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SystemImplementation.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//SystemImplementation.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//SystemImplementation.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//SystemImplementation.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//SystemImplementation.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//SystemImplementation.noSubcomponents -> EAttribute : noSubcomponents
	if (s.noSubcomponents.getEAttribute() != null) t.addNewAttribute("noSubcomponents".clearKeyWord(), s.noSubcomponents.getEAttribute());
	//SystemImplementation.noConnections -> EAttribute : noConnections
	if (s.noConnections.getEAttribute() != null) t.addNewAttribute("noConnections".clearKeyWord(), s.noConnections.getEAttribute());
	//SystemImplementation.noCalls -> EAttribute : noCalls
	if (s.noCalls.getEAttribute() != null) t.addNewAttribute("noCalls".clearKeyWord(), s.noCalls.getEAttribute());
	//SystemImplementation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SystemImplementation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SystemImplementation.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//SystemImplementation.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//SystemImplementation.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//SystemImplementation.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//SystemImplementation.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//SystemImplementation.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//SystemImplementation.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//SystemImplementation.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//SystemImplementation.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//SystemImplementation.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//SystemImplementation.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//SystemImplementation.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//SystemImplementation.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
	//SystemImplementation.ownedSubcomponent -> EReference : ownedSubcomponent
	if (s.ownedSubcomponent.getEReference() != null) t.addNewReference("ownedSubcomponent".clearKeyWord(), s.ownedSubcomponent.getEReference());
	//SystemImplementation.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//SystemImplementation.ownedFlowImplementation -> EReference : ownedFlowImplementation
	if (s.ownedFlowImplementation.getEReference() != null) t.addNewReference("ownedFlowImplementation".clearKeyWord(), s.ownedFlowImplementation.getEReference());
	//SystemImplementation.ownedConnection -> EReference : ownedConnection
	if (s.ownedConnection.getEReference() != null) t.addNewReference("ownedConnection".clearKeyWord(), s.ownedConnection.getEReference());
	//SystemImplementation.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//SystemImplementation.ownedRealization -> EReference : ownedRealization
	if (s.ownedRealization.getEReference() != null) t.addNewReference("ownedRealization".clearKeyWord(), s.ownedRealization.getEReference());
	//SystemImplementation.ownedEndToEndFlow -> EReference : ownedEndToEndFlow
	if (s.ownedEndToEndFlow.getEReference() != null) t.addNewReference("ownedEndToEndFlow".clearKeyWord(), s.ownedEndToEndFlow.getEReference());
	//SystemImplementation.ownedAbstractSubcomponent -> EReference : ownedAbstractSubcomponent
	if (s.ownedAbstractSubcomponent.getEReference() != null) t.addNewReference("ownedAbstractSubcomponent".clearKeyWord(), s.ownedAbstractSubcomponent.getEReference());
	//SystemImplementation.ownedAccessConnection -> EReference : ownedAccessConnection
	if (s.ownedAccessConnection.getEReference() != null) t.addNewReference("ownedAccessConnection".clearKeyWord(), s.ownedAccessConnection.getEReference());
	//SystemImplementation.ownedParameterConnection -> EReference : ownedParameterConnection
	if (s.ownedParameterConnection.getEReference() != null) t.addNewReference("ownedParameterConnection".clearKeyWord(), s.ownedParameterConnection.getEReference());
	//SystemImplementation.ownedPortConnection -> EReference : ownedPortConnection
	if (s.ownedPortConnection.getEReference() != null) t.addNewReference("ownedPortConnection".clearKeyWord(), s.ownedPortConnection.getEReference());
	//SystemImplementation.ownedFeatureConnection -> EReference : ownedFeatureConnection
	if (s.ownedFeatureConnection.getEReference() != null) t.addNewReference("ownedFeatureConnection".clearKeyWord(), s.ownedFeatureConnection.getEReference());
	//SystemImplementation.ownedFeatureGroupConnection -> EReference : ownedFeatureGroupConnection
	if (s.ownedFeatureGroupConnection.getEReference() != null) t.addNewReference("ownedFeatureGroupConnection".clearKeyWord(), s.ownedFeatureGroupConnection.getEReference());
	//SystemImplementation.ownedBusSubcomponent -> EReference : ownedBusSubcomponent
	if (s.ownedBusSubcomponent.getEReference() != null) t.addNewReference("ownedBusSubcomponent".clearKeyWord(), s.ownedBusSubcomponent.getEReference());
	//SystemImplementation.ownedDataSubcomponent -> EReference : ownedDataSubcomponent
	if (s.ownedDataSubcomponent.getEReference() != null) t.addNewReference("ownedDataSubcomponent".clearKeyWord(), s.ownedDataSubcomponent.getEReference());
	//SystemImplementation.ownedDeviceSubcomponent -> EReference : ownedDeviceSubcomponent
	if (s.ownedDeviceSubcomponent.getEReference() != null) t.addNewReference("ownedDeviceSubcomponent".clearKeyWord(), s.ownedDeviceSubcomponent.getEReference());
	//SystemImplementation.ownedMemorySubcomponent -> EReference : ownedMemorySubcomponent
	if (s.ownedMemorySubcomponent.getEReference() != null) t.addNewReference("ownedMemorySubcomponent".clearKeyWord(), s.ownedMemorySubcomponent.getEReference());
	//SystemImplementation.ownedProcessSubcomponent -> EReference : ownedProcessSubcomponent
	if (s.ownedProcessSubcomponent.getEReference() != null) t.addNewReference("ownedProcessSubcomponent".clearKeyWord(), s.ownedProcessSubcomponent.getEReference());
	//SystemImplementation.ownedProcessorSubcomponent -> EReference : ownedProcessorSubcomponent
	if (s.ownedProcessorSubcomponent.getEReference() != null) t.addNewReference("ownedProcessorSubcomponent".clearKeyWord(), s.ownedProcessorSubcomponent.getEReference());
	//SystemImplementation.ownedSubprogramSubcomponent -> EReference : ownedSubprogramSubcomponent
	if (s.ownedSubprogramSubcomponent.getEReference() != null) t.addNewReference("ownedSubprogramSubcomponent".clearKeyWord(), s.ownedSubprogramSubcomponent.getEReference());
	//SystemImplementation.ownedSubprogramGroupSubcomponent -> EReference : ownedSubprogramGroupSubcomponent
	if (s.ownedSubprogramGroupSubcomponent.getEReference() != null) t.addNewReference("ownedSubprogramGroupSubcomponent".clearKeyWord(), s.ownedSubprogramGroupSubcomponent.getEReference());
	//SystemImplementation.ownedSystemSubcomponent -> EReference : ownedSystemSubcomponent
	if (s.ownedSystemSubcomponent.getEReference() != null) t.addNewReference("ownedSystemSubcomponent".clearKeyWord(), s.ownedSystemSubcomponent.getEReference());
	//SystemImplementation.ownedVirtualBusSubcomponent -> EReference : ownedVirtualBusSubcomponent
	if (s.ownedVirtualBusSubcomponent.getEReference() != null) t.addNewReference("ownedVirtualBusSubcomponent".clearKeyWord(), s.ownedVirtualBusSubcomponent.getEReference());
	//SystemImplementation.ownedVirtualProcessorSubcomponent -> EReference : ownedVirtualProcessorSubcomponent
	if (s.ownedVirtualProcessorSubcomponent.getEReference() != null) t.addNewReference("ownedVirtualProcessorSubcomponent".clearKeyWord(), s.ownedVirtualProcessorSubcomponent.getEReference());
}

@lazy
rule SystemPrototype
	transform s : DSL!SystemPrototype //aadl2.SystemPrototype
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemPrototype.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//SystemPrototype.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//SystemPrototype.array -> EAttribute : array
	if (s.array.getEAttribute() != null) t.addNewAttribute("array".clearKeyWord(), s.array.getEAttribute());
	//SystemPrototype.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SystemPrototype.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SystemPrototype.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//SystemPrototype.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//SystemPrototype.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//SystemPrototype.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//SystemPrototype.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//SystemPrototype.constrainingClassifier -> EReference : constrainingClassifier
	if (s.constrainingClassifier.getEReference() != null) t.addNewReference("constrainingClassifier".clearKeyWord(), s.constrainingClassifier.getEReference());
}

@lazy
rule ProcessorClassifier
	transform s : DSL!ProcessorClassifier //aadl2.ProcessorClassifier
	to t : SysMLine!ItemUsage
	extends Base{
	//ProcessorClassifier.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ProcessorClassifier.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ProcessorClassifier.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//ProcessorClassifier.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//ProcessorClassifier.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//ProcessorClassifier.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//ProcessorClassifier.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//ProcessorClassifier.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ProcessorClassifier.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ProcessorClassifier.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ProcessorClassifier.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//ProcessorClassifier.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//ProcessorClassifier.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//ProcessorClassifier.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//ProcessorClassifier.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//ProcessorClassifier.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//ProcessorClassifier.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//ProcessorClassifier.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//ProcessorClassifier.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//ProcessorClassifier.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//ProcessorClassifier.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
}

@lazy
rule ProcessorType
	transform s : DSL!ProcessorType //aadl2.ProcessorType
	to t : SysMLine!ItemUsage
	extends Base{
	//ProcessorType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ProcessorType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ProcessorType.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//ProcessorType.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//ProcessorType.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//ProcessorType.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//ProcessorType.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//ProcessorType.noFeatures -> EAttribute : noFeatures
	if (s.noFeatures.getEAttribute() != null) t.addNewAttribute("noFeatures".clearKeyWord(), s.noFeatures.getEAttribute());
	//ProcessorType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ProcessorType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ProcessorType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ProcessorType.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//ProcessorType.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//ProcessorType.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//ProcessorType.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//ProcessorType.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//ProcessorType.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//ProcessorType.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//ProcessorType.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//ProcessorType.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//ProcessorType.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//ProcessorType.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//ProcessorType.ownedFeature -> EReference : ownedFeature
	if (s.ownedFeature.getEReference() != null) t.addNewReference("ownedFeature".clearKeyWord(), s.ownedFeature.getEReference());
	//ProcessorType.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//ProcessorType.ownedFlowSpecification -> EReference : ownedFlowSpecification
	if (s.ownedFlowSpecification.getEReference() != null) t.addNewReference("ownedFlowSpecification".clearKeyWord(), s.ownedFlowSpecification.getEReference());
	//ProcessorType.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//ProcessorType.ownedFeatureGroup -> EReference : ownedFeatureGroup
	if (s.ownedFeatureGroup.getEReference() != null) t.addNewReference("ownedFeatureGroup".clearKeyWord(), s.ownedFeatureGroup.getEReference());
	//ProcessorType.ownedAbstractFeature -> EReference : ownedAbstractFeature
	if (s.ownedAbstractFeature.getEReference() != null) t.addNewReference("ownedAbstractFeature".clearKeyWord(), s.ownedAbstractFeature.getEReference());
	//ProcessorType.ownedDataPort -> EReference : ownedDataPort
	if (s.ownedDataPort.getEReference() != null) t.addNewReference("ownedDataPort".clearKeyWord(), s.ownedDataPort.getEReference());
	//ProcessorType.ownedEventDataPort -> EReference : ownedEventDataPort
	if (s.ownedEventDataPort.getEReference() != null) t.addNewReference("ownedEventDataPort".clearKeyWord(), s.ownedEventDataPort.getEReference());
	//ProcessorType.ownedEventPort -> EReference : ownedEventPort
	if (s.ownedEventPort.getEReference() != null) t.addNewReference("ownedEventPort".clearKeyWord(), s.ownedEventPort.getEReference());
	//ProcessorType.ownedBusAccess -> EReference : ownedBusAccess
	if (s.ownedBusAccess.getEReference() != null) t.addNewReference("ownedBusAccess".clearKeyWord(), s.ownedBusAccess.getEReference());
	//ProcessorType.ownedSubprogramAccess -> EReference : ownedSubprogramAccess
	if (s.ownedSubprogramAccess.getEReference() != null) t.addNewReference("ownedSubprogramAccess".clearKeyWord(), s.ownedSubprogramAccess.getEReference());
	//ProcessorType.ownedSubprogramGroupAccess -> EReference : ownedSubprogramGroupAccess
	if (s.ownedSubprogramGroupAccess.getEReference() != null) t.addNewReference("ownedSubprogramGroupAccess".clearKeyWord(), s.ownedSubprogramGroupAccess.getEReference());
}

@lazy
rule ProcessorImplementation
	transform s : DSL!ProcessorImplementation //aadl2.ProcessorImplementation
	to t : SysMLine!ItemUsage
	extends Base{
	//ProcessorImplementation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ProcessorImplementation.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ProcessorImplementation.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//ProcessorImplementation.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//ProcessorImplementation.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//ProcessorImplementation.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//ProcessorImplementation.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//ProcessorImplementation.noSubcomponents -> EAttribute : noSubcomponents
	if (s.noSubcomponents.getEAttribute() != null) t.addNewAttribute("noSubcomponents".clearKeyWord(), s.noSubcomponents.getEAttribute());
	//ProcessorImplementation.noConnections -> EAttribute : noConnections
	if (s.noConnections.getEAttribute() != null) t.addNewAttribute("noConnections".clearKeyWord(), s.noConnections.getEAttribute());
	//ProcessorImplementation.noCalls -> EAttribute : noCalls
	if (s.noCalls.getEAttribute() != null) t.addNewAttribute("noCalls".clearKeyWord(), s.noCalls.getEAttribute());
	//ProcessorImplementation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ProcessorImplementation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ProcessorImplementation.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ProcessorImplementation.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//ProcessorImplementation.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//ProcessorImplementation.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//ProcessorImplementation.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//ProcessorImplementation.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//ProcessorImplementation.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//ProcessorImplementation.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//ProcessorImplementation.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//ProcessorImplementation.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//ProcessorImplementation.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//ProcessorImplementation.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//ProcessorImplementation.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
	//ProcessorImplementation.ownedSubcomponent -> EReference : ownedSubcomponent
	if (s.ownedSubcomponent.getEReference() != null) t.addNewReference("ownedSubcomponent".clearKeyWord(), s.ownedSubcomponent.getEReference());
	//ProcessorImplementation.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//ProcessorImplementation.ownedFlowImplementation -> EReference : ownedFlowImplementation
	if (s.ownedFlowImplementation.getEReference() != null) t.addNewReference("ownedFlowImplementation".clearKeyWord(), s.ownedFlowImplementation.getEReference());
	//ProcessorImplementation.ownedConnection -> EReference : ownedConnection
	if (s.ownedConnection.getEReference() != null) t.addNewReference("ownedConnection".clearKeyWord(), s.ownedConnection.getEReference());
	//ProcessorImplementation.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//ProcessorImplementation.ownedRealization -> EReference : ownedRealization
	if (s.ownedRealization.getEReference() != null) t.addNewReference("ownedRealization".clearKeyWord(), s.ownedRealization.getEReference());
	//ProcessorImplementation.ownedEndToEndFlow -> EReference : ownedEndToEndFlow
	if (s.ownedEndToEndFlow.getEReference() != null) t.addNewReference("ownedEndToEndFlow".clearKeyWord(), s.ownedEndToEndFlow.getEReference());
	//ProcessorImplementation.ownedAbstractSubcomponent -> EReference : ownedAbstractSubcomponent
	if (s.ownedAbstractSubcomponent.getEReference() != null) t.addNewReference("ownedAbstractSubcomponent".clearKeyWord(), s.ownedAbstractSubcomponent.getEReference());
	//ProcessorImplementation.ownedAccessConnection -> EReference : ownedAccessConnection
	if (s.ownedAccessConnection.getEReference() != null) t.addNewReference("ownedAccessConnection".clearKeyWord(), s.ownedAccessConnection.getEReference());
	//ProcessorImplementation.ownedParameterConnection -> EReference : ownedParameterConnection
	if (s.ownedParameterConnection.getEReference() != null) t.addNewReference("ownedParameterConnection".clearKeyWord(), s.ownedParameterConnection.getEReference());
	//ProcessorImplementation.ownedPortConnection -> EReference : ownedPortConnection
	if (s.ownedPortConnection.getEReference() != null) t.addNewReference("ownedPortConnection".clearKeyWord(), s.ownedPortConnection.getEReference());
	//ProcessorImplementation.ownedFeatureConnection -> EReference : ownedFeatureConnection
	if (s.ownedFeatureConnection.getEReference() != null) t.addNewReference("ownedFeatureConnection".clearKeyWord(), s.ownedFeatureConnection.getEReference());
	//ProcessorImplementation.ownedFeatureGroupConnection -> EReference : ownedFeatureGroupConnection
	if (s.ownedFeatureGroupConnection.getEReference() != null) t.addNewReference("ownedFeatureGroupConnection".clearKeyWord(), s.ownedFeatureGroupConnection.getEReference());
	//ProcessorImplementation.ownedBusSubcomponent -> EReference : ownedBusSubcomponent
	if (s.ownedBusSubcomponent.getEReference() != null) t.addNewReference("ownedBusSubcomponent".clearKeyWord(), s.ownedBusSubcomponent.getEReference());
	//ProcessorImplementation.ownedMemorySubcomponent -> EReference : ownedMemorySubcomponent
	if (s.ownedMemorySubcomponent.getEReference() != null) t.addNewReference("ownedMemorySubcomponent".clearKeyWord(), s.ownedMemorySubcomponent.getEReference());
	//ProcessorImplementation.ownedVirtualBusSubcomponent -> EReference : ownedVirtualBusSubcomponent
	if (s.ownedVirtualBusSubcomponent.getEReference() != null) t.addNewReference("ownedVirtualBusSubcomponent".clearKeyWord(), s.ownedVirtualBusSubcomponent.getEReference());
	//ProcessorImplementation.ownedVirtualProcessorSubcomponent -> EReference : ownedVirtualProcessorSubcomponent
	if (s.ownedVirtualProcessorSubcomponent.getEReference() != null) t.addNewReference("ownedVirtualProcessorSubcomponent".clearKeyWord(), s.ownedVirtualProcessorSubcomponent.getEReference());
}

@lazy
rule ProcessorPrototype
	transform s : DSL!ProcessorPrototype //aadl2.ProcessorPrototype
	to t : SysMLine!ItemUsage
	extends Base{
	//ProcessorPrototype.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ProcessorPrototype.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ProcessorPrototype.array -> EAttribute : array
	if (s.array.getEAttribute() != null) t.addNewAttribute("array".clearKeyWord(), s.array.getEAttribute());
	//ProcessorPrototype.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ProcessorPrototype.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ProcessorPrototype.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ProcessorPrototype.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//ProcessorPrototype.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//ProcessorPrototype.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//ProcessorPrototype.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//ProcessorPrototype.constrainingClassifier -> EReference : constrainingClassifier
	if (s.constrainingClassifier.getEReference() != null) t.addNewReference("constrainingClassifier".clearKeyWord(), s.constrainingClassifier.getEReference());
}

@lazy
rule ProcessClassifier
	transform s : DSL!ProcessClassifier //aadl2.ProcessClassifier
	to t : SysMLine!ItemUsage
	extends Base{
	//ProcessClassifier.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ProcessClassifier.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ProcessClassifier.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//ProcessClassifier.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//ProcessClassifier.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//ProcessClassifier.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//ProcessClassifier.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//ProcessClassifier.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ProcessClassifier.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ProcessClassifier.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ProcessClassifier.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//ProcessClassifier.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//ProcessClassifier.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//ProcessClassifier.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//ProcessClassifier.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//ProcessClassifier.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//ProcessClassifier.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//ProcessClassifier.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//ProcessClassifier.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//ProcessClassifier.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//ProcessClassifier.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
}

@lazy
rule ProcessType
	transform s : DSL!ProcessType //aadl2.ProcessType
	to t : SysMLine!ItemUsage
	extends Base{
	//ProcessType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ProcessType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ProcessType.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//ProcessType.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//ProcessType.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//ProcessType.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//ProcessType.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//ProcessType.noFeatures -> EAttribute : noFeatures
	if (s.noFeatures.getEAttribute() != null) t.addNewAttribute("noFeatures".clearKeyWord(), s.noFeatures.getEAttribute());
	//ProcessType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ProcessType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ProcessType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ProcessType.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//ProcessType.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//ProcessType.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//ProcessType.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//ProcessType.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//ProcessType.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//ProcessType.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//ProcessType.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//ProcessType.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//ProcessType.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//ProcessType.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//ProcessType.ownedFeature -> EReference : ownedFeature
	if (s.ownedFeature.getEReference() != null) t.addNewReference("ownedFeature".clearKeyWord(), s.ownedFeature.getEReference());
	//ProcessType.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//ProcessType.ownedFlowSpecification -> EReference : ownedFlowSpecification
	if (s.ownedFlowSpecification.getEReference() != null) t.addNewReference("ownedFlowSpecification".clearKeyWord(), s.ownedFlowSpecification.getEReference());
	//ProcessType.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//ProcessType.ownedFeatureGroup -> EReference : ownedFeatureGroup
	if (s.ownedFeatureGroup.getEReference() != null) t.addNewReference("ownedFeatureGroup".clearKeyWord(), s.ownedFeatureGroup.getEReference());
	//ProcessType.ownedAbstractFeature -> EReference : ownedAbstractFeature
	if (s.ownedAbstractFeature.getEReference() != null) t.addNewReference("ownedAbstractFeature".clearKeyWord(), s.ownedAbstractFeature.getEReference());
	//ProcessType.ownedDataPort -> EReference : ownedDataPort
	if (s.ownedDataPort.getEReference() != null) t.addNewReference("ownedDataPort".clearKeyWord(), s.ownedDataPort.getEReference());
	//ProcessType.ownedEventDataPort -> EReference : ownedEventDataPort
	if (s.ownedEventDataPort.getEReference() != null) t.addNewReference("ownedEventDataPort".clearKeyWord(), s.ownedEventDataPort.getEReference());
	//ProcessType.ownedEventPort -> EReference : ownedEventPort
	if (s.ownedEventPort.getEReference() != null) t.addNewReference("ownedEventPort".clearKeyWord(), s.ownedEventPort.getEReference());
	//ProcessType.ownedDataAccess -> EReference : ownedDataAccess
	if (s.ownedDataAccess.getEReference() != null) t.addNewReference("ownedDataAccess".clearKeyWord(), s.ownedDataAccess.getEReference());
	//ProcessType.ownedSubprogramAccess -> EReference : ownedSubprogramAccess
	if (s.ownedSubprogramAccess.getEReference() != null) t.addNewReference("ownedSubprogramAccess".clearKeyWord(), s.ownedSubprogramAccess.getEReference());
	//ProcessType.ownedSubprogramGroupAccess -> EReference : ownedSubprogramGroupAccess
	if (s.ownedSubprogramGroupAccess.getEReference() != null) t.addNewReference("ownedSubprogramGroupAccess".clearKeyWord(), s.ownedSubprogramGroupAccess.getEReference());
}

@lazy
rule ProcessImplementation
	transform s : DSL!ProcessImplementation //aadl2.ProcessImplementation
	to t : SysMLine!ItemUsage
	extends Base{
	//ProcessImplementation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ProcessImplementation.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ProcessImplementation.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//ProcessImplementation.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//ProcessImplementation.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//ProcessImplementation.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//ProcessImplementation.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//ProcessImplementation.noSubcomponents -> EAttribute : noSubcomponents
	if (s.noSubcomponents.getEAttribute() != null) t.addNewAttribute("noSubcomponents".clearKeyWord(), s.noSubcomponents.getEAttribute());
	//ProcessImplementation.noConnections -> EAttribute : noConnections
	if (s.noConnections.getEAttribute() != null) t.addNewAttribute("noConnections".clearKeyWord(), s.noConnections.getEAttribute());
	//ProcessImplementation.noCalls -> EAttribute : noCalls
	if (s.noCalls.getEAttribute() != null) t.addNewAttribute("noCalls".clearKeyWord(), s.noCalls.getEAttribute());
	//ProcessImplementation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ProcessImplementation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ProcessImplementation.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ProcessImplementation.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//ProcessImplementation.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//ProcessImplementation.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//ProcessImplementation.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//ProcessImplementation.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//ProcessImplementation.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//ProcessImplementation.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//ProcessImplementation.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//ProcessImplementation.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//ProcessImplementation.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//ProcessImplementation.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//ProcessImplementation.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
	//ProcessImplementation.ownedSubcomponent -> EReference : ownedSubcomponent
	if (s.ownedSubcomponent.getEReference() != null) t.addNewReference("ownedSubcomponent".clearKeyWord(), s.ownedSubcomponent.getEReference());
	//ProcessImplementation.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//ProcessImplementation.ownedFlowImplementation -> EReference : ownedFlowImplementation
	if (s.ownedFlowImplementation.getEReference() != null) t.addNewReference("ownedFlowImplementation".clearKeyWord(), s.ownedFlowImplementation.getEReference());
	//ProcessImplementation.ownedConnection -> EReference : ownedConnection
	if (s.ownedConnection.getEReference() != null) t.addNewReference("ownedConnection".clearKeyWord(), s.ownedConnection.getEReference());
	//ProcessImplementation.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//ProcessImplementation.ownedRealization -> EReference : ownedRealization
	if (s.ownedRealization.getEReference() != null) t.addNewReference("ownedRealization".clearKeyWord(), s.ownedRealization.getEReference());
	//ProcessImplementation.ownedEndToEndFlow -> EReference : ownedEndToEndFlow
	if (s.ownedEndToEndFlow.getEReference() != null) t.addNewReference("ownedEndToEndFlow".clearKeyWord(), s.ownedEndToEndFlow.getEReference());
	//ProcessImplementation.ownedAbstractSubcomponent -> EReference : ownedAbstractSubcomponent
	if (s.ownedAbstractSubcomponent.getEReference() != null) t.addNewReference("ownedAbstractSubcomponent".clearKeyWord(), s.ownedAbstractSubcomponent.getEReference());
	//ProcessImplementation.ownedAccessConnection -> EReference : ownedAccessConnection
	if (s.ownedAccessConnection.getEReference() != null) t.addNewReference("ownedAccessConnection".clearKeyWord(), s.ownedAccessConnection.getEReference());
	//ProcessImplementation.ownedParameterConnection -> EReference : ownedParameterConnection
	if (s.ownedParameterConnection.getEReference() != null) t.addNewReference("ownedParameterConnection".clearKeyWord(), s.ownedParameterConnection.getEReference());
	//ProcessImplementation.ownedPortConnection -> EReference : ownedPortConnection
	if (s.ownedPortConnection.getEReference() != null) t.addNewReference("ownedPortConnection".clearKeyWord(), s.ownedPortConnection.getEReference());
	//ProcessImplementation.ownedFeatureConnection -> EReference : ownedFeatureConnection
	if (s.ownedFeatureConnection.getEReference() != null) t.addNewReference("ownedFeatureConnection".clearKeyWord(), s.ownedFeatureConnection.getEReference());
	//ProcessImplementation.ownedFeatureGroupConnection -> EReference : ownedFeatureGroupConnection
	if (s.ownedFeatureGroupConnection.getEReference() != null) t.addNewReference("ownedFeatureGroupConnection".clearKeyWord(), s.ownedFeatureGroupConnection.getEReference());
	//ProcessImplementation.ownedDataSubcomponent -> EReference : ownedDataSubcomponent
	if (s.ownedDataSubcomponent.getEReference() != null) t.addNewReference("ownedDataSubcomponent".clearKeyWord(), s.ownedDataSubcomponent.getEReference());
	//ProcessImplementation.ownedSubprogramSubcomponent -> EReference : ownedSubprogramSubcomponent
	if (s.ownedSubprogramSubcomponent.getEReference() != null) t.addNewReference("ownedSubprogramSubcomponent".clearKeyWord(), s.ownedSubprogramSubcomponent.getEReference());
	//ProcessImplementation.ownedSubprogramGroupSubcomponent -> EReference : ownedSubprogramGroupSubcomponent
	if (s.ownedSubprogramGroupSubcomponent.getEReference() != null) t.addNewReference("ownedSubprogramGroupSubcomponent".clearKeyWord(), s.ownedSubprogramGroupSubcomponent.getEReference());
	//ProcessImplementation.ownedThreadSubcomponent -> EReference : ownedThreadSubcomponent
	if (s.ownedThreadSubcomponent.getEReference() != null) t.addNewReference("ownedThreadSubcomponent".clearKeyWord(), s.ownedThreadSubcomponent.getEReference());
	//ProcessImplementation.ownedThreadGroupSubcomponent -> EReference : ownedThreadGroupSubcomponent
	if (s.ownedThreadGroupSubcomponent.getEReference() != null) t.addNewReference("ownedThreadGroupSubcomponent".clearKeyWord(), s.ownedThreadGroupSubcomponent.getEReference());
}

@lazy
rule ProcessPrototype
	transform s : DSL!ProcessPrototype //aadl2.ProcessPrototype
	to t : SysMLine!ItemUsage
	extends Base{
	//ProcessPrototype.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ProcessPrototype.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ProcessPrototype.array -> EAttribute : array
	if (s.array.getEAttribute() != null) t.addNewAttribute("array".clearKeyWord(), s.array.getEAttribute());
	//ProcessPrototype.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ProcessPrototype.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ProcessPrototype.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ProcessPrototype.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//ProcessPrototype.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//ProcessPrototype.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//ProcessPrototype.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//ProcessPrototype.constrainingClassifier -> EReference : constrainingClassifier
	if (s.constrainingClassifier.getEReference() != null) t.addNewReference("constrainingClassifier".clearKeyWord(), s.constrainingClassifier.getEReference());
}

@lazy
rule ThreadClassifier
	transform s : DSL!ThreadClassifier //aadl2.ThreadClassifier
	to t : SysMLine!ItemUsage
	extends Base{
	//ThreadClassifier.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ThreadClassifier.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ThreadClassifier.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//ThreadClassifier.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//ThreadClassifier.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//ThreadClassifier.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//ThreadClassifier.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//ThreadClassifier.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ThreadClassifier.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ThreadClassifier.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ThreadClassifier.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//ThreadClassifier.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//ThreadClassifier.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//ThreadClassifier.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//ThreadClassifier.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//ThreadClassifier.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//ThreadClassifier.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//ThreadClassifier.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//ThreadClassifier.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//ThreadClassifier.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//ThreadClassifier.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
}

@lazy
rule ThreadType
	transform s : DSL!ThreadType //aadl2.ThreadType
	to t : SysMLine!ItemUsage
	extends Base{
	//ThreadType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ThreadType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ThreadType.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//ThreadType.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//ThreadType.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//ThreadType.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//ThreadType.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//ThreadType.noFeatures -> EAttribute : noFeatures
	if (s.noFeatures.getEAttribute() != null) t.addNewAttribute("noFeatures".clearKeyWord(), s.noFeatures.getEAttribute());
	//ThreadType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ThreadType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ThreadType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ThreadType.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//ThreadType.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//ThreadType.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//ThreadType.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//ThreadType.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//ThreadType.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//ThreadType.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//ThreadType.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//ThreadType.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//ThreadType.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//ThreadType.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//ThreadType.ownedFeature -> EReference : ownedFeature
	if (s.ownedFeature.getEReference() != null) t.addNewReference("ownedFeature".clearKeyWord(), s.ownedFeature.getEReference());
	//ThreadType.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//ThreadType.ownedFlowSpecification -> EReference : ownedFlowSpecification
	if (s.ownedFlowSpecification.getEReference() != null) t.addNewReference("ownedFlowSpecification".clearKeyWord(), s.ownedFlowSpecification.getEReference());
	//ThreadType.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//ThreadType.ownedFeatureGroup -> EReference : ownedFeatureGroup
	if (s.ownedFeatureGroup.getEReference() != null) t.addNewReference("ownedFeatureGroup".clearKeyWord(), s.ownedFeatureGroup.getEReference());
	//ThreadType.ownedAbstractFeature -> EReference : ownedAbstractFeature
	if (s.ownedAbstractFeature.getEReference() != null) t.addNewReference("ownedAbstractFeature".clearKeyWord(), s.ownedAbstractFeature.getEReference());
	//ThreadType.ownedDataPort -> EReference : ownedDataPort
	if (s.ownedDataPort.getEReference() != null) t.addNewReference("ownedDataPort".clearKeyWord(), s.ownedDataPort.getEReference());
	//ThreadType.ownedEventDataPort -> EReference : ownedEventDataPort
	if (s.ownedEventDataPort.getEReference() != null) t.addNewReference("ownedEventDataPort".clearKeyWord(), s.ownedEventDataPort.getEReference());
	//ThreadType.ownedEventPort -> EReference : ownedEventPort
	if (s.ownedEventPort.getEReference() != null) t.addNewReference("ownedEventPort".clearKeyWord(), s.ownedEventPort.getEReference());
	//ThreadType.ownedDataAccess -> EReference : ownedDataAccess
	if (s.ownedDataAccess.getEReference() != null) t.addNewReference("ownedDataAccess".clearKeyWord(), s.ownedDataAccess.getEReference());
	//ThreadType.ownedSubprogramAccess -> EReference : ownedSubprogramAccess
	if (s.ownedSubprogramAccess.getEReference() != null) t.addNewReference("ownedSubprogramAccess".clearKeyWord(), s.ownedSubprogramAccess.getEReference());
	//ThreadType.ownedSubprogramGroupAccess -> EReference : ownedSubprogramGroupAccess
	if (s.ownedSubprogramGroupAccess.getEReference() != null) t.addNewReference("ownedSubprogramGroupAccess".clearKeyWord(), s.ownedSubprogramGroupAccess.getEReference());
}

@lazy
rule ThreadImplementation
	transform s : DSL!ThreadImplementation //aadl2.ThreadImplementation
	to t : SysMLine!ItemUsage
	extends Base{
	//ThreadImplementation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ThreadImplementation.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ThreadImplementation.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//ThreadImplementation.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//ThreadImplementation.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//ThreadImplementation.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//ThreadImplementation.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//ThreadImplementation.noSubcomponents -> EAttribute : noSubcomponents
	if (s.noSubcomponents.getEAttribute() != null) t.addNewAttribute("noSubcomponents".clearKeyWord(), s.noSubcomponents.getEAttribute());
	//ThreadImplementation.noConnections -> EAttribute : noConnections
	if (s.noConnections.getEAttribute() != null) t.addNewAttribute("noConnections".clearKeyWord(), s.noConnections.getEAttribute());
	//ThreadImplementation.noCalls -> EAttribute : noCalls
	if (s.noCalls.getEAttribute() != null) t.addNewAttribute("noCalls".clearKeyWord(), s.noCalls.getEAttribute());
	//ThreadImplementation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ThreadImplementation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ThreadImplementation.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ThreadImplementation.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//ThreadImplementation.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//ThreadImplementation.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//ThreadImplementation.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//ThreadImplementation.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//ThreadImplementation.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//ThreadImplementation.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//ThreadImplementation.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//ThreadImplementation.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//ThreadImplementation.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//ThreadImplementation.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//ThreadImplementation.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
	//ThreadImplementation.ownedSubcomponent -> EReference : ownedSubcomponent
	if (s.ownedSubcomponent.getEReference() != null) t.addNewReference("ownedSubcomponent".clearKeyWord(), s.ownedSubcomponent.getEReference());
	//ThreadImplementation.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//ThreadImplementation.ownedFlowImplementation -> EReference : ownedFlowImplementation
	if (s.ownedFlowImplementation.getEReference() != null) t.addNewReference("ownedFlowImplementation".clearKeyWord(), s.ownedFlowImplementation.getEReference());
	//ThreadImplementation.ownedConnection -> EReference : ownedConnection
	if (s.ownedConnection.getEReference() != null) t.addNewReference("ownedConnection".clearKeyWord(), s.ownedConnection.getEReference());
	//ThreadImplementation.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//ThreadImplementation.ownedRealization -> EReference : ownedRealization
	if (s.ownedRealization.getEReference() != null) t.addNewReference("ownedRealization".clearKeyWord(), s.ownedRealization.getEReference());
	//ThreadImplementation.ownedEndToEndFlow -> EReference : ownedEndToEndFlow
	if (s.ownedEndToEndFlow.getEReference() != null) t.addNewReference("ownedEndToEndFlow".clearKeyWord(), s.ownedEndToEndFlow.getEReference());
	//ThreadImplementation.ownedAbstractSubcomponent -> EReference : ownedAbstractSubcomponent
	if (s.ownedAbstractSubcomponent.getEReference() != null) t.addNewReference("ownedAbstractSubcomponent".clearKeyWord(), s.ownedAbstractSubcomponent.getEReference());
	//ThreadImplementation.ownedAccessConnection -> EReference : ownedAccessConnection
	if (s.ownedAccessConnection.getEReference() != null) t.addNewReference("ownedAccessConnection".clearKeyWord(), s.ownedAccessConnection.getEReference());
	//ThreadImplementation.ownedParameterConnection -> EReference : ownedParameterConnection
	if (s.ownedParameterConnection.getEReference() != null) t.addNewReference("ownedParameterConnection".clearKeyWord(), s.ownedParameterConnection.getEReference());
	//ThreadImplementation.ownedPortConnection -> EReference : ownedPortConnection
	if (s.ownedPortConnection.getEReference() != null) t.addNewReference("ownedPortConnection".clearKeyWord(), s.ownedPortConnection.getEReference());
	//ThreadImplementation.ownedFeatureConnection -> EReference : ownedFeatureConnection
	if (s.ownedFeatureConnection.getEReference() != null) t.addNewReference("ownedFeatureConnection".clearKeyWord(), s.ownedFeatureConnection.getEReference());
	//ThreadImplementation.ownedFeatureGroupConnection -> EReference : ownedFeatureGroupConnection
	if (s.ownedFeatureGroupConnection.getEReference() != null) t.addNewReference("ownedFeatureGroupConnection".clearKeyWord(), s.ownedFeatureGroupConnection.getEReference());
	//ThreadImplementation.callSpecification -> EReference : callSpecification
	if (s.callSpecification.getEReference() != null) t.addNewReference("callSpecification".clearKeyWord(), s.callSpecification.getEReference());
	//ThreadImplementation.ownedSubprogramCallSequence -> EReference : ownedSubprogramCallSequence
	if (s.ownedSubprogramCallSequence.getEReference() != null) t.addNewReference("ownedSubprogramCallSequence".clearKeyWord(), s.ownedSubprogramCallSequence.getEReference());
	//ThreadImplementation.ownedSubprogramGroupSubcomponent -> EReference : ownedSubprogramGroupSubcomponent
	if (s.ownedSubprogramGroupSubcomponent.getEReference() != null) t.addNewReference("ownedSubprogramGroupSubcomponent".clearKeyWord(), s.ownedSubprogramGroupSubcomponent.getEReference());
	//ThreadImplementation.ownedSubprogramSubcomponent -> EReference : ownedSubprogramSubcomponent
	if (s.ownedSubprogramSubcomponent.getEReference() != null) t.addNewReference("ownedSubprogramSubcomponent".clearKeyWord(), s.ownedSubprogramSubcomponent.getEReference());
	//ThreadImplementation.ownedDataSubcomponent -> EReference : ownedDataSubcomponent
	if (s.ownedDataSubcomponent.getEReference() != null) t.addNewReference("ownedDataSubcomponent".clearKeyWord(), s.ownedDataSubcomponent.getEReference());
}

@lazy
rule ThreadPrototype
	transform s : DSL!ThreadPrototype //aadl2.ThreadPrototype
	to t : SysMLine!ItemUsage
	extends Base{
	//ThreadPrototype.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ThreadPrototype.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ThreadPrototype.array -> EAttribute : array
	if (s.array.getEAttribute() != null) t.addNewAttribute("array".clearKeyWord(), s.array.getEAttribute());
	//ThreadPrototype.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ThreadPrototype.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ThreadPrototype.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ThreadPrototype.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//ThreadPrototype.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//ThreadPrototype.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//ThreadPrototype.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//ThreadPrototype.constrainingClassifier -> EReference : constrainingClassifier
	if (s.constrainingClassifier.getEReference() != null) t.addNewReference("constrainingClassifier".clearKeyWord(), s.constrainingClassifier.getEReference());
}

@lazy
rule ThreadGroupClassifier
	transform s : DSL!ThreadGroupClassifier //aadl2.ThreadGroupClassifier
	to t : SysMLine!ItemUsage
	extends Base{
	//ThreadGroupClassifier.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ThreadGroupClassifier.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ThreadGroupClassifier.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//ThreadGroupClassifier.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//ThreadGroupClassifier.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//ThreadGroupClassifier.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//ThreadGroupClassifier.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//ThreadGroupClassifier.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ThreadGroupClassifier.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ThreadGroupClassifier.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ThreadGroupClassifier.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//ThreadGroupClassifier.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//ThreadGroupClassifier.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//ThreadGroupClassifier.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//ThreadGroupClassifier.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//ThreadGroupClassifier.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//ThreadGroupClassifier.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//ThreadGroupClassifier.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//ThreadGroupClassifier.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//ThreadGroupClassifier.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//ThreadGroupClassifier.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
}

@lazy
rule ThreadGroupType
	transform s : DSL!ThreadGroupType //aadl2.ThreadGroupType
	to t : SysMLine!ItemUsage
	extends Base{
	//ThreadGroupType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ThreadGroupType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ThreadGroupType.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//ThreadGroupType.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//ThreadGroupType.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//ThreadGroupType.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//ThreadGroupType.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//ThreadGroupType.noFeatures -> EAttribute : noFeatures
	if (s.noFeatures.getEAttribute() != null) t.addNewAttribute("noFeatures".clearKeyWord(), s.noFeatures.getEAttribute());
	//ThreadGroupType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ThreadGroupType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ThreadGroupType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ThreadGroupType.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//ThreadGroupType.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//ThreadGroupType.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//ThreadGroupType.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//ThreadGroupType.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//ThreadGroupType.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//ThreadGroupType.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//ThreadGroupType.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//ThreadGroupType.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//ThreadGroupType.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//ThreadGroupType.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//ThreadGroupType.ownedFeature -> EReference : ownedFeature
	if (s.ownedFeature.getEReference() != null) t.addNewReference("ownedFeature".clearKeyWord(), s.ownedFeature.getEReference());
	//ThreadGroupType.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//ThreadGroupType.ownedFlowSpecification -> EReference : ownedFlowSpecification
	if (s.ownedFlowSpecification.getEReference() != null) t.addNewReference("ownedFlowSpecification".clearKeyWord(), s.ownedFlowSpecification.getEReference());
	//ThreadGroupType.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//ThreadGroupType.ownedFeatureGroup -> EReference : ownedFeatureGroup
	if (s.ownedFeatureGroup.getEReference() != null) t.addNewReference("ownedFeatureGroup".clearKeyWord(), s.ownedFeatureGroup.getEReference());
	//ThreadGroupType.ownedAbstractFeature -> EReference : ownedAbstractFeature
	if (s.ownedAbstractFeature.getEReference() != null) t.addNewReference("ownedAbstractFeature".clearKeyWord(), s.ownedAbstractFeature.getEReference());
	//ThreadGroupType.ownedDataPort -> EReference : ownedDataPort
	if (s.ownedDataPort.getEReference() != null) t.addNewReference("ownedDataPort".clearKeyWord(), s.ownedDataPort.getEReference());
	//ThreadGroupType.ownedEventDataPort -> EReference : ownedEventDataPort
	if (s.ownedEventDataPort.getEReference() != null) t.addNewReference("ownedEventDataPort".clearKeyWord(), s.ownedEventDataPort.getEReference());
	//ThreadGroupType.ownedEventPort -> EReference : ownedEventPort
	if (s.ownedEventPort.getEReference() != null) t.addNewReference("ownedEventPort".clearKeyWord(), s.ownedEventPort.getEReference());
	//ThreadGroupType.ownedDataAccess -> EReference : ownedDataAccess
	if (s.ownedDataAccess.getEReference() != null) t.addNewReference("ownedDataAccess".clearKeyWord(), s.ownedDataAccess.getEReference());
	//ThreadGroupType.ownedSubprogramAccess -> EReference : ownedSubprogramAccess
	if (s.ownedSubprogramAccess.getEReference() != null) t.addNewReference("ownedSubprogramAccess".clearKeyWord(), s.ownedSubprogramAccess.getEReference());
	//ThreadGroupType.ownedSubprogramGroupAccess -> EReference : ownedSubprogramGroupAccess
	if (s.ownedSubprogramGroupAccess.getEReference() != null) t.addNewReference("ownedSubprogramGroupAccess".clearKeyWord(), s.ownedSubprogramGroupAccess.getEReference());
}

@lazy
rule ThreadGroupImplementation
	transform s : DSL!ThreadGroupImplementation //aadl2.ThreadGroupImplementation
	to t : SysMLine!ItemUsage
	extends Base{
	//ThreadGroupImplementation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ThreadGroupImplementation.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ThreadGroupImplementation.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//ThreadGroupImplementation.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//ThreadGroupImplementation.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//ThreadGroupImplementation.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//ThreadGroupImplementation.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//ThreadGroupImplementation.noSubcomponents -> EAttribute : noSubcomponents
	if (s.noSubcomponents.getEAttribute() != null) t.addNewAttribute("noSubcomponents".clearKeyWord(), s.noSubcomponents.getEAttribute());
	//ThreadGroupImplementation.noConnections -> EAttribute : noConnections
	if (s.noConnections.getEAttribute() != null) t.addNewAttribute("noConnections".clearKeyWord(), s.noConnections.getEAttribute());
	//ThreadGroupImplementation.noCalls -> EAttribute : noCalls
	if (s.noCalls.getEAttribute() != null) t.addNewAttribute("noCalls".clearKeyWord(), s.noCalls.getEAttribute());
	//ThreadGroupImplementation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ThreadGroupImplementation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ThreadGroupImplementation.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ThreadGroupImplementation.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//ThreadGroupImplementation.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//ThreadGroupImplementation.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//ThreadGroupImplementation.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//ThreadGroupImplementation.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//ThreadGroupImplementation.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//ThreadGroupImplementation.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//ThreadGroupImplementation.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//ThreadGroupImplementation.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//ThreadGroupImplementation.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//ThreadGroupImplementation.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//ThreadGroupImplementation.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
	//ThreadGroupImplementation.ownedSubcomponent -> EReference : ownedSubcomponent
	if (s.ownedSubcomponent.getEReference() != null) t.addNewReference("ownedSubcomponent".clearKeyWord(), s.ownedSubcomponent.getEReference());
	//ThreadGroupImplementation.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//ThreadGroupImplementation.ownedFlowImplementation -> EReference : ownedFlowImplementation
	if (s.ownedFlowImplementation.getEReference() != null) t.addNewReference("ownedFlowImplementation".clearKeyWord(), s.ownedFlowImplementation.getEReference());
	//ThreadGroupImplementation.ownedConnection -> EReference : ownedConnection
	if (s.ownedConnection.getEReference() != null) t.addNewReference("ownedConnection".clearKeyWord(), s.ownedConnection.getEReference());
	//ThreadGroupImplementation.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//ThreadGroupImplementation.ownedRealization -> EReference : ownedRealization
	if (s.ownedRealization.getEReference() != null) t.addNewReference("ownedRealization".clearKeyWord(), s.ownedRealization.getEReference());
	//ThreadGroupImplementation.ownedEndToEndFlow -> EReference : ownedEndToEndFlow
	if (s.ownedEndToEndFlow.getEReference() != null) t.addNewReference("ownedEndToEndFlow".clearKeyWord(), s.ownedEndToEndFlow.getEReference());
	//ThreadGroupImplementation.ownedAbstractSubcomponent -> EReference : ownedAbstractSubcomponent
	if (s.ownedAbstractSubcomponent.getEReference() != null) t.addNewReference("ownedAbstractSubcomponent".clearKeyWord(), s.ownedAbstractSubcomponent.getEReference());
	//ThreadGroupImplementation.ownedAccessConnection -> EReference : ownedAccessConnection
	if (s.ownedAccessConnection.getEReference() != null) t.addNewReference("ownedAccessConnection".clearKeyWord(), s.ownedAccessConnection.getEReference());
	//ThreadGroupImplementation.ownedParameterConnection -> EReference : ownedParameterConnection
	if (s.ownedParameterConnection.getEReference() != null) t.addNewReference("ownedParameterConnection".clearKeyWord(), s.ownedParameterConnection.getEReference());
	//ThreadGroupImplementation.ownedPortConnection -> EReference : ownedPortConnection
	if (s.ownedPortConnection.getEReference() != null) t.addNewReference("ownedPortConnection".clearKeyWord(), s.ownedPortConnection.getEReference());
	//ThreadGroupImplementation.ownedFeatureConnection -> EReference : ownedFeatureConnection
	if (s.ownedFeatureConnection.getEReference() != null) t.addNewReference("ownedFeatureConnection".clearKeyWord(), s.ownedFeatureConnection.getEReference());
	//ThreadGroupImplementation.ownedFeatureGroupConnection -> EReference : ownedFeatureGroupConnection
	if (s.ownedFeatureGroupConnection.getEReference() != null) t.addNewReference("ownedFeatureGroupConnection".clearKeyWord(), s.ownedFeatureGroupConnection.getEReference());
	//ThreadGroupImplementation.ownedDataSubcomponent -> EReference : ownedDataSubcomponent
	if (s.ownedDataSubcomponent.getEReference() != null) t.addNewReference("ownedDataSubcomponent".clearKeyWord(), s.ownedDataSubcomponent.getEReference());
	//ThreadGroupImplementation.ownedThreadSubcomponent -> EReference : ownedThreadSubcomponent
	if (s.ownedThreadSubcomponent.getEReference() != null) t.addNewReference("ownedThreadSubcomponent".clearKeyWord(), s.ownedThreadSubcomponent.getEReference());
	//ThreadGroupImplementation.ownedThreadGroupSubcomponent -> EReference : ownedThreadGroupSubcomponent
	if (s.ownedThreadGroupSubcomponent.getEReference() != null) t.addNewReference("ownedThreadGroupSubcomponent".clearKeyWord(), s.ownedThreadGroupSubcomponent.getEReference());
	//ThreadGroupImplementation.ownedSubprogramSubcomponent -> EReference : ownedSubprogramSubcomponent
	if (s.ownedSubprogramSubcomponent.getEReference() != null) t.addNewReference("ownedSubprogramSubcomponent".clearKeyWord(), s.ownedSubprogramSubcomponent.getEReference());
	//ThreadGroupImplementation.ownedSubprogramGroupSubcomponent -> EReference : ownedSubprogramGroupSubcomponent
	if (s.ownedSubprogramGroupSubcomponent.getEReference() != null) t.addNewReference("ownedSubprogramGroupSubcomponent".clearKeyWord(), s.ownedSubprogramGroupSubcomponent.getEReference());
}

@lazy
rule ThreadGroupPrototype
	transform s : DSL!ThreadGroupPrototype //aadl2.ThreadGroupPrototype
	to t : SysMLine!ItemUsage
	extends Base{
	//ThreadGroupPrototype.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ThreadGroupPrototype.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ThreadGroupPrototype.array -> EAttribute : array
	if (s.array.getEAttribute() != null) t.addNewAttribute("array".clearKeyWord(), s.array.getEAttribute());
	//ThreadGroupPrototype.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ThreadGroupPrototype.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ThreadGroupPrototype.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ThreadGroupPrototype.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//ThreadGroupPrototype.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//ThreadGroupPrototype.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//ThreadGroupPrototype.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//ThreadGroupPrototype.constrainingClassifier -> EReference : constrainingClassifier
	if (s.constrainingClassifier.getEReference() != null) t.addNewReference("constrainingClassifier".clearKeyWord(), s.constrainingClassifier.getEReference());
}

@lazy
rule VirtualBusClassifier
	transform s : DSL!VirtualBusClassifier //aadl2.VirtualBusClassifier
	to t : SysMLine!ItemUsage
	extends Base{
	//VirtualBusClassifier.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//VirtualBusClassifier.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//VirtualBusClassifier.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//VirtualBusClassifier.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//VirtualBusClassifier.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//VirtualBusClassifier.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//VirtualBusClassifier.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//VirtualBusClassifier.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//VirtualBusClassifier.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//VirtualBusClassifier.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//VirtualBusClassifier.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//VirtualBusClassifier.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//VirtualBusClassifier.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//VirtualBusClassifier.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//VirtualBusClassifier.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//VirtualBusClassifier.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//VirtualBusClassifier.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//VirtualBusClassifier.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//VirtualBusClassifier.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//VirtualBusClassifier.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//VirtualBusClassifier.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
}

@lazy
rule VirtualBusType
	transform s : DSL!VirtualBusType //aadl2.VirtualBusType
	to t : SysMLine!ItemUsage
	extends Base{
	//VirtualBusType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//VirtualBusType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//VirtualBusType.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//VirtualBusType.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//VirtualBusType.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//VirtualBusType.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//VirtualBusType.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//VirtualBusType.noFeatures -> EAttribute : noFeatures
	if (s.noFeatures.getEAttribute() != null) t.addNewAttribute("noFeatures".clearKeyWord(), s.noFeatures.getEAttribute());
	//VirtualBusType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//VirtualBusType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//VirtualBusType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//VirtualBusType.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//VirtualBusType.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//VirtualBusType.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//VirtualBusType.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//VirtualBusType.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//VirtualBusType.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//VirtualBusType.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//VirtualBusType.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//VirtualBusType.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//VirtualBusType.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//VirtualBusType.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//VirtualBusType.ownedFeature -> EReference : ownedFeature
	if (s.ownedFeature.getEReference() != null) t.addNewReference("ownedFeature".clearKeyWord(), s.ownedFeature.getEReference());
	//VirtualBusType.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//VirtualBusType.ownedFlowSpecification -> EReference : ownedFlowSpecification
	if (s.ownedFlowSpecification.getEReference() != null) t.addNewReference("ownedFlowSpecification".clearKeyWord(), s.ownedFlowSpecification.getEReference());
	//VirtualBusType.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//VirtualBusType.ownedFeatureGroup -> EReference : ownedFeatureGroup
	if (s.ownedFeatureGroup.getEReference() != null) t.addNewReference("ownedFeatureGroup".clearKeyWord(), s.ownedFeatureGroup.getEReference());
	//VirtualBusType.ownedAbstractFeature -> EReference : ownedAbstractFeature
	if (s.ownedAbstractFeature.getEReference() != null) t.addNewReference("ownedAbstractFeature".clearKeyWord(), s.ownedAbstractFeature.getEReference());
	//VirtualBusType.ownedDataPort -> EReference : ownedDataPort
	if (s.ownedDataPort.getEReference() != null) t.addNewReference("ownedDataPort".clearKeyWord(), s.ownedDataPort.getEReference());
	//VirtualBusType.ownedEventDataPort -> EReference : ownedEventDataPort
	if (s.ownedEventDataPort.getEReference() != null) t.addNewReference("ownedEventDataPort".clearKeyWord(), s.ownedEventDataPort.getEReference());
	//VirtualBusType.ownedEventPort -> EReference : ownedEventPort
	if (s.ownedEventPort.getEReference() != null) t.addNewReference("ownedEventPort".clearKeyWord(), s.ownedEventPort.getEReference());
}

@lazy
rule VirtualBusImplementation
	transform s : DSL!VirtualBusImplementation //aadl2.VirtualBusImplementation
	to t : SysMLine!ItemUsage
	extends Base{
	//VirtualBusImplementation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//VirtualBusImplementation.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//VirtualBusImplementation.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//VirtualBusImplementation.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//VirtualBusImplementation.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//VirtualBusImplementation.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//VirtualBusImplementation.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//VirtualBusImplementation.noSubcomponents -> EAttribute : noSubcomponents
	if (s.noSubcomponents.getEAttribute() != null) t.addNewAttribute("noSubcomponents".clearKeyWord(), s.noSubcomponents.getEAttribute());
	//VirtualBusImplementation.noConnections -> EAttribute : noConnections
	if (s.noConnections.getEAttribute() != null) t.addNewAttribute("noConnections".clearKeyWord(), s.noConnections.getEAttribute());
	//VirtualBusImplementation.noCalls -> EAttribute : noCalls
	if (s.noCalls.getEAttribute() != null) t.addNewAttribute("noCalls".clearKeyWord(), s.noCalls.getEAttribute());
	//VirtualBusImplementation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//VirtualBusImplementation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//VirtualBusImplementation.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//VirtualBusImplementation.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//VirtualBusImplementation.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//VirtualBusImplementation.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//VirtualBusImplementation.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//VirtualBusImplementation.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//VirtualBusImplementation.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//VirtualBusImplementation.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//VirtualBusImplementation.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//VirtualBusImplementation.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//VirtualBusImplementation.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//VirtualBusImplementation.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//VirtualBusImplementation.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
	//VirtualBusImplementation.ownedSubcomponent -> EReference : ownedSubcomponent
	if (s.ownedSubcomponent.getEReference() != null) t.addNewReference("ownedSubcomponent".clearKeyWord(), s.ownedSubcomponent.getEReference());
	//VirtualBusImplementation.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//VirtualBusImplementation.ownedFlowImplementation -> EReference : ownedFlowImplementation
	if (s.ownedFlowImplementation.getEReference() != null) t.addNewReference("ownedFlowImplementation".clearKeyWord(), s.ownedFlowImplementation.getEReference());
	//VirtualBusImplementation.ownedConnection -> EReference : ownedConnection
	if (s.ownedConnection.getEReference() != null) t.addNewReference("ownedConnection".clearKeyWord(), s.ownedConnection.getEReference());
	//VirtualBusImplementation.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//VirtualBusImplementation.ownedRealization -> EReference : ownedRealization
	if (s.ownedRealization.getEReference() != null) t.addNewReference("ownedRealization".clearKeyWord(), s.ownedRealization.getEReference());
	//VirtualBusImplementation.ownedEndToEndFlow -> EReference : ownedEndToEndFlow
	if (s.ownedEndToEndFlow.getEReference() != null) t.addNewReference("ownedEndToEndFlow".clearKeyWord(), s.ownedEndToEndFlow.getEReference());
	//VirtualBusImplementation.ownedAbstractSubcomponent -> EReference : ownedAbstractSubcomponent
	if (s.ownedAbstractSubcomponent.getEReference() != null) t.addNewReference("ownedAbstractSubcomponent".clearKeyWord(), s.ownedAbstractSubcomponent.getEReference());
	//VirtualBusImplementation.ownedAccessConnection -> EReference : ownedAccessConnection
	if (s.ownedAccessConnection.getEReference() != null) t.addNewReference("ownedAccessConnection".clearKeyWord(), s.ownedAccessConnection.getEReference());
	//VirtualBusImplementation.ownedParameterConnection -> EReference : ownedParameterConnection
	if (s.ownedParameterConnection.getEReference() != null) t.addNewReference("ownedParameterConnection".clearKeyWord(), s.ownedParameterConnection.getEReference());
	//VirtualBusImplementation.ownedPortConnection -> EReference : ownedPortConnection
	if (s.ownedPortConnection.getEReference() != null) t.addNewReference("ownedPortConnection".clearKeyWord(), s.ownedPortConnection.getEReference());
	//VirtualBusImplementation.ownedFeatureConnection -> EReference : ownedFeatureConnection
	if (s.ownedFeatureConnection.getEReference() != null) t.addNewReference("ownedFeatureConnection".clearKeyWord(), s.ownedFeatureConnection.getEReference());
	//VirtualBusImplementation.ownedFeatureGroupConnection -> EReference : ownedFeatureGroupConnection
	if (s.ownedFeatureGroupConnection.getEReference() != null) t.addNewReference("ownedFeatureGroupConnection".clearKeyWord(), s.ownedFeatureGroupConnection.getEReference());
	//VirtualBusImplementation.ownedVirtualBusSubcomponent -> EReference : ownedVirtualBusSubcomponent
	if (s.ownedVirtualBusSubcomponent.getEReference() != null) t.addNewReference("ownedVirtualBusSubcomponent".clearKeyWord(), s.ownedVirtualBusSubcomponent.getEReference());
}

@lazy
rule VirtualBusPrototype
	transform s : DSL!VirtualBusPrototype //aadl2.VirtualBusPrototype
	to t : SysMLine!ItemUsage
	extends Base{
	//VirtualBusPrototype.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//VirtualBusPrototype.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//VirtualBusPrototype.array -> EAttribute : array
	if (s.array.getEAttribute() != null) t.addNewAttribute("array".clearKeyWord(), s.array.getEAttribute());
	//VirtualBusPrototype.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//VirtualBusPrototype.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//VirtualBusPrototype.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//VirtualBusPrototype.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//VirtualBusPrototype.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//VirtualBusPrototype.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//VirtualBusPrototype.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//VirtualBusPrototype.constrainingClassifier -> EReference : constrainingClassifier
	if (s.constrainingClassifier.getEReference() != null) t.addNewReference("constrainingClassifier".clearKeyWord(), s.constrainingClassifier.getEReference());
}

@lazy
rule VirtualProcessorClassifier
	transform s : DSL!VirtualProcessorClassifier //aadl2.VirtualProcessorClassifier
	to t : SysMLine!ItemUsage
	extends Base{
	//VirtualProcessorClassifier.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//VirtualProcessorClassifier.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//VirtualProcessorClassifier.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//VirtualProcessorClassifier.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//VirtualProcessorClassifier.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//VirtualProcessorClassifier.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//VirtualProcessorClassifier.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//VirtualProcessorClassifier.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//VirtualProcessorClassifier.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//VirtualProcessorClassifier.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//VirtualProcessorClassifier.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//VirtualProcessorClassifier.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//VirtualProcessorClassifier.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//VirtualProcessorClassifier.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//VirtualProcessorClassifier.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//VirtualProcessorClassifier.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//VirtualProcessorClassifier.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//VirtualProcessorClassifier.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//VirtualProcessorClassifier.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//VirtualProcessorClassifier.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//VirtualProcessorClassifier.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
}

@lazy
rule VirtualProcessorType
	transform s : DSL!VirtualProcessorType //aadl2.VirtualProcessorType
	to t : SysMLine!ItemUsage
	extends Base{
	//VirtualProcessorType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//VirtualProcessorType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//VirtualProcessorType.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//VirtualProcessorType.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//VirtualProcessorType.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//VirtualProcessorType.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//VirtualProcessorType.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//VirtualProcessorType.noFeatures -> EAttribute : noFeatures
	if (s.noFeatures.getEAttribute() != null) t.addNewAttribute("noFeatures".clearKeyWord(), s.noFeatures.getEAttribute());
	//VirtualProcessorType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//VirtualProcessorType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//VirtualProcessorType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//VirtualProcessorType.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//VirtualProcessorType.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//VirtualProcessorType.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//VirtualProcessorType.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//VirtualProcessorType.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//VirtualProcessorType.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//VirtualProcessorType.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//VirtualProcessorType.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//VirtualProcessorType.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//VirtualProcessorType.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//VirtualProcessorType.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//VirtualProcessorType.ownedFeature -> EReference : ownedFeature
	if (s.ownedFeature.getEReference() != null) t.addNewReference("ownedFeature".clearKeyWord(), s.ownedFeature.getEReference());
	//VirtualProcessorType.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//VirtualProcessorType.ownedFlowSpecification -> EReference : ownedFlowSpecification
	if (s.ownedFlowSpecification.getEReference() != null) t.addNewReference("ownedFlowSpecification".clearKeyWord(), s.ownedFlowSpecification.getEReference());
	//VirtualProcessorType.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//VirtualProcessorType.ownedFeatureGroup -> EReference : ownedFeatureGroup
	if (s.ownedFeatureGroup.getEReference() != null) t.addNewReference("ownedFeatureGroup".clearKeyWord(), s.ownedFeatureGroup.getEReference());
	//VirtualProcessorType.ownedAbstractFeature -> EReference : ownedAbstractFeature
	if (s.ownedAbstractFeature.getEReference() != null) t.addNewReference("ownedAbstractFeature".clearKeyWord(), s.ownedAbstractFeature.getEReference());
	//VirtualProcessorType.ownedDataPort -> EReference : ownedDataPort
	if (s.ownedDataPort.getEReference() != null) t.addNewReference("ownedDataPort".clearKeyWord(), s.ownedDataPort.getEReference());
	//VirtualProcessorType.ownedEventDataPort -> EReference : ownedEventDataPort
	if (s.ownedEventDataPort.getEReference() != null) t.addNewReference("ownedEventDataPort".clearKeyWord(), s.ownedEventDataPort.getEReference());
	//VirtualProcessorType.ownedEventPort -> EReference : ownedEventPort
	if (s.ownedEventPort.getEReference() != null) t.addNewReference("ownedEventPort".clearKeyWord(), s.ownedEventPort.getEReference());
	//VirtualProcessorType.ownedSubprogramAccess -> EReference : ownedSubprogramAccess
	if (s.ownedSubprogramAccess.getEReference() != null) t.addNewReference("ownedSubprogramAccess".clearKeyWord(), s.ownedSubprogramAccess.getEReference());
	//VirtualProcessorType.ownedSubprogramGroupAccess -> EReference : ownedSubprogramGroupAccess
	if (s.ownedSubprogramGroupAccess.getEReference() != null) t.addNewReference("ownedSubprogramGroupAccess".clearKeyWord(), s.ownedSubprogramGroupAccess.getEReference());
}

@lazy
rule VirtualProcessorImplementation
	transform s : DSL!VirtualProcessorImplementation //aadl2.VirtualProcessorImplementation
	to t : SysMLine!ItemUsage
	extends Base{
	//VirtualProcessorImplementation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//VirtualProcessorImplementation.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//VirtualProcessorImplementation.noPrototypes -> EAttribute : noPrototypes
	if (s.noPrototypes.getEAttribute() != null) t.addNewAttribute("noPrototypes".clearKeyWord(), s.noPrototypes.getEAttribute());
	//VirtualProcessorImplementation.noAnnexes -> EAttribute : noAnnexes
	if (s.noAnnexes.getEAttribute() != null) t.addNewAttribute("noAnnexes".clearKeyWord(), s.noAnnexes.getEAttribute());
	//VirtualProcessorImplementation.noProperties -> EAttribute : noProperties
	if (s.noProperties.getEAttribute() != null) t.addNewAttribute("noProperties".clearKeyWord(), s.noProperties.getEAttribute());
	//VirtualProcessorImplementation.noFlows -> EAttribute : noFlows
	if (s.noFlows.getEAttribute() != null) t.addNewAttribute("noFlows".clearKeyWord(), s.noFlows.getEAttribute());
	//VirtualProcessorImplementation.noModes -> EAttribute : noModes
	if (s.noModes.getEAttribute() != null) t.addNewAttribute("noModes".clearKeyWord(), s.noModes.getEAttribute());
	//VirtualProcessorImplementation.noSubcomponents -> EAttribute : noSubcomponents
	if (s.noSubcomponents.getEAttribute() != null) t.addNewAttribute("noSubcomponents".clearKeyWord(), s.noSubcomponents.getEAttribute());
	//VirtualProcessorImplementation.noConnections -> EAttribute : noConnections
	if (s.noConnections.getEAttribute() != null) t.addNewAttribute("noConnections".clearKeyWord(), s.noConnections.getEAttribute());
	//VirtualProcessorImplementation.noCalls -> EAttribute : noCalls
	if (s.noCalls.getEAttribute() != null) t.addNewAttribute("noCalls".clearKeyWord(), s.noCalls.getEAttribute());
	//VirtualProcessorImplementation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//VirtualProcessorImplementation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//VirtualProcessorImplementation.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//VirtualProcessorImplementation.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//VirtualProcessorImplementation.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//VirtualProcessorImplementation.classifierFeature -> EReference : classifierFeature
	if (s.classifierFeature.getEReference() != null) t.addNewReference("classifierFeature".clearKeyWord(), s.classifierFeature.getEReference());
	//VirtualProcessorImplementation.inheritedMember -> EReference : inheritedMember
	if (s.inheritedMember.getEReference() != null) t.addNewReference("inheritedMember".clearKeyWord(), s.inheritedMember.getEReference());
	//VirtualProcessorImplementation.generalization -> EReference : generalization
	if (s.generalization.getEReference() != null) t.addNewReference("generalization".clearKeyWord(), s.generalization.getEReference());
	//VirtualProcessorImplementation.general -> EReference : general
	if (s.general.getEReference() != null) t.addNewReference("general".clearKeyWord(), s.general.getEReference());
	//VirtualProcessorImplementation.ownedAnnexSubclause -> EReference : ownedAnnexSubclause
	if (s.ownedAnnexSubclause.getEReference() != null) t.addNewReference("ownedAnnexSubclause".clearKeyWord(), s.ownedAnnexSubclause.getEReference());
	//VirtualProcessorImplementation.ownedPrototype -> EReference : ownedPrototype
	if (s.ownedPrototype.getEReference() != null) t.addNewReference("ownedPrototype".clearKeyWord(), s.ownedPrototype.getEReference());
	//VirtualProcessorImplementation.ownedPrototypeBinding -> EReference : ownedPrototypeBinding
	if (s.ownedPrototypeBinding.getEReference() != null) t.addNewReference("ownedPrototypeBinding".clearKeyWord(), s.ownedPrototypeBinding.getEReference());
	//VirtualProcessorImplementation.ownedMode -> EReference : ownedMode
	if (s.ownedMode.getEReference() != null) t.addNewReference("ownedMode".clearKeyWord(), s.ownedMode.getEReference());
	//VirtualProcessorImplementation.ownedModeTransition -> EReference : ownedModeTransition
	if (s.ownedModeTransition.getEReference() != null) t.addNewReference("ownedModeTransition".clearKeyWord(), s.ownedModeTransition.getEReference());
	//VirtualProcessorImplementation.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
	//VirtualProcessorImplementation.ownedSubcomponent -> EReference : ownedSubcomponent
	if (s.ownedSubcomponent.getEReference() != null) t.addNewReference("ownedSubcomponent".clearKeyWord(), s.ownedSubcomponent.getEReference());
	//VirtualProcessorImplementation.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended".clearKeyWord(), s.extended.getEReference());
	//VirtualProcessorImplementation.ownedFlowImplementation -> EReference : ownedFlowImplementation
	if (s.ownedFlowImplementation.getEReference() != null) t.addNewReference("ownedFlowImplementation".clearKeyWord(), s.ownedFlowImplementation.getEReference());
	//VirtualProcessorImplementation.ownedConnection -> EReference : ownedConnection
	if (s.ownedConnection.getEReference() != null) t.addNewReference("ownedConnection".clearKeyWord(), s.ownedConnection.getEReference());
	//VirtualProcessorImplementation.ownedExtension -> EReference : ownedExtension
	if (s.ownedExtension.getEReference() != null) t.addNewReference("ownedExtension".clearKeyWord(), s.ownedExtension.getEReference());
	//VirtualProcessorImplementation.ownedRealization -> EReference : ownedRealization
	if (s.ownedRealization.getEReference() != null) t.addNewReference("ownedRealization".clearKeyWord(), s.ownedRealization.getEReference());
	//VirtualProcessorImplementation.ownedEndToEndFlow -> EReference : ownedEndToEndFlow
	if (s.ownedEndToEndFlow.getEReference() != null) t.addNewReference("ownedEndToEndFlow".clearKeyWord(), s.ownedEndToEndFlow.getEReference());
	//VirtualProcessorImplementation.ownedAbstractSubcomponent -> EReference : ownedAbstractSubcomponent
	if (s.ownedAbstractSubcomponent.getEReference() != null) t.addNewReference("ownedAbstractSubcomponent".clearKeyWord(), s.ownedAbstractSubcomponent.getEReference());
	//VirtualProcessorImplementation.ownedAccessConnection -> EReference : ownedAccessConnection
	if (s.ownedAccessConnection.getEReference() != null) t.addNewReference("ownedAccessConnection".clearKeyWord(), s.ownedAccessConnection.getEReference());
	//VirtualProcessorImplementation.ownedParameterConnection -> EReference : ownedParameterConnection
	if (s.ownedParameterConnection.getEReference() != null) t.addNewReference("ownedParameterConnection".clearKeyWord(), s.ownedParameterConnection.getEReference());
	//VirtualProcessorImplementation.ownedPortConnection -> EReference : ownedPortConnection
	if (s.ownedPortConnection.getEReference() != null) t.addNewReference("ownedPortConnection".clearKeyWord(), s.ownedPortConnection.getEReference());
	//VirtualProcessorImplementation.ownedFeatureConnection -> EReference : ownedFeatureConnection
	if (s.ownedFeatureConnection.getEReference() != null) t.addNewReference("ownedFeatureConnection".clearKeyWord(), s.ownedFeatureConnection.getEReference());
	//VirtualProcessorImplementation.ownedFeatureGroupConnection -> EReference : ownedFeatureGroupConnection
	if (s.ownedFeatureGroupConnection.getEReference() != null) t.addNewReference("ownedFeatureGroupConnection".clearKeyWord(), s.ownedFeatureGroupConnection.getEReference());
	//VirtualProcessorImplementation.ownedVirtualBusSubcomponent -> EReference : ownedVirtualBusSubcomponent
	if (s.ownedVirtualBusSubcomponent.getEReference() != null) t.addNewReference("ownedVirtualBusSubcomponent".clearKeyWord(), s.ownedVirtualBusSubcomponent.getEReference());
	//VirtualProcessorImplementation.ownedVirtualProcessorSubcomponent -> EReference : ownedVirtualProcessorSubcomponent
	if (s.ownedVirtualProcessorSubcomponent.getEReference() != null) t.addNewReference("ownedVirtualProcessorSubcomponent".clearKeyWord(), s.ownedVirtualProcessorSubcomponent.getEReference());
}

@lazy
rule VirtualProcessorPrototype
	transform s : DSL!VirtualProcessorPrototype //aadl2.VirtualProcessorPrototype
	to t : SysMLine!ItemUsage
	extends Base{
	//VirtualProcessorPrototype.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//VirtualProcessorPrototype.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//VirtualProcessorPrototype.array -> EAttribute : array
	if (s.array.getEAttribute() != null) t.addNewAttribute("array".clearKeyWord(), s.array.getEAttribute());
	//VirtualProcessorPrototype.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//VirtualProcessorPrototype.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//VirtualProcessorPrototype.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//VirtualProcessorPrototype.refinementContext -> EReference : refinementContext
	if (s.refinementContext.getEReference() != null) t.addNewReference("refinementContext".clearKeyWord(), s.refinementContext.getEReference());
	//VirtualProcessorPrototype.refinedElement -> EReference : refinedElement
	if (s.refinedElement.getEReference() != null) t.addNewReference("refinedElement".clearKeyWord(), s.refinedElement.getEReference());
	//VirtualProcessorPrototype.featuringClassifier -> EReference : featuringClassifier
	if (s.featuringClassifier.getEReference() != null) t.addNewReference("featuringClassifier".clearKeyWord(), s.featuringClassifier.getEReference());
	//VirtualProcessorPrototype.refined -> EReference : refined
	if (s.refined.getEReference() != null) t.addNewReference("refined".clearKeyWord(), s.refined.getEReference());
	//VirtualProcessorPrototype.constrainingClassifier -> EReference : constrainingClassifier
	if (s.constrainingClassifier.getEReference() != null) t.addNewReference("constrainingClassifier".clearKeyWord(), s.constrainingClassifier.getEReference());
}

@lazy
rule BasicPropertyAssociation
	transform s : DSL!BasicPropertyAssociation //aadl2.BasicPropertyAssociation
	to t : SysMLine!ItemUsage
	extends Base{
	//BasicPropertyAssociation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//BasicPropertyAssociation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//BasicPropertyAssociation.property -> EReference : property
	if (s.property.getEReference() != null) t.addNewReference("property".clearKeyWord(), s.property.getEReference());
	//BasicPropertyAssociation.ownedValue -> EReference : ownedValue
	if (s.ownedValue.getEReference() != null) t.addNewReference("ownedValue".clearKeyWord(), s.ownedValue.getEReference());
}

@lazy
rule PropertyConstant
	transform s : DSL!PropertyConstant //aadl2.PropertyConstant
	to t : SysMLine!ItemUsage
	extends Base{
	//PropertyConstant.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//PropertyConstant.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//PropertyConstant.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//PropertyConstant.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//PropertyConstant.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//PropertyConstant.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
	//PropertyConstant.propertyType -> EReference : propertyType
	if (s.propertyType.getEReference() != null) t.addNewReference("propertyType".clearKeyWord(), s.propertyType.getEReference());
	//PropertyConstant.ownedPropertyType -> EReference : ownedPropertyType
	if (s.ownedPropertyType.getEReference() != null) t.addNewReference("ownedPropertyType".clearKeyWord(), s.ownedPropertyType.getEReference());
	//PropertyConstant.constantValue -> EReference : constantValue
	if (s.constantValue.getEReference() != null) t.addNewReference("constantValue".clearKeyWord(), s.constantValue.getEReference());
}

@lazy
rule StringLiteral
	transform s : DSL!StringLiteral //aadl2.StringLiteral
	to t : SysMLine!ItemUsage
	extends Base{
	//StringLiteral.value -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value".clearKeyWord(), s.value.getEAttribute());
	//StringLiteral.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//StringLiteral.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
}

@lazy
rule PropertyValue
	transform s : DSL!PropertyValue //aadl2.PropertyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//PropertyValue.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//PropertyValue.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
}

@lazy
rule NumberValue
	transform s : DSL!NumberValue //aadl2.NumberValue
	to t : SysMLine!ItemUsage
	extends Base{
	//NumberValue.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//NumberValue.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//NumberValue.unit -> EReference : unit
	if (s.unit.getEReference() != null) t.addNewReference("unit".clearKeyWord(), s.unit.getEReference());
}

@lazy
rule UnitLiteral
	transform s : DSL!UnitLiteral //aadl2.UnitLiteral
	to t : SysMLine!ItemUsage
	extends Base{
	//UnitLiteral.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//UnitLiteral.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//UnitLiteral.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//UnitLiteral.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//UnitLiteral.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//UnitLiteral.baseUnit -> EReference : baseUnit
	if (s.baseUnit.getEReference() != null) t.addNewReference("baseUnit".clearKeyWord(), s.baseUnit.getEReference());
	//UnitLiteral.factor -> EReference : factor
	if (s.factor.getEReference() != null) t.addNewReference("factor".clearKeyWord(), s.factor.getEReference());
}

@lazy
rule EnumerationLiteral
	transform s : DSL!EnumerationLiteral //aadl2.EnumerationLiteral
	to t : SysMLine!ItemUsage
	extends Base{
	//EnumerationLiteral.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//EnumerationLiteral.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//EnumerationLiteral.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//EnumerationLiteral.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//EnumerationLiteral.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule ClassifierValue
	transform s : DSL!ClassifierValue //aadl2.ClassifierValue
	to t : SysMLine!ItemUsage
	extends Base{
	//ClassifierValue.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ClassifierValue.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ClassifierValue.classifier -> EReference : classifier
	if (s.classifier.getEReference() != null) t.addNewReference("classifier".clearKeyWord(), s.classifier.getEReference());
}

@lazy
rule ReferenceValue
	transform s : DSL!ReferenceValue //aadl2.ReferenceValue
	to t : SysMLine!ItemUsage
	extends Base{
	//ReferenceValue.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ReferenceValue.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ReferenceValue.containmentPathElement -> EReference : containmentPathElement
	if (s.containmentPathElement.getEReference() != null) t.addNewReference("containmentPathElement".clearKeyWord(), s.containmentPathElement.getEReference());
}

@lazy
rule BooleanLiteral
	transform s : DSL!BooleanLiteral //aadl2.BooleanLiteral
	to t : SysMLine!ItemUsage
	extends Base{
	//BooleanLiteral.value -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value".clearKeyWord(), s.value.getEAttribute());
	//BooleanLiteral.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//BooleanLiteral.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
}

@lazy
rule RangeValue
	transform s : DSL!RangeValue //aadl2.RangeValue
	to t : SysMLine!ItemUsage
	extends Base{
	//RangeValue.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//RangeValue.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//RangeValue.minimum -> EReference : minimum
	if (s.minimum.getEReference() != null) t.addNewReference("minimum".clearKeyWord(), s.minimum.getEReference());
	//RangeValue.maximum -> EReference : maximum
	if (s.maximum.getEReference() != null) t.addNewReference("maximum".clearKeyWord(), s.maximum.getEReference());
	//RangeValue.delta -> EReference : delta
	if (s.delta.getEReference() != null) t.addNewReference("delta".clearKeyWord(), s.delta.getEReference());
}

@lazy
rule IntegerLiteral
	transform s : DSL!IntegerLiteral //aadl2.IntegerLiteral
	to t : SysMLine!ItemUsage
	extends Base{
	//IntegerLiteral.base -> EAttribute : base
	if (s.base.getEAttribute() != null) t.addNewAttribute("base".clearKeyWord(), s.base.getEAttribute());
	//IntegerLiteral.value -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value".clearKeyWord(), s.value.getEAttribute());
	//IntegerLiteral.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//IntegerLiteral.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//IntegerLiteral.unit -> EReference : unit
	if (s.unit.getEReference() != null) t.addNewReference("unit".clearKeyWord(), s.unit.getEReference());
}

@lazy
rule RealLiteral
	transform s : DSL!RealLiteral //aadl2.RealLiteral
	to t : SysMLine!ItemUsage
	extends Base{
	//RealLiteral.value -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value".clearKeyWord(), s.value.getEAttribute());
	//RealLiteral.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//RealLiteral.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//RealLiteral.unit -> EReference : unit
	if (s.unit.getEReference() != null) t.addNewReference("unit".clearKeyWord(), s.unit.getEReference());
}

@lazy
rule Operation
	transform s : DSL!Operation //aadl2.Operation
	to t : SysMLine!ItemUsage
	extends Base{
	//Operation.op -> EAttribute : op
	if (s.op.getEAttribute() != null) t.addNewAttribute("op".clearKeyWord(), s.op.getEAttribute());
	//Operation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//Operation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//Operation.ownedPropertyExpression -> EReference : ownedPropertyExpression
	if (s.ownedPropertyExpression.getEReference() != null) t.addNewReference("ownedPropertyExpression".clearKeyWord(), s.ownedPropertyExpression.getEReference());
}

@lazy
rule RecordValue
	transform s : DSL!RecordValue //aadl2.RecordValue
	to t : SysMLine!ItemUsage
	extends Base{
	//RecordValue.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//RecordValue.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//RecordValue.ownedFieldValue -> EReference : ownedFieldValue
	if (s.ownedFieldValue.getEReference() != null) t.addNewReference("ownedFieldValue".clearKeyWord(), s.ownedFieldValue.getEReference());
}

@lazy
rule ComputedValue
	transform s : DSL!ComputedValue //aadl2.ComputedValue
	to t : SysMLine!ItemUsage
	extends Base{
	//ComputedValue.function -> EAttribute : function_
	if (s.`function`.getEAttribute() != null) t.addNewAttribute("function".clearKeyWord(), s.`function`.getEAttribute());
	//ComputedValue.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ComputedValue.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
}

@lazy
rule ListValue
	transform s : DSL!ListValue //aadl2.ListValue
	to t : SysMLine!ItemUsage
	extends Base{
	//ListValue.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ListValue.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ListValue.ownedListElement -> EReference : ownedListElement
	if (s.ownedListElement.getEReference() != null) t.addNewReference("ownedListElement".clearKeyWord(), s.ownedListElement.getEReference());
}

@lazy
rule NamedValue
	transform s : DSL!NamedValue //aadl2.NamedValue
	to t : SysMLine!ItemUsage
	extends Base{
	//NamedValue.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//NamedValue.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//NamedValue.namedValue -> EReference : namedValue
	if (s.namedValue.getEReference() != null) t.addNewReference("namedValue".clearKeyWord(), s.namedValue.getEReference());
}

@lazy
rule PropertySet
	transform s : DSL!PropertySet //aadl2.PropertySet
	to t : SysMLine!ItemUsage
	extends Base{
	//PropertySet.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//PropertySet.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//PropertySet.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//PropertySet.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//PropertySet.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//PropertySet.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//PropertySet.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//PropertySet.ownedPropertyType -> EReference : ownedPropertyType
	if (s.ownedPropertyType.getEReference() != null) t.addNewReference("ownedPropertyType".clearKeyWord(), s.ownedPropertyType.getEReference());
	//PropertySet.ownedProperty -> EReference : ownedProperty
	if (s.ownedProperty.getEReference() != null) t.addNewReference("ownedProperty".clearKeyWord(), s.ownedProperty.getEReference());
	//PropertySet.ownedPropertyConstant -> EReference : ownedPropertyConstant
	if (s.ownedPropertyConstant.getEReference() != null) t.addNewReference("ownedPropertyConstant".clearKeyWord(), s.ownedPropertyConstant.getEReference());
	//PropertySet.importedUnit -> EReference : importedUnit
	if (s.importedUnit.getEReference() != null) t.addNewReference("importedUnit".clearKeyWord(), s.importedUnit.getEReference());
}

@lazy
rule GlobalNamespace
	transform s : DSL!GlobalNamespace //aadl2.GlobalNamespace
	to t : SysMLine!ItemUsage
	extends Base{
	//GlobalNamespace.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//GlobalNamespace.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//GlobalNamespace.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//GlobalNamespace.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//GlobalNamespace.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//GlobalNamespace.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//GlobalNamespace.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//GlobalNamespace.package -> EReference : package
	if (s.package.getEReference() != null) t.addNewReference("package".clearKeyWord(), s.package.getEReference());
	//GlobalNamespace.propertySet -> EReference : propertySet
	if (s.propertySet.getEReference() != null) t.addNewReference("propertySet".clearKeyWord(), s.propertySet.getEReference());
}

@lazy
rule NonListType
	transform s : DSL!NonListType //aadl2.NonListType
	to t : SysMLine!ItemUsage
	extends Base{
	//NonListType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//NonListType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//NonListType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//NonListType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//NonListType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule AadlBoolean
	transform s : DSL!AadlBoolean //aadl2.AadlBoolean
	to t : SysMLine!ItemUsage
	extends Base{
	//AadlBoolean.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//AadlBoolean.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//AadlBoolean.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//AadlBoolean.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//AadlBoolean.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule AadlString
	transform s : DSL!AadlString //aadl2.AadlString
	to t : SysMLine!ItemUsage
	extends Base{
	//AadlString.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//AadlString.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//AadlString.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//AadlString.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//AadlString.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule AadlInteger
	transform s : DSL!AadlInteger //aadl2.AadlInteger
	to t : SysMLine!ItemUsage
	extends Base{
	//AadlInteger.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//AadlInteger.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//AadlInteger.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//AadlInteger.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//AadlInteger.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//AadlInteger.ownedUnitsType -> EReference : ownedUnitsType
	if (s.ownedUnitsType.getEReference() != null) t.addNewReference("ownedUnitsType".clearKeyWord(), s.ownedUnitsType.getEReference());
	//AadlInteger.unitsType -> EReference : unitsType
	if (s.unitsType.getEReference() != null) t.addNewReference("unitsType".clearKeyWord(), s.unitsType.getEReference());
	//AadlInteger.range -> EReference : range
	if (s.range.getEReference() != null) t.addNewReference("range".clearKeyWord(), s.range.getEReference());
}

@lazy
rule NumberType
	transform s : DSL!NumberType //aadl2.NumberType
	to t : SysMLine!ItemUsage
	extends Base{
	//NumberType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//NumberType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//NumberType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//NumberType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//NumberType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//NumberType.ownedUnitsType -> EReference : ownedUnitsType
	if (s.ownedUnitsType.getEReference() != null) t.addNewReference("ownedUnitsType".clearKeyWord(), s.ownedUnitsType.getEReference());
	//NumberType.unitsType -> EReference : unitsType
	if (s.unitsType.getEReference() != null) t.addNewReference("unitsType".clearKeyWord(), s.unitsType.getEReference());
	//NumberType.range -> EReference : range
	if (s.range.getEReference() != null) t.addNewReference("range".clearKeyWord(), s.range.getEReference());
}

@lazy
rule UnitsType
	transform s : DSL!UnitsType //aadl2.UnitsType
	to t : SysMLine!ItemUsage
	extends Base{
	//UnitsType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//UnitsType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//UnitsType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//UnitsType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//UnitsType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//UnitsType.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//UnitsType.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//UnitsType.ownedLiteral -> EReference : ownedLiteral
	if (s.ownedLiteral.getEReference() != null) t.addNewReference("ownedLiteral".clearKeyWord(), s.ownedLiteral.getEReference());
}

@lazy
rule EnumerationType
	transform s : DSL!EnumerationType //aadl2.EnumerationType
	to t : SysMLine!ItemUsage
	extends Base{
	//EnumerationType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//EnumerationType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//EnumerationType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//EnumerationType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//EnumerationType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//EnumerationType.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//EnumerationType.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//EnumerationType.ownedLiteral -> EReference : ownedLiteral
	if (s.ownedLiteral.getEReference() != null) t.addNewReference("ownedLiteral".clearKeyWord(), s.ownedLiteral.getEReference());
}

@lazy
rule NumericRange
	transform s : DSL!NumericRange //aadl2.NumericRange
	to t : SysMLine!ItemUsage
	extends Base{
	//NumericRange.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//NumericRange.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//NumericRange.upperBound -> EReference : upperBound
	if (s.upperBound.getEReference() != null) t.addNewReference("upperBound".clearKeyWord(), s.upperBound.getEReference());
	//NumericRange.lowerBound -> EReference : lowerBound
	if (s.lowerBound.getEReference() != null) t.addNewReference("lowerBound".clearKeyWord(), s.lowerBound.getEReference());
}

@lazy
rule AadlReal
	transform s : DSL!AadlReal //aadl2.AadlReal
	to t : SysMLine!ItemUsage
	extends Base{
	//AadlReal.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//AadlReal.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//AadlReal.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//AadlReal.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//AadlReal.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//AadlReal.ownedUnitsType -> EReference : ownedUnitsType
	if (s.ownedUnitsType.getEReference() != null) t.addNewReference("ownedUnitsType".clearKeyWord(), s.ownedUnitsType.getEReference());
	//AadlReal.unitsType -> EReference : unitsType
	if (s.unitsType.getEReference() != null) t.addNewReference("unitsType".clearKeyWord(), s.unitsType.getEReference());
	//AadlReal.range -> EReference : range
	if (s.range.getEReference() != null) t.addNewReference("range".clearKeyWord(), s.range.getEReference());
}

@lazy
rule ClassifierType
	transform s : DSL!ClassifierType //aadl2.ClassifierType
	to t : SysMLine!ItemUsage
	extends Base{
	//ClassifierType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ClassifierType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ClassifierType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ClassifierType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ClassifierType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ClassifierType.classifierReference -> EReference : classifierReference
	if (s.classifierReference.getEReference() != null) t.addNewReference("classifierReference".clearKeyWord(), s.classifierReference.getEReference());
}

@lazy
rule RangeType
	transform s : DSL!RangeType //aadl2.RangeType
	to t : SysMLine!ItemUsage
	extends Base{
	//RangeType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//RangeType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//RangeType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//RangeType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//RangeType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//RangeType.ownedNumberType -> EReference : ownedNumberType
	if (s.ownedNumberType.getEReference() != null) t.addNewReference("ownedNumberType".clearKeyWord(), s.ownedNumberType.getEReference());
	//RangeType.numberType -> EReference : numberType
	if (s.numberType.getEReference() != null) t.addNewReference("numberType".clearKeyWord(), s.numberType.getEReference());
}

@lazy
rule RecordType
	transform s : DSL!RecordType //aadl2.RecordType
	to t : SysMLine!ItemUsage
	extends Base{
	//RecordType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//RecordType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//RecordType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//RecordType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//RecordType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//RecordType.ownedMember -> EReference : ownedMember
	if (s.ownedMember.getEReference() != null) t.addNewReference("ownedMember".clearKeyWord(), s.ownedMember.getEReference());
	//RecordType.member -> EReference : member
	if (s.member.getEReference() != null) t.addNewReference("member".clearKeyWord(), s.member.getEReference());
	//RecordType.ownedField -> EReference : ownedField
	if (s.ownedField.getEReference() != null) t.addNewReference("ownedField".clearKeyWord(), s.ownedField.getEReference());
}

@lazy
rule RecordField
	transform s : DSL!RecordField //aadl2.RecordField
	to t : SysMLine!ItemUsage
	extends Base{
	//RecordField.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//RecordField.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//RecordField.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//RecordField.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//RecordField.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//RecordField.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
	//RecordField.propertyType -> EReference : propertyType
	if (s.propertyType.getEReference() != null) t.addNewReference("propertyType".clearKeyWord(), s.propertyType.getEReference());
	//RecordField.ownedPropertyType -> EReference : ownedPropertyType
	if (s.ownedPropertyType.getEReference() != null) t.addNewReference("ownedPropertyType".clearKeyWord(), s.ownedPropertyType.getEReference());
}

@lazy
rule ReferenceType
	transform s : DSL!ReferenceType //aadl2.ReferenceType
	to t : SysMLine!ItemUsage
	extends Base{
	//ReferenceType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ReferenceType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ReferenceType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ReferenceType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ReferenceType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ReferenceType.namedElementReference -> EReference : namedElementReference
	if (s.namedElementReference.getEReference() != null) t.addNewReference("namedElementReference".clearKeyWord(), s.namedElementReference.getEReference());
}

@lazy
rule ListType
	transform s : DSL!ListType //aadl2.ListType
	to t : SysMLine!ItemUsage
	extends Base{
	//ListType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ListType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ListType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ListType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ListType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ListType.ownedElementType -> EReference : ownedElementType
	if (s.ownedElementType.getEReference() != null) t.addNewReference("ownedElementType".clearKeyWord(), s.ownedElementType.getEReference());
	//ListType.elementType -> EReference : elementType
	if (s.elementType.getEReference() != null) t.addNewReference("elementType".clearKeyWord(), s.elementType.getEReference());
}

@lazy
rule ProcessorPort
	transform s : DSL!ProcessorPort //aadl2.ProcessorPort
	to t : SysMLine!ItemUsage
	extends Base{
	//ProcessorPort.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ProcessorPort.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ProcessorPort.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ProcessorPort.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ProcessorPort.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule InternalEvent
	transform s : DSL!InternalEvent //aadl2.InternalEvent
	to t : SysMLine!ItemUsage
	extends Base{
	//InternalEvent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//InternalEvent.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//InternalEvent.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//InternalEvent.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//InternalEvent.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule ProcessorSubprogram
	transform s : DSL!ProcessorSubprogram //aadl2.ProcessorSubprogram
	to t : SysMLine!ItemUsage
	extends Base{
	//ProcessorSubprogram.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ProcessorSubprogram.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ProcessorSubprogram.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ProcessorSubprogram.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ProcessorSubprogram.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}


// errorModel.ecore
@lazy
rule ErrorModelSubclause
	transform s : DSL!ErrorModelSubclause //errorModel.ErrorModelSubclause
	to t : SysMLine!ItemUsage
	extends Base{
	//ErrorModelSubclause.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ErrorModelSubclause.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ErrorModelSubclause.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ErrorModelSubclause.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ErrorModelSubclause.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ErrorModelSubclause.inMode -> EReference : inMode
	if (s.inMode.getEReference() != null) t.addNewReference("inMode".clearKeyWord(), s.inMode.getEReference());
	//ErrorModelSubclause.useTypes -> EReference : useTypes
	if (s.useTypes.getEReference() != null) t.addNewReference("useTypes".clearKeyWord(), s.useTypes.getEReference());
	//ErrorModelSubclause.typeEquivalence -> EReference : typeEquivalence
	if (s.typeEquivalence.getEReference() != null) t.addNewReference("typeEquivalence".clearKeyWord(), s.typeEquivalence.getEReference());
	//ErrorModelSubclause.typeMappingSet -> EReference : typeMappingSet
	if (s.typeMappingSet.getEReference() != null) t.addNewReference("typeMappingSet".clearKeyWord(), s.typeMappingSet.getEReference());
	//ErrorModelSubclause.useBehavior -> EReference : useBehavior
	if (s.useBehavior.getEReference() != null) t.addNewReference("useBehavior".clearKeyWord(), s.useBehavior.getEReference());
	//ErrorModelSubclause.propagations -> EReference : propagations
	if (s.propagations.getEReference() != null) t.addNewReference("propagations".clearKeyWord(), s.propagations.getEReference());
	//ErrorModelSubclause.flows -> EReference : flows
	if (s.flows.getEReference() != null) t.addNewReference("flows".clearKeyWord(), s.flows.getEReference());
	//ErrorModelSubclause.useTransformation -> EReference : useTransformation
	if (s.useTransformation.getEReference() != null) t.addNewReference("useTransformation".clearKeyWord(), s.useTransformation.getEReference());
	//ErrorModelSubclause.events -> EReference : events
	if (s.events.getEReference() != null) t.addNewReference("events".clearKeyWord(), s.events.getEReference());
	//ErrorModelSubclause.transitions -> EReference : transitions
	if (s.transitions.getEReference() != null) t.addNewReference("transitions".clearKeyWord(), s.transitions.getEReference());
	//ErrorModelSubclause.outgoingPropagationConditions -> EReference : outgoingPropagationConditions
	if (s.outgoingPropagationConditions.getEReference() != null) t.addNewReference("outgoingPropagationConditions".clearKeyWord(), s.outgoingPropagationConditions.getEReference());
	//ErrorModelSubclause.errorDetections -> EReference : errorDetections
	if (s.errorDetections.getEReference() != null) t.addNewReference("errorDetections".clearKeyWord(), s.errorDetections.getEReference());
	//ErrorModelSubclause.errorStateToModeMappings -> EReference : errorStateToModeMappings
	if (s.errorStateToModeMappings.getEReference() != null) t.addNewReference("errorStateToModeMappings".clearKeyWord(), s.errorStateToModeMappings.getEReference());
	//ErrorModelSubclause.states -> EReference : states
	if (s.states.getEReference() != null) t.addNewReference("states".clearKeyWord(), s.states.getEReference());
	//ErrorModelSubclause.typeTransformationSet -> EReference : typeTransformationSet
	if (s.typeTransformationSet.getEReference() != null) t.addNewReference("typeTransformationSet".clearKeyWord(), s.typeTransformationSet.getEReference());
	//ErrorModelSubclause.connectionErrorSources -> EReference : connectionErrorSources
	if (s.connectionErrorSources.getEReference() != null) t.addNewReference("connectionErrorSources".clearKeyWord(), s.connectionErrorSources.getEReference());
	//ErrorModelSubclause.points -> EReference : points
	if (s.points.getEReference() != null) t.addNewReference("points".clearKeyWord(), s.points.getEReference());
	//ErrorModelSubclause.paths -> EReference : paths
	if (s.paths.getEReference() != null) t.addNewReference("paths".clearKeyWord(), s.paths.getEReference());
	//ErrorModelSubclause.properties -> EReference : properties
	if (s.properties.getEReference() != null) t.addNewReference("properties".clearKeyWord(), s.properties.getEReference());
}

@lazy
rule ErrorModelLibrary
	transform s : DSL!ErrorModelLibrary //errorModel.ErrorModelLibrary
	to t : SysMLine!ItemUsage
	extends Base{
	//ErrorModelLibrary.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ErrorModelLibrary.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ErrorModelLibrary.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ErrorModelLibrary.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ErrorModelLibrary.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ErrorModelLibrary.useTypes -> EReference : useTypes
	if (s.useTypes.getEReference() != null) t.addNewReference("useTypes".clearKeyWord(), s.useTypes.getEReference());
	//ErrorModelLibrary.extends -> EReference : extends_
	if (s.`extends`.getEReference() != null) t.addNewReference("extends".clearKeyWord(), s.`extends`.getEReference());
	//ErrorModelLibrary.types -> EReference : types
	if (s.types.getEReference() != null) t.addNewReference("types".clearKeyWord(), s.types.getEReference());
	//ErrorModelLibrary.typesets -> EReference : typesets
	if (s.typesets.getEReference() != null) t.addNewReference("typesets".clearKeyWord(), s.typesets.getEReference());
	//ErrorModelLibrary.properties -> EReference : properties
	if (s.properties.getEReference() != null) t.addNewReference("properties".clearKeyWord(), s.properties.getEReference());
	//ErrorModelLibrary.behaviors -> EReference : behaviors
	if (s.behaviors.getEReference() != null) t.addNewReference("behaviors".clearKeyWord(), s.behaviors.getEReference());
	//ErrorModelLibrary.mappings -> EReference : mappings
	if (s.mappings.getEReference() != null) t.addNewReference("mappings".clearKeyWord(), s.mappings.getEReference());
	//ErrorModelLibrary.transformations -> EReference : transformations
	if (s.transformations.getEReference() != null) t.addNewReference("transformations".clearKeyWord(), s.transformations.getEReference());
}

@lazy
rule EMV2PropertyAssociation
	transform s : DSL!EMV2PropertyAssociation //errorModel.EMV2PropertyAssociation
	to t : SysMLine!ItemUsage
	extends Base{
	//EMV2PropertyAssociation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//EMV2PropertyAssociation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//EMV2PropertyAssociation.property -> EReference : property
	if (s.property.getEReference() != null) t.addNewReference("property".clearKeyWord(), s.property.getEReference());
	//EMV2PropertyAssociation.ownedValues -> EReference : ownedValues
	if (s.ownedValues.getEReference() != null) t.addNewReference("ownedValues".clearKeyWord(), s.ownedValues.getEReference());
	//EMV2PropertyAssociation.emv2Path -> EReference : emv2Path
	if (s.emv2Path.getEReference() != null) t.addNewReference("emv2Path".clearKeyWord(), s.emv2Path.getEReference());
}

@lazy
rule EMV2Path
	transform s : DSL!EMV2Path //errorModel.EMV2Path
	to t : SysMLine!ItemUsage
	extends Base{
	//EMV2Path.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//EMV2Path.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//EMV2Path.containmentPath -> EReference : containmentPath
	if (s.containmentPath.getEReference() != null) t.addNewReference("containmentPath".clearKeyWord(), s.containmentPath.getEReference());
	//EMV2Path.emv2Target -> EReference : emv2Target
	if (s.emv2Target.getEReference() != null) t.addNewReference("emv2Target".clearKeyWord(), s.emv2Target.getEReference());
}

@lazy
rule EMV2PathElement
	transform s : DSL!EMV2PathElement //errorModel.EMV2PathElement
	to t : SysMLine!ItemUsage
	extends Base{
	//EMV2PathElement.emv2PropagationKind -> EAttribute : emv2PropagationKind
	if (s.emv2PropagationKind.getEAttribute() != null) t.addNewAttribute("emv2PropagationKind".clearKeyWord(), s.emv2PropagationKind.getEAttribute());
	//EMV2PathElement.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//EMV2PathElement.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//EMV2PathElement.errorType -> EReference : errorType
	if (s.errorType.getEReference() != null) t.addNewReference("errorType".clearKeyWord(), s.errorType.getEReference());
	//EMV2PathElement.namedElement -> EReference : namedElement
	if (s.namedElement.getEReference() != null) t.addNewReference("namedElement".clearKeyWord(), s.namedElement.getEReference());
	//EMV2PathElement.path -> EReference : path
	if (s.path.getEReference() != null) t.addNewReference("path".clearKeyWord(), s.path.getEReference());
}

@lazy
rule ErrorTypes
	transform s : DSL!ErrorTypes //errorModel.ErrorTypes
	to t : SysMLine!ItemUsage
	extends Base{
	//ErrorTypes.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ErrorTypes.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ErrorTypes.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ErrorTypes.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ErrorTypes.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule ErrorType
	transform s : DSL!ErrorType //errorModel.ErrorType
	to t : SysMLine!ItemUsage
	extends Base{
	//ErrorType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ErrorType.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ErrorType.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ErrorType.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ErrorType.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ErrorType.superType -> EReference : superType
	if (s.superType.getEReference() != null) t.addNewReference("superType".clearKeyWord(), s.superType.getEReference());
	//ErrorType.aliasedType -> EReference : aliasedType
	if (s.aliasedType.getEReference() != null) t.addNewReference("aliasedType".clearKeyWord(), s.aliasedType.getEReference());
}

@lazy
rule TypeSet
	transform s : DSL!TypeSet //errorModel.TypeSet
	to t : SysMLine!ItemUsage
	extends Base{
	//TypeSet.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//TypeSet.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//TypeSet.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//TypeSet.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//TypeSet.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//TypeSet.typeTokens -> EReference : typeTokens
	if (s.typeTokens.getEReference() != null) t.addNewReference("typeTokens".clearKeyWord(), s.typeTokens.getEReference());
	//TypeSet.aliasedType -> EReference : aliasedType
	if (s.aliasedType.getEReference() != null) t.addNewReference("aliasedType".clearKeyWord(), s.aliasedType.getEReference());
}

@lazy
rule TypeToken
	transform s : DSL!TypeToken //errorModel.TypeToken
	to t : SysMLine!ItemUsage
	extends Base{
	//TypeToken.noError -> EAttribute : noError
	if (s.noError.getEAttribute() != null) t.addNewAttribute("noError".clearKeyWord(), s.noError.getEAttribute());
	//TypeToken.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//TypeToken.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//TypeToken.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type".clearKeyWord(), s.type.getEReference());
}

@lazy
rule TypeTransformationSet
	transform s : DSL!TypeTransformationSet //errorModel.TypeTransformationSet
	to t : SysMLine!ItemUsage
	extends Base{
	//TypeTransformationSet.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//TypeTransformationSet.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//TypeTransformationSet.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//TypeTransformationSet.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//TypeTransformationSet.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//TypeTransformationSet.useTypes -> EReference : useTypes
	if (s.useTypes.getEReference() != null) t.addNewReference("useTypes".clearKeyWord(), s.useTypes.getEReference());
	//TypeTransformationSet.transformation -> EReference : transformation
	if (s.transformation.getEReference() != null) t.addNewReference("transformation".clearKeyWord(), s.transformation.getEReference());
}

@lazy
rule TypeTransformation
	transform s : DSL!TypeTransformation //errorModel.TypeTransformation
	to t : SysMLine!ItemUsage
	extends Base{
	//TypeTransformation.allSources -> EAttribute : allSources
	if (s.allSources.getEAttribute() != null) t.addNewAttribute("allSources".clearKeyWord(), s.allSources.getEAttribute());
	//TypeTransformation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//TypeTransformation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//TypeTransformation.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source".clearKeyWord(), s.source.getEReference());
	//TypeTransformation.contributor -> EReference : contributor
	if (s.contributor.getEReference() != null) t.addNewReference("contributor".clearKeyWord(), s.contributor.getEReference());
	//TypeTransformation.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target".clearKeyWord(), s.target.getEReference());
}

@lazy
rule TypeMappingSet
	transform s : DSL!TypeMappingSet //errorModel.TypeMappingSet
	to t : SysMLine!ItemUsage
	extends Base{
	//TypeMappingSet.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//TypeMappingSet.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//TypeMappingSet.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//TypeMappingSet.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//TypeMappingSet.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//TypeMappingSet.useTypes -> EReference : useTypes
	if (s.useTypes.getEReference() != null) t.addNewReference("useTypes".clearKeyWord(), s.useTypes.getEReference());
	//TypeMappingSet.mapping -> EReference : mapping
	if (s.mapping.getEReference() != null) t.addNewReference("mapping".clearKeyWord(), s.mapping.getEReference());
}

@lazy
rule TypeMapping
	transform s : DSL!TypeMapping //errorModel.TypeMapping
	to t : SysMLine!ItemUsage
	extends Base{
	//TypeMapping.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//TypeMapping.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//TypeMapping.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source".clearKeyWord(), s.source.getEReference());
	//TypeMapping.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target".clearKeyWord(), s.target.getEReference());
}

@lazy
rule ErrorPropagation
	transform s : DSL!ErrorPropagation //errorModel.ErrorPropagation
	to t : SysMLine!ItemUsage
	extends Base{
	//ErrorPropagation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ErrorPropagation.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ErrorPropagation.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind".clearKeyWord(), s.kind.getEAttribute());
	//ErrorPropagation.not -> EAttribute : not_
	if (s.`not`.getEAttribute() != null) t.addNewAttribute("not".clearKeyWord(), s.`not`.getEAttribute());
	//ErrorPropagation.direction -> EAttribute : direction
	if (s.direction.getEAttribute() != null) t.addNewAttribute("direction".clearKeyWord(), s.direction.getEAttribute());
	//ErrorPropagation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ErrorPropagation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ErrorPropagation.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ErrorPropagation.featureorPPRef -> EReference : featureorPPRef
	if (s.featureorPPRef.getEReference() != null) t.addNewReference("featureorPPRef".clearKeyWord(), s.featureorPPRef.getEReference());
	//ErrorPropagation.typeSet -> EReference : typeSet
	if (s.typeSet.getEReference() != null) t.addNewReference("typeSet".clearKeyWord(), s.typeSet.getEReference());
}

@lazy
rule FeatureorPPReference
	transform s : DSL!FeatureorPPReference //errorModel.FeatureorPPReference
	to t : SysMLine!ItemUsage
	extends Base{
	//FeatureorPPReference.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//FeatureorPPReference.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//FeatureorPPReference.featureorPP -> EReference : featureorPP
	if (s.featureorPP.getEReference() != null) t.addNewReference("featureorPP".clearKeyWord(), s.featureorPP.getEReference());
	//FeatureorPPReference.next -> EReference : next
	if (s.next.getEReference() != null) t.addNewReference("next".clearKeyWord(), s.next.getEReference());
}

@lazy
rule ErrorFlow
	transform s : DSL!ErrorFlow //errorModel.ErrorFlow
	to t : SysMLine!ItemUsage
	extends Base{
	//ErrorFlow.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ErrorFlow.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ErrorFlow.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ErrorFlow.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ErrorFlow.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ErrorFlow.typeTokenConstraint -> EReference : typeTokenConstraint
	if (s.typeTokenConstraint.getEReference() != null) t.addNewReference("typeTokenConstraint".clearKeyWord(), s.typeTokenConstraint.getEReference());
}

@lazy
rule ErrorSource
	transform s : DSL!ErrorSource //errorModel.ErrorSource
	to t : SysMLine!ItemUsage
	extends Base{
	//ErrorSource.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ErrorSource.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ErrorSource.all -> EAttribute : all
	if (s.all.getEAttribute() != null) t.addNewAttribute("all".clearKeyWord(), s.all.getEAttribute());
	//ErrorSource.failureModeDescription -> EAttribute : failureModeDescription
	if (s.failureModeDescription.getEAttribute() != null) t.addNewAttribute("failureModeDescription".clearKeyWord(), s.failureModeDescription.getEAttribute());
	//ErrorSource.condition -> EAttribute : condition
	if (s.condition.getEAttribute() != null) t.addNewAttribute("condition".clearKeyWord(), s.condition.getEAttribute());
	//ErrorSource.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ErrorSource.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ErrorSource.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ErrorSource.typeTokenConstraint -> EReference : typeTokenConstraint
	if (s.typeTokenConstraint.getEReference() != null) t.addNewReference("typeTokenConstraint".clearKeyWord(), s.typeTokenConstraint.getEReference());
	//ErrorSource.sourceModelElement -> EReference : sourceModelElement
	if (s.sourceModelElement.getEReference() != null) t.addNewReference("sourceModelElement".clearKeyWord(), s.sourceModelElement.getEReference());
	//ErrorSource.failureModeReference -> EReference : failureModeReference
	if (s.failureModeReference.getEReference() != null) t.addNewReference("failureModeReference".clearKeyWord(), s.failureModeReference.getEReference());
	//ErrorSource.failureModeType -> EReference : failureModeType
	if (s.failureModeType.getEReference() != null) t.addNewReference("failureModeType".clearKeyWord(), s.failureModeType.getEReference());
}

@lazy
rule ErrorSink
	transform s : DSL!ErrorSink //errorModel.ErrorSink
	to t : SysMLine!ItemUsage
	extends Base{
	//ErrorSink.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ErrorSink.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ErrorSink.allIncoming -> EAttribute : allIncoming
	if (s.allIncoming.getEAttribute() != null) t.addNewAttribute("allIncoming".clearKeyWord(), s.allIncoming.getEAttribute());
	//ErrorSink.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ErrorSink.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ErrorSink.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ErrorSink.typeTokenConstraint -> EReference : typeTokenConstraint
	if (s.typeTokenConstraint.getEReference() != null) t.addNewReference("typeTokenConstraint".clearKeyWord(), s.typeTokenConstraint.getEReference());
	//ErrorSink.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming".clearKeyWord(), s.incoming.getEReference());
}

@lazy
rule ErrorPath
	transform s : DSL!ErrorPath //errorModel.ErrorPath
	to t : SysMLine!ItemUsage
	extends Base{
	//ErrorPath.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ErrorPath.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ErrorPath.allIncoming -> EAttribute : allIncoming
	if (s.allIncoming.getEAttribute() != null) t.addNewAttribute("allIncoming".clearKeyWord(), s.allIncoming.getEAttribute());
	//ErrorPath.allOutgoing -> EAttribute : allOutgoing
	if (s.allOutgoing.getEAttribute() != null) t.addNewAttribute("allOutgoing".clearKeyWord(), s.allOutgoing.getEAttribute());
	//ErrorPath.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ErrorPath.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ErrorPath.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ErrorPath.typeTokenConstraint -> EReference : typeTokenConstraint
	if (s.typeTokenConstraint.getEReference() != null) t.addNewReference("typeTokenConstraint".clearKeyWord(), s.typeTokenConstraint.getEReference());
	//ErrorPath.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming".clearKeyWord(), s.incoming.getEReference());
	//ErrorPath.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing".clearKeyWord(), s.outgoing.getEReference());
	//ErrorPath.targetToken -> EReference : targetToken
	if (s.targetToken.getEReference() != null) t.addNewReference("targetToken".clearKeyWord(), s.targetToken.getEReference());
	//ErrorPath.typeMappingSet -> EReference : typeMappingSet
	if (s.typeMappingSet.getEReference() != null) t.addNewReference("typeMappingSet".clearKeyWord(), s.typeMappingSet.getEReference());
}

@lazy
rule PropagationPoint
	transform s : DSL!PropagationPoint //errorModel.PropagationPoint
	to t : SysMLine!ItemUsage
	extends Base{
	//PropagationPoint.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//PropagationPoint.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//PropagationPoint.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//PropagationPoint.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//PropagationPoint.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule PropagationPath
	transform s : DSL!PropagationPath //errorModel.PropagationPath
	to t : SysMLine!ItemUsage
	extends Base{
	//PropagationPath.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//PropagationPath.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//PropagationPath.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//PropagationPath.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//PropagationPath.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//PropagationPath.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source".clearKeyWord(), s.source.getEReference());
	//PropagationPath.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target".clearKeyWord(), s.target.getEReference());
}

@lazy
rule QualifiedPropagationPoint
	transform s : DSL!QualifiedPropagationPoint //errorModel.QualifiedPropagationPoint
	to t : SysMLine!ItemUsage
	extends Base{
	//QualifiedPropagationPoint.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//QualifiedPropagationPoint.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//QualifiedPropagationPoint.subcomponent -> EReference : subcomponent
	if (s.subcomponent.getEReference() != null) t.addNewReference("subcomponent".clearKeyWord(), s.subcomponent.getEReference());
	//QualifiedPropagationPoint.next -> EReference : next
	if (s.next.getEReference() != null) t.addNewReference("next".clearKeyWord(), s.next.getEReference());
	//QualifiedPropagationPoint.propagationPoint -> EReference : propagationPoint
	if (s.propagationPoint.getEReference() != null) t.addNewReference("propagationPoint".clearKeyWord(), s.propagationPoint.getEReference());
}

@lazy
rule ErrorBehaviorStateMachine
	transform s : DSL!ErrorBehaviorStateMachine //errorModel.ErrorBehaviorStateMachine
	to t : SysMLine!ItemUsage
	extends Base{
	//ErrorBehaviorStateMachine.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ErrorBehaviorStateMachine.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ErrorBehaviorStateMachine.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ErrorBehaviorStateMachine.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ErrorBehaviorStateMachine.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ErrorBehaviorStateMachine.useTypes -> EReference : useTypes
	if (s.useTypes.getEReference() != null) t.addNewReference("useTypes".clearKeyWord(), s.useTypes.getEReference());
	//ErrorBehaviorStateMachine.useTransformation -> EReference : useTransformation
	if (s.useTransformation.getEReference() != null) t.addNewReference("useTransformation".clearKeyWord(), s.useTransformation.getEReference());
	//ErrorBehaviorStateMachine.events -> EReference : events
	if (s.events.getEReference() != null) t.addNewReference("events".clearKeyWord(), s.events.getEReference());
	//ErrorBehaviorStateMachine.states -> EReference : states
	if (s.states.getEReference() != null) t.addNewReference("states".clearKeyWord(), s.states.getEReference());
	//ErrorBehaviorStateMachine.transitions -> EReference : transitions
	if (s.transitions.getEReference() != null) t.addNewReference("transitions".clearKeyWord(), s.transitions.getEReference());
	//ErrorBehaviorStateMachine.properties -> EReference : properties
	if (s.properties.getEReference() != null) t.addNewReference("properties".clearKeyWord(), s.properties.getEReference());
}

@lazy
rule ErrorBehaviorEvent
	transform s : DSL!ErrorBehaviorEvent //errorModel.ErrorBehaviorEvent
	to t : SysMLine!ItemUsage
	extends Base{
	//ErrorBehaviorEvent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ErrorBehaviorEvent.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ErrorBehaviorEvent.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ErrorBehaviorEvent.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ErrorBehaviorEvent.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule ErrorEvent
	transform s : DSL!ErrorEvent //errorModel.ErrorEvent
	to t : SysMLine!ItemUsage
	extends Base{
	//ErrorEvent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ErrorEvent.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ErrorEvent.condition -> EAttribute : condition
	if (s.condition.getEAttribute() != null) t.addNewAttribute("condition".clearKeyWord(), s.condition.getEAttribute());
	//ErrorEvent.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ErrorEvent.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ErrorEvent.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ErrorEvent.typeSet -> EReference : typeSet
	if (s.typeSet.getEReference() != null) t.addNewReference("typeSet".clearKeyWord(), s.typeSet.getEReference());
}

@lazy
rule RepairEvent
	transform s : DSL!RepairEvent //errorModel.RepairEvent
	to t : SysMLine!ItemUsage
	extends Base{
	//RepairEvent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//RepairEvent.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//RepairEvent.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//RepairEvent.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//RepairEvent.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//RepairEvent.eventInitiator -> EReference : eventInitiator
	if (s.eventInitiator.getEReference() != null) t.addNewReference("eventInitiator".clearKeyWord(), s.eventInitiator.getEReference());
}

@lazy
rule RecoverEvent
	transform s : DSL!RecoverEvent //errorModel.RecoverEvent
	to t : SysMLine!ItemUsage
	extends Base{
	//RecoverEvent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//RecoverEvent.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//RecoverEvent.condition -> EAttribute : condition
	if (s.condition.getEAttribute() != null) t.addNewAttribute("condition".clearKeyWord(), s.condition.getEAttribute());
	//RecoverEvent.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//RecoverEvent.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//RecoverEvent.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//RecoverEvent.eventInitiator -> EReference : eventInitiator
	if (s.eventInitiator.getEReference() != null) t.addNewReference("eventInitiator".clearKeyWord(), s.eventInitiator.getEReference());
}

@lazy
rule ErrorBehaviorState
	transform s : DSL!ErrorBehaviorState //errorModel.ErrorBehaviorState
	to t : SysMLine!ItemUsage
	extends Base{
	//ErrorBehaviorState.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ErrorBehaviorState.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ErrorBehaviorState.intial -> EAttribute : intial
	if (s.intial.getEAttribute() != null) t.addNewAttribute("intial".clearKeyWord(), s.intial.getEAttribute());
	//ErrorBehaviorState.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ErrorBehaviorState.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ErrorBehaviorState.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ErrorBehaviorState.typeSet -> EReference : typeSet
	if (s.typeSet.getEReference() != null) t.addNewReference("typeSet".clearKeyWord(), s.typeSet.getEReference());
}

@lazy
rule ErrorBehaviorTransition
	transform s : DSL!ErrorBehaviorTransition //errorModel.ErrorBehaviorTransition
	to t : SysMLine!ItemUsage
	extends Base{
	//ErrorBehaviorTransition.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ErrorBehaviorTransition.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ErrorBehaviorTransition.allStates -> EAttribute : allStates
	if (s.allStates.getEAttribute() != null) t.addNewAttribute("allStates".clearKeyWord(), s.allStates.getEAttribute());
	//ErrorBehaviorTransition.steadyState -> EAttribute : steadyState
	if (s.steadyState.getEAttribute() != null) t.addNewAttribute("steadyState".clearKeyWord(), s.steadyState.getEAttribute());
	//ErrorBehaviorTransition.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ErrorBehaviorTransition.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ErrorBehaviorTransition.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ErrorBehaviorTransition.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source".clearKeyWord(), s.source.getEReference());
	//ErrorBehaviorTransition.typeTokenConstraint -> EReference : typeTokenConstraint
	if (s.typeTokenConstraint.getEReference() != null) t.addNewReference("typeTokenConstraint".clearKeyWord(), s.typeTokenConstraint.getEReference());
	//ErrorBehaviorTransition.condition -> EReference : condition
	if (s.condition.getEReference() != null) t.addNewReference("condition".clearKeyWord(), s.condition.getEReference());
	//ErrorBehaviorTransition.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target".clearKeyWord(), s.target.getEReference());
	//ErrorBehaviorTransition.targetToken -> EReference : targetToken
	if (s.targetToken.getEReference() != null) t.addNewReference("targetToken".clearKeyWord(), s.targetToken.getEReference());
	//ErrorBehaviorTransition.destinationBranches -> EReference : destinationBranches
	if (s.destinationBranches.getEReference() != null) t.addNewReference("destinationBranches".clearKeyWord(), s.destinationBranches.getEReference());
}

@lazy
rule TransitionBranch
	transform s : DSL!TransitionBranch //errorModel.TransitionBranch
	to t : SysMLine!ItemUsage
	extends Base{
	//TransitionBranch.steadyState -> EAttribute : steadyState
	if (s.steadyState.getEAttribute() != null) t.addNewAttribute("steadyState".clearKeyWord(), s.steadyState.getEAttribute());
	//TransitionBranch.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//TransitionBranch.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//TransitionBranch.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target".clearKeyWord(), s.target.getEReference());
	//TransitionBranch.targetToken -> EReference : targetToken
	if (s.targetToken.getEReference() != null) t.addNewReference("targetToken".clearKeyWord(), s.targetToken.getEReference());
	//TransitionBranch.value -> EReference : value
	if (s.value.getEReference() != null) t.addNewReference("value".clearKeyWord(), s.value.getEReference());
}

@lazy
rule BranchValue
	transform s : DSL!BranchValue //errorModel.BranchValue
	to t : SysMLine!ItemUsage
	extends Base{
	//BranchValue.realvalue -> EAttribute : realvalue
	if (s.realvalue.getEAttribute() != null) t.addNewAttribute("realvalue".clearKeyWord(), s.realvalue.getEAttribute());
	//BranchValue.others -> EAttribute : others
	if (s.others.getEAttribute() != null) t.addNewAttribute("others".clearKeyWord(), s.others.getEAttribute());
	//BranchValue.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//BranchValue.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//BranchValue.symboliclabel -> EReference : symboliclabel
	if (s.symboliclabel.getEReference() != null) t.addNewReference("symboliclabel".clearKeyWord(), s.symboliclabel.getEReference());
}

@lazy
rule ConditionExpression
	transform s : DSL!ConditionExpression //errorModel.ConditionExpression
	to t : SysMLine!ItemUsage
	extends Base{
	//ConditionExpression.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ConditionExpression.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
}

@lazy
rule OrmoreExpression
	transform s : DSL!OrmoreExpression //errorModel.OrmoreExpression
	to t : SysMLine!ItemUsage
	extends Base{
	//OrmoreExpression.count -> EAttribute : count
	if (s.count.getEAttribute() != null) t.addNewAttribute("count".clearKeyWord(), s.count.getEAttribute());
	//OrmoreExpression.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//OrmoreExpression.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//OrmoreExpression.operands -> EReference : operands
	if (s.operands.getEReference() != null) t.addNewReference("operands".clearKeyWord(), s.operands.getEReference());
}

@lazy
rule OrlessExpression
	transform s : DSL!OrlessExpression //errorModel.OrlessExpression
	to t : SysMLine!ItemUsage
	extends Base{
	//OrlessExpression.count -> EAttribute : count
	if (s.count.getEAttribute() != null) t.addNewAttribute("count".clearKeyWord(), s.count.getEAttribute());
	//OrlessExpression.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//OrlessExpression.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//OrlessExpression.operands -> EReference : operands
	if (s.operands.getEReference() != null) t.addNewReference("operands".clearKeyWord(), s.operands.getEReference());
}

@lazy
rule ConditionElement
	transform s : DSL!ConditionElement //errorModel.ConditionElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ConditionElement.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ConditionElement.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ConditionElement.qualifiedErrorPropagationReference -> EReference : qualifiedErrorPropagationReference
	if (s.qualifiedErrorPropagationReference.getEReference() != null) t.addNewReference("qualifiedErrorPropagationReference".clearKeyWord(), s.qualifiedErrorPropagationReference.getEReference());
	//ConditionElement.constraint -> EReference : constraint
	if (s.constraint.getEReference() != null) t.addNewReference("constraint".clearKeyWord(), s.constraint.getEReference());
}

@lazy
rule EventOrPropagation
	transform s : DSL!EventOrPropagation //errorModel.EventOrPropagation
	to t : SysMLine!ItemUsage
	extends Base{
	//EventOrPropagation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//EventOrPropagation.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//EventOrPropagation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//EventOrPropagation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//EventOrPropagation.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
}

@lazy
rule OutgoingPropagationCondition
	transform s : DSL!OutgoingPropagationCondition //errorModel.OutgoingPropagationCondition
	to t : SysMLine!ItemUsage
	extends Base{
	//OutgoingPropagationCondition.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//OutgoingPropagationCondition.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//OutgoingPropagationCondition.allStates -> EAttribute : allStates
	if (s.allStates.getEAttribute() != null) t.addNewAttribute("allStates".clearKeyWord(), s.allStates.getEAttribute());
	//OutgoingPropagationCondition.allPropagations -> EAttribute : allPropagations
	if (s.allPropagations.getEAttribute() != null) t.addNewAttribute("allPropagations".clearKeyWord(), s.allPropagations.getEAttribute());
	//OutgoingPropagationCondition.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//OutgoingPropagationCondition.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//OutgoingPropagationCondition.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//OutgoingPropagationCondition.state -> EReference : state
	if (s.state.getEReference() != null) t.addNewReference("state".clearKeyWord(), s.state.getEReference());
	//OutgoingPropagationCondition.typeTokenConstraint -> EReference : typeTokenConstraint
	if (s.typeTokenConstraint.getEReference() != null) t.addNewReference("typeTokenConstraint".clearKeyWord(), s.typeTokenConstraint.getEReference());
	//OutgoingPropagationCondition.condition -> EReference : condition
	if (s.condition.getEReference() != null) t.addNewReference("condition".clearKeyWord(), s.condition.getEReference());
	//OutgoingPropagationCondition.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing".clearKeyWord(), s.outgoing.getEReference());
	//OutgoingPropagationCondition.typeToken -> EReference : typeToken
	if (s.typeToken.getEReference() != null) t.addNewReference("typeToken".clearKeyWord(), s.typeToken.getEReference());
}

@lazy
rule ErrorDetection
	transform s : DSL!ErrorDetection //errorModel.ErrorDetection
	to t : SysMLine!ItemUsage
	extends Base{
	//ErrorDetection.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ErrorDetection.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//ErrorDetection.allStates -> EAttribute : allStates
	if (s.allStates.getEAttribute() != null) t.addNewAttribute("allStates".clearKeyWord(), s.allStates.getEAttribute());
	//ErrorDetection.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ErrorDetection.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ErrorDetection.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//ErrorDetection.state -> EReference : state
	if (s.state.getEReference() != null) t.addNewReference("state".clearKeyWord(), s.state.getEReference());
	//ErrorDetection.typeTokenConstraint -> EReference : typeTokenConstraint
	if (s.typeTokenConstraint.getEReference() != null) t.addNewReference("typeTokenConstraint".clearKeyWord(), s.typeTokenConstraint.getEReference());
	//ErrorDetection.condition -> EReference : condition
	if (s.condition.getEReference() != null) t.addNewReference("condition".clearKeyWord(), s.condition.getEReference());
	//ErrorDetection.detectionReportingPort -> EReference : detectionReportingPort
	if (s.detectionReportingPort.getEReference() != null) t.addNewReference("detectionReportingPort".clearKeyWord(), s.detectionReportingPort.getEReference());
	//ErrorDetection.errorCode -> EReference : errorCode
	if (s.errorCode.getEReference() != null) t.addNewReference("errorCode".clearKeyWord(), s.errorCode.getEReference());
}

@lazy
rule ErrorCodeValue
	transform s : DSL!ErrorCodeValue //errorModel.ErrorCodeValue
	to t : SysMLine!ItemUsage
	extends Base{
	//ErrorCodeValue.intValue -> EAttribute : intValue
	if (s.intValue.getEAttribute() != null) t.addNewAttribute("intValue".clearKeyWord(), s.intValue.getEAttribute());
	//ErrorCodeValue.enumLiteral -> EAttribute : enumLiteral
	if (s.enumLiteral.getEAttribute() != null) t.addNewAttribute("enumLiteral".clearKeyWord(), s.enumLiteral.getEAttribute());
	//ErrorCodeValue.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ErrorCodeValue.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ErrorCodeValue.constant -> EReference : constant
	if (s.constant.getEReference() != null) t.addNewReference("constant".clearKeyWord(), s.constant.getEReference());
}

@lazy
rule ErrorStateToModeMapping
	transform s : DSL!ErrorStateToModeMapping //errorModel.ErrorStateToModeMapping
	to t : SysMLine!ItemUsage
	extends Base{
	//ErrorStateToModeMapping.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//ErrorStateToModeMapping.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//ErrorStateToModeMapping.errorState -> EReference : errorState
	if (s.errorState.getEReference() != null) t.addNewReference("errorState".clearKeyWord(), s.errorState.getEReference());
	//ErrorStateToModeMapping.typeToken -> EReference : typeToken
	if (s.typeToken.getEReference() != null) t.addNewReference("typeToken".clearKeyWord(), s.typeToken.getEReference());
	//ErrorStateToModeMapping.mappedModes -> EReference : mappedModes
	if (s.mappedModes.getEReference() != null) t.addNewReference("mappedModes".clearKeyWord(), s.mappedModes.getEReference());
}

@lazy
rule CompositeState
	transform s : DSL!CompositeState //errorModel.CompositeState
	to t : SysMLine!ItemUsage
	extends Base{
	//CompositeState.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//CompositeState.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//CompositeState.others -> EAttribute : others
	if (s.others.getEAttribute() != null) t.addNewAttribute("others".clearKeyWord(), s.others.getEAttribute());
	//CompositeState.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//CompositeState.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//CompositeState.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//CompositeState.condition -> EReference : condition
	if (s.condition.getEReference() != null) t.addNewReference("condition".clearKeyWord(), s.condition.getEReference());
	//CompositeState.state -> EReference : state
	if (s.state.getEReference() != null) t.addNewReference("state".clearKeyWord(), s.state.getEReference());
	//CompositeState.typedToken -> EReference : typedToken
	if (s.typedToken.getEReference() != null) t.addNewReference("typedToken".clearKeyWord(), s.typedToken.getEReference());
}

@lazy
rule QualifiedErrorBehaviorState
	transform s : DSL!QualifiedErrorBehaviorState //errorModel.QualifiedErrorBehaviorState
	to t : SysMLine!ItemUsage
	extends Base{
	//QualifiedErrorBehaviorState.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//QualifiedErrorBehaviorState.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//QualifiedErrorBehaviorState.subcomponent -> EReference : subcomponent
	if (s.subcomponent.getEReference() != null) t.addNewReference("subcomponent".clearKeyWord(), s.subcomponent.getEReference());
	//QualifiedErrorBehaviorState.next -> EReference : next
	if (s.next.getEReference() != null) t.addNewReference("next".clearKeyWord(), s.next.getEReference());
	//QualifiedErrorBehaviorState.state -> EReference : state
	if (s.state.getEReference() != null) t.addNewReference("state".clearKeyWord(), s.state.getEReference());
}

@lazy
rule SubcomponentElement
	transform s : DSL!SubcomponentElement //errorModel.SubcomponentElement
	to t : SysMLine!ItemUsage
	extends Base{
	//SubcomponentElement.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SubcomponentElement.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SubcomponentElement.subcomponent -> EReference : subcomponent
	if (s.subcomponent.getEReference() != null) t.addNewReference("subcomponent".clearKeyWord(), s.subcomponent.getEReference());
}

@lazy
rule EMV2Root
	transform s : DSL!EMV2Root //errorModel.EMV2Root
	to t : SysMLine!ItemUsage
	extends Base{
	//EMV2Root.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//EMV2Root.qualifiedName -> EAttribute : qualifiedName
	if (s.qualifiedName.getEAttribute() != null) t.addNewAttribute("qualifiedName".clearKeyWord(), s.qualifiedName.getEAttribute());
	//EMV2Root.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//EMV2Root.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//EMV2Root.ownedPropertyAssociation -> EReference : ownedPropertyAssociation
	if (s.ownedPropertyAssociation.getEReference() != null) t.addNewReference("ownedPropertyAssociation".clearKeyWord(), s.ownedPropertyAssociation.getEReference());
	//EMV2Root.library -> EReference : library
	if (s.library.getEReference() != null) t.addNewReference("library".clearKeyWord(), s.library.getEReference());
	//EMV2Root.subclauses -> EReference : subclauses
	if (s.subclauses.getEReference() != null) t.addNewReference("subclauses".clearKeyWord(), s.subclauses.getEReference());
}

@lazy
rule OrExpression
	transform s : DSL!OrExpression //errorModel.OrExpression
	to t : SysMLine!ItemUsage
	extends Base{
	//OrExpression.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//OrExpression.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//OrExpression.operands -> EReference : operands
	if (s.operands.getEReference() != null) t.addNewReference("operands".clearKeyWord(), s.operands.getEReference());
}

@lazy
rule AndExpression
	transform s : DSL!AndExpression //errorModel.AndExpression
	to t : SysMLine!ItemUsage
	extends Base{
	//AndExpression.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//AndExpression.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//AndExpression.operands -> EReference : operands
	if (s.operands.getEReference() != null) t.addNewReference("operands".clearKeyWord(), s.operands.getEReference());
}

@lazy
rule AllExpression
	transform s : DSL!AllExpression //errorModel.AllExpression
	to t : SysMLine!ItemUsage
	extends Base{
	//AllExpression.count -> EAttribute : count
	if (s.count.getEAttribute() != null) t.addNewAttribute("count".clearKeyWord(), s.count.getEAttribute());
	//AllExpression.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//AllExpression.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//AllExpression.operands -> EReference : operands
	if (s.operands.getEReference() != null) t.addNewReference("operands".clearKeyWord(), s.operands.getEReference());
}

@lazy
rule QualifiedErrorEventOrPropagation
	transform s : DSL!QualifiedErrorEventOrPropagation //errorModel.QualifiedErrorEventOrPropagation
	to t : SysMLine!ItemUsage
	extends Base{
	//QualifiedErrorEventOrPropagation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//QualifiedErrorEventOrPropagation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//QualifiedErrorEventOrPropagation.containmentPath -> EReference : containmentPath
	if (s.containmentPath.getEReference() != null) t.addNewReference("containmentPath".clearKeyWord(), s.containmentPath.getEReference());
	//QualifiedErrorEventOrPropagation.emv2Target -> EReference : emv2Target
	if (s.emv2Target.getEReference() != null) t.addNewReference("emv2Target".clearKeyWord(), s.emv2Target.getEReference());
}

@lazy
rule QualifiedErrorPropagation
	transform s : DSL!QualifiedErrorPropagation //errorModel.QualifiedErrorPropagation
	to t : SysMLine!ItemUsage
	extends Base{
	//QualifiedErrorPropagation.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//QualifiedErrorPropagation.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//QualifiedErrorPropagation.containmentPath -> EReference : containmentPath
	if (s.containmentPath.getEReference() != null) t.addNewReference("containmentPath".clearKeyWord(), s.containmentPath.getEReference());
	//QualifiedErrorPropagation.emv2Target -> EReference : emv2Target
	if (s.emv2Target.getEReference() != null) t.addNewReference("emv2Target".clearKeyWord(), s.emv2Target.getEReference());
}

@lazy
rule SConditionElement
	transform s : DSL!SConditionElement //errorModel.SConditionElement
	to t : SysMLine!ItemUsage
	extends Base{
	//SConditionElement.ownedElement -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null) t.addNewReference("ownedElement".clearKeyWord(), s.ownedElement.getEReference());
	//SConditionElement.ownedComment -> EReference : ownedComment
	if (s.ownedComment.getEReference() != null) t.addNewReference("ownedComment".clearKeyWord(), s.ownedComment.getEReference());
	//SConditionElement.qualifiedErrorPropagationReference -> EReference : qualifiedErrorPropagationReference
	if (s.qualifiedErrorPropagationReference.getEReference() != null) t.addNewReference("qualifiedErrorPropagationReference".clearKeyWord(), s.qualifiedErrorPropagationReference.getEReference());
	//SConditionElement.constraint -> EReference : constraint
	if (s.constraint.getEReference() != null) t.addNewReference("constraint".clearKeyWord(), s.constraint.getEReference());
	//SConditionElement.qualifiedState -> EReference : qualifiedState
	if (s.qualifiedState.getEReference() != null) t.addNewReference("qualifiedState".clearKeyWord(), s.qualifiedState.getEReference());
}


// ecore.ecore
@lazy
rule EAttribute
	transform s : DSL!EAttribute //ecore.EAttribute
	to t : SysMLine!ItemUsage
	extends Base{
	//EAttribute.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//EAttribute.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered".clearKeyWord(), s.ordered.getEAttribute());
	//EAttribute.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique".clearKeyWord(), s.unique.getEAttribute());
	//EAttribute.lowerBound -> EAttribute : lowerBound
	if (s.lowerBound.getEAttribute() != null) t.addNewAttribute("lowerBound".clearKeyWord(), s.lowerBound.getEAttribute());
	//EAttribute.upperBound -> EAttribute : upperBound
	if (s.upperBound.getEAttribute() != null) t.addNewAttribute("upperBound".clearKeyWord(), s.upperBound.getEAttribute());
	//EAttribute.many -> EAttribute : many
	if (s.many.getEAttribute() != null) t.addNewAttribute("many".clearKeyWord(), s.many.getEAttribute());
	//EAttribute.required -> EAttribute : required
	if (s.required.getEAttribute() != null) t.addNewAttribute("required".clearKeyWord(), s.required.getEAttribute());
	//EAttribute.changeable -> EAttribute : changeable
	if (s.changeable.getEAttribute() != null) t.addNewAttribute("changeable".clearKeyWord(), s.changeable.getEAttribute());
	//EAttribute.volatile -> EAttribute : volatile
	if (s.volatile.getEAttribute() != null) t.addNewAttribute("volatile".clearKeyWord(), s.volatile.getEAttribute());
	//EAttribute.transient -> EAttribute : transient
	if (s.transient.getEAttribute() != null) t.addNewAttribute("transient".clearKeyWord(), s.transient.getEAttribute());
	//EAttribute.defaultValueLiteral -> EAttribute : defaultValueLiteral
	if (s.defaultValueLiteral.getEAttribute() != null) t.addNewAttribute("defaultValueLiteral".clearKeyWord(), s.defaultValueLiteral.getEAttribute());
	//EAttribute.defaultValue -> EAttribute : defaultValue
	if (s.defaultValue.getEAttribute() != null) t.addNewAttribute("defaultValue".clearKeyWord(), s.defaultValue.getEAttribute());
	//EAttribute.unsettable -> EAttribute : unsettable
	if (s.unsettable.getEAttribute() != null) t.addNewAttribute("unsettable".clearKeyWord(), s.unsettable.getEAttribute());
	//EAttribute.derived -> EAttribute : derived
	if (s.derived.getEAttribute() != null) t.addNewAttribute("derived".clearKeyWord(), s.derived.getEAttribute());
	//EAttribute.iD -> EAttribute : iD
	if (s.iD.getEAttribute() != null) t.addNewAttribute("iD".clearKeyWord(), s.iD.getEAttribute());
	//EAttribute.eAnnotations -> EReference : eAnnotations
	if (s.eAnnotations.getEReference() != null) t.addNewReference("eAnnotations".clearKeyWord(), s.eAnnotations.getEReference());
	//EAttribute.eType -> EReference : eType
	if (s.eType.getEReference() != null) t.addNewReference("eType".clearKeyWord(), s.eType.getEReference());
	//EAttribute.eGenericType -> EReference : eGenericType
	if (s.eGenericType.getEReference() != null) t.addNewReference("eGenericType".clearKeyWord(), s.eGenericType.getEReference());
	//EAttribute.eContainingClass -> EReference : eContainingClass
	if (s.eContainingClass.getEReference() != null) t.addNewReference("eContainingClass".clearKeyWord(), s.eContainingClass.getEReference());
	//EAttribute.eAttributeType -> EReference : eAttributeType
	if (s.eAttributeType.getEReference() != null) t.addNewReference("eAttributeType".clearKeyWord(), s.eAttributeType.getEReference());
}

@lazy
rule EAnnotation
	transform s : DSL!EAnnotation //ecore.EAnnotation
	to t : SysMLine!ItemUsage
	extends Base{
	//EAnnotation.source -> EAttribute : source
	if (s.source.getEAttribute() != null) t.addNewAttribute("source".clearKeyWord(), s.source.getEAttribute());
	//EAnnotation.eAnnotations -> EReference : eAnnotations
	if (s.eAnnotations.getEReference() != null) t.addNewReference("eAnnotations".clearKeyWord(), s.eAnnotations.getEReference());
	//EAnnotation.details -> EReference : details
	if (s.details.getEReference() != null) t.addNewReference("details".clearKeyWord(), s.details.getEReference());
	//EAnnotation.eModelElement -> EReference : eModelElement
	if (s.eModelElement.getEReference() != null) t.addNewReference("eModelElement".clearKeyWord(), s.eModelElement.getEReference());
	//EAnnotation.contents -> EReference : contents
	if (s.contents.getEReference() != null) t.addNewReference("contents".clearKeyWord(), s.contents.getEReference());
	//EAnnotation.references -> EReference : references
	if (s.references.getEReference() != null) t.addNewReference("references".clearKeyWord(), s.references.getEReference());
}

@lazy
rule EClass
	transform s : DSL!EClass //ecore.EClass
	to t : SysMLine!ItemUsage
	extends Base{
	//EClass.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//EClass.instanceClassName -> EAttribute : instanceClassName
	if (s.instanceClassName.getEAttribute() != null) t.addNewAttribute("instanceClassName".clearKeyWord(), s.instanceClassName.getEAttribute());
	//EClass.instanceClass -> EAttribute : instanceClass
	if (s.instanceClass.getEAttribute() != null) t.addNewAttribute("instanceClass".clearKeyWord(), s.instanceClass.getEAttribute());
	//EClass.defaultValue -> EAttribute : defaultValue
	if (s.defaultValue.getEAttribute() != null) t.addNewAttribute("defaultValue".clearKeyWord(), s.defaultValue.getEAttribute());
	//EClass.instanceTypeName -> EAttribute : instanceTypeName
	if (s.instanceTypeName.getEAttribute() != null) t.addNewAttribute("instanceTypeName".clearKeyWord(), s.instanceTypeName.getEAttribute());
	//EClass.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract".clearKeyWord(), s.abstract.getEAttribute());
	//EClass.interface -> EAttribute : interface
	if (s.interface.getEAttribute() != null) t.addNewAttribute("interface".clearKeyWord(), s.interface.getEAttribute());
	//EClass.eAnnotations -> EReference : eAnnotations
	if (s.eAnnotations.getEReference() != null) t.addNewReference("eAnnotations".clearKeyWord(), s.eAnnotations.getEReference());
	//EClass.ePackage -> EReference : ePackage
	if (s.ePackage.getEReference() != null) t.addNewReference("ePackage".clearKeyWord(), s.ePackage.getEReference());
	//EClass.eTypeParameters -> EReference : eTypeParameters
	if (s.eTypeParameters.getEReference() != null) t.addNewReference("eTypeParameters".clearKeyWord(), s.eTypeParameters.getEReference());
	//EClass.eSuperTypes -> EReference : eSuperTypes
	if (s.eSuperTypes.getEReference() != null) t.addNewReference("eSuperTypes".clearKeyWord(), s.eSuperTypes.getEReference());
	//EClass.eOperations -> EReference : eOperations
	if (s.eOperations.getEReference() != null) t.addNewReference("eOperations".clearKeyWord(), s.eOperations.getEReference());
	//EClass.eAllAttributes -> EReference : eAllAttributes
	if (s.eAllAttributes.getEReference() != null) t.addNewReference("eAllAttributes".clearKeyWord(), s.eAllAttributes.getEReference());
	//EClass.eAllReferences -> EReference : eAllReferences
	if (s.eAllReferences.getEReference() != null) t.addNewReference("eAllReferences".clearKeyWord(), s.eAllReferences.getEReference());
	//EClass.eReferences -> EReference : eReferences
	if (s.eReferences.getEReference() != null) t.addNewReference("eReferences".clearKeyWord(), s.eReferences.getEReference());
	//EClass.eAttributes -> EReference : eAttributes
	if (s.eAttributes.getEReference() != null) t.addNewReference("eAttributes".clearKeyWord(), s.eAttributes.getEReference());
	//EClass.eAllContainments -> EReference : eAllContainments
	if (s.eAllContainments.getEReference() != null) t.addNewReference("eAllContainments".clearKeyWord(), s.eAllContainments.getEReference());
	//EClass.eAllOperations -> EReference : eAllOperations
	if (s.eAllOperations.getEReference() != null) t.addNewReference("eAllOperations".clearKeyWord(), s.eAllOperations.getEReference());
	//EClass.eAllStructuralFeatures -> EReference : eAllStructuralFeatures
	if (s.eAllStructuralFeatures.getEReference() != null) t.addNewReference("eAllStructuralFeatures".clearKeyWord(), s.eAllStructuralFeatures.getEReference());
	//EClass.eAllSuperTypes -> EReference : eAllSuperTypes
	if (s.eAllSuperTypes.getEReference() != null) t.addNewReference("eAllSuperTypes".clearKeyWord(), s.eAllSuperTypes.getEReference());
	//EClass.eIDAttribute -> EReference : eIDAttribute
	if (s.eIDAttribute.getEReference() != null) t.addNewReference("eIDAttribute".clearKeyWord(), s.eIDAttribute.getEReference());
	//EClass.eStructuralFeatures -> EReference : eStructuralFeatures
	if (s.eStructuralFeatures.getEReference() != null) t.addNewReference("eStructuralFeatures".clearKeyWord(), s.eStructuralFeatures.getEReference());
	//EClass.eGenericSuperTypes -> EReference : eGenericSuperTypes
	if (s.eGenericSuperTypes.getEReference() != null) t.addNewReference("eGenericSuperTypes".clearKeyWord(), s.eGenericSuperTypes.getEReference());
	//EClass.eAllGenericSuperTypes -> EReference : eAllGenericSuperTypes
	if (s.eAllGenericSuperTypes.getEReference() != null) t.addNewReference("eAllGenericSuperTypes".clearKeyWord(), s.eAllGenericSuperTypes.getEReference());
}

@lazy
rule EClassifier
	transform s : DSL!EClassifier //ecore.EClassifier
	to t : SysMLine!ItemUsage
	extends Base{
	//EClassifier.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//EClassifier.instanceClassName -> EAttribute : instanceClassName
	if (s.instanceClassName.getEAttribute() != null) t.addNewAttribute("instanceClassName".clearKeyWord(), s.instanceClassName.getEAttribute());
	//EClassifier.instanceClass -> EAttribute : instanceClass
	if (s.instanceClass.getEAttribute() != null) t.addNewAttribute("instanceClass".clearKeyWord(), s.instanceClass.getEAttribute());
	//EClassifier.defaultValue -> EAttribute : defaultValue
	if (s.defaultValue.getEAttribute() != null) t.addNewAttribute("defaultValue".clearKeyWord(), s.defaultValue.getEAttribute());
	//EClassifier.instanceTypeName -> EAttribute : instanceTypeName
	if (s.instanceTypeName.getEAttribute() != null) t.addNewAttribute("instanceTypeName".clearKeyWord(), s.instanceTypeName.getEAttribute());
	//EClassifier.eAnnotations -> EReference : eAnnotations
	if (s.eAnnotations.getEReference() != null) t.addNewReference("eAnnotations".clearKeyWord(), s.eAnnotations.getEReference());
	//EClassifier.ePackage -> EReference : ePackage
	if (s.ePackage.getEReference() != null) t.addNewReference("ePackage".clearKeyWord(), s.ePackage.getEReference());
	//EClassifier.eTypeParameters -> EReference : eTypeParameters
	if (s.eTypeParameters.getEReference() != null) t.addNewReference("eTypeParameters".clearKeyWord(), s.eTypeParameters.getEReference());
}

@lazy
rule EDataType
	transform s : DSL!EDataType //ecore.EDataType
	to t : SysMLine!ItemUsage
	extends Base{
	//EDataType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//EDataType.instanceClassName -> EAttribute : instanceClassName
	if (s.instanceClassName.getEAttribute() != null) t.addNewAttribute("instanceClassName".clearKeyWord(), s.instanceClassName.getEAttribute());
	//EDataType.instanceClass -> EAttribute : instanceClass
	if (s.instanceClass.getEAttribute() != null) t.addNewAttribute("instanceClass".clearKeyWord(), s.instanceClass.getEAttribute());
	//EDataType.defaultValue -> EAttribute : defaultValue
	if (s.defaultValue.getEAttribute() != null) t.addNewAttribute("defaultValue".clearKeyWord(), s.defaultValue.getEAttribute());
	//EDataType.instanceTypeName -> EAttribute : instanceTypeName
	if (s.instanceTypeName.getEAttribute() != null) t.addNewAttribute("instanceTypeName".clearKeyWord(), s.instanceTypeName.getEAttribute());
	//EDataType.serializable -> EAttribute : serializable
	if (s.serializable.getEAttribute() != null) t.addNewAttribute("serializable".clearKeyWord(), s.serializable.getEAttribute());
	//EDataType.eAnnotations -> EReference : eAnnotations
	if (s.eAnnotations.getEReference() != null) t.addNewReference("eAnnotations".clearKeyWord(), s.eAnnotations.getEReference());
	//EDataType.ePackage -> EReference : ePackage
	if (s.ePackage.getEReference() != null) t.addNewReference("ePackage".clearKeyWord(), s.ePackage.getEReference());
	//EDataType.eTypeParameters -> EReference : eTypeParameters
	if (s.eTypeParameters.getEReference() != null) t.addNewReference("eTypeParameters".clearKeyWord(), s.eTypeParameters.getEReference());
}

@lazy
rule EEnum
	transform s : DSL!EEnum //ecore.EEnum
	to t : SysMLine!ItemUsage
	extends Base{
	//EEnum.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//EEnum.instanceClassName -> EAttribute : instanceClassName
	if (s.instanceClassName.getEAttribute() != null) t.addNewAttribute("instanceClassName".clearKeyWord(), s.instanceClassName.getEAttribute());
	//EEnum.instanceClass -> EAttribute : instanceClass
	if (s.instanceClass.getEAttribute() != null) t.addNewAttribute("instanceClass".clearKeyWord(), s.instanceClass.getEAttribute());
	//EEnum.defaultValue -> EAttribute : defaultValue
	if (s.defaultValue.getEAttribute() != null) t.addNewAttribute("defaultValue".clearKeyWord(), s.defaultValue.getEAttribute());
	//EEnum.instanceTypeName -> EAttribute : instanceTypeName
	if (s.instanceTypeName.getEAttribute() != null) t.addNewAttribute("instanceTypeName".clearKeyWord(), s.instanceTypeName.getEAttribute());
	//EEnum.serializable -> EAttribute : serializable
	if (s.serializable.getEAttribute() != null) t.addNewAttribute("serializable".clearKeyWord(), s.serializable.getEAttribute());
	//EEnum.eAnnotations -> EReference : eAnnotations
	if (s.eAnnotations.getEReference() != null) t.addNewReference("eAnnotations".clearKeyWord(), s.eAnnotations.getEReference());
	//EEnum.ePackage -> EReference : ePackage
	if (s.ePackage.getEReference() != null) t.addNewReference("ePackage".clearKeyWord(), s.ePackage.getEReference());
	//EEnum.eTypeParameters -> EReference : eTypeParameters
	if (s.eTypeParameters.getEReference() != null) t.addNewReference("eTypeParameters".clearKeyWord(), s.eTypeParameters.getEReference());
	//EEnum.eLiterals -> EReference : eLiterals
	if (s.eLiterals.getEReference() != null) t.addNewReference("eLiterals".clearKeyWord(), s.eLiterals.getEReference());
}

@lazy
rule EEnumLiteral
	transform s : DSL!EEnumLiteral //ecore.EEnumLiteral
	to t : SysMLine!ItemUsage
	extends Base{
	//EEnumLiteral.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//EEnumLiteral.value -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value".clearKeyWord(), s.value.getEAttribute());
	//EEnumLiteral.instance -> EAttribute : instance
	if (s.instance.getEAttribute() != null) t.addNewAttribute("instance".clearKeyWord(), s.instance.getEAttribute());
	//EEnumLiteral.literal -> EAttribute : literal
	if (s.literal.getEAttribute() != null) t.addNewAttribute("literal".clearKeyWord(), s.literal.getEAttribute());
	//EEnumLiteral.eAnnotations -> EReference : eAnnotations
	if (s.eAnnotations.getEReference() != null) t.addNewReference("eAnnotations".clearKeyWord(), s.eAnnotations.getEReference());
	//EEnumLiteral.eEnum -> EReference : eEnum
	if (s.eEnum.getEReference() != null) t.addNewReference("eEnum".clearKeyWord(), s.eEnum.getEReference());
}

@lazy
rule EFactory
	transform s : DSL!EFactory //ecore.EFactory
	to t : SysMLine!ItemUsage
	extends Base{
	//EFactory.eAnnotations -> EReference : eAnnotations
	if (s.eAnnotations.getEReference() != null) t.addNewReference("eAnnotations".clearKeyWord(), s.eAnnotations.getEReference());
	//EFactory.ePackage -> EReference : ePackage
	if (s.ePackage.getEReference() != null) t.addNewReference("ePackage".clearKeyWord(), s.ePackage.getEReference());
}

@lazy
rule EModelElement
	transform s : DSL!EModelElement //ecore.EModelElement
	to t : SysMLine!ItemUsage
	extends Base{
	//EModelElement.eAnnotations -> EReference : eAnnotations
	if (s.eAnnotations.getEReference() != null) t.addNewReference("eAnnotations".clearKeyWord(), s.eAnnotations.getEReference());
}

@lazy
rule ENamedElement
	transform s : DSL!ENamedElement //ecore.ENamedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ENamedElement.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ENamedElement.eAnnotations -> EReference : eAnnotations
	if (s.eAnnotations.getEReference() != null) t.addNewReference("eAnnotations".clearKeyWord(), s.eAnnotations.getEReference());
}

@lazy
rule EObject
	transform s : DSL!EObject //ecore.EObject
	to t : SysMLine!ItemUsage
	extends Base{
}

@lazy
rule EOperation
	transform s : DSL!EOperation //ecore.EOperation
	to t : SysMLine!ItemUsage
	extends Base{
	//EOperation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//EOperation.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered".clearKeyWord(), s.ordered.getEAttribute());
	//EOperation.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique".clearKeyWord(), s.unique.getEAttribute());
	//EOperation.lowerBound -> EAttribute : lowerBound
	if (s.lowerBound.getEAttribute() != null) t.addNewAttribute("lowerBound".clearKeyWord(), s.lowerBound.getEAttribute());
	//EOperation.upperBound -> EAttribute : upperBound
	if (s.upperBound.getEAttribute() != null) t.addNewAttribute("upperBound".clearKeyWord(), s.upperBound.getEAttribute());
	//EOperation.many -> EAttribute : many
	if (s.many.getEAttribute() != null) t.addNewAttribute("many".clearKeyWord(), s.many.getEAttribute());
	//EOperation.required -> EAttribute : required
	if (s.required.getEAttribute() != null) t.addNewAttribute("required".clearKeyWord(), s.required.getEAttribute());
	//EOperation.eAnnotations -> EReference : eAnnotations
	if (s.eAnnotations.getEReference() != null) t.addNewReference("eAnnotations".clearKeyWord(), s.eAnnotations.getEReference());
	//EOperation.eType -> EReference : eType
	if (s.eType.getEReference() != null) t.addNewReference("eType".clearKeyWord(), s.eType.getEReference());
	//EOperation.eGenericType -> EReference : eGenericType
	if (s.eGenericType.getEReference() != null) t.addNewReference("eGenericType".clearKeyWord(), s.eGenericType.getEReference());
	//EOperation.eContainingClass -> EReference : eContainingClass
	if (s.eContainingClass.getEReference() != null) t.addNewReference("eContainingClass".clearKeyWord(), s.eContainingClass.getEReference());
	//EOperation.eTypeParameters -> EReference : eTypeParameters
	if (s.eTypeParameters.getEReference() != null) t.addNewReference("eTypeParameters".clearKeyWord(), s.eTypeParameters.getEReference());
	//EOperation.eParameters -> EReference : eParameters
	if (s.eParameters.getEReference() != null) t.addNewReference("eParameters".clearKeyWord(), s.eParameters.getEReference());
	//EOperation.eExceptions -> EReference : eExceptions
	if (s.eExceptions.getEReference() != null) t.addNewReference("eExceptions".clearKeyWord(), s.eExceptions.getEReference());
	//EOperation.eGenericExceptions -> EReference : eGenericExceptions
	if (s.eGenericExceptions.getEReference() != null) t.addNewReference("eGenericExceptions".clearKeyWord(), s.eGenericExceptions.getEReference());
}

@lazy
rule EPackage
	transform s : DSL!EPackage //ecore.EPackage
	to t : SysMLine!ItemUsage
	extends Base{
	//EPackage.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//EPackage.nsURI -> EAttribute : nsURI
	if (s.nsURI.getEAttribute() != null) t.addNewAttribute("nsURI".clearKeyWord(), s.nsURI.getEAttribute());
	//EPackage.nsPrefix -> EAttribute : nsPrefix
	if (s.nsPrefix.getEAttribute() != null) t.addNewAttribute("nsPrefix".clearKeyWord(), s.nsPrefix.getEAttribute());
	//EPackage.eAnnotations -> EReference : eAnnotations
	if (s.eAnnotations.getEReference() != null) t.addNewReference("eAnnotations".clearKeyWord(), s.eAnnotations.getEReference());
	//EPackage.eFactoryInstance -> EReference : eFactoryInstance
	if (s.eFactoryInstance.getEReference() != null) t.addNewReference("eFactoryInstance".clearKeyWord(), s.eFactoryInstance.getEReference());
	//EPackage.eClassifiers -> EReference : eClassifiers
	if (s.eClassifiers.getEReference() != null) t.addNewReference("eClassifiers".clearKeyWord(), s.eClassifiers.getEReference());
	//EPackage.eSubpackages -> EReference : eSubpackages
	if (s.eSubpackages.getEReference() != null) t.addNewReference("eSubpackages".clearKeyWord(), s.eSubpackages.getEReference());
	//EPackage.eSuperPackage -> EReference : eSuperPackage
	if (s.eSuperPackage.getEReference() != null) t.addNewReference("eSuperPackage".clearKeyWord(), s.eSuperPackage.getEReference());
}

@lazy
rule EParameter
	transform s : DSL!EParameter //ecore.EParameter
	to t : SysMLine!ItemUsage
	extends Base{
	//EParameter.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//EParameter.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered".clearKeyWord(), s.ordered.getEAttribute());
	//EParameter.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique".clearKeyWord(), s.unique.getEAttribute());
	//EParameter.lowerBound -> EAttribute : lowerBound
	if (s.lowerBound.getEAttribute() != null) t.addNewAttribute("lowerBound".clearKeyWord(), s.lowerBound.getEAttribute());
	//EParameter.upperBound -> EAttribute : upperBound
	if (s.upperBound.getEAttribute() != null) t.addNewAttribute("upperBound".clearKeyWord(), s.upperBound.getEAttribute());
	//EParameter.many -> EAttribute : many
	if (s.many.getEAttribute() != null) t.addNewAttribute("many".clearKeyWord(), s.many.getEAttribute());
	//EParameter.required -> EAttribute : required
	if (s.required.getEAttribute() != null) t.addNewAttribute("required".clearKeyWord(), s.required.getEAttribute());
	//EParameter.eAnnotations -> EReference : eAnnotations
	if (s.eAnnotations.getEReference() != null) t.addNewReference("eAnnotations".clearKeyWord(), s.eAnnotations.getEReference());
	//EParameter.eType -> EReference : eType
	if (s.eType.getEReference() != null) t.addNewReference("eType".clearKeyWord(), s.eType.getEReference());
	//EParameter.eGenericType -> EReference : eGenericType
	if (s.eGenericType.getEReference() != null) t.addNewReference("eGenericType".clearKeyWord(), s.eGenericType.getEReference());
	//EParameter.eOperation -> EReference : eOperation
	if (s.eOperation.getEReference() != null) t.addNewReference("eOperation".clearKeyWord(), s.eOperation.getEReference());
}

@lazy
rule EReference
	transform s : DSL!EReference //ecore.EReference
	to t : SysMLine!ItemUsage
	extends Base{
	//EReference.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//EReference.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered".clearKeyWord(), s.ordered.getEAttribute());
	//EReference.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique".clearKeyWord(), s.unique.getEAttribute());
	//EReference.lowerBound -> EAttribute : lowerBound
	if (s.lowerBound.getEAttribute() != null) t.addNewAttribute("lowerBound".clearKeyWord(), s.lowerBound.getEAttribute());
	//EReference.upperBound -> EAttribute : upperBound
	if (s.upperBound.getEAttribute() != null) t.addNewAttribute("upperBound".clearKeyWord(), s.upperBound.getEAttribute());
	//EReference.many -> EAttribute : many
	if (s.many.getEAttribute() != null) t.addNewAttribute("many".clearKeyWord(), s.many.getEAttribute());
	//EReference.required -> EAttribute : required
	if (s.required.getEAttribute() != null) t.addNewAttribute("required".clearKeyWord(), s.required.getEAttribute());
	//EReference.changeable -> EAttribute : changeable
	if (s.changeable.getEAttribute() != null) t.addNewAttribute("changeable".clearKeyWord(), s.changeable.getEAttribute());
	//EReference.volatile -> EAttribute : volatile
	if (s.volatile.getEAttribute() != null) t.addNewAttribute("volatile".clearKeyWord(), s.volatile.getEAttribute());
	//EReference.transient -> EAttribute : transient
	if (s.transient.getEAttribute() != null) t.addNewAttribute("transient".clearKeyWord(), s.transient.getEAttribute());
	//EReference.defaultValueLiteral -> EAttribute : defaultValueLiteral
	if (s.defaultValueLiteral.getEAttribute() != null) t.addNewAttribute("defaultValueLiteral".clearKeyWord(), s.defaultValueLiteral.getEAttribute());
	//EReference.defaultValue -> EAttribute : defaultValue
	if (s.defaultValue.getEAttribute() != null) t.addNewAttribute("defaultValue".clearKeyWord(), s.defaultValue.getEAttribute());
	//EReference.unsettable -> EAttribute : unsettable
	if (s.unsettable.getEAttribute() != null) t.addNewAttribute("unsettable".clearKeyWord(), s.unsettable.getEAttribute());
	//EReference.derived -> EAttribute : derived
	if (s.derived.getEAttribute() != null) t.addNewAttribute("derived".clearKeyWord(), s.derived.getEAttribute());
	//EReference.containment -> EAttribute : containment
	if (s.containment.getEAttribute() != null) t.addNewAttribute("containment".clearKeyWord(), s.containment.getEAttribute());
	//EReference.container -> EAttribute : container
	if (s.container.getEAttribute() != null) t.addNewAttribute("container".clearKeyWord(), s.container.getEAttribute());
	//EReference.resolveProxies -> EAttribute : resolveProxies
	if (s.resolveProxies.getEAttribute() != null) t.addNewAttribute("resolveProxies".clearKeyWord(), s.resolveProxies.getEAttribute());
	//EReference.eAnnotations -> EReference : eAnnotations
	if (s.eAnnotations.getEReference() != null) t.addNewReference("eAnnotations".clearKeyWord(), s.eAnnotations.getEReference());
	//EReference.eType -> EReference : eType
	if (s.eType.getEReference() != null) t.addNewReference("eType".clearKeyWord(), s.eType.getEReference());
	//EReference.eGenericType -> EReference : eGenericType
	if (s.eGenericType.getEReference() != null) t.addNewReference("eGenericType".clearKeyWord(), s.eGenericType.getEReference());
	//EReference.eContainingClass -> EReference : eContainingClass
	if (s.eContainingClass.getEReference() != null) t.addNewReference("eContainingClass".clearKeyWord(), s.eContainingClass.getEReference());
	//EReference.eOpposite -> EReference : eOpposite
	if (s.eOpposite.getEReference() != null) t.addNewReference("eOpposite".clearKeyWord(), s.eOpposite.getEReference());
	//EReference.eReferenceType -> EReference : eReferenceType
	if (s.eReferenceType.getEReference() != null) t.addNewReference("eReferenceType".clearKeyWord(), s.eReferenceType.getEReference());
	//EReference.eKeys -> EReference : eKeys
	if (s.eKeys.getEReference() != null) t.addNewReference("eKeys".clearKeyWord(), s.eKeys.getEReference());
}

@lazy
rule EStructuralFeature
	transform s : DSL!EStructuralFeature //ecore.EStructuralFeature
	to t : SysMLine!ItemUsage
	extends Base{
	//EStructuralFeature.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//EStructuralFeature.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered".clearKeyWord(), s.ordered.getEAttribute());
	//EStructuralFeature.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique".clearKeyWord(), s.unique.getEAttribute());
	//EStructuralFeature.lowerBound -> EAttribute : lowerBound
	if (s.lowerBound.getEAttribute() != null) t.addNewAttribute("lowerBound".clearKeyWord(), s.lowerBound.getEAttribute());
	//EStructuralFeature.upperBound -> EAttribute : upperBound
	if (s.upperBound.getEAttribute() != null) t.addNewAttribute("upperBound".clearKeyWord(), s.upperBound.getEAttribute());
	//EStructuralFeature.many -> EAttribute : many
	if (s.many.getEAttribute() != null) t.addNewAttribute("many".clearKeyWord(), s.many.getEAttribute());
	//EStructuralFeature.required -> EAttribute : required
	if (s.required.getEAttribute() != null) t.addNewAttribute("required".clearKeyWord(), s.required.getEAttribute());
	//EStructuralFeature.changeable -> EAttribute : changeable
	if (s.changeable.getEAttribute() != null) t.addNewAttribute("changeable".clearKeyWord(), s.changeable.getEAttribute());
	//EStructuralFeature.volatile -> EAttribute : volatile
	if (s.volatile.getEAttribute() != null) t.addNewAttribute("volatile".clearKeyWord(), s.volatile.getEAttribute());
	//EStructuralFeature.transient -> EAttribute : transient
	if (s.transient.getEAttribute() != null) t.addNewAttribute("transient".clearKeyWord(), s.transient.getEAttribute());
	//EStructuralFeature.defaultValueLiteral -> EAttribute : defaultValueLiteral
	if (s.defaultValueLiteral.getEAttribute() != null) t.addNewAttribute("defaultValueLiteral".clearKeyWord(), s.defaultValueLiteral.getEAttribute());
	//EStructuralFeature.defaultValue -> EAttribute : defaultValue
	if (s.defaultValue.getEAttribute() != null) t.addNewAttribute("defaultValue".clearKeyWord(), s.defaultValue.getEAttribute());
	//EStructuralFeature.unsettable -> EAttribute : unsettable
	if (s.unsettable.getEAttribute() != null) t.addNewAttribute("unsettable".clearKeyWord(), s.unsettable.getEAttribute());
	//EStructuralFeature.derived -> EAttribute : derived
	if (s.derived.getEAttribute() != null) t.addNewAttribute("derived".clearKeyWord(), s.derived.getEAttribute());
	//EStructuralFeature.eAnnotations -> EReference : eAnnotations
	if (s.eAnnotations.getEReference() != null) t.addNewReference("eAnnotations".clearKeyWord(), s.eAnnotations.getEReference());
	//EStructuralFeature.eType -> EReference : eType
	if (s.eType.getEReference() != null) t.addNewReference("eType".clearKeyWord(), s.eType.getEReference());
	//EStructuralFeature.eGenericType -> EReference : eGenericType
	if (s.eGenericType.getEReference() != null) t.addNewReference("eGenericType".clearKeyWord(), s.eGenericType.getEReference());
	//EStructuralFeature.eContainingClass -> EReference : eContainingClass
	if (s.eContainingClass.getEReference() != null) t.addNewReference("eContainingClass".clearKeyWord(), s.eContainingClass.getEReference());
}

@lazy
rule ETypedElement
	transform s : DSL!ETypedElement //ecore.ETypedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ETypedElement.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ETypedElement.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered".clearKeyWord(), s.ordered.getEAttribute());
	//ETypedElement.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique".clearKeyWord(), s.unique.getEAttribute());
	//ETypedElement.lowerBound -> EAttribute : lowerBound
	if (s.lowerBound.getEAttribute() != null) t.addNewAttribute("lowerBound".clearKeyWord(), s.lowerBound.getEAttribute());
	//ETypedElement.upperBound -> EAttribute : upperBound
	if (s.upperBound.getEAttribute() != null) t.addNewAttribute("upperBound".clearKeyWord(), s.upperBound.getEAttribute());
	//ETypedElement.many -> EAttribute : many
	if (s.many.getEAttribute() != null) t.addNewAttribute("many".clearKeyWord(), s.many.getEAttribute());
	//ETypedElement.required -> EAttribute : required
	if (s.required.getEAttribute() != null) t.addNewAttribute("required".clearKeyWord(), s.required.getEAttribute());
	//ETypedElement.eAnnotations -> EReference : eAnnotations
	if (s.eAnnotations.getEReference() != null) t.addNewReference("eAnnotations".clearKeyWord(), s.eAnnotations.getEReference());
	//ETypedElement.eType -> EReference : eType
	if (s.eType.getEReference() != null) t.addNewReference("eType".clearKeyWord(), s.eType.getEReference());
	//ETypedElement.eGenericType -> EReference : eGenericType
	if (s.eGenericType.getEReference() != null) t.addNewReference("eGenericType".clearKeyWord(), s.eGenericType.getEReference());
}

@lazy
rule EStringToStringMapEntry
	transform s : DSL!EStringToStringMapEntry //ecore.EStringToStringMapEntry
	to t : SysMLine!ItemUsage
	extends Base{
	//EStringToStringMapEntry.key -> EAttribute : key
	if (s.key.getEAttribute() != null) t.addNewAttribute("key".clearKeyWord(), s.key.getEAttribute());
	//EStringToStringMapEntry.value -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value".clearKeyWord(), s.value.getEAttribute());
}

@lazy
rule EGenericType
	transform s : DSL!EGenericType //ecore.EGenericType
	to t : SysMLine!ItemUsage
	extends Base{
	//EGenericType.eUpperBound -> EReference : eUpperBound
	if (s.eUpperBound.getEReference() != null) t.addNewReference("eUpperBound".clearKeyWord(), s.eUpperBound.getEReference());
	//EGenericType.eTypeArguments -> EReference : eTypeArguments
	if (s.eTypeArguments.getEReference() != null) t.addNewReference("eTypeArguments".clearKeyWord(), s.eTypeArguments.getEReference());
	//EGenericType.eRawType -> EReference : eRawType
	if (s.eRawType.getEReference() != null) t.addNewReference("eRawType".clearKeyWord(), s.eRawType.getEReference());
	//EGenericType.eLowerBound -> EReference : eLowerBound
	if (s.eLowerBound.getEReference() != null) t.addNewReference("eLowerBound".clearKeyWord(), s.eLowerBound.getEReference());
	//EGenericType.eTypeParameter -> EReference : eTypeParameter
	if (s.eTypeParameter.getEReference() != null) t.addNewReference("eTypeParameter".clearKeyWord(), s.eTypeParameter.getEReference());
	//EGenericType.eClassifier -> EReference : eClassifier
	if (s.eClassifier.getEReference() != null) t.addNewReference("eClassifier".clearKeyWord(), s.eClassifier.getEReference());
}

@lazy
rule ETypeParameter
	transform s : DSL!ETypeParameter //ecore.ETypeParameter
	to t : SysMLine!ItemUsage
	extends Base{
	//ETypeParameter.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
	//ETypeParameter.eAnnotations -> EReference : eAnnotations
	if (s.eAnnotations.getEReference() != null) t.addNewReference("eAnnotations".clearKeyWord(), s.eAnnotations.getEReference());
	//ETypeParameter.eBounds -> EReference : eBounds
	if (s.eBounds.getEReference() != null) t.addNewReference("eBounds".clearKeyWord(), s.eBounds.getEReference());
}


