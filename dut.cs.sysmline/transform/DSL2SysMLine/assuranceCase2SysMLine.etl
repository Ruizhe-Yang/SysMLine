import "DSL2SysMLine-util.eol";

pre{
	var eObjectSequence = new Sequence;
	var KeyWords = baseKeyWords();
	init_assuranceCase();
	main_assuranceCase();
}

post{
	("[ETL] assuranceCase2SysMLine >> " + SysMLine!Package.all.first().declaredName + ".sysmline").println();
}

operation main_assuranceCase(){
	var rootEcore = DSL!EObject.all.first();
	var rootSysMLine = new SysMLine!Namespace;
	var rootPackage = new SysMLine!Package;
	rootPackage.declaredName = "assuranceCase_model";
	rootSysMLine.body.add(rootPackage);
	rootPackage.addNamespaceImport("assuranceCase");
	rootPackage.addNamespaceImport("base");
	rootPackage.addNamespaceImport("artifact");
	rootPackage.addNamespaceImport("terminology");
	rootPackage.addNamespaceImport("gsn");
	rootEcore.addNodeTo(rootPackage);
}

operation init_assuranceCase(){
	//assuranceCase.AssuranceCasePackage -> Instantiation
	var idAssuranceCasePackage = 0;
	for (eAssuranceCasePackage in DSL!EObject.all.select(s|s.isTypeOf(DSL!AssuranceCasePackage))){
		var eAssuranceCasePackageTuple = Tuple{"key"=eAssuranceCasePackage.type().name.asString()+"_"+(idAssuranceCasePackage++).asString(),"value"= eAssuranceCasePackage};
		eObjectSequence.add(eAssuranceCasePackageTuple);
	}
	//assuranceCase.AssuranceCasePackageBinding -> Instantiation
	var idAssuranceCasePackageBinding = 0;
	for (eAssuranceCasePackageBinding in DSL!EObject.all.select(s|s.isTypeOf(DSL!AssuranceCasePackageBinding))){
		var eAssuranceCasePackageBindingTuple = Tuple{"key"=eAssuranceCasePackageBinding.type().name.asString()+"_"+(idAssuranceCasePackageBinding++).asString(),"value"= eAssuranceCasePackageBinding};
		eObjectSequence.add(eAssuranceCasePackageBindingTuple);
	}
	//assuranceCase.AssuranceCasePackageInterface -> Instantiation
	var idAssuranceCasePackageInterface = 0;
	for (eAssuranceCasePackageInterface in DSL!EObject.all.select(s|s.isTypeOf(DSL!AssuranceCasePackageInterface))){
		var eAssuranceCasePackageInterfaceTuple = Tuple{"key"=eAssuranceCasePackageInterface.type().name.asString()+"_"+(idAssuranceCasePackageInterface++).asString(),"value"= eAssuranceCasePackageInterface};
		eObjectSequence.add(eAssuranceCasePackageInterfaceTuple);
	}
	//base.Element -> Instantiation
	var idElement = 0;
	for (eElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!Element))){
		var eElementTuple = Tuple{"key"=eElement.type().name.asString()+"_"+(idElement++).asString(),"value"= eElement};
		eObjectSequence.add(eElementTuple);
	}
	//base.LangString -> Instantiation
	var idLangString = 0;
	for (eLangString in DSL!EObject.all.select(s|s.isTypeOf(DSL!LangString))){
		var eLangStringTuple = Tuple{"key"=eLangString.type().name.asString()+"_"+(idLangString++).asString(),"value"= eLangString};
		eObjectSequence.add(eLangStringTuple);
	}
	//base.ExpressionLangString -> Instantiation
	var idExpressionLangString = 0;
	for (eExpressionLangString in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExpressionLangString))){
		var eExpressionLangStringTuple = Tuple{"key"=eExpressionLangString.type().name.asString()+"_"+(idExpressionLangString++).asString(),"value"= eExpressionLangString};
		eObjectSequence.add(eExpressionLangStringTuple);
	}
	//base.MultiLangString -> Instantiation
	var idMultiLangString = 0;
	for (eMultiLangString in DSL!EObject.all.select(s|s.isTypeOf(DSL!MultiLangString))){
		var eMultiLangStringTuple = Tuple{"key"=eMultiLangString.type().name.asString()+"_"+(idMultiLangString++).asString(),"value"= eMultiLangString};
		eObjectSequence.add(eMultiLangStringTuple);
	}
	//base.SACMElement -> Instantiation
	var idSACMElement = 0;
	for (eSACMElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!SACMElement))){
		var eSACMElementTuple = Tuple{"key"=eSACMElement.type().name.asString()+"_"+(idSACMElement++).asString(),"value"= eSACMElement};
		eObjectSequence.add(eSACMElementTuple);
	}
	//base.UtilityElement -> Instantiation
	var idUtilityElement = 0;
	for (eUtilityElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!UtilityElement))){
		var eUtilityElementTuple = Tuple{"key"=eUtilityElement.type().name.asString()+"_"+(idUtilityElement++).asString(),"value"= eUtilityElement};
		eObjectSequence.add(eUtilityElementTuple);
	}
	//base.Description -> Instantiation
	var idDescription = 0;
	for (eDescription in DSL!EObject.all.select(s|s.isTypeOf(DSL!Description))){
		var eDescriptionTuple = Tuple{"key"=eDescription.type().name.asString()+"_"+(idDescription++).asString(),"value"= eDescription};
		eObjectSequence.add(eDescriptionTuple);
	}
	//base.ImplementationConstraint -> Instantiation
	var idImplementationConstraint = 0;
	for (eImplementationConstraint in DSL!EObject.all.select(s|s.isTypeOf(DSL!ImplementationConstraint))){
		var eImplementationConstraintTuple = Tuple{"key"=eImplementationConstraint.type().name.asString()+"_"+(idImplementationConstraint++).asString(),"value"= eImplementationConstraint};
		eObjectSequence.add(eImplementationConstraintTuple);
	}
	//base.Note -> Instantiation
	var idNote = 0;
	for (eNote in DSL!EObject.all.select(s|s.isTypeOf(DSL!Note))){
		var eNoteTuple = Tuple{"key"=eNote.type().name.asString()+"_"+(idNote++).asString(),"value"= eNote};
		eObjectSequence.add(eNoteTuple);
	}
	//base.TaggedValue -> Instantiation
	var idTaggedValue = 0;
	for (eTaggedValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!TaggedValue))){
		var eTaggedValueTuple = Tuple{"key"=eTaggedValue.type().name.asString()+"_"+(idTaggedValue++).asString(),"value"= eTaggedValue};
		eObjectSequence.add(eTaggedValueTuple);
	}
	//base.ModelElement -> Instantiation
	var idModelElement = 0;
	for (eModelElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModelElement))){
		var eModelElementTuple = Tuple{"key"=eModelElement.type().name.asString()+"_"+(idModelElement++).asString(),"value"= eModelElement};
		eObjectSequence.add(eModelElementTuple);
	}
	//base.ArtifactElement -> Instantiation
	var idArtifactElement = 0;
	for (eArtifactElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArtifactElement))){
		var eArtifactElementTuple = Tuple{"key"=eArtifactElement.type().name.asString()+"_"+(idArtifactElement++).asString(),"value"= eArtifactElement};
		eObjectSequence.add(eArtifactElementTuple);
	}
	//artifact.ArtifactGroup -> Instantiation
	var idArtifactGroup = 0;
	for (eArtifactGroup in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArtifactGroup))){
		var eArtifactGroupTuple = Tuple{"key"=eArtifactGroup.type().name.asString()+"_"+(idArtifactGroup++).asString(),"value"= eArtifactGroup};
		eObjectSequence.add(eArtifactGroupTuple);
	}
	//artifact.ArtifactPackage -> Instantiation
	var idArtifactPackage = 0;
	for (eArtifactPackage in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArtifactPackage))){
		var eArtifactPackageTuple = Tuple{"key"=eArtifactPackage.type().name.asString()+"_"+(idArtifactPackage++).asString(),"value"= eArtifactPackage};
		eObjectSequence.add(eArtifactPackageTuple);
	}
	//artifact.ArtifactPackageBinding -> Instantiation
	var idArtifactPackageBinding = 0;
	for (eArtifactPackageBinding in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArtifactPackageBinding))){
		var eArtifactPackageBindingTuple = Tuple{"key"=eArtifactPackageBinding.type().name.asString()+"_"+(idArtifactPackageBinding++).asString(),"value"= eArtifactPackageBinding};
		eObjectSequence.add(eArtifactPackageBindingTuple);
	}
	//artifact.ArtifactPackageInterface -> Instantiation
	var idArtifactPackageInterface = 0;
	for (eArtifactPackageInterface in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArtifactPackageInterface))){
		var eArtifactPackageInterfaceTuple = Tuple{"key"=eArtifactPackageInterface.type().name.asString()+"_"+(idArtifactPackageInterface++).asString(),"value"= eArtifactPackageInterface};
		eObjectSequence.add(eArtifactPackageInterfaceTuple);
	}
	//artifact.ArtifactAsset -> Instantiation
	var idArtifactAsset = 0;
	for (eArtifactAsset in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArtifactAsset))){
		var eArtifactAssetTuple = Tuple{"key"=eArtifactAsset.type().name.asString()+"_"+(idArtifactAsset++).asString(),"value"= eArtifactAsset};
		eObjectSequence.add(eArtifactAssetTuple);
	}
	//artifact.Property -> Instantiation
	var idProperty = 0;
	for (eProperty in DSL!EObject.all.select(s|s.isTypeOf(DSL!Property))){
		var ePropertyTuple = Tuple{"key"=eProperty.type().name.asString()+"_"+(idProperty++).asString(),"value"= eProperty};
		eObjectSequence.add(ePropertyTuple);
	}
	//artifact.Technique -> Instantiation
	var idTechnique = 0;
	for (eTechnique in DSL!EObject.all.select(s|s.isTypeOf(DSL!Technique))){
		var eTechniqueTuple = Tuple{"key"=eTechnique.type().name.asString()+"_"+(idTechnique++).asString(),"value"= eTechnique};
		eObjectSequence.add(eTechniqueTuple);
	}
	//artifact.Participant -> Instantiation
	var idParticipant = 0;
	for (eParticipant in DSL!EObject.all.select(s|s.isTypeOf(DSL!Participant))){
		var eParticipantTuple = Tuple{"key"=eParticipant.type().name.asString()+"_"+(idParticipant++).asString(),"value"= eParticipant};
		eObjectSequence.add(eParticipantTuple);
	}
	//artifact.Activity -> Instantiation
	var idActivity = 0;
	for (eActivity in DSL!EObject.all.select(s|s.isTypeOf(DSL!Activity))){
		var eActivityTuple = Tuple{"key"=eActivity.type().name.asString()+"_"+(idActivity++).asString(),"value"= eActivity};
		eObjectSequence.add(eActivityTuple);
	}
	//artifact.Event -> Instantiation
	var idEvent = 0;
	for (eEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!Event))){
		var eEventTuple = Tuple{"key"=eEvent.type().name.asString()+"_"+(idEvent++).asString(),"value"= eEvent};
		eObjectSequence.add(eEventTuple);
	}
	//artifact.Resource -> Instantiation
	var idResource = 0;
	for (eResource in DSL!EObject.all.select(s|s.isTypeOf(DSL!Resource))){
		var eResourceTuple = Tuple{"key"=eResource.type().name.asString()+"_"+(idResource++).asString(),"value"= eResource};
		eObjectSequence.add(eResourceTuple);
	}
	//artifact.Artifact -> Instantiation
	var idArtifact = 0;
	for (eArtifact in DSL!EObject.all.select(s|s.isTypeOf(DSL!Artifact))){
		var eArtifactTuple = Tuple{"key"=eArtifact.type().name.asString()+"_"+(idArtifact++).asString(),"value"= eArtifact};
		eObjectSequence.add(eArtifactTuple);
	}
	//artifact.ArtifactAssetRelationship -> Instantiation
	var idArtifactAssetRelationship = 0;
	for (eArtifactAssetRelationship in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArtifactAssetRelationship))){
		var eArtifactAssetRelationshipTuple = Tuple{"key"=eArtifactAssetRelationship.type().name.asString()+"_"+(idArtifactAssetRelationship++).asString(),"value"= eArtifactAssetRelationship};
		eObjectSequence.add(eArtifactAssetRelationshipTuple);
	}
	//terminology.TerminologyElement -> Instantiation
	var idTerminologyElement = 0;
	for (eTerminologyElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!TerminologyElement))){
		var eTerminologyElementTuple = Tuple{"key"=eTerminologyElement.type().name.asString()+"_"+(idTerminologyElement++).asString(),"value"= eTerminologyElement};
		eObjectSequence.add(eTerminologyElementTuple);
	}
	//terminology.TerminologyGroup -> Instantiation
	var idTerminologyGroup = 0;
	for (eTerminologyGroup in DSL!EObject.all.select(s|s.isTypeOf(DSL!TerminologyGroup))){
		var eTerminologyGroupTuple = Tuple{"key"=eTerminologyGroup.type().name.asString()+"_"+(idTerminologyGroup++).asString(),"value"= eTerminologyGroup};
		eObjectSequence.add(eTerminologyGroupTuple);
	}
	//terminology.TerminologyPackage -> Instantiation
	var idTerminologyPackage = 0;
	for (eTerminologyPackage in DSL!EObject.all.select(s|s.isTypeOf(DSL!TerminologyPackage))){
		var eTerminologyPackageTuple = Tuple{"key"=eTerminologyPackage.type().name.asString()+"_"+(idTerminologyPackage++).asString(),"value"= eTerminologyPackage};
		eObjectSequence.add(eTerminologyPackageTuple);
	}
	//terminology.TerminologyPackageBinding -> Instantiation
	var idTerminologyPackageBinding = 0;
	for (eTerminologyPackageBinding in DSL!EObject.all.select(s|s.isTypeOf(DSL!TerminologyPackageBinding))){
		var eTerminologyPackageBindingTuple = Tuple{"key"=eTerminologyPackageBinding.type().name.asString()+"_"+(idTerminologyPackageBinding++).asString(),"value"= eTerminologyPackageBinding};
		eObjectSequence.add(eTerminologyPackageBindingTuple);
	}
	//terminology.TerminologyPackageInterface -> Instantiation
	var idTerminologyPackageInterface = 0;
	for (eTerminologyPackageInterface in DSL!EObject.all.select(s|s.isTypeOf(DSL!TerminologyPackageInterface))){
		var eTerminologyPackageInterfaceTuple = Tuple{"key"=eTerminologyPackageInterface.type().name.asString()+"_"+(idTerminologyPackageInterface++).asString(),"value"= eTerminologyPackageInterface};
		eObjectSequence.add(eTerminologyPackageInterfaceTuple);
	}
	//terminology.TerminologyAsset -> Instantiation
	var idTerminologyAsset = 0;
	for (eTerminologyAsset in DSL!EObject.all.select(s|s.isTypeOf(DSL!TerminologyAsset))){
		var eTerminologyAssetTuple = Tuple{"key"=eTerminologyAsset.type().name.asString()+"_"+(idTerminologyAsset++).asString(),"value"= eTerminologyAsset};
		eObjectSequence.add(eTerminologyAssetTuple);
	}
	//terminology.Category -> Instantiation
	var idCategory = 0;
	for (eCategory in DSL!EObject.all.select(s|s.isTypeOf(DSL!Category))){
		var eCategoryTuple = Tuple{"key"=eCategory.type().name.asString()+"_"+(idCategory++).asString(),"value"= eCategory};
		eObjectSequence.add(eCategoryTuple);
	}
	//terminology.ExpressionElement -> Instantiation
	var idExpressionElement = 0;
	for (eExpressionElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExpressionElement))){
		var eExpressionElementTuple = Tuple{"key"=eExpressionElement.type().name.asString()+"_"+(idExpressionElement++).asString(),"value"= eExpressionElement};
		eObjectSequence.add(eExpressionElementTuple);
	}
	//terminology.Expression -> Instantiation
	var idExpression = 0;
	for (eExpression in DSL!EObject.all.select(s|s.isTypeOf(DSL!Expression))){
		var eExpressionTuple = Tuple{"key"=eExpression.type().name.asString()+"_"+(idExpression++).asString(),"value"= eExpression};
		eObjectSequence.add(eExpressionTuple);
	}
	//terminology.Term -> Instantiation
	var idTerm = 0;
	for (eTerm in DSL!EObject.all.select(s|s.isTypeOf(DSL!Term))){
		var eTermTuple = Tuple{"key"=eTerm.type().name.asString()+"_"+(idTerm++).asString(),"value"= eTerm};
		eObjectSequence.add(eTermTuple);
	}
	//gsn.Module -> Instantiation
	var idModule = 0;
	for (eModule in DSL!EObject.all.select(s|s.isTypeOf(DSL!Module))){
		var eModuleTuple = Tuple{"key"=eModule.type().name.asString()+"_"+(idModule++).asString(),"value"= eModule};
		eObjectSequence.add(eModuleTuple);
	}
	//gsn.ContractModule -> Instantiation
	var idContractModule = 0;
	for (eContractModule in DSL!EObject.all.select(s|s.isTypeOf(DSL!ContractModule))){
		var eContractModuleTuple = Tuple{"key"=eContractModule.type().name.asString()+"_"+(idContractModule++).asString(),"value"= eContractModule};
		eObjectSequence.add(eContractModuleTuple);
	}
	//gsn.ChoiceNode -> Instantiation
	var idChoiceNode = 0;
	for (eChoiceNode in DSL!EObject.all.select(s|s.isTypeOf(DSL!ChoiceNode))){
		var eChoiceNodeTuple = Tuple{"key"=eChoiceNode.type().name.asString()+"_"+(idChoiceNode++).asString(),"value"= eChoiceNode};
		eObjectSequence.add(eChoiceNodeTuple);
	}
	//gsn.Context -> Instantiation
	var idContext = 0;
	for (eContext in DSL!EObject.all.select(s|s.isTypeOf(DSL!Context))){
		var eContextTuple = Tuple{"key"=eContext.type().name.asString()+"_"+(idContext++).asString(),"value"= eContext};
		eObjectSequence.add(eContextTuple);
	}
	//gsn.Strategy -> Instantiation
	var idStrategy = 0;
	for (eStrategy in DSL!EObject.all.select(s|s.isTypeOf(DSL!Strategy))){
		var eStrategyTuple = Tuple{"key"=eStrategy.type().name.asString()+"_"+(idStrategy++).asString(),"value"= eStrategy};
		eObjectSequence.add(eStrategyTuple);
	}
	//gsn.Goal -> Instantiation
	var idGoal = 0;
	for (eGoal in DSL!EObject.all.select(s|s.isTypeOf(DSL!Goal))){
		var eGoalTuple = Tuple{"key"=eGoal.type().name.asString()+"_"+(idGoal++).asString(),"value"= eGoal};
		eObjectSequence.add(eGoalTuple);
	}
	//gsn.Justification -> Instantiation
	var idJustification = 0;
	for (eJustification in DSL!EObject.all.select(s|s.isTypeOf(DSL!Justification))){
		var eJustificationTuple = Tuple{"key"=eJustification.type().name.asString()+"_"+(idJustification++).asString(),"value"= eJustification};
		eObjectSequence.add(eJustificationTuple);
	}
	//gsn.Assumption -> Instantiation
	var idAssumption = 0;
	for (eAssumption in DSL!EObject.all.select(s|s.isTypeOf(DSL!Assumption))){
		var eAssumptionTuple = Tuple{"key"=eAssumption.type().name.asString()+"_"+(idAssumption++).asString(),"value"= eAssumption};
		eObjectSequence.add(eAssumptionTuple);
	}
	//gsn.AwayGoal -> Instantiation
	var idAwayGoal = 0;
	for (eAwayGoal in DSL!EObject.all.select(s|s.isTypeOf(DSL!AwayGoal))){
		var eAwayGoalTuple = Tuple{"key"=eAwayGoal.type().name.asString()+"_"+(idAwayGoal++).asString(),"value"= eAwayGoal};
		eObjectSequence.add(eAwayGoalTuple);
	}
	//gsn.AwaySolution -> Instantiation
	var idAwaySolution = 0;
	for (eAwaySolution in DSL!EObject.all.select(s|s.isTypeOf(DSL!AwaySolution))){
		var eAwaySolutionTuple = Tuple{"key"=eAwaySolution.type().name.asString()+"_"+(idAwaySolution++).asString(),"value"= eAwaySolution};
		eObjectSequence.add(eAwaySolutionTuple);
	}
	//gsn.AwayContext -> Instantiation
	var idAwayContext = 0;
	for (eAwayContext in DSL!EObject.all.select(s|s.isTypeOf(DSL!AwayContext))){
		var eAwayContextTuple = Tuple{"key"=eAwayContext.type().name.asString()+"_"+(idAwayContext++).asString(),"value"= eAwayContext};
		eObjectSequence.add(eAwayContextTuple);
	}
	//gsn.ModuleReference -> Instantiation
	var idModuleReference = 0;
	for (eModuleReference in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModuleReference))){
		var eModuleReferenceTuple = Tuple{"key"=eModuleReference.type().name.asString()+"_"+(idModuleReference++).asString(),"value"= eModuleReference};
		eObjectSequence.add(eModuleReferenceTuple);
	}
	//gsn.ContractModuleReference -> Instantiation
	var idContractModuleReference = 0;
	for (eContractModuleReference in DSL!EObject.all.select(s|s.isTypeOf(DSL!ContractModuleReference))){
		var eContractModuleReferenceTuple = Tuple{"key"=eContractModuleReference.type().name.asString()+"_"+(idContractModuleReference++).asString(),"value"= eContractModuleReference};
		eObjectSequence.add(eContractModuleReferenceTuple);
	}
	//gsn.Solution -> Instantiation
	var idSolution = 0;
	for (eSolution in DSL!EObject.all.select(s|s.isTypeOf(DSL!Solution))){
		var eSolutionTuple = Tuple{"key"=eSolution.type().name.asString()+"_"+(idSolution++).asString(),"value"= eSolution};
		eObjectSequence.add(eSolutionTuple);
	}
	//gsn.SupportedBy -> Instantiation
	var idSupportedBy = 0;
	for (eSupportedBy in DSL!EObject.all.select(s|s.isTypeOf(DSL!SupportedBy))){
		var eSupportedByTuple = Tuple{"key"=eSupportedBy.type().name.asString()+"_"+(idSupportedBy++).asString(),"value"= eSupportedBy};
		eObjectSequence.add(eSupportedByTuple);
	}
	//gsn.InContextOf -> Instantiation
	var idInContextOf = 0;
	for (eInContextOf in DSL!EObject.all.select(s|s.isTypeOf(DSL!InContextOf))){
		var eInContextOfTuple = Tuple{"key"=eInContextOf.type().name.asString()+"_"+(idInContextOf++).asString(),"value"= eInContextOf};
		eObjectSequence.add(eInContextOfTuple);
	}
}

@abstract
rule Base
	transform s : DSL!EObject
	to t : SysMLine!ItemUsage{
	t.declaredName = s.getDeclaredName();
	t.featureNote.add(":");
	t.featureSpecialization.add(s.getfeatureSpecialization());
	if (s.eContainingFeature != null and s.eContainingFeature.name != null){
		t.featureNote.add(":>");
		t.featureSpecialization.add(s.eContainingFeature().name);
	}
}

// assuranceCase.ecore
@lazy
rule AssuranceCasePackage
	transform s : DSL!AssuranceCasePackage //assuranceCase.AssuranceCasePackage
	to t : SysMLine!ItemUsage
	extends Base{
	//AssuranceCasePackage.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//AssuranceCasePackage.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//AssuranceCasePackage.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//AssuranceCasePackage.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//AssuranceCasePackage.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//AssuranceCasePackage.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//AssuranceCasePackage.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//AssuranceCasePackage.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//AssuranceCasePackage.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//AssuranceCasePackage.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//AssuranceCasePackage.assuranceCasePackage -> EReference : assuranceCasePackage
	if (s.assuranceCasePackage.getEReference() != null) t.addNewReference("assuranceCasePackage", s.assuranceCasePackage.getEReference());
	//AssuranceCasePackage.interface -> EReference : interface
	if (s.interface.getEReference() != null) t.addNewReference("interface", s.interface.getEReference());
	//AssuranceCasePackage.artifactPackage -> EReference : artifactPackage
	if (s.artifactPackage.getEReference() != null) t.addNewReference("artifactPackage", s.artifactPackage.getEReference());
	//AssuranceCasePackage.argumentPackage -> EReference : argumentPackage
	if (s.argumentPackage.getEReference() != null) t.addNewReference("argumentPackage", s.argumentPackage.getEReference());
	//AssuranceCasePackage.terminologyPackage -> EReference : terminologyPackage
	if (s.terminologyPackage.getEReference() != null) t.addNewReference("terminologyPackage", s.terminologyPackage.getEReference());
}

@lazy
rule AssuranceCasePackageBinding
	transform s : DSL!AssuranceCasePackageBinding //assuranceCase.AssuranceCasePackageBinding
	to t : SysMLine!ItemUsage
	extends Base{
	//AssuranceCasePackageBinding.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//AssuranceCasePackageBinding.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//AssuranceCasePackageBinding.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//AssuranceCasePackageBinding.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//AssuranceCasePackageBinding.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//AssuranceCasePackageBinding.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//AssuranceCasePackageBinding.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//AssuranceCasePackageBinding.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//AssuranceCasePackageBinding.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//AssuranceCasePackageBinding.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//AssuranceCasePackageBinding.assuranceCasePackage -> EReference : assuranceCasePackage
	if (s.assuranceCasePackage.getEReference() != null) t.addNewReference("assuranceCasePackage", s.assuranceCasePackage.getEReference());
	//AssuranceCasePackageBinding.interface -> EReference : interface
	if (s.interface.getEReference() != null) t.addNewReference("interface", s.interface.getEReference());
	//AssuranceCasePackageBinding.artifactPackage -> EReference : artifactPackage
	if (s.artifactPackage.getEReference() != null) t.addNewReference("artifactPackage", s.artifactPackage.getEReference());
	//AssuranceCasePackageBinding.argumentPackage -> EReference : argumentPackage
	if (s.argumentPackage.getEReference() != null) t.addNewReference("argumentPackage", s.argumentPackage.getEReference());
	//AssuranceCasePackageBinding.terminologyPackage -> EReference : terminologyPackage
	if (s.terminologyPackage.getEReference() != null) t.addNewReference("terminologyPackage", s.terminologyPackage.getEReference());
	//AssuranceCasePackageBinding.participantPackage -> EReference : participantPackage
	if (s.participantPackage.getEReference() != null) t.addNewReference("participantPackage", s.participantPackage.getEReference());
}

@lazy
rule AssuranceCasePackageInterface
	transform s : DSL!AssuranceCasePackageInterface //assuranceCase.AssuranceCasePackageInterface
	to t : SysMLine!ItemUsage
	extends Base{
	//AssuranceCasePackageInterface.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//AssuranceCasePackageInterface.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//AssuranceCasePackageInterface.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//AssuranceCasePackageInterface.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//AssuranceCasePackageInterface.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//AssuranceCasePackageInterface.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//AssuranceCasePackageInterface.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//AssuranceCasePackageInterface.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//AssuranceCasePackageInterface.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//AssuranceCasePackageInterface.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//AssuranceCasePackageInterface.assuranceCasePackage -> EReference : assuranceCasePackage
	if (s.assuranceCasePackage.getEReference() != null) t.addNewReference("assuranceCasePackage", s.assuranceCasePackage.getEReference());
	//AssuranceCasePackageInterface.interface -> EReference : interface
	if (s.interface.getEReference() != null) t.addNewReference("interface", s.interface.getEReference());
	//AssuranceCasePackageInterface.artifactPackage -> EReference : artifactPackage
	if (s.artifactPackage.getEReference() != null) t.addNewReference("artifactPackage", s.artifactPackage.getEReference());
	//AssuranceCasePackageInterface.argumentPackage -> EReference : argumentPackage
	if (s.argumentPackage.getEReference() != null) t.addNewReference("argumentPackage", s.argumentPackage.getEReference());
	//AssuranceCasePackageInterface.terminologyPackage -> EReference : terminologyPackage
	if (s.terminologyPackage.getEReference() != null) t.addNewReference("terminologyPackage", s.terminologyPackage.getEReference());
	//AssuranceCasePackageInterface.implements -> EReference : implements
	if (s.implements.getEReference() != null) t.addNewReference("implements", s.implements.getEReference());
}


// base.ecore
@lazy
rule Element
	transform s : DSL!Element //base.Element
	to t : SysMLine!ItemUsage
	extends Base{
}

@lazy
rule LangString
	transform s : DSL!LangString //base.LangString
	to t : SysMLine!ItemUsage
	extends Base{
	//LangString.lang -> EAttribute : lang
	if (s.lang.getEAttribute() != null) t.addNewAttribute("lang", s.lang.getEAttribute());
	//LangString.content -> EAttribute : content
	if (s.content.getEAttribute() != null) t.addNewAttribute("content", s.content.getEAttribute());
}

@lazy
rule ExpressionLangString
	transform s : DSL!ExpressionLangString //base.ExpressionLangString
	to t : SysMLine!ItemUsage
	extends Base{
	//ExpressionLangString.lang -> EAttribute : lang
	if (s.lang.getEAttribute() != null) t.addNewAttribute("lang", s.lang.getEAttribute());
	//ExpressionLangString.content -> EAttribute : content
	if (s.content.getEAttribute() != null) t.addNewAttribute("content", s.content.getEAttribute());
	//ExpressionLangString.expression -> EReference : expression
	if (s.expression.getEReference() != null) t.addNewReference("expression", s.expression.getEReference());
}

@lazy
rule MultiLangString
	transform s : DSL!MultiLangString //base.MultiLangString
	to t : SysMLine!ItemUsage
	extends Base{
	//MultiLangString.value -> EReference : value
	if (s.value.getEReference() != null) t.addNewReference("value", s.value.getEReference());
}

@lazy
rule SACMElement
	transform s : DSL!SACMElement //base.SACMElement
	to t : SysMLine!ItemUsage
	extends Base{
	//SACMElement.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//SACMElement.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//SACMElement.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//SACMElement.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//SACMElement.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
}

@lazy
rule UtilityElement
	transform s : DSL!UtilityElement //base.UtilityElement
	to t : SysMLine!ItemUsage
	extends Base{
	//UtilityElement.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//UtilityElement.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//UtilityElement.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//UtilityElement.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//UtilityElement.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//UtilityElement.content -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
}

@lazy
rule Description
	transform s : DSL!Description //base.Description
	to t : SysMLine!ItemUsage
	extends Base{
	//Description.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Description.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Description.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Description.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Description.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Description.content -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
}

@lazy
rule ImplementationConstraint
	transform s : DSL!ImplementationConstraint //base.ImplementationConstraint
	to t : SysMLine!ItemUsage
	extends Base{
	//ImplementationConstraint.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ImplementationConstraint.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ImplementationConstraint.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ImplementationConstraint.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ImplementationConstraint.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ImplementationConstraint.content -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
}

@lazy
rule Note
	transform s : DSL!Note //base.Note
	to t : SysMLine!ItemUsage
	extends Base{
	//Note.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Note.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Note.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Note.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Note.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Note.content -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
}

@lazy
rule TaggedValue
	transform s : DSL!TaggedValue //base.TaggedValue
	to t : SysMLine!ItemUsage
	extends Base{
	//TaggedValue.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//TaggedValue.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//TaggedValue.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//TaggedValue.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//TaggedValue.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//TaggedValue.content -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//TaggedValue.key -> EReference : key
	if (s.key.getEReference() != null) t.addNewReference("key", s.key.getEReference());
}

@lazy
rule ModelElement
	transform s : DSL!ModelElement //base.ModelElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ModelElement.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ModelElement.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ModelElement.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ModelElement.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ModelElement.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ModelElement.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ModelElement.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ModelElement.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ModelElement.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ModelElement.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
}

@lazy
rule ArtifactElement
	transform s : DSL!ArtifactElement //base.ArtifactElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ArtifactElement.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ArtifactElement.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ArtifactElement.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ArtifactElement.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ArtifactElement.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ArtifactElement.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ArtifactElement.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ArtifactElement.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ArtifactElement.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ArtifactElement.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
}


// artifact.ecore
@lazy
rule ArtifactGroup
	transform s : DSL!ArtifactGroup //artifact.ArtifactGroup
	to t : SysMLine!ItemUsage
	extends Base{
	//ArtifactGroup.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ArtifactGroup.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ArtifactGroup.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ArtifactGroup.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ArtifactGroup.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ArtifactGroup.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ArtifactGroup.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ArtifactGroup.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ArtifactGroup.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ArtifactGroup.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ArtifactGroup.artifactElement -> EReference : artifactElement
	if (s.artifactElement.getEReference() != null) t.addNewReference("artifactElement", s.artifactElement.getEReference());
}

@lazy
rule ArtifactPackage
	transform s : DSL!ArtifactPackage //artifact.ArtifactPackage
	to t : SysMLine!ItemUsage
	extends Base{
	//ArtifactPackage.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ArtifactPackage.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ArtifactPackage.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ArtifactPackage.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ArtifactPackage.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ArtifactPackage.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ArtifactPackage.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ArtifactPackage.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ArtifactPackage.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ArtifactPackage.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ArtifactPackage.artifactElement -> EReference : artifactElement
	if (s.artifactElement.getEReference() != null) t.addNewReference("artifactElement", s.artifactElement.getEReference());
}

@lazy
rule ArtifactPackageBinding
	transform s : DSL!ArtifactPackageBinding //artifact.ArtifactPackageBinding
	to t : SysMLine!ItemUsage
	extends Base{
	//ArtifactPackageBinding.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ArtifactPackageBinding.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ArtifactPackageBinding.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ArtifactPackageBinding.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ArtifactPackageBinding.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ArtifactPackageBinding.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ArtifactPackageBinding.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ArtifactPackageBinding.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ArtifactPackageBinding.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ArtifactPackageBinding.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ArtifactPackageBinding.artifactElement -> EReference : artifactElement
	if (s.artifactElement.getEReference() != null) t.addNewReference("artifactElement", s.artifactElement.getEReference());
	//ArtifactPackageBinding.participantPackage -> EReference : participantPackage
	if (s.participantPackage.getEReference() != null) t.addNewReference("participantPackage", s.participantPackage.getEReference());
}

@lazy
rule ArtifactPackageInterface
	transform s : DSL!ArtifactPackageInterface //artifact.ArtifactPackageInterface
	to t : SysMLine!ItemUsage
	extends Base{
	//ArtifactPackageInterface.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ArtifactPackageInterface.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ArtifactPackageInterface.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ArtifactPackageInterface.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ArtifactPackageInterface.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ArtifactPackageInterface.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ArtifactPackageInterface.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ArtifactPackageInterface.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ArtifactPackageInterface.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ArtifactPackageInterface.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ArtifactPackageInterface.artifactElement -> EReference : artifactElement
	if (s.artifactElement.getEReference() != null) t.addNewReference("artifactElement", s.artifactElement.getEReference());
	//ArtifactPackageInterface.implements -> EReference : implements
	if (s.implements.getEReference() != null) t.addNewReference("implements", s.implements.getEReference());
}

@lazy
rule ArtifactAsset
	transform s : DSL!ArtifactAsset //artifact.ArtifactAsset
	to t : SysMLine!ItemUsage
	extends Base{
	//ArtifactAsset.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ArtifactAsset.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ArtifactAsset.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ArtifactAsset.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ArtifactAsset.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ArtifactAsset.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ArtifactAsset.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ArtifactAsset.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ArtifactAsset.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ArtifactAsset.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ArtifactAsset.artifactProperty -> EReference : artifactProperty
	if (s.artifactProperty.getEReference() != null) t.addNewReference("artifactProperty", s.artifactProperty.getEReference());
}

@lazy
rule Property
	transform s : DSL!Property //artifact.Property
	to t : SysMLine!ItemUsage
	extends Base{
	//Property.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Property.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Property.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Property.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Property.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Property.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Property.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Property.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Property.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Property.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Property.artifactProperty -> EReference : artifactProperty
	if (s.artifactProperty.getEReference() != null) t.addNewReference("artifactProperty", s.artifactProperty.getEReference());
}

@lazy
rule Technique
	transform s : DSL!Technique //artifact.Technique
	to t : SysMLine!ItemUsage
	extends Base{
	//Technique.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Technique.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Technique.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Technique.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Technique.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Technique.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Technique.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Technique.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Technique.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Technique.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Technique.artifactProperty -> EReference : artifactProperty
	if (s.artifactProperty.getEReference() != null) t.addNewReference("artifactProperty", s.artifactProperty.getEReference());
}

@lazy
rule Participant
	transform s : DSL!Participant //artifact.Participant
	to t : SysMLine!ItemUsage
	extends Base{
	//Participant.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Participant.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Participant.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Participant.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Participant.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Participant.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Participant.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Participant.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Participant.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Participant.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Participant.artifactProperty -> EReference : artifactProperty
	if (s.artifactProperty.getEReference() != null) t.addNewReference("artifactProperty", s.artifactProperty.getEReference());
}

@lazy
rule Activity
	transform s : DSL!Activity //artifact.Activity
	to t : SysMLine!ItemUsage
	extends Base{
	//Activity.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Activity.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Activity.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Activity.startTime -> EAttribute : startTime
	if (s.startTime.getEAttribute() != null) t.addNewAttribute("startTime", s.startTime.getEAttribute());
	//Activity.endTime -> EAttribute : endTime
	if (s.endTime.getEAttribute() != null) t.addNewAttribute("endTime", s.endTime.getEAttribute());
	//Activity.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Activity.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Activity.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Activity.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Activity.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Activity.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Activity.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Activity.artifactProperty -> EReference : artifactProperty
	if (s.artifactProperty.getEReference() != null) t.addNewReference("artifactProperty", s.artifactProperty.getEReference());
}

@lazy
rule Event
	transform s : DSL!Event //artifact.Event
	to t : SysMLine!ItemUsage
	extends Base{
	//Event.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Event.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Event.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Event.occurence -> EAttribute : occurence
	if (s.occurence.getEAttribute() != null) t.addNewAttribute("occurence", s.occurence.getEAttribute());
	//Event.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Event.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Event.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Event.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Event.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Event.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Event.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Event.artifactProperty -> EReference : artifactProperty
	if (s.artifactProperty.getEReference() != null) t.addNewReference("artifactProperty", s.artifactProperty.getEReference());
}

@lazy
rule Resource
	transform s : DSL!Resource //artifact.Resource
	to t : SysMLine!ItemUsage
	extends Base{
	//Resource.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Resource.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Resource.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Resource.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Resource.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Resource.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Resource.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Resource.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Resource.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Resource.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Resource.artifactProperty -> EReference : artifactProperty
	if (s.artifactProperty.getEReference() != null) t.addNewReference("artifactProperty", s.artifactProperty.getEReference());
}

@lazy
rule Artifact
	transform s : DSL!Artifact //artifact.Artifact
	to t : SysMLine!ItemUsage
	extends Base{
	//Artifact.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Artifact.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Artifact.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Artifact.version -> EAttribute : version
	if (s.version.getEAttribute() != null) t.addNewAttribute("version", s.version.getEAttribute());
	//Artifact.date -> EAttribute : date
	if (s.date.getEAttribute() != null) t.addNewAttribute("date", s.date.getEAttribute());
	//Artifact.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Artifact.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Artifact.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Artifact.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Artifact.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Artifact.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Artifact.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Artifact.artifactProperty -> EReference : artifactProperty
	if (s.artifactProperty.getEReference() != null) t.addNewReference("artifactProperty", s.artifactProperty.getEReference());
}

@lazy
rule ArtifactAssetRelationship
	transform s : DSL!ArtifactAssetRelationship //artifact.ArtifactAssetRelationship
	to t : SysMLine!ItemUsage
	extends Base{
	//ArtifactAssetRelationship.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ArtifactAssetRelationship.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ArtifactAssetRelationship.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ArtifactAssetRelationship.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ArtifactAssetRelationship.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ArtifactAssetRelationship.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ArtifactAssetRelationship.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ArtifactAssetRelationship.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ArtifactAssetRelationship.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ArtifactAssetRelationship.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ArtifactAssetRelationship.artifactProperty -> EReference : artifactProperty
	if (s.artifactProperty.getEReference() != null) t.addNewReference("artifactProperty", s.artifactProperty.getEReference());
	//ArtifactAssetRelationship.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//ArtifactAssetRelationship.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
}


// terminology.ecore
@lazy
rule TerminologyElement
	transform s : DSL!TerminologyElement //terminology.TerminologyElement
	to t : SysMLine!ItemUsage
	extends Base{
	//TerminologyElement.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//TerminologyElement.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//TerminologyElement.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//TerminologyElement.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//TerminologyElement.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//TerminologyElement.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//TerminologyElement.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//TerminologyElement.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//TerminologyElement.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//TerminologyElement.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
}

@lazy
rule TerminologyGroup
	transform s : DSL!TerminologyGroup //terminology.TerminologyGroup
	to t : SysMLine!ItemUsage
	extends Base{
	//TerminologyGroup.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//TerminologyGroup.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//TerminologyGroup.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//TerminologyGroup.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//TerminologyGroup.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//TerminologyGroup.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//TerminologyGroup.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//TerminologyGroup.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//TerminologyGroup.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//TerminologyGroup.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//TerminologyGroup.terminologyElement -> EReference : terminologyElement
	if (s.terminologyElement.getEReference() != null) t.addNewReference("terminologyElement", s.terminologyElement.getEReference());
}

@lazy
rule TerminologyPackage
	transform s : DSL!TerminologyPackage //terminology.TerminologyPackage
	to t : SysMLine!ItemUsage
	extends Base{
	//TerminologyPackage.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//TerminologyPackage.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//TerminologyPackage.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//TerminologyPackage.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//TerminologyPackage.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//TerminologyPackage.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//TerminologyPackage.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//TerminologyPackage.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//TerminologyPackage.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//TerminologyPackage.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//TerminologyPackage.terminologyElement -> EReference : terminologyElement
	if (s.terminologyElement.getEReference() != null) t.addNewReference("terminologyElement", s.terminologyElement.getEReference());
}

@lazy
rule TerminologyPackageBinding
	transform s : DSL!TerminologyPackageBinding //terminology.TerminologyPackageBinding
	to t : SysMLine!ItemUsage
	extends Base{
	//TerminologyPackageBinding.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//TerminologyPackageBinding.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//TerminologyPackageBinding.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//TerminologyPackageBinding.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//TerminologyPackageBinding.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//TerminologyPackageBinding.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//TerminologyPackageBinding.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//TerminologyPackageBinding.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//TerminologyPackageBinding.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//TerminologyPackageBinding.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//TerminologyPackageBinding.terminologyElement -> EReference : terminologyElement
	if (s.terminologyElement.getEReference() != null) t.addNewReference("terminologyElement", s.terminologyElement.getEReference());
	//TerminologyPackageBinding.participantPackage -> EReference : participantPackage
	if (s.participantPackage.getEReference() != null) t.addNewReference("participantPackage", s.participantPackage.getEReference());
}

@lazy
rule TerminologyPackageInterface
	transform s : DSL!TerminologyPackageInterface //terminology.TerminologyPackageInterface
	to t : SysMLine!ItemUsage
	extends Base{
	//TerminologyPackageInterface.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//TerminologyPackageInterface.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//TerminologyPackageInterface.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//TerminologyPackageInterface.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//TerminologyPackageInterface.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//TerminologyPackageInterface.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//TerminologyPackageInterface.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//TerminologyPackageInterface.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//TerminologyPackageInterface.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//TerminologyPackageInterface.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//TerminologyPackageInterface.terminologyElement -> EReference : terminologyElement
	if (s.terminologyElement.getEReference() != null) t.addNewReference("terminologyElement", s.terminologyElement.getEReference());
	//TerminologyPackageInterface.implements -> EReference : implements
	if (s.implements.getEReference() != null) t.addNewReference("implements", s.implements.getEReference());
}

@lazy
rule TerminologyAsset
	transform s : DSL!TerminologyAsset //terminology.TerminologyAsset
	to t : SysMLine!ItemUsage
	extends Base{
	//TerminologyAsset.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//TerminologyAsset.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//TerminologyAsset.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//TerminologyAsset.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//TerminologyAsset.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//TerminologyAsset.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//TerminologyAsset.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//TerminologyAsset.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//TerminologyAsset.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//TerminologyAsset.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
}

@lazy
rule Category
	transform s : DSL!Category //terminology.Category
	to t : SysMLine!ItemUsage
	extends Base{
	//Category.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Category.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Category.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Category.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Category.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Category.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Category.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Category.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Category.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Category.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Category.category -> EReference : category
	if (s.category.getEReference() != null) t.addNewReference("category", s.category.getEReference());
}

@lazy
rule ExpressionElement
	transform s : DSL!ExpressionElement //terminology.ExpressionElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ExpressionElement.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ExpressionElement.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ExpressionElement.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ExpressionElement.value -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value", s.value.getEAttribute());
	//ExpressionElement.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ExpressionElement.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ExpressionElement.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ExpressionElement.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ExpressionElement.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ExpressionElement.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ExpressionElement.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ExpressionElement.category -> EReference : category
	if (s.category.getEReference() != null) t.addNewReference("category", s.category.getEReference());
}

@lazy
rule Expression
	transform s : DSL!Expression //terminology.Expression
	to t : SysMLine!ItemUsage
	extends Base{
	//Expression.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Expression.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Expression.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Expression.value -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value", s.value.getEAttribute());
	//Expression.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Expression.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Expression.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Expression.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Expression.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Expression.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Expression.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Expression.category -> EReference : category
	if (s.category.getEReference() != null) t.addNewReference("category", s.category.getEReference());
	//Expression.element -> EReference : element
	if (s.element.getEReference() != null) t.addNewReference("element", s.element.getEReference());
}

@lazy
rule Term
	transform s : DSL!Term //terminology.Term
	to t : SysMLine!ItemUsage
	extends Base{
	//Term.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Term.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Term.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Term.value -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value", s.value.getEAttribute());
	//Term.externalReference -> EAttribute : externalReference
	if (s.externalReference.getEAttribute() != null) t.addNewAttribute("externalReference", s.externalReference.getEAttribute());
	//Term.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Term.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Term.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Term.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Term.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Term.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Term.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Term.category -> EReference : category
	if (s.category.getEReference() != null) t.addNewReference("category", s.category.getEReference());
	//Term.origin -> EReference : origin
	if (s.origin.getEReference() != null) t.addNewReference("origin", s.origin.getEReference());
}


// gsn.ecore
@lazy
rule Module
	transform s : DSL!Module //gsn.Module
	to t : SysMLine!ItemUsage
	extends Base{
	//Module.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Module.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Module.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Module.uninstantiated -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//Module.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Module.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Module.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Module.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Module.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Module.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Module.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Module.argumentationElement -> EReference : argumentationElement
	if (s.argumentationElement.getEReference() != null) t.addNewReference("argumentationElement", s.argumentationElement.getEReference());
}

@lazy
rule ContractModule
	transform s : DSL!ContractModule //gsn.ContractModule
	to t : SysMLine!ItemUsage
	extends Base{
	//ContractModule.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ContractModule.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ContractModule.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ContractModule.uninstantiated -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//ContractModule.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ContractModule.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ContractModule.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ContractModule.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ContractModule.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ContractModule.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ContractModule.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ContractModule.argumentationElement -> EReference : argumentationElement
	if (s.argumentationElement.getEReference() != null) t.addNewReference("argumentationElement", s.argumentationElement.getEReference());
	//ContractModule.participantPackage -> EReference : participantPackage
	if (s.participantPackage.getEReference() != null) t.addNewReference("participantPackage", s.participantPackage.getEReference());
}

@lazy
rule ChoiceNode
	transform s : DSL!ChoiceNode //gsn.ChoiceNode
	to t : SysMLine!ItemUsage
	extends Base{
	//ChoiceNode.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ChoiceNode.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ChoiceNode.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ChoiceNode.uninstantiated -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//ChoiceNode.choice -> EAttribute : choice
	if (s.choice.getEAttribute() != null) t.addNewAttribute("choice", s.choice.getEAttribute());
	//ChoiceNode.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ChoiceNode.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ChoiceNode.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ChoiceNode.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ChoiceNode.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ChoiceNode.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ChoiceNode.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ChoiceNode.content -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
}

@lazy
rule Context
	transform s : DSL!Context //gsn.Context
	to t : SysMLine!ItemUsage
	extends Base{
	//Context.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Context.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Context.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Context.uninstantiated -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//Context.isPublic -> EAttribute : isPublic
	if (s.isPublic.getEAttribute() != null) t.addNewAttribute("isPublic", s.isPublic.getEAttribute());
	//Context.refersToExternalMaterial -> EAttribute : refersToExternalMaterial
	if (s.refersToExternalMaterial.getEAttribute() != null) t.addNewAttribute("refersToExternalMaterial", s.refersToExternalMaterial.getEAttribute());
	//Context.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Context.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Context.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Context.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Context.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Context.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Context.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Context.content -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
}

@lazy
rule Strategy
	transform s : DSL!Strategy //gsn.Strategy
	to t : SysMLine!ItemUsage
	extends Base{
	//Strategy.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Strategy.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Strategy.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Strategy.uninstantiated -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//Strategy.undeveloped -> EAttribute : undeveloped
	if (s.undeveloped.getEAttribute() != null) t.addNewAttribute("undeveloped", s.undeveloped.getEAttribute());
	//Strategy.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Strategy.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Strategy.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Strategy.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Strategy.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Strategy.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Strategy.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Strategy.content -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//Strategy.structure -> EReference : structure
	if (s.structure.getEReference() != null) t.addNewReference("structure", s.structure.getEReference());
}

@lazy
rule Goal
	transform s : DSL!Goal //gsn.Goal
	to t : SysMLine!ItemUsage
	extends Base{
	//Goal.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Goal.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Goal.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Goal.uninstantiated -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//Goal.assertionDeclaration -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null) t.addNewAttribute("assertionDeclaration", s.assertionDeclaration.getEAttribute());
	//Goal.isPublic -> EAttribute : isPublic
	if (s.isPublic.getEAttribute() != null) t.addNewAttribute("isPublic", s.isPublic.getEAttribute());
	//Goal.undeveloped -> EAttribute : undeveloped
	if (s.undeveloped.getEAttribute() != null) t.addNewAttribute("undeveloped", s.undeveloped.getEAttribute());
	//Goal.toBeSupportedByContract -> EAttribute : toBeSupportedByContract
	if (s.toBeSupportedByContract.getEAttribute() != null) t.addNewAttribute("toBeSupportedByContract", s.toBeSupportedByContract.getEAttribute());
	//Goal.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Goal.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Goal.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Goal.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Goal.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Goal.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Goal.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Goal.content -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//Goal.metaClaim -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null) t.addNewReference("metaClaim", s.metaClaim.getEReference());
}

@lazy
rule Justification
	transform s : DSL!Justification //gsn.Justification
	to t : SysMLine!ItemUsage
	extends Base{
	//Justification.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Justification.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Justification.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Justification.uninstantiated -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//Justification.assertionDeclaration -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null) t.addNewAttribute("assertionDeclaration", s.assertionDeclaration.getEAttribute());
	//Justification.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Justification.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Justification.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Justification.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Justification.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Justification.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Justification.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Justification.content -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//Justification.metaClaim -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null) t.addNewReference("metaClaim", s.metaClaim.getEReference());
}

@lazy
rule Assumption
	transform s : DSL!Assumption //gsn.Assumption
	to t : SysMLine!ItemUsage
	extends Base{
	//Assumption.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Assumption.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Assumption.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Assumption.uninstantiated -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//Assumption.assertionDeclaration -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null) t.addNewAttribute("assertionDeclaration", s.assertionDeclaration.getEAttribute());
	//Assumption.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Assumption.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Assumption.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Assumption.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Assumption.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Assumption.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Assumption.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Assumption.content -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//Assumption.metaClaim -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null) t.addNewReference("metaClaim", s.metaClaim.getEReference());
}

@lazy
rule AwayGoal
	transform s : DSL!AwayGoal //gsn.AwayGoal
	to t : SysMLine!ItemUsage
	extends Base{
	//AwayGoal.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//AwayGoal.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//AwayGoal.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//AwayGoal.uninstantiated -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//AwayGoal.assertionDeclaration -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null) t.addNewAttribute("assertionDeclaration", s.assertionDeclaration.getEAttribute());
	//AwayGoal.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//AwayGoal.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//AwayGoal.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//AwayGoal.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//AwayGoal.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//AwayGoal.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//AwayGoal.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//AwayGoal.content -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//AwayGoal.metaClaim -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null) t.addNewReference("metaClaim", s.metaClaim.getEReference());
}

@lazy
rule AwaySolution
	transform s : DSL!AwaySolution //gsn.AwaySolution
	to t : SysMLine!ItemUsage
	extends Base{
	//AwaySolution.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//AwaySolution.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//AwaySolution.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//AwaySolution.uninstantiated -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//AwaySolution.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//AwaySolution.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//AwaySolution.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//AwaySolution.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//AwaySolution.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//AwaySolution.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//AwaySolution.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//AwaySolution.content -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//AwaySolution.referencedArtifactElement -> EReference : referencedArtifactElement
	if (s.referencedArtifactElement.getEReference() != null) t.addNewReference("referencedArtifactElement", s.referencedArtifactElement.getEReference());
}

@lazy
rule AwayContext
	transform s : DSL!AwayContext //gsn.AwayContext
	to t : SysMLine!ItemUsage
	extends Base{
	//AwayContext.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//AwayContext.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//AwayContext.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//AwayContext.uninstantiated -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//AwayContext.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//AwayContext.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//AwayContext.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//AwayContext.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//AwayContext.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//AwayContext.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//AwayContext.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//AwayContext.content -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
}

@lazy
rule ModuleReference
	transform s : DSL!ModuleReference //gsn.ModuleReference
	to t : SysMLine!ItemUsage
	extends Base{
	//ModuleReference.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ModuleReference.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ModuleReference.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ModuleReference.uninstantiated -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//ModuleReference.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ModuleReference.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ModuleReference.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ModuleReference.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ModuleReference.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ModuleReference.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ModuleReference.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ModuleReference.content -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//ModuleReference.referencedArtifactElement -> EReference : referencedArtifactElement
	if (s.referencedArtifactElement.getEReference() != null) t.addNewReference("referencedArtifactElement", s.referencedArtifactElement.getEReference());
	//ModuleReference.module -> EReference : module
	if (s.module.getEReference() != null) t.addNewReference("module", s.module.getEReference());
}

@lazy
rule ContractModuleReference
	transform s : DSL!ContractModuleReference //gsn.ContractModuleReference
	to t : SysMLine!ItemUsage
	extends Base{
	//ContractModuleReference.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//ContractModuleReference.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//ContractModuleReference.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ContractModuleReference.uninstantiated -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//ContractModuleReference.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//ContractModuleReference.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//ContractModuleReference.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//ContractModuleReference.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//ContractModuleReference.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//ContractModuleReference.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//ContractModuleReference.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//ContractModuleReference.content -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//ContractModuleReference.referencedArtifactElement -> EReference : referencedArtifactElement
	if (s.referencedArtifactElement.getEReference() != null) t.addNewReference("referencedArtifactElement", s.referencedArtifactElement.getEReference());
	//ContractModuleReference.module -> EReference : module
	if (s.module.getEReference() != null) t.addNewReference("module", s.module.getEReference());
}

@lazy
rule Solution
	transform s : DSL!Solution //gsn.Solution
	to t : SysMLine!ItemUsage
	extends Base{
	//Solution.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//Solution.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//Solution.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Solution.uninstantiated -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//Solution.isPublic -> EAttribute : isPublic
	if (s.isPublic.getEAttribute() != null) t.addNewAttribute("isPublic", s.isPublic.getEAttribute());
	//Solution.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//Solution.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//Solution.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//Solution.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//Solution.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//Solution.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//Solution.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//Solution.content -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//Solution.referencedArtifactElement -> EReference : referencedArtifactElement
	if (s.referencedArtifactElement.getEReference() != null) t.addNewReference("referencedArtifactElement", s.referencedArtifactElement.getEReference());
}

@lazy
rule SupportedBy
	transform s : DSL!SupportedBy //gsn.SupportedBy
	to t : SysMLine!ItemUsage
	extends Base{
	//SupportedBy.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//SupportedBy.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//SupportedBy.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//SupportedBy.uninstantiated -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//SupportedBy.assertionDeclaration -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null) t.addNewAttribute("assertionDeclaration", s.assertionDeclaration.getEAttribute());
	//SupportedBy.isCounter -> EAttribute : isCounter
	if (s.isCounter.getEAttribute() != null) t.addNewAttribute("isCounter", s.isCounter.getEAttribute());
	//SupportedBy.requies -> EAttribute : requies
	if (s.requies.getEAttribute() != null) t.addNewAttribute("requies", s.requies.getEAttribute());
	//SupportedBy.isMany -> EAttribute : isMany
	if (s.isMany.getEAttribute() != null) t.addNewAttribute("isMany", s.isMany.getEAttribute());
	//SupportedBy.isOptional -> EAttribute : isOptional
	if (s.isOptional.getEAttribute() != null) t.addNewAttribute("isOptional", s.isOptional.getEAttribute());
	//SupportedBy.isChoice -> EAttribute : isChoice
	if (s.isChoice.getEAttribute() != null) t.addNewAttribute("isChoice", s.isChoice.getEAttribute());
	//SupportedBy.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//SupportedBy.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//SupportedBy.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//SupportedBy.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//SupportedBy.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//SupportedBy.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//SupportedBy.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//SupportedBy.content -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//SupportedBy.metaClaim -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null) t.addNewReference("metaClaim", s.metaClaim.getEReference());
	//SupportedBy.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//SupportedBy.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//SupportedBy.reasoning -> EReference : reasoning
	if (s.reasoning.getEReference() != null) t.addNewReference("reasoning", s.reasoning.getEReference());
}

@lazy
rule InContextOf
	transform s : DSL!InContextOf //gsn.InContextOf
	to t : SysMLine!ItemUsage
	extends Base{
	//InContextOf.gid -> EAttribute : gid
	if (s.gid.getEAttribute() != null) t.addNewAttribute("gid", s.gid.getEAttribute());
	//InContextOf.isCitation -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null) t.addNewAttribute("isCitation", s.isCitation.getEAttribute());
	//InContextOf.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//InContextOf.uninstantiated -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null) t.addNewAttribute("uninstantiated", s.uninstantiated.getEAttribute());
	//InContextOf.assertionDeclaration -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null) t.addNewAttribute("assertionDeclaration", s.assertionDeclaration.getEAttribute());
	//InContextOf.isCounter -> EAttribute : isCounter
	if (s.isCounter.getEAttribute() != null) t.addNewAttribute("isCounter", s.isCounter.getEAttribute());
	//InContextOf.requies -> EAttribute : requies
	if (s.requies.getEAttribute() != null) t.addNewAttribute("requies", s.requies.getEAttribute());
	//InContextOf.isMany -> EAttribute : isMany
	if (s.isMany.getEAttribute() != null) t.addNewAttribute("isMany", s.isMany.getEAttribute());
	//InContextOf.isOptional -> EAttribute : isOptional
	if (s.isOptional.getEAttribute() != null) t.addNewAttribute("isOptional", s.isOptional.getEAttribute());
	//InContextOf.isChoice -> EAttribute : isChoice
	if (s.isChoice.getEAttribute() != null) t.addNewAttribute("isChoice", s.isChoice.getEAttribute());
	//InContextOf.citedElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null) t.addNewReference("citedElement", s.citedElement.getEReference());
	//InContextOf.abstractForm -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null) t.addNewReference("abstractForm", s.abstractForm.getEReference());
	//InContextOf.name -> EReference : name
	if (s.name.getEReference() != null) t.addNewReference("name", s.name.getEReference());
	//InContextOf.description -> EReference : description
	if (s.description.getEReference() != null) t.addNewReference("description", s.description.getEReference());
	//InContextOf.implementationConstraint -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null) t.addNewReference("implementationConstraint", s.implementationConstraint.getEReference());
	//InContextOf.note -> EReference : note
	if (s.note.getEReference() != null) t.addNewReference("note", s.note.getEReference());
	//InContextOf.taggedValue -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null) t.addNewReference("taggedValue", s.taggedValue.getEReference());
	//InContextOf.content -> EReference : content
	if (s.content.getEReference() != null) t.addNewReference("content", s.content.getEReference());
	//InContextOf.metaClaim -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null) t.addNewReference("metaClaim", s.metaClaim.getEReference());
	//InContextOf.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//InContextOf.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//InContextOf.reasoning -> EReference : reasoning
	if (s.reasoning.getEReference() != null) t.addNewReference("reasoning", s.reasoning.getEReference());
}


