import "DSL2SysMLine-util.eol";

pre{
	var eObjectSequence = new Sequence;
	var KeyWords = baseKeyWords();
	init_assuranceCase();
	main_assuranceCase();
}

post{
	("[ETL] assuranceCase2SysMLine >> " + SysMLine!Package.all.first().declaredName + ".sysmline").println();
}

operation main_assuranceCase(){
	var rootEcore = DSL!EObject.all.first();
	var rootSysMLine = new SysMLine!Namespace;
	var rootPackage = new SysMLine!Package;
	rootPackage.declaredName = "assuranceCase_model";
	rootSysMLine.body.add(rootPackage);
	rootPackage.addNamespaceImport("assuranceCase");
	rootPackage.addNamespaceImport("base");
	rootPackage.addNamespaceImport("artifact");
	rootPackage.addNamespaceImport("argumentation");
	rootPackage.addNamespaceImport("terminology");
	rootEcore.addNodeTo(rootPackage);
}

operation init_assuranceCase(){
	//assuranceCase.AssuranceCasePackage -> Instantiation
	var idAssuranceCasePackage = 0;
	for (eAssuranceCasePackage in DSL!EObject.all.select(s|s.isTypeOf(DSL!AssuranceCasePackage))){
		var eAssuranceCasePackageTuple = Tuple{"key"=eAssuranceCasePackage.type().name.asString()+"_"+(idAssuranceCasePackage++).asString(),"value"= eAssuranceCasePackage};
		eObjectSequence.add(eAssuranceCasePackageTuple);
	}
	//assuranceCase.AssuranceCasePackageBinding -> Instantiation
	var idAssuranceCasePackageBinding = 0;
	for (eAssuranceCasePackageBinding in DSL!EObject.all.select(s|s.isTypeOf(DSL!AssuranceCasePackageBinding))){
		var eAssuranceCasePackageBindingTuple = Tuple{"key"=eAssuranceCasePackageBinding.type().name.asString()+"_"+(idAssuranceCasePackageBinding++).asString(),"value"= eAssuranceCasePackageBinding};
		eObjectSequence.add(eAssuranceCasePackageBindingTuple);
	}
	//assuranceCase.AssuranceCasePackageInterface -> Instantiation
	var idAssuranceCasePackageInterface = 0;
	for (eAssuranceCasePackageInterface in DSL!EObject.all.select(s|s.isTypeOf(DSL!AssuranceCasePackageInterface))){
		var eAssuranceCasePackageInterfaceTuple = Tuple{"key"=eAssuranceCasePackageInterface.type().name.asString()+"_"+(idAssuranceCasePackageInterface++).asString(),"value"= eAssuranceCasePackageInterface};
		eObjectSequence.add(eAssuranceCasePackageInterfaceTuple);
	}
	//base.Element -> Instantiation
	var idElement = 0;
	for (eElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!Element))){
		var eElementTuple = Tuple{"key"=eElement.type().name.asString()+"_"+(idElement++).asString(),"value"= eElement};
		eObjectSequence.add(eElementTuple);
	}
	//base.LangString -> Instantiation
	var idLangString = 0;
	for (eLangString in DSL!EObject.all.select(s|s.isTypeOf(DSL!LangString))){
		var eLangStringTuple = Tuple{"key"=eLangString.type().name.asString()+"_"+(idLangString++).asString(),"value"= eLangString};
		eObjectSequence.add(eLangStringTuple);
	}
	//base.ExpressionLangString -> Instantiation
	var idExpressionLangString = 0;
	for (eExpressionLangString in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExpressionLangString))){
		var eExpressionLangStringTuple = Tuple{"key"=eExpressionLangString.type().name.asString()+"_"+(idExpressionLangString++).asString(),"value"= eExpressionLangString};
		eObjectSequence.add(eExpressionLangStringTuple);
	}
	//base.MultiLangString -> Instantiation
	var idMultiLangString = 0;
	for (eMultiLangString in DSL!EObject.all.select(s|s.isTypeOf(DSL!MultiLangString))){
		var eMultiLangStringTuple = Tuple{"key"=eMultiLangString.type().name.asString()+"_"+(idMultiLangString++).asString(),"value"= eMultiLangString};
		eObjectSequence.add(eMultiLangStringTuple);
	}
	//base.SACMElement -> Instantiation
	var idSACMElement = 0;
	for (eSACMElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!SACMElement))){
		var eSACMElementTuple = Tuple{"key"=eSACMElement.type().name.asString()+"_"+(idSACMElement++).asString(),"value"= eSACMElement};
		eObjectSequence.add(eSACMElementTuple);
	}
	//base.UtilityElement -> Instantiation
	var idUtilityElement = 0;
	for (eUtilityElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!UtilityElement))){
		var eUtilityElementTuple = Tuple{"key"=eUtilityElement.type().name.asString()+"_"+(idUtilityElement++).asString(),"value"= eUtilityElement};
		eObjectSequence.add(eUtilityElementTuple);
	}
	//base.Description -> Instantiation
	var idDescription = 0;
	for (eDescription in DSL!EObject.all.select(s|s.isTypeOf(DSL!Description))){
		var eDescriptionTuple = Tuple{"key"=eDescription.type().name.asString()+"_"+(idDescription++).asString(),"value"= eDescription};
		eObjectSequence.add(eDescriptionTuple);
	}
	//base.ImplementationConstraint -> Instantiation
	var idImplementationConstraint = 0;
	for (eImplementationConstraint in DSL!EObject.all.select(s|s.isTypeOf(DSL!ImplementationConstraint))){
		var eImplementationConstraintTuple = Tuple{"key"=eImplementationConstraint.type().name.asString()+"_"+(idImplementationConstraint++).asString(),"value"= eImplementationConstraint};
		eObjectSequence.add(eImplementationConstraintTuple);
	}
	//base.Note -> Instantiation
	var idNote = 0;
	for (eNote in DSL!EObject.all.select(s|s.isTypeOf(DSL!Note))){
		var eNoteTuple = Tuple{"key"=eNote.type().name.asString()+"_"+(idNote++).asString(),"value"= eNote};
		eObjectSequence.add(eNoteTuple);
	}
	//base.TaggedValue -> Instantiation
	var idTaggedValue = 0;
	for (eTaggedValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!TaggedValue))){
		var eTaggedValueTuple = Tuple{"key"=eTaggedValue.type().name.asString()+"_"+(idTaggedValue++).asString(),"value"= eTaggedValue};
		eObjectSequence.add(eTaggedValueTuple);
	}
	//base.ModelElement -> Instantiation
	var idModelElement = 0;
	for (eModelElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModelElement))){
		var eModelElementTuple = Tuple{"key"=eModelElement.type().name.asString()+"_"+(idModelElement++).asString(),"value"= eModelElement};
		eObjectSequence.add(eModelElementTuple);
	}
	//base.ArtifactElement -> Instantiation
	var idArtifactElement = 0;
	for (eArtifactElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArtifactElement))){
		var eArtifactElementTuple = Tuple{"key"=eArtifactElement.type().name.asString()+"_"+(idArtifactElement++).asString(),"value"= eArtifactElement};
		eObjectSequence.add(eArtifactElementTuple);
	}
	//artifact.ArtifactGroup -> Instantiation
	var idArtifactGroup = 0;
	for (eArtifactGroup in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArtifactGroup))){
		var eArtifactGroupTuple = Tuple{"key"=eArtifactGroup.type().name.asString()+"_"+(idArtifactGroup++).asString(),"value"= eArtifactGroup};
		eObjectSequence.add(eArtifactGroupTuple);
	}
	//artifact.ArtifactPackage -> Instantiation
	var idArtifactPackage = 0;
	for (eArtifactPackage in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArtifactPackage))){
		var eArtifactPackageTuple = Tuple{"key"=eArtifactPackage.type().name.asString()+"_"+(idArtifactPackage++).asString(),"value"= eArtifactPackage};
		eObjectSequence.add(eArtifactPackageTuple);
	}
	//artifact.ArtifactPackageBinding -> Instantiation
	var idArtifactPackageBinding = 0;
	for (eArtifactPackageBinding in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArtifactPackageBinding))){
		var eArtifactPackageBindingTuple = Tuple{"key"=eArtifactPackageBinding.type().name.asString()+"_"+(idArtifactPackageBinding++).asString(),"value"= eArtifactPackageBinding};
		eObjectSequence.add(eArtifactPackageBindingTuple);
	}
	//artifact.ArtifactPackageInterface -> Instantiation
	var idArtifactPackageInterface = 0;
	for (eArtifactPackageInterface in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArtifactPackageInterface))){
		var eArtifactPackageInterfaceTuple = Tuple{"key"=eArtifactPackageInterface.type().name.asString()+"_"+(idArtifactPackageInterface++).asString(),"value"= eArtifactPackageInterface};
		eObjectSequence.add(eArtifactPackageInterfaceTuple);
	}
	//artifact.ArtifactAsset -> Instantiation
	var idArtifactAsset = 0;
	for (eArtifactAsset in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArtifactAsset))){
		var eArtifactAssetTuple = Tuple{"key"=eArtifactAsset.type().name.asString()+"_"+(idArtifactAsset++).asString(),"value"= eArtifactAsset};
		eObjectSequence.add(eArtifactAssetTuple);
	}
	//artifact.Property -> Instantiation
	var idProperty = 0;
	for (eProperty in DSL!EObject.all.select(s|s.isTypeOf(DSL!Property))){
		var ePropertyTuple = Tuple{"key"=eProperty.type().name.asString()+"_"+(idProperty++).asString(),"value"= eProperty};
		eObjectSequence.add(ePropertyTuple);
	}
	//artifact.Technique -> Instantiation
	var idTechnique = 0;
	for (eTechnique in DSL!EObject.all.select(s|s.isTypeOf(DSL!Technique))){
		var eTechniqueTuple = Tuple{"key"=eTechnique.type().name.asString()+"_"+(idTechnique++).asString(),"value"= eTechnique};
		eObjectSequence.add(eTechniqueTuple);
	}
	//artifact.Participant -> Instantiation
	var idParticipant = 0;
	for (eParticipant in DSL!EObject.all.select(s|s.isTypeOf(DSL!Participant))){
		var eParticipantTuple = Tuple{"key"=eParticipant.type().name.asString()+"_"+(idParticipant++).asString(),"value"= eParticipant};
		eObjectSequence.add(eParticipantTuple);
	}
	//artifact.Activity -> Instantiation
	var idActivity = 0;
	for (eActivity in DSL!EObject.all.select(s|s.isTypeOf(DSL!Activity))){
		var eActivityTuple = Tuple{"key"=eActivity.type().name.asString()+"_"+(idActivity++).asString(),"value"= eActivity};
		eObjectSequence.add(eActivityTuple);
	}
	//artifact.Event -> Instantiation
	var idEvent = 0;
	for (eEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!Event))){
		var eEventTuple = Tuple{"key"=eEvent.type().name.asString()+"_"+(idEvent++).asString(),"value"= eEvent};
		eObjectSequence.add(eEventTuple);
	}
	//artifact.Resource -> Instantiation
	var idResource = 0;
	for (eResource in DSL!EObject.all.select(s|s.isTypeOf(DSL!Resource))){
		var eResourceTuple = Tuple{"key"=eResource.type().name.asString()+"_"+(idResource++).asString(),"value"= eResource};
		eObjectSequence.add(eResourceTuple);
	}
	//artifact.Artifact -> Instantiation
	var idArtifact = 0;
	for (eArtifact in DSL!EObject.all.select(s|s.isTypeOf(DSL!Artifact))){
		var eArtifactTuple = Tuple{"key"=eArtifact.type().name.asString()+"_"+(idArtifact++).asString(),"value"= eArtifact};
		eObjectSequence.add(eArtifactTuple);
	}
	//artifact.ArtifactAssetRelationship -> Instantiation
	var idArtifactAssetRelationship = 0;
	for (eArtifactAssetRelationship in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArtifactAssetRelationship))){
		var eArtifactAssetRelationshipTuple = Tuple{"key"=eArtifactAssetRelationship.type().name.asString()+"_"+(idArtifactAssetRelationship++).asString(),"value"= eArtifactAssetRelationship};
		eObjectSequence.add(eArtifactAssetRelationshipTuple);
	}
	//argumentation.ArgumentationElement -> Instantiation
	var idArgumentationElement = 0;
	for (eArgumentationElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArgumentationElement))){
		var eArgumentationElementTuple = Tuple{"key"=eArgumentationElement.type().name.asString()+"_"+(idArgumentationElement++).asString(),"value"= eArgumentationElement};
		eObjectSequence.add(eArgumentationElementTuple);
	}
	//argumentation.ArgumentGroup -> Instantiation
	var idArgumentGroup = 0;
	for (eArgumentGroup in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArgumentGroup))){
		var eArgumentGroupTuple = Tuple{"key"=eArgumentGroup.type().name.asString()+"_"+(idArgumentGroup++).asString(),"value"= eArgumentGroup};
		eObjectSequence.add(eArgumentGroupTuple);
	}
	//argumentation.ArgumentPackage -> Instantiation
	var idArgumentPackage = 0;
	for (eArgumentPackage in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArgumentPackage))){
		var eArgumentPackageTuple = Tuple{"key"=eArgumentPackage.type().name.asString()+"_"+(idArgumentPackage++).asString(),"value"= eArgumentPackage};
		eObjectSequence.add(eArgumentPackageTuple);
	}
	//argumentation.ArgumentPackageInterface -> Instantiation
	var idArgumentPackageInterface = 0;
	for (eArgumentPackageInterface in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArgumentPackageInterface))){
		var eArgumentPackageInterfaceTuple = Tuple{"key"=eArgumentPackageInterface.type().name.asString()+"_"+(idArgumentPackageInterface++).asString(),"value"= eArgumentPackageInterface};
		eObjectSequence.add(eArgumentPackageInterfaceTuple);
	}
	//argumentation.ArgumentPackageBinding -> Instantiation
	var idArgumentPackageBinding = 0;
	for (eArgumentPackageBinding in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArgumentPackageBinding))){
		var eArgumentPackageBindingTuple = Tuple{"key"=eArgumentPackageBinding.type().name.asString()+"_"+(idArgumentPackageBinding++).asString(),"value"= eArgumentPackageBinding};
		eObjectSequence.add(eArgumentPackageBindingTuple);
	}
	//argumentation.ArgumentAsset -> Instantiation
	var idArgumentAsset = 0;
	for (eArgumentAsset in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArgumentAsset))){
		var eArgumentAssetTuple = Tuple{"key"=eArgumentAsset.type().name.asString()+"_"+(idArgumentAsset++).asString(),"value"= eArgumentAsset};
		eObjectSequence.add(eArgumentAssetTuple);
	}
	//argumentation.Assertion -> Instantiation
	var idAssertion = 0;
	for (eAssertion in DSL!EObject.all.select(s|s.isTypeOf(DSL!Assertion))){
		var eAssertionTuple = Tuple{"key"=eAssertion.type().name.asString()+"_"+(idAssertion++).asString(),"value"= eAssertion};
		eObjectSequence.add(eAssertionTuple);
	}
	//argumentation.ArgumentReasoning -> Instantiation
	var idArgumentReasoning = 0;
	for (eArgumentReasoning in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArgumentReasoning))){
		var eArgumentReasoningTuple = Tuple{"key"=eArgumentReasoning.type().name.asString()+"_"+(idArgumentReasoning++).asString(),"value"= eArgumentReasoning};
		eObjectSequence.add(eArgumentReasoningTuple);
	}
	//argumentation.Claim -> Instantiation
	var idClaim = 0;
	for (eClaim in DSL!EObject.all.select(s|s.isTypeOf(DSL!Claim))){
		var eClaimTuple = Tuple{"key"=eClaim.type().name.asString()+"_"+(idClaim++).asString(),"value"= eClaim};
		eObjectSequence.add(eClaimTuple);
	}
	//argumentation.AssertedRelationship -> Instantiation
	var idAssertedRelationship = 0;
	for (eAssertedRelationship in DSL!EObject.all.select(s|s.isTypeOf(DSL!AssertedRelationship))){
		var eAssertedRelationshipTuple = Tuple{"key"=eAssertedRelationship.type().name.asString()+"_"+(idAssertedRelationship++).asString(),"value"= eAssertedRelationship};
		eObjectSequence.add(eAssertedRelationshipTuple);
	}
	//argumentation.ArtifactReference -> Instantiation
	var idArtifactReference = 0;
	for (eArtifactReference in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArtifactReference))){
		var eArtifactReferenceTuple = Tuple{"key"=eArtifactReference.type().name.asString()+"_"+(idArtifactReference++).asString(),"value"= eArtifactReference};
		eObjectSequence.add(eArtifactReferenceTuple);
	}
	//argumentation.AssertedArtifactSupport -> Instantiation
	var idAssertedArtifactSupport = 0;
	for (eAssertedArtifactSupport in DSL!EObject.all.select(s|s.isTypeOf(DSL!AssertedArtifactSupport))){
		var eAssertedArtifactSupportTuple = Tuple{"key"=eAssertedArtifactSupport.type().name.asString()+"_"+(idAssertedArtifactSupport++).asString(),"value"= eAssertedArtifactSupport};
		eObjectSequence.add(eAssertedArtifactSupportTuple);
	}
	//argumentation.AssertedInference -> Instantiation
	var idAssertedInference = 0;
	for (eAssertedInference in DSL!EObject.all.select(s|s.isTypeOf(DSL!AssertedInference))){
		var eAssertedInferenceTuple = Tuple{"key"=eAssertedInference.type().name.asString()+"_"+(idAssertedInference++).asString(),"value"= eAssertedInference};
		eObjectSequence.add(eAssertedInferenceTuple);
	}
	//argumentation.AssertedEvidence -> Instantiation
	var idAssertedEvidence = 0;
	for (eAssertedEvidence in DSL!EObject.all.select(s|s.isTypeOf(DSL!AssertedEvidence))){
		var eAssertedEvidenceTuple = Tuple{"key"=eAssertedEvidence.type().name.asString()+"_"+(idAssertedEvidence++).asString(),"value"= eAssertedEvidence};
		eObjectSequence.add(eAssertedEvidenceTuple);
	}
	//argumentation.AssertedContext -> Instantiation
	var idAssertedContext = 0;
	for (eAssertedContext in DSL!EObject.all.select(s|s.isTypeOf(DSL!AssertedContext))){
		var eAssertedContextTuple = Tuple{"key"=eAssertedContext.type().name.asString()+"_"+(idAssertedContext++).asString(),"value"= eAssertedContext};
		eObjectSequence.add(eAssertedContextTuple);
	}
	//argumentation.AssertedArtifactContext -> Instantiation
	var idAssertedArtifactContext = 0;
	for (eAssertedArtifactContext in DSL!EObject.all.select(s|s.isTypeOf(DSL!AssertedArtifactContext))){
		var eAssertedArtifactContextTuple = Tuple{"key"=eAssertedArtifactContext.type().name.asString()+"_"+(idAssertedArtifactContext++).asString(),"value"= eAssertedArtifactContext};
		eObjectSequence.add(eAssertedArtifactContextTuple);
	}
	//terminology.TerminologyElement -> Instantiation
	var idTerminologyElement = 0;
	for (eTerminologyElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!TerminologyElement))){
		var eTerminologyElementTuple = Tuple{"key"=eTerminologyElement.type().name.asString()+"_"+(idTerminologyElement++).asString(),"value"= eTerminologyElement};
		eObjectSequence.add(eTerminologyElementTuple);
	}
	//terminology.TerminologyGroup -> Instantiation
	var idTerminologyGroup = 0;
	for (eTerminologyGroup in DSL!EObject.all.select(s|s.isTypeOf(DSL!TerminologyGroup))){
		var eTerminologyGroupTuple = Tuple{"key"=eTerminologyGroup.type().name.asString()+"_"+(idTerminologyGroup++).asString(),"value"= eTerminologyGroup};
		eObjectSequence.add(eTerminologyGroupTuple);
	}
	//terminology.TerminologyPackage -> Instantiation
	var idTerminologyPackage = 0;
	for (eTerminologyPackage in DSL!EObject.all.select(s|s.isTypeOf(DSL!TerminologyPackage))){
		var eTerminologyPackageTuple = Tuple{"key"=eTerminologyPackage.type().name.asString()+"_"+(idTerminologyPackage++).asString(),"value"= eTerminologyPackage};
		eObjectSequence.add(eTerminologyPackageTuple);
	}
	//terminology.TerminologyPackageBinding -> Instantiation
	var idTerminologyPackageBinding = 0;
	for (eTerminologyPackageBinding in DSL!EObject.all.select(s|s.isTypeOf(DSL!TerminologyPackageBinding))){
		var eTerminologyPackageBindingTuple = Tuple{"key"=eTerminologyPackageBinding.type().name.asString()+"_"+(idTerminologyPackageBinding++).asString(),"value"= eTerminologyPackageBinding};
		eObjectSequence.add(eTerminologyPackageBindingTuple);
	}
	//terminology.TerminologyPackageInterface -> Instantiation
	var idTerminologyPackageInterface = 0;
	for (eTerminologyPackageInterface in DSL!EObject.all.select(s|s.isTypeOf(DSL!TerminologyPackageInterface))){
		var eTerminologyPackageInterfaceTuple = Tuple{"key"=eTerminologyPackageInterface.type().name.asString()+"_"+(idTerminologyPackageInterface++).asString(),"value"= eTerminologyPackageInterface};
		eObjectSequence.add(eTerminologyPackageInterfaceTuple);
	}
	//terminology.TerminologyAsset -> Instantiation
	var idTerminologyAsset = 0;
	for (eTerminologyAsset in DSL!EObject.all.select(s|s.isTypeOf(DSL!TerminologyAsset))){
		var eTerminologyAssetTuple = Tuple{"key"=eTerminologyAsset.type().name.asString()+"_"+(idTerminologyAsset++).asString(),"value"= eTerminologyAsset};
		eObjectSequence.add(eTerminologyAssetTuple);
	}
	//terminology.Category -> Instantiation
	var idCategory = 0;
	for (eCategory in DSL!EObject.all.select(s|s.isTypeOf(DSL!Category))){
		var eCategoryTuple = Tuple{"key"=eCategory.type().name.asString()+"_"+(idCategory++).asString(),"value"= eCategory};
		eObjectSequence.add(eCategoryTuple);
	}
	//terminology.ExpressionElement -> Instantiation
	var idExpressionElement = 0;
	for (eExpressionElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExpressionElement))){
		var eExpressionElementTuple = Tuple{"key"=eExpressionElement.type().name.asString()+"_"+(idExpressionElement++).asString(),"value"= eExpressionElement};
		eObjectSequence.add(eExpressionElementTuple);
	}
	//terminology.Expression -> Instantiation
	var idExpression = 0;
	for (eExpression in DSL!EObject.all.select(s|s.isTypeOf(DSL!Expression))){
		var eExpressionTuple = Tuple{"key"=eExpression.type().name.asString()+"_"+(idExpression++).asString(),"value"= eExpression};
		eObjectSequence.add(eExpressionTuple);
	}
	//terminology.Term -> Instantiation
	var idTerm = 0;
	for (eTerm in DSL!EObject.all.select(s|s.isTypeOf(DSL!Term))){
		var eTermTuple = Tuple{"key"=eTerm.type().name.asString()+"_"+(idTerm++).asString(),"value"= eTerm};
		eObjectSequence.add(eTermTuple);
	}
}

@abstract
rule Base
	transform s : DSL!EObject
	to t : SysMLine!ItemUsage{
	t.declaredName = s.getDeclaredName();
	t.featureNote.add(":");
	t.featureSpecialization.add(s.getfeatureSpecialization());
	if (s.eContainingFeature != null and s.eContainingFeature.name != null){
		t.featureNote.add(":>");
		t.featureSpecialization.add(s.eContainingFeature().name);
	}
}

// assuranceCase.ecore
@lazy
rule AssuranceCasePackage
	transform s : DSL!AssuranceCasePackage
	to t : SysMLine!ItemUsage
	extends Base{
	//AssuranceCasePackage.AssuranceCasePackage -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//AssuranceCasePackage.AssuranceCasePackage -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//AssuranceCasePackage.AssuranceCasePackage -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//AssuranceCasePackage.AssuranceCasePackage -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//AssuranceCasePackage.AssuranceCasePackage -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//AssuranceCasePackage.AssuranceCasePackage -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//AssuranceCasePackage.AssuranceCasePackage -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//AssuranceCasePackage.AssuranceCasePackage -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//AssuranceCasePackage.AssuranceCasePackage -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//AssuranceCasePackage.AssuranceCasePackage -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//AssuranceCasePackage.AssuranceCasePackage -> EReference : assuranceCasePackage
	if (s.assuranceCasePackage.getEReference() != null){
		var assuranceCasePackage = new SysMLine!ItemUsage;
		assuranceCasePackage.isReference = true;
		assuranceCasePackage.featureNote.add(":>");
		assuranceCasePackage.featureSpecialization.add("assuranceCasePackage");
		assuranceCasePackage.valuePart = s.assuranceCasePackage.getEReference();
		t.body.add(assuranceCasePackage);
	}
	//AssuranceCasePackage.AssuranceCasePackage -> EReference : interface
	if (s.interface.getEReference() != null){
		var interface = new SysMLine!ItemUsage;
		interface.isReference = true;
		interface.featureNote.add(":>");
		interface.featureSpecialization.add("interface");
		interface.valuePart = s.interface.getEReference();
		t.body.add(interface);
	}
	//AssuranceCasePackage.AssuranceCasePackage -> EReference : artifactPackage
	if (s.artifactPackage.getEReference() != null){
		var artifactPackage = new SysMLine!ItemUsage;
		artifactPackage.isReference = true;
		artifactPackage.featureNote.add(":>");
		artifactPackage.featureSpecialization.add("artifactPackage");
		artifactPackage.valuePart = s.artifactPackage.getEReference();
		t.body.add(artifactPackage);
	}
	//AssuranceCasePackage.AssuranceCasePackage -> EReference : argumentPackage
	if (s.argumentPackage.getEReference() != null){
		var argumentPackage = new SysMLine!ItemUsage;
		argumentPackage.isReference = true;
		argumentPackage.featureNote.add(":>");
		argumentPackage.featureSpecialization.add("argumentPackage");
		argumentPackage.valuePart = s.argumentPackage.getEReference();
		t.body.add(argumentPackage);
	}
	//AssuranceCasePackage.AssuranceCasePackage -> EReference : terminologyPackage
	if (s.terminologyPackage.getEReference() != null){
		var terminologyPackage = new SysMLine!ItemUsage;
		terminologyPackage.isReference = true;
		terminologyPackage.featureNote.add(":>");
		terminologyPackage.featureSpecialization.add("terminologyPackage");
		terminologyPackage.valuePart = s.terminologyPackage.getEReference();
		t.body.add(terminologyPackage);
	}
}

@lazy
rule AssuranceCasePackageBinding
	transform s : DSL!AssuranceCasePackageBinding
	to t : SysMLine!ItemUsage
	extends Base{
	//AssuranceCasePackageBinding.AssuranceCasePackageBinding -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//AssuranceCasePackageBinding.AssuranceCasePackageBinding -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//AssuranceCasePackageBinding.AssuranceCasePackageBinding -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//AssuranceCasePackageBinding.AssuranceCasePackageBinding -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//AssuranceCasePackageBinding.AssuranceCasePackageBinding -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//AssuranceCasePackageBinding.AssuranceCasePackageBinding -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//AssuranceCasePackageBinding.AssuranceCasePackageBinding -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//AssuranceCasePackageBinding.AssuranceCasePackageBinding -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//AssuranceCasePackageBinding.AssuranceCasePackageBinding -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//AssuranceCasePackageBinding.AssuranceCasePackageBinding -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//AssuranceCasePackageBinding.AssuranceCasePackageBinding -> EReference : assuranceCasePackage
	if (s.assuranceCasePackage.getEReference() != null){
		var assuranceCasePackage = new SysMLine!ItemUsage;
		assuranceCasePackage.isReference = true;
		assuranceCasePackage.featureNote.add(":>");
		assuranceCasePackage.featureSpecialization.add("assuranceCasePackage");
		assuranceCasePackage.valuePart = s.assuranceCasePackage.getEReference();
		t.body.add(assuranceCasePackage);
	}
	//AssuranceCasePackageBinding.AssuranceCasePackageBinding -> EReference : interface
	if (s.interface.getEReference() != null){
		var interface = new SysMLine!ItemUsage;
		interface.isReference = true;
		interface.featureNote.add(":>");
		interface.featureSpecialization.add("interface");
		interface.valuePart = s.interface.getEReference();
		t.body.add(interface);
	}
	//AssuranceCasePackageBinding.AssuranceCasePackageBinding -> EReference : artifactPackage
	if (s.artifactPackage.getEReference() != null){
		var artifactPackage = new SysMLine!ItemUsage;
		artifactPackage.isReference = true;
		artifactPackage.featureNote.add(":>");
		artifactPackage.featureSpecialization.add("artifactPackage");
		artifactPackage.valuePart = s.artifactPackage.getEReference();
		t.body.add(artifactPackage);
	}
	//AssuranceCasePackageBinding.AssuranceCasePackageBinding -> EReference : argumentPackage
	if (s.argumentPackage.getEReference() != null){
		var argumentPackage = new SysMLine!ItemUsage;
		argumentPackage.isReference = true;
		argumentPackage.featureNote.add(":>");
		argumentPackage.featureSpecialization.add("argumentPackage");
		argumentPackage.valuePart = s.argumentPackage.getEReference();
		t.body.add(argumentPackage);
	}
	//AssuranceCasePackageBinding.AssuranceCasePackageBinding -> EReference : terminologyPackage
	if (s.terminologyPackage.getEReference() != null){
		var terminologyPackage = new SysMLine!ItemUsage;
		terminologyPackage.isReference = true;
		terminologyPackage.featureNote.add(":>");
		terminologyPackage.featureSpecialization.add("terminologyPackage");
		terminologyPackage.valuePart = s.terminologyPackage.getEReference();
		t.body.add(terminologyPackage);
	}
	//AssuranceCasePackageBinding.AssuranceCasePackageBinding -> EReference : participantPackage
	if (s.participantPackage.getEReference() != null){
		var participantPackage = new SysMLine!ItemUsage;
		participantPackage.isReference = true;
		participantPackage.featureNote.add(":>");
		participantPackage.featureSpecialization.add("participantPackage");
		participantPackage.valuePart = s.participantPackage.getEReference();
		t.body.add(participantPackage);
	}
}

@lazy
rule AssuranceCasePackageInterface
	transform s : DSL!AssuranceCasePackageInterface
	to t : SysMLine!ItemUsage
	extends Base{
	//AssuranceCasePackageInterface.AssuranceCasePackageInterface -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//AssuranceCasePackageInterface.AssuranceCasePackageInterface -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//AssuranceCasePackageInterface.AssuranceCasePackageInterface -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//AssuranceCasePackageInterface.AssuranceCasePackageInterface -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//AssuranceCasePackageInterface.AssuranceCasePackageInterface -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//AssuranceCasePackageInterface.AssuranceCasePackageInterface -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//AssuranceCasePackageInterface.AssuranceCasePackageInterface -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//AssuranceCasePackageInterface.AssuranceCasePackageInterface -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//AssuranceCasePackageInterface.AssuranceCasePackageInterface -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//AssuranceCasePackageInterface.AssuranceCasePackageInterface -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//AssuranceCasePackageInterface.AssuranceCasePackageInterface -> EReference : assuranceCasePackage
	if (s.assuranceCasePackage.getEReference() != null){
		var assuranceCasePackage = new SysMLine!ItemUsage;
		assuranceCasePackage.isReference = true;
		assuranceCasePackage.featureNote.add(":>");
		assuranceCasePackage.featureSpecialization.add("assuranceCasePackage");
		assuranceCasePackage.valuePart = s.assuranceCasePackage.getEReference();
		t.body.add(assuranceCasePackage);
	}
	//AssuranceCasePackageInterface.AssuranceCasePackageInterface -> EReference : interface
	if (s.interface.getEReference() != null){
		var interface = new SysMLine!ItemUsage;
		interface.isReference = true;
		interface.featureNote.add(":>");
		interface.featureSpecialization.add("interface");
		interface.valuePart = s.interface.getEReference();
		t.body.add(interface);
	}
	//AssuranceCasePackageInterface.AssuranceCasePackageInterface -> EReference : artifactPackage
	if (s.artifactPackage.getEReference() != null){
		var artifactPackage = new SysMLine!ItemUsage;
		artifactPackage.isReference = true;
		artifactPackage.featureNote.add(":>");
		artifactPackage.featureSpecialization.add("artifactPackage");
		artifactPackage.valuePart = s.artifactPackage.getEReference();
		t.body.add(artifactPackage);
	}
	//AssuranceCasePackageInterface.AssuranceCasePackageInterface -> EReference : argumentPackage
	if (s.argumentPackage.getEReference() != null){
		var argumentPackage = new SysMLine!ItemUsage;
		argumentPackage.isReference = true;
		argumentPackage.featureNote.add(":>");
		argumentPackage.featureSpecialization.add("argumentPackage");
		argumentPackage.valuePart = s.argumentPackage.getEReference();
		t.body.add(argumentPackage);
	}
	//AssuranceCasePackageInterface.AssuranceCasePackageInterface -> EReference : terminologyPackage
	if (s.terminologyPackage.getEReference() != null){
		var terminologyPackage = new SysMLine!ItemUsage;
		terminologyPackage.isReference = true;
		terminologyPackage.featureNote.add(":>");
		terminologyPackage.featureSpecialization.add("terminologyPackage");
		terminologyPackage.valuePart = s.terminologyPackage.getEReference();
		t.body.add(terminologyPackage);
	}
	//AssuranceCasePackageInterface.AssuranceCasePackageInterface -> EReference : implements
	if (s.implements.getEReference() != null){
		var implements = new SysMLine!ItemUsage;
		implements.isReference = true;
		implements.featureNote.add(":>");
		implements.featureSpecialization.add("implements");
		implements.valuePart = s.implements.getEReference();
		t.body.add(implements);
	}
}


// base.ecore
@lazy
rule Element
	transform s : DSL!Element
	to t : SysMLine!ItemUsage
	extends Base{
}

@lazy
rule LangString
	transform s : DSL!LangString
	to t : SysMLine!ItemUsage
	extends Base{
	//LangString.LangString -> EAttribute : lang
	if (s.lang.getEAttribute() != null){
		var lang = new SysMLine!AttributeUsage;
		lang.featureNote.add(":>>");
		lang.featureSpecialization.add("lang");
		lang.valuePart = s.lang.getEAttribute();
		t.body.add(lang);
	}
	//LangString.LangString -> EAttribute : content
	if (s.content.getEAttribute() != null){
		var content = new SysMLine!AttributeUsage;
		content.featureNote.add(":>>");
		content.featureSpecialization.add("content");
		content.valuePart = s.content.getEAttribute();
		t.body.add(content);
	}
}

@lazy
rule ExpressionLangString
	transform s : DSL!ExpressionLangString
	to t : SysMLine!ItemUsage
	extends Base{
	//ExpressionLangString.ExpressionLangString -> EAttribute : lang
	if (s.lang.getEAttribute() != null){
		var lang = new SysMLine!AttributeUsage;
		lang.featureNote.add(":>>");
		lang.featureSpecialization.add("lang");
		lang.valuePart = s.lang.getEAttribute();
		t.body.add(lang);
	}
	//ExpressionLangString.ExpressionLangString -> EAttribute : content
	if (s.content.getEAttribute() != null){
		var content = new SysMLine!AttributeUsage;
		content.featureNote.add(":>>");
		content.featureSpecialization.add("content");
		content.valuePart = s.content.getEAttribute();
		t.body.add(content);
	}
	//ExpressionLangString.ExpressionLangString -> EReference : expression
	if (s.expression.getEReference() != null){
		var expression = new SysMLine!ItemUsage;
		expression.isReference = true;
		expression.featureNote.add(":>");
		expression.featureSpecialization.add("expression");
		expression.valuePart = s.expression.getEReference();
		t.body.add(expression);
	}
}

@lazy
rule MultiLangString
	transform s : DSL!MultiLangString
	to t : SysMLine!ItemUsage
	extends Base{
	//MultiLangString.MultiLangString -> EReference : value
	if (s.value.getEReference() != null){
		var value = new SysMLine!ItemUsage;
		value.isReference = true;
		value.featureNote.add(":>");
		value.featureSpecialization.add("value");
		value.valuePart = s.value.getEReference();
		t.body.add(value);
	}
}

@lazy
rule SACMElement
	transform s : DSL!SACMElement
	to t : SysMLine!ItemUsage
	extends Base{
	//SACMElement.SACMElement -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//SACMElement.SACMElement -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//SACMElement.SACMElement -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//SACMElement.SACMElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//SACMElement.SACMElement -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
}

@lazy
rule UtilityElement
	transform s : DSL!UtilityElement
	to t : SysMLine!ItemUsage
	extends Base{
	//UtilityElement.UtilityElement -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//UtilityElement.UtilityElement -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//UtilityElement.UtilityElement -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//UtilityElement.UtilityElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//UtilityElement.UtilityElement -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//UtilityElement.UtilityElement -> EReference : content
	if (s.content.getEReference() != null){
		var content = new SysMLine!ItemUsage;
		content.isReference = true;
		content.featureNote.add(":>");
		content.featureSpecialization.add("content");
		content.valuePart = s.content.getEReference();
		t.body.add(content);
	}
}

@lazy
rule Description
	transform s : DSL!Description
	to t : SysMLine!ItemUsage
	extends Base{
	//Description.Description -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//Description.Description -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//Description.Description -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//Description.Description -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//Description.Description -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//Description.Description -> EReference : content
	if (s.content.getEReference() != null){
		var content = new SysMLine!ItemUsage;
		content.isReference = true;
		content.featureNote.add(":>");
		content.featureSpecialization.add("content");
		content.valuePart = s.content.getEReference();
		t.body.add(content);
	}
}

@lazy
rule ImplementationConstraint
	transform s : DSL!ImplementationConstraint
	to t : SysMLine!ItemUsage
	extends Base{
	//ImplementationConstraint.ImplementationConstraint -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//ImplementationConstraint.ImplementationConstraint -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//ImplementationConstraint.ImplementationConstraint -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//ImplementationConstraint.ImplementationConstraint -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//ImplementationConstraint.ImplementationConstraint -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//ImplementationConstraint.ImplementationConstraint -> EReference : content
	if (s.content.getEReference() != null){
		var content = new SysMLine!ItemUsage;
		content.isReference = true;
		content.featureNote.add(":>");
		content.featureSpecialization.add("content");
		content.valuePart = s.content.getEReference();
		t.body.add(content);
	}
}

@lazy
rule Note
	transform s : DSL!Note
	to t : SysMLine!ItemUsage
	extends Base{
	//Note.Note -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//Note.Note -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//Note.Note -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//Note.Note -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//Note.Note -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//Note.Note -> EReference : content
	if (s.content.getEReference() != null){
		var content = new SysMLine!ItemUsage;
		content.isReference = true;
		content.featureNote.add(":>");
		content.featureSpecialization.add("content");
		content.valuePart = s.content.getEReference();
		t.body.add(content);
	}
}

@lazy
rule TaggedValue
	transform s : DSL!TaggedValue
	to t : SysMLine!ItemUsage
	extends Base{
	//TaggedValue.TaggedValue -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//TaggedValue.TaggedValue -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//TaggedValue.TaggedValue -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//TaggedValue.TaggedValue -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//TaggedValue.TaggedValue -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//TaggedValue.TaggedValue -> EReference : content
	if (s.content.getEReference() != null){
		var content = new SysMLine!ItemUsage;
		content.isReference = true;
		content.featureNote.add(":>");
		content.featureSpecialization.add("content");
		content.valuePart = s.content.getEReference();
		t.body.add(content);
	}
	//TaggedValue.TaggedValue -> EReference : key
	if (s.key.getEReference() != null){
		var key = new SysMLine!ItemUsage;
		key.isReference = true;
		key.featureNote.add(":>");
		key.featureSpecialization.add("key");
		key.valuePart = s.key.getEReference();
		t.body.add(key);
	}
}

@lazy
rule ModelElement
	transform s : DSL!ModelElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ModelElement.ModelElement -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//ModelElement.ModelElement -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//ModelElement.ModelElement -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//ModelElement.ModelElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//ModelElement.ModelElement -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//ModelElement.ModelElement -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//ModelElement.ModelElement -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//ModelElement.ModelElement -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//ModelElement.ModelElement -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//ModelElement.ModelElement -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
}

@lazy
rule ArtifactElement
	transform s : DSL!ArtifactElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ArtifactElement.ArtifactElement -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//ArtifactElement.ArtifactElement -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//ArtifactElement.ArtifactElement -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//ArtifactElement.ArtifactElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//ArtifactElement.ArtifactElement -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//ArtifactElement.ArtifactElement -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//ArtifactElement.ArtifactElement -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//ArtifactElement.ArtifactElement -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//ArtifactElement.ArtifactElement -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//ArtifactElement.ArtifactElement -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
}


// artifact.ecore
@lazy
rule ArtifactGroup
	transform s : DSL!ArtifactGroup
	to t : SysMLine!ItemUsage
	extends Base{
	//ArtifactGroup.ArtifactGroup -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//ArtifactGroup.ArtifactGroup -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//ArtifactGroup.ArtifactGroup -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//ArtifactGroup.ArtifactGroup -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//ArtifactGroup.ArtifactGroup -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//ArtifactGroup.ArtifactGroup -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//ArtifactGroup.ArtifactGroup -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//ArtifactGroup.ArtifactGroup -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//ArtifactGroup.ArtifactGroup -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//ArtifactGroup.ArtifactGroup -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//ArtifactGroup.ArtifactGroup -> EReference : artifactElement
	if (s.artifactElement.getEReference() != null){
		var artifactElement = new SysMLine!ItemUsage;
		artifactElement.isReference = true;
		artifactElement.featureNote.add(":>");
		artifactElement.featureSpecialization.add("artifactElement");
		artifactElement.valuePart = s.artifactElement.getEReference();
		t.body.add(artifactElement);
	}
}

@lazy
rule ArtifactPackage
	transform s : DSL!ArtifactPackage
	to t : SysMLine!ItemUsage
	extends Base{
	//ArtifactPackage.ArtifactPackage -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//ArtifactPackage.ArtifactPackage -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//ArtifactPackage.ArtifactPackage -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//ArtifactPackage.ArtifactPackage -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//ArtifactPackage.ArtifactPackage -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//ArtifactPackage.ArtifactPackage -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//ArtifactPackage.ArtifactPackage -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//ArtifactPackage.ArtifactPackage -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//ArtifactPackage.ArtifactPackage -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//ArtifactPackage.ArtifactPackage -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//ArtifactPackage.ArtifactPackage -> EReference : artifactElement
	if (s.artifactElement.getEReference() != null){
		var artifactElement = new SysMLine!ItemUsage;
		artifactElement.isReference = true;
		artifactElement.featureNote.add(":>");
		artifactElement.featureSpecialization.add("artifactElement");
		artifactElement.valuePart = s.artifactElement.getEReference();
		t.body.add(artifactElement);
	}
}

@lazy
rule ArtifactPackageBinding
	transform s : DSL!ArtifactPackageBinding
	to t : SysMLine!ItemUsage
	extends Base{
	//ArtifactPackageBinding.ArtifactPackageBinding -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//ArtifactPackageBinding.ArtifactPackageBinding -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//ArtifactPackageBinding.ArtifactPackageBinding -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//ArtifactPackageBinding.ArtifactPackageBinding -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//ArtifactPackageBinding.ArtifactPackageBinding -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//ArtifactPackageBinding.ArtifactPackageBinding -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//ArtifactPackageBinding.ArtifactPackageBinding -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//ArtifactPackageBinding.ArtifactPackageBinding -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//ArtifactPackageBinding.ArtifactPackageBinding -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//ArtifactPackageBinding.ArtifactPackageBinding -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//ArtifactPackageBinding.ArtifactPackageBinding -> EReference : artifactElement
	if (s.artifactElement.getEReference() != null){
		var artifactElement = new SysMLine!ItemUsage;
		artifactElement.isReference = true;
		artifactElement.featureNote.add(":>");
		artifactElement.featureSpecialization.add("artifactElement");
		artifactElement.valuePart = s.artifactElement.getEReference();
		t.body.add(artifactElement);
	}
	//ArtifactPackageBinding.ArtifactPackageBinding -> EReference : participantPackage
	if (s.participantPackage.getEReference() != null){
		var participantPackage = new SysMLine!ItemUsage;
		participantPackage.isReference = true;
		participantPackage.featureNote.add(":>");
		participantPackage.featureSpecialization.add("participantPackage");
		participantPackage.valuePart = s.participantPackage.getEReference();
		t.body.add(participantPackage);
	}
}

@lazy
rule ArtifactPackageInterface
	transform s : DSL!ArtifactPackageInterface
	to t : SysMLine!ItemUsage
	extends Base{
	//ArtifactPackageInterface.ArtifactPackageInterface -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//ArtifactPackageInterface.ArtifactPackageInterface -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//ArtifactPackageInterface.ArtifactPackageInterface -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//ArtifactPackageInterface.ArtifactPackageInterface -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//ArtifactPackageInterface.ArtifactPackageInterface -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//ArtifactPackageInterface.ArtifactPackageInterface -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//ArtifactPackageInterface.ArtifactPackageInterface -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//ArtifactPackageInterface.ArtifactPackageInterface -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//ArtifactPackageInterface.ArtifactPackageInterface -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//ArtifactPackageInterface.ArtifactPackageInterface -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//ArtifactPackageInterface.ArtifactPackageInterface -> EReference : artifactElement
	if (s.artifactElement.getEReference() != null){
		var artifactElement = new SysMLine!ItemUsage;
		artifactElement.isReference = true;
		artifactElement.featureNote.add(":>");
		artifactElement.featureSpecialization.add("artifactElement");
		artifactElement.valuePart = s.artifactElement.getEReference();
		t.body.add(artifactElement);
	}
	//ArtifactPackageInterface.ArtifactPackageInterface -> EReference : implements
	if (s.implements.getEReference() != null){
		var implements = new SysMLine!ItemUsage;
		implements.isReference = true;
		implements.featureNote.add(":>");
		implements.featureSpecialization.add("implements");
		implements.valuePart = s.implements.getEReference();
		t.body.add(implements);
	}
}

@lazy
rule ArtifactAsset
	transform s : DSL!ArtifactAsset
	to t : SysMLine!ItemUsage
	extends Base{
	//ArtifactAsset.ArtifactAsset -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//ArtifactAsset.ArtifactAsset -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//ArtifactAsset.ArtifactAsset -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//ArtifactAsset.ArtifactAsset -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//ArtifactAsset.ArtifactAsset -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//ArtifactAsset.ArtifactAsset -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//ArtifactAsset.ArtifactAsset -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//ArtifactAsset.ArtifactAsset -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//ArtifactAsset.ArtifactAsset -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//ArtifactAsset.ArtifactAsset -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//ArtifactAsset.ArtifactAsset -> EReference : artifactProperty
	if (s.artifactProperty.getEReference() != null){
		var artifactProperty = new SysMLine!ItemUsage;
		artifactProperty.isReference = true;
		artifactProperty.featureNote.add(":>");
		artifactProperty.featureSpecialization.add("artifactProperty");
		artifactProperty.valuePart = s.artifactProperty.getEReference();
		t.body.add(artifactProperty);
	}
}

@lazy
rule Property
	transform s : DSL!Property
	to t : SysMLine!ItemUsage
	extends Base{
	//Property.Property -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//Property.Property -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//Property.Property -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//Property.Property -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//Property.Property -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//Property.Property -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//Property.Property -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//Property.Property -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//Property.Property -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//Property.Property -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//Property.Property -> EReference : artifactProperty
	if (s.artifactProperty.getEReference() != null){
		var artifactProperty = new SysMLine!ItemUsage;
		artifactProperty.isReference = true;
		artifactProperty.featureNote.add(":>");
		artifactProperty.featureSpecialization.add("artifactProperty");
		artifactProperty.valuePart = s.artifactProperty.getEReference();
		t.body.add(artifactProperty);
	}
}

@lazy
rule Technique
	transform s : DSL!Technique
	to t : SysMLine!ItemUsage
	extends Base{
	//Technique.Technique -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//Technique.Technique -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//Technique.Technique -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//Technique.Technique -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//Technique.Technique -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//Technique.Technique -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//Technique.Technique -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//Technique.Technique -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//Technique.Technique -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//Technique.Technique -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//Technique.Technique -> EReference : artifactProperty
	if (s.artifactProperty.getEReference() != null){
		var artifactProperty = new SysMLine!ItemUsage;
		artifactProperty.isReference = true;
		artifactProperty.featureNote.add(":>");
		artifactProperty.featureSpecialization.add("artifactProperty");
		artifactProperty.valuePart = s.artifactProperty.getEReference();
		t.body.add(artifactProperty);
	}
}

@lazy
rule Participant
	transform s : DSL!Participant
	to t : SysMLine!ItemUsage
	extends Base{
	//Participant.Participant -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//Participant.Participant -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//Participant.Participant -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//Participant.Participant -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//Participant.Participant -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//Participant.Participant -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//Participant.Participant -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//Participant.Participant -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//Participant.Participant -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//Participant.Participant -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//Participant.Participant -> EReference : artifactProperty
	if (s.artifactProperty.getEReference() != null){
		var artifactProperty = new SysMLine!ItemUsage;
		artifactProperty.isReference = true;
		artifactProperty.featureNote.add(":>");
		artifactProperty.featureSpecialization.add("artifactProperty");
		artifactProperty.valuePart = s.artifactProperty.getEReference();
		t.body.add(artifactProperty);
	}
}

@lazy
rule Activity
	transform s : DSL!Activity
	to t : SysMLine!ItemUsage
	extends Base{
	//Activity.Activity -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//Activity.Activity -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//Activity.Activity -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//Activity.Activity -> EAttribute : startTime
	if (s.startTime.getEAttribute() != null){
		var startTime = new SysMLine!AttributeUsage;
		startTime.featureNote.add(":>>");
		startTime.featureSpecialization.add("startTime");
		startTime.valuePart = s.startTime.getEAttribute();
		t.body.add(startTime);
	}
	//Activity.Activity -> EAttribute : endTime
	if (s.endTime.getEAttribute() != null){
		var endTime = new SysMLine!AttributeUsage;
		endTime.featureNote.add(":>>");
		endTime.featureSpecialization.add("endTime");
		endTime.valuePart = s.endTime.getEAttribute();
		t.body.add(endTime);
	}
	//Activity.Activity -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//Activity.Activity -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//Activity.Activity -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//Activity.Activity -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//Activity.Activity -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//Activity.Activity -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//Activity.Activity -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//Activity.Activity -> EReference : artifactProperty
	if (s.artifactProperty.getEReference() != null){
		var artifactProperty = new SysMLine!ItemUsage;
		artifactProperty.isReference = true;
		artifactProperty.featureNote.add(":>");
		artifactProperty.featureSpecialization.add("artifactProperty");
		artifactProperty.valuePart = s.artifactProperty.getEReference();
		t.body.add(artifactProperty);
	}
}

@lazy
rule Event
	transform s : DSL!Event
	to t : SysMLine!ItemUsage
	extends Base{
	//Event.Event -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//Event.Event -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//Event.Event -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//Event.Event -> EAttribute : occurence
	if (s.occurence.getEAttribute() != null){
		var occurence = new SysMLine!AttributeUsage;
		occurence.featureNote.add(":>>");
		occurence.featureSpecialization.add("occurence");
		occurence.valuePart = s.occurence.getEAttribute();
		t.body.add(occurence);
	}
	//Event.Event -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//Event.Event -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//Event.Event -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//Event.Event -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//Event.Event -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//Event.Event -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//Event.Event -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//Event.Event -> EReference : artifactProperty
	if (s.artifactProperty.getEReference() != null){
		var artifactProperty = new SysMLine!ItemUsage;
		artifactProperty.isReference = true;
		artifactProperty.featureNote.add(":>");
		artifactProperty.featureSpecialization.add("artifactProperty");
		artifactProperty.valuePart = s.artifactProperty.getEReference();
		t.body.add(artifactProperty);
	}
}

@lazy
rule Resource
	transform s : DSL!Resource
	to t : SysMLine!ItemUsage
	extends Base{
	//Resource.Resource -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//Resource.Resource -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//Resource.Resource -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//Resource.Resource -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//Resource.Resource -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//Resource.Resource -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//Resource.Resource -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//Resource.Resource -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//Resource.Resource -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//Resource.Resource -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//Resource.Resource -> EReference : artifactProperty
	if (s.artifactProperty.getEReference() != null){
		var artifactProperty = new SysMLine!ItemUsage;
		artifactProperty.isReference = true;
		artifactProperty.featureNote.add(":>");
		artifactProperty.featureSpecialization.add("artifactProperty");
		artifactProperty.valuePart = s.artifactProperty.getEReference();
		t.body.add(artifactProperty);
	}
}

@lazy
rule Artifact
	transform s : DSL!Artifact
	to t : SysMLine!ItemUsage
	extends Base{
	//Artifact.Artifact -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//Artifact.Artifact -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//Artifact.Artifact -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//Artifact.Artifact -> EAttribute : version
	if (s.version.getEAttribute() != null){
		var version = new SysMLine!AttributeUsage;
		version.featureNote.add(":>>");
		version.featureSpecialization.add("version");
		version.valuePart = s.version.getEAttribute();
		t.body.add(version);
	}
	//Artifact.Artifact -> EAttribute : date
	if (s.date.getEAttribute() != null){
		var date = new SysMLine!AttributeUsage;
		date.featureNote.add(":>>");
		date.featureSpecialization.add("date");
		date.valuePart = s.date.getEAttribute();
		t.body.add(date);
	}
	//Artifact.Artifact -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//Artifact.Artifact -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//Artifact.Artifact -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//Artifact.Artifact -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//Artifact.Artifact -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//Artifact.Artifact -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//Artifact.Artifact -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//Artifact.Artifact -> EReference : artifactProperty
	if (s.artifactProperty.getEReference() != null){
		var artifactProperty = new SysMLine!ItemUsage;
		artifactProperty.isReference = true;
		artifactProperty.featureNote.add(":>");
		artifactProperty.featureSpecialization.add("artifactProperty");
		artifactProperty.valuePart = s.artifactProperty.getEReference();
		t.body.add(artifactProperty);
	}
}

@lazy
rule ArtifactAssetRelationship
	transform s : DSL!ArtifactAssetRelationship
	to t : SysMLine!ItemUsage
	extends Base{
	//ArtifactAssetRelationship.ArtifactAssetRelationship -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//ArtifactAssetRelationship.ArtifactAssetRelationship -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//ArtifactAssetRelationship.ArtifactAssetRelationship -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//ArtifactAssetRelationship.ArtifactAssetRelationship -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//ArtifactAssetRelationship.ArtifactAssetRelationship -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//ArtifactAssetRelationship.ArtifactAssetRelationship -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//ArtifactAssetRelationship.ArtifactAssetRelationship -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//ArtifactAssetRelationship.ArtifactAssetRelationship -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//ArtifactAssetRelationship.ArtifactAssetRelationship -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//ArtifactAssetRelationship.ArtifactAssetRelationship -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//ArtifactAssetRelationship.ArtifactAssetRelationship -> EReference : artifactProperty
	if (s.artifactProperty.getEReference() != null){
		var artifactProperty = new SysMLine!ItemUsage;
		artifactProperty.isReference = true;
		artifactProperty.featureNote.add(":>");
		artifactProperty.featureSpecialization.add("artifactProperty");
		artifactProperty.valuePart = s.artifactProperty.getEReference();
		t.body.add(artifactProperty);
	}
	//ArtifactAssetRelationship.ArtifactAssetRelationship -> EReference : source
	if (s.source.getEReference() != null){
		var source = new SysMLine!ItemUsage;
		source.isReference = true;
		source.featureNote.add(":>");
		source.featureSpecialization.add("source");
		source.valuePart = s.source.getEReference();
		t.body.add(source);
	}
	//ArtifactAssetRelationship.ArtifactAssetRelationship -> EReference : target
	if (s.target.getEReference() != null){
		var target = new SysMLine!ItemUsage;
		target.isReference = true;
		target.featureNote.add(":>");
		target.featureSpecialization.add("target");
		target.valuePart = s.target.getEReference();
		t.body.add(target);
	}
}


// argumentation.ecore
@lazy
rule ArgumentationElement
	transform s : DSL!ArgumentationElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ArgumentationElement.ArgumentationElement -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//ArgumentationElement.ArgumentationElement -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//ArgumentationElement.ArgumentationElement -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//ArgumentationElement.ArgumentationElement -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null){
		var uninstantiated = new SysMLine!AttributeUsage;
		uninstantiated.featureNote.add(":>>");
		uninstantiated.featureSpecialization.add("uninstantiated");
		uninstantiated.valuePart = s.uninstantiated.getEAttribute();
		t.body.add(uninstantiated);
	}
	//ArgumentationElement.ArgumentationElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//ArgumentationElement.ArgumentationElement -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//ArgumentationElement.ArgumentationElement -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//ArgumentationElement.ArgumentationElement -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//ArgumentationElement.ArgumentationElement -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//ArgumentationElement.ArgumentationElement -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//ArgumentationElement.ArgumentationElement -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
}

@lazy
rule ArgumentGroup
	transform s : DSL!ArgumentGroup
	to t : SysMLine!ItemUsage
	extends Base{
	//ArgumentGroup.ArgumentGroup -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//ArgumentGroup.ArgumentGroup -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//ArgumentGroup.ArgumentGroup -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//ArgumentGroup.ArgumentGroup -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null){
		var uninstantiated = new SysMLine!AttributeUsage;
		uninstantiated.featureNote.add(":>>");
		uninstantiated.featureSpecialization.add("uninstantiated");
		uninstantiated.valuePart = s.uninstantiated.getEAttribute();
		t.body.add(uninstantiated);
	}
	//ArgumentGroup.ArgumentGroup -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//ArgumentGroup.ArgumentGroup -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//ArgumentGroup.ArgumentGroup -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//ArgumentGroup.ArgumentGroup -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//ArgumentGroup.ArgumentGroup -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//ArgumentGroup.ArgumentGroup -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//ArgumentGroup.ArgumentGroup -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//ArgumentGroup.ArgumentGroup -> EReference : argumentationElement
	if (s.argumentationElement.getEReference() != null){
		var argumentationElement = new SysMLine!ItemUsage;
		argumentationElement.isReference = true;
		argumentationElement.featureNote.add(":>");
		argumentationElement.featureSpecialization.add("argumentationElement");
		argumentationElement.valuePart = s.argumentationElement.getEReference();
		t.body.add(argumentationElement);
	}
}

@lazy
rule ArgumentPackage
	transform s : DSL!ArgumentPackage
	to t : SysMLine!ItemUsage
	extends Base{
	//ArgumentPackage.ArgumentPackage -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//ArgumentPackage.ArgumentPackage -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//ArgumentPackage.ArgumentPackage -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//ArgumentPackage.ArgumentPackage -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null){
		var uninstantiated = new SysMLine!AttributeUsage;
		uninstantiated.featureNote.add(":>>");
		uninstantiated.featureSpecialization.add("uninstantiated");
		uninstantiated.valuePart = s.uninstantiated.getEAttribute();
		t.body.add(uninstantiated);
	}
	//ArgumentPackage.ArgumentPackage -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//ArgumentPackage.ArgumentPackage -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//ArgumentPackage.ArgumentPackage -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//ArgumentPackage.ArgumentPackage -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//ArgumentPackage.ArgumentPackage -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//ArgumentPackage.ArgumentPackage -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//ArgumentPackage.ArgumentPackage -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//ArgumentPackage.ArgumentPackage -> EReference : argumentationElement
	if (s.argumentationElement.getEReference() != null){
		var argumentationElement = new SysMLine!ItemUsage;
		argumentationElement.isReference = true;
		argumentationElement.featureNote.add(":>");
		argumentationElement.featureSpecialization.add("argumentationElement");
		argumentationElement.valuePart = s.argumentationElement.getEReference();
		t.body.add(argumentationElement);
	}
}

@lazy
rule ArgumentPackageInterface
	transform s : DSL!ArgumentPackageInterface
	to t : SysMLine!ItemUsage
	extends Base{
	//ArgumentPackageInterface.ArgumentPackageInterface -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//ArgumentPackageInterface.ArgumentPackageInterface -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//ArgumentPackageInterface.ArgumentPackageInterface -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//ArgumentPackageInterface.ArgumentPackageInterface -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null){
		var uninstantiated = new SysMLine!AttributeUsage;
		uninstantiated.featureNote.add(":>>");
		uninstantiated.featureSpecialization.add("uninstantiated");
		uninstantiated.valuePart = s.uninstantiated.getEAttribute();
		t.body.add(uninstantiated);
	}
	//ArgumentPackageInterface.ArgumentPackageInterface -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//ArgumentPackageInterface.ArgumentPackageInterface -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//ArgumentPackageInterface.ArgumentPackageInterface -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//ArgumentPackageInterface.ArgumentPackageInterface -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//ArgumentPackageInterface.ArgumentPackageInterface -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//ArgumentPackageInterface.ArgumentPackageInterface -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//ArgumentPackageInterface.ArgumentPackageInterface -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//ArgumentPackageInterface.ArgumentPackageInterface -> EReference : argumentationElement
	if (s.argumentationElement.getEReference() != null){
		var argumentationElement = new SysMLine!ItemUsage;
		argumentationElement.isReference = true;
		argumentationElement.featureNote.add(":>");
		argumentationElement.featureSpecialization.add("argumentationElement");
		argumentationElement.valuePart = s.argumentationElement.getEReference();
		t.body.add(argumentationElement);
	}
	//ArgumentPackageInterface.ArgumentPackageInterface -> EReference : implements
	if (s.implements.getEReference() != null){
		var implements = new SysMLine!ItemUsage;
		implements.isReference = true;
		implements.featureNote.add(":>");
		implements.featureSpecialization.add("implements");
		implements.valuePart = s.implements.getEReference();
		t.body.add(implements);
	}
}

@lazy
rule ArgumentPackageBinding
	transform s : DSL!ArgumentPackageBinding
	to t : SysMLine!ItemUsage
	extends Base{
	//ArgumentPackageBinding.ArgumentPackageBinding -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//ArgumentPackageBinding.ArgumentPackageBinding -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//ArgumentPackageBinding.ArgumentPackageBinding -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//ArgumentPackageBinding.ArgumentPackageBinding -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null){
		var uninstantiated = new SysMLine!AttributeUsage;
		uninstantiated.featureNote.add(":>>");
		uninstantiated.featureSpecialization.add("uninstantiated");
		uninstantiated.valuePart = s.uninstantiated.getEAttribute();
		t.body.add(uninstantiated);
	}
	//ArgumentPackageBinding.ArgumentPackageBinding -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//ArgumentPackageBinding.ArgumentPackageBinding -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//ArgumentPackageBinding.ArgumentPackageBinding -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//ArgumentPackageBinding.ArgumentPackageBinding -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//ArgumentPackageBinding.ArgumentPackageBinding -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//ArgumentPackageBinding.ArgumentPackageBinding -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//ArgumentPackageBinding.ArgumentPackageBinding -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//ArgumentPackageBinding.ArgumentPackageBinding -> EReference : argumentationElement
	if (s.argumentationElement.getEReference() != null){
		var argumentationElement = new SysMLine!ItemUsage;
		argumentationElement.isReference = true;
		argumentationElement.featureNote.add(":>");
		argumentationElement.featureSpecialization.add("argumentationElement");
		argumentationElement.valuePart = s.argumentationElement.getEReference();
		t.body.add(argumentationElement);
	}
	//ArgumentPackageBinding.ArgumentPackageBinding -> EReference : participantPackage
	if (s.participantPackage.getEReference() != null){
		var participantPackage = new SysMLine!ItemUsage;
		participantPackage.isReference = true;
		participantPackage.featureNote.add(":>");
		participantPackage.featureSpecialization.add("participantPackage");
		participantPackage.valuePart = s.participantPackage.getEReference();
		t.body.add(participantPackage);
	}
}

@lazy
rule ArgumentAsset
	transform s : DSL!ArgumentAsset
	to t : SysMLine!ItemUsage
	extends Base{
	//ArgumentAsset.ArgumentAsset -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//ArgumentAsset.ArgumentAsset -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//ArgumentAsset.ArgumentAsset -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//ArgumentAsset.ArgumentAsset -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null){
		var uninstantiated = new SysMLine!AttributeUsage;
		uninstantiated.featureNote.add(":>>");
		uninstantiated.featureSpecialization.add("uninstantiated");
		uninstantiated.valuePart = s.uninstantiated.getEAttribute();
		t.body.add(uninstantiated);
	}
	//ArgumentAsset.ArgumentAsset -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//ArgumentAsset.ArgumentAsset -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//ArgumentAsset.ArgumentAsset -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//ArgumentAsset.ArgumentAsset -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//ArgumentAsset.ArgumentAsset -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//ArgumentAsset.ArgumentAsset -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//ArgumentAsset.ArgumentAsset -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//ArgumentAsset.ArgumentAsset -> EReference : content
	if (s.content.getEReference() != null){
		var content = new SysMLine!ItemUsage;
		content.isReference = true;
		content.featureNote.add(":>");
		content.featureSpecialization.add("content");
		content.valuePart = s.content.getEReference();
		t.body.add(content);
	}
}

@lazy
rule Assertion
	transform s : DSL!Assertion
	to t : SysMLine!ItemUsage
	extends Base{
	//Assertion.Assertion -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//Assertion.Assertion -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//Assertion.Assertion -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//Assertion.Assertion -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null){
		var uninstantiated = new SysMLine!AttributeUsage;
		uninstantiated.featureNote.add(":>>");
		uninstantiated.featureSpecialization.add("uninstantiated");
		uninstantiated.valuePart = s.uninstantiated.getEAttribute();
		t.body.add(uninstantiated);
	}
	//Assertion.Assertion -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null){
		var assertionDeclaration = new SysMLine!AttributeUsage;
		assertionDeclaration.featureNote.add(":>>");
		assertionDeclaration.featureSpecialization.add("assertionDeclaration");
		assertionDeclaration.valuePart = s.assertionDeclaration.getEAttribute();
		t.body.add(assertionDeclaration);
	}
	//Assertion.Assertion -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//Assertion.Assertion -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//Assertion.Assertion -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//Assertion.Assertion -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//Assertion.Assertion -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//Assertion.Assertion -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//Assertion.Assertion -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//Assertion.Assertion -> EReference : content
	if (s.content.getEReference() != null){
		var content = new SysMLine!ItemUsage;
		content.isReference = true;
		content.featureNote.add(":>");
		content.featureSpecialization.add("content");
		content.valuePart = s.content.getEReference();
		t.body.add(content);
	}
	//Assertion.Assertion -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null){
		var metaClaim = new SysMLine!ItemUsage;
		metaClaim.isReference = true;
		metaClaim.featureNote.add(":>");
		metaClaim.featureSpecialization.add("metaClaim");
		metaClaim.valuePart = s.metaClaim.getEReference();
		t.body.add(metaClaim);
	}
}

@lazy
rule ArgumentReasoning
	transform s : DSL!ArgumentReasoning
	to t : SysMLine!ItemUsage
	extends Base{
	//ArgumentReasoning.ArgumentReasoning -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//ArgumentReasoning.ArgumentReasoning -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//ArgumentReasoning.ArgumentReasoning -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//ArgumentReasoning.ArgumentReasoning -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null){
		var uninstantiated = new SysMLine!AttributeUsage;
		uninstantiated.featureNote.add(":>>");
		uninstantiated.featureSpecialization.add("uninstantiated");
		uninstantiated.valuePart = s.uninstantiated.getEAttribute();
		t.body.add(uninstantiated);
	}
	//ArgumentReasoning.ArgumentReasoning -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//ArgumentReasoning.ArgumentReasoning -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//ArgumentReasoning.ArgumentReasoning -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//ArgumentReasoning.ArgumentReasoning -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//ArgumentReasoning.ArgumentReasoning -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//ArgumentReasoning.ArgumentReasoning -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//ArgumentReasoning.ArgumentReasoning -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//ArgumentReasoning.ArgumentReasoning -> EReference : content
	if (s.content.getEReference() != null){
		var content = new SysMLine!ItemUsage;
		content.isReference = true;
		content.featureNote.add(":>");
		content.featureSpecialization.add("content");
		content.valuePart = s.content.getEReference();
		t.body.add(content);
	}
	//ArgumentReasoning.ArgumentReasoning -> EReference : structure
	if (s.structure.getEReference() != null){
		var structure = new SysMLine!ItemUsage;
		structure.isReference = true;
		structure.featureNote.add(":>");
		structure.featureSpecialization.add("structure");
		structure.valuePart = s.structure.getEReference();
		t.body.add(structure);
	}
}

@lazy
rule Claim
	transform s : DSL!Claim
	to t : SysMLine!ItemUsage
	extends Base{
	//Claim.Claim -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//Claim.Claim -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//Claim.Claim -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//Claim.Claim -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null){
		var uninstantiated = new SysMLine!AttributeUsage;
		uninstantiated.featureNote.add(":>>");
		uninstantiated.featureSpecialization.add("uninstantiated");
		uninstantiated.valuePart = s.uninstantiated.getEAttribute();
		t.body.add(uninstantiated);
	}
	//Claim.Claim -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null){
		var assertionDeclaration = new SysMLine!AttributeUsage;
		assertionDeclaration.featureNote.add(":>>");
		assertionDeclaration.featureSpecialization.add("assertionDeclaration");
		assertionDeclaration.valuePart = s.assertionDeclaration.getEAttribute();
		t.body.add(assertionDeclaration);
	}
	//Claim.Claim -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//Claim.Claim -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//Claim.Claim -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//Claim.Claim -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//Claim.Claim -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//Claim.Claim -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//Claim.Claim -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//Claim.Claim -> EReference : content
	if (s.content.getEReference() != null){
		var content = new SysMLine!ItemUsage;
		content.isReference = true;
		content.featureNote.add(":>");
		content.featureSpecialization.add("content");
		content.valuePart = s.content.getEReference();
		t.body.add(content);
	}
	//Claim.Claim -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null){
		var metaClaim = new SysMLine!ItemUsage;
		metaClaim.isReference = true;
		metaClaim.featureNote.add(":>");
		metaClaim.featureSpecialization.add("metaClaim");
		metaClaim.valuePart = s.metaClaim.getEReference();
		t.body.add(metaClaim);
	}
}

@lazy
rule AssertedRelationship
	transform s : DSL!AssertedRelationship
	to t : SysMLine!ItemUsage
	extends Base{
	//AssertedRelationship.AssertedRelationship -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//AssertedRelationship.AssertedRelationship -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//AssertedRelationship.AssertedRelationship -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//AssertedRelationship.AssertedRelationship -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null){
		var uninstantiated = new SysMLine!AttributeUsage;
		uninstantiated.featureNote.add(":>>");
		uninstantiated.featureSpecialization.add("uninstantiated");
		uninstantiated.valuePart = s.uninstantiated.getEAttribute();
		t.body.add(uninstantiated);
	}
	//AssertedRelationship.AssertedRelationship -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null){
		var assertionDeclaration = new SysMLine!AttributeUsage;
		assertionDeclaration.featureNote.add(":>>");
		assertionDeclaration.featureSpecialization.add("assertionDeclaration");
		assertionDeclaration.valuePart = s.assertionDeclaration.getEAttribute();
		t.body.add(assertionDeclaration);
	}
	//AssertedRelationship.AssertedRelationship -> EAttribute : isCounter
	if (s.isCounter.getEAttribute() != null){
		var isCounter = new SysMLine!AttributeUsage;
		isCounter.featureNote.add(":>>");
		isCounter.featureSpecialization.add("isCounter");
		isCounter.valuePart = s.isCounter.getEAttribute();
		t.body.add(isCounter);
	}
	//AssertedRelationship.AssertedRelationship -> EAttribute : requies
	if (s.requies.getEAttribute() != null){
		var requies = new SysMLine!AttributeUsage;
		requies.featureNote.add(":>>");
		requies.featureSpecialization.add("requies");
		requies.valuePart = s.requies.getEAttribute();
		t.body.add(requies);
	}
	//AssertedRelationship.AssertedRelationship -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//AssertedRelationship.AssertedRelationship -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//AssertedRelationship.AssertedRelationship -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//AssertedRelationship.AssertedRelationship -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//AssertedRelationship.AssertedRelationship -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//AssertedRelationship.AssertedRelationship -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//AssertedRelationship.AssertedRelationship -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//AssertedRelationship.AssertedRelationship -> EReference : content
	if (s.content.getEReference() != null){
		var content = new SysMLine!ItemUsage;
		content.isReference = true;
		content.featureNote.add(":>");
		content.featureSpecialization.add("content");
		content.valuePart = s.content.getEReference();
		t.body.add(content);
	}
	//AssertedRelationship.AssertedRelationship -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null){
		var metaClaim = new SysMLine!ItemUsage;
		metaClaim.isReference = true;
		metaClaim.featureNote.add(":>");
		metaClaim.featureSpecialization.add("metaClaim");
		metaClaim.valuePart = s.metaClaim.getEReference();
		t.body.add(metaClaim);
	}
	//AssertedRelationship.AssertedRelationship -> EReference : source
	if (s.source.getEReference() != null){
		var source = new SysMLine!ItemUsage;
		source.isReference = true;
		source.featureNote.add(":>");
		source.featureSpecialization.add("source");
		source.valuePart = s.source.getEReference();
		t.body.add(source);
	}
	//AssertedRelationship.AssertedRelationship -> EReference : target
	if (s.target.getEReference() != null){
		var target = new SysMLine!ItemUsage;
		target.isReference = true;
		target.featureNote.add(":>");
		target.featureSpecialization.add("target");
		target.valuePart = s.target.getEReference();
		t.body.add(target);
	}
	//AssertedRelationship.AssertedRelationship -> EReference : reasoning
	if (s.reasoning.getEReference() != null){
		var reasoning = new SysMLine!ItemUsage;
		reasoning.isReference = true;
		reasoning.featureNote.add(":>");
		reasoning.featureSpecialization.add("reasoning");
		reasoning.valuePart = s.reasoning.getEReference();
		t.body.add(reasoning);
	}
}

@lazy
rule ArtifactReference
	transform s : DSL!ArtifactReference
	to t : SysMLine!ItemUsage
	extends Base{
	//ArtifactReference.ArtifactReference -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//ArtifactReference.ArtifactReference -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//ArtifactReference.ArtifactReference -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//ArtifactReference.ArtifactReference -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null){
		var uninstantiated = new SysMLine!AttributeUsage;
		uninstantiated.featureNote.add(":>>");
		uninstantiated.featureSpecialization.add("uninstantiated");
		uninstantiated.valuePart = s.uninstantiated.getEAttribute();
		t.body.add(uninstantiated);
	}
	//ArtifactReference.ArtifactReference -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//ArtifactReference.ArtifactReference -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//ArtifactReference.ArtifactReference -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//ArtifactReference.ArtifactReference -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//ArtifactReference.ArtifactReference -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//ArtifactReference.ArtifactReference -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//ArtifactReference.ArtifactReference -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//ArtifactReference.ArtifactReference -> EReference : content
	if (s.content.getEReference() != null){
		var content = new SysMLine!ItemUsage;
		content.isReference = true;
		content.featureNote.add(":>");
		content.featureSpecialization.add("content");
		content.valuePart = s.content.getEReference();
		t.body.add(content);
	}
	//ArtifactReference.ArtifactReference -> EReference : referencedArtifactElement
	if (s.referencedArtifactElement.getEReference() != null){
		var referencedArtifactElement = new SysMLine!ItemUsage;
		referencedArtifactElement.isReference = true;
		referencedArtifactElement.featureNote.add(":>");
		referencedArtifactElement.featureSpecialization.add("referencedArtifactElement");
		referencedArtifactElement.valuePart = s.referencedArtifactElement.getEReference();
		t.body.add(referencedArtifactElement);
	}
}

@lazy
rule AssertedArtifactSupport
	transform s : DSL!AssertedArtifactSupport
	to t : SysMLine!ItemUsage
	extends Base{
	//AssertedArtifactSupport.AssertedArtifactSupport -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//AssertedArtifactSupport.AssertedArtifactSupport -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//AssertedArtifactSupport.AssertedArtifactSupport -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//AssertedArtifactSupport.AssertedArtifactSupport -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null){
		var uninstantiated = new SysMLine!AttributeUsage;
		uninstantiated.featureNote.add(":>>");
		uninstantiated.featureSpecialization.add("uninstantiated");
		uninstantiated.valuePart = s.uninstantiated.getEAttribute();
		t.body.add(uninstantiated);
	}
	//AssertedArtifactSupport.AssertedArtifactSupport -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null){
		var assertionDeclaration = new SysMLine!AttributeUsage;
		assertionDeclaration.featureNote.add(":>>");
		assertionDeclaration.featureSpecialization.add("assertionDeclaration");
		assertionDeclaration.valuePart = s.assertionDeclaration.getEAttribute();
		t.body.add(assertionDeclaration);
	}
	//AssertedArtifactSupport.AssertedArtifactSupport -> EAttribute : isCounter
	if (s.isCounter.getEAttribute() != null){
		var isCounter = new SysMLine!AttributeUsage;
		isCounter.featureNote.add(":>>");
		isCounter.featureSpecialization.add("isCounter");
		isCounter.valuePart = s.isCounter.getEAttribute();
		t.body.add(isCounter);
	}
	//AssertedArtifactSupport.AssertedArtifactSupport -> EAttribute : requies
	if (s.requies.getEAttribute() != null){
		var requies = new SysMLine!AttributeUsage;
		requies.featureNote.add(":>>");
		requies.featureSpecialization.add("requies");
		requies.valuePart = s.requies.getEAttribute();
		t.body.add(requies);
	}
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : content
	if (s.content.getEReference() != null){
		var content = new SysMLine!ItemUsage;
		content.isReference = true;
		content.featureNote.add(":>");
		content.featureSpecialization.add("content");
		content.valuePart = s.content.getEReference();
		t.body.add(content);
	}
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null){
		var metaClaim = new SysMLine!ItemUsage;
		metaClaim.isReference = true;
		metaClaim.featureNote.add(":>");
		metaClaim.featureSpecialization.add("metaClaim");
		metaClaim.valuePart = s.metaClaim.getEReference();
		t.body.add(metaClaim);
	}
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : source
	if (s.source.getEReference() != null){
		var source = new SysMLine!ItemUsage;
		source.isReference = true;
		source.featureNote.add(":>");
		source.featureSpecialization.add("source");
		source.valuePart = s.source.getEReference();
		t.body.add(source);
	}
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : target
	if (s.target.getEReference() != null){
		var target = new SysMLine!ItemUsage;
		target.isReference = true;
		target.featureNote.add(":>");
		target.featureSpecialization.add("target");
		target.valuePart = s.target.getEReference();
		t.body.add(target);
	}
	//AssertedArtifactSupport.AssertedArtifactSupport -> EReference : reasoning
	if (s.reasoning.getEReference() != null){
		var reasoning = new SysMLine!ItemUsage;
		reasoning.isReference = true;
		reasoning.featureNote.add(":>");
		reasoning.featureSpecialization.add("reasoning");
		reasoning.valuePart = s.reasoning.getEReference();
		t.body.add(reasoning);
	}
}

@lazy
rule AssertedInference
	transform s : DSL!AssertedInference
	to t : SysMLine!ItemUsage
	extends Base{
	//AssertedInference.AssertedInference -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//AssertedInference.AssertedInference -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//AssertedInference.AssertedInference -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//AssertedInference.AssertedInference -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null){
		var uninstantiated = new SysMLine!AttributeUsage;
		uninstantiated.featureNote.add(":>>");
		uninstantiated.featureSpecialization.add("uninstantiated");
		uninstantiated.valuePart = s.uninstantiated.getEAttribute();
		t.body.add(uninstantiated);
	}
	//AssertedInference.AssertedInference -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null){
		var assertionDeclaration = new SysMLine!AttributeUsage;
		assertionDeclaration.featureNote.add(":>>");
		assertionDeclaration.featureSpecialization.add("assertionDeclaration");
		assertionDeclaration.valuePart = s.assertionDeclaration.getEAttribute();
		t.body.add(assertionDeclaration);
	}
	//AssertedInference.AssertedInference -> EAttribute : isCounter
	if (s.isCounter.getEAttribute() != null){
		var isCounter = new SysMLine!AttributeUsage;
		isCounter.featureNote.add(":>>");
		isCounter.featureSpecialization.add("isCounter");
		isCounter.valuePart = s.isCounter.getEAttribute();
		t.body.add(isCounter);
	}
	//AssertedInference.AssertedInference -> EAttribute : requies
	if (s.requies.getEAttribute() != null){
		var requies = new SysMLine!AttributeUsage;
		requies.featureNote.add(":>>");
		requies.featureSpecialization.add("requies");
		requies.valuePart = s.requies.getEAttribute();
		t.body.add(requies);
	}
	//AssertedInference.AssertedInference -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//AssertedInference.AssertedInference -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//AssertedInference.AssertedInference -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//AssertedInference.AssertedInference -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//AssertedInference.AssertedInference -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//AssertedInference.AssertedInference -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//AssertedInference.AssertedInference -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//AssertedInference.AssertedInference -> EReference : content
	if (s.content.getEReference() != null){
		var content = new SysMLine!ItemUsage;
		content.isReference = true;
		content.featureNote.add(":>");
		content.featureSpecialization.add("content");
		content.valuePart = s.content.getEReference();
		t.body.add(content);
	}
	//AssertedInference.AssertedInference -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null){
		var metaClaim = new SysMLine!ItemUsage;
		metaClaim.isReference = true;
		metaClaim.featureNote.add(":>");
		metaClaim.featureSpecialization.add("metaClaim");
		metaClaim.valuePart = s.metaClaim.getEReference();
		t.body.add(metaClaim);
	}
	//AssertedInference.AssertedInference -> EReference : source
	if (s.source.getEReference() != null){
		var source = new SysMLine!ItemUsage;
		source.isReference = true;
		source.featureNote.add(":>");
		source.featureSpecialization.add("source");
		source.valuePart = s.source.getEReference();
		t.body.add(source);
	}
	//AssertedInference.AssertedInference -> EReference : target
	if (s.target.getEReference() != null){
		var target = new SysMLine!ItemUsage;
		target.isReference = true;
		target.featureNote.add(":>");
		target.featureSpecialization.add("target");
		target.valuePart = s.target.getEReference();
		t.body.add(target);
	}
	//AssertedInference.AssertedInference -> EReference : reasoning
	if (s.reasoning.getEReference() != null){
		var reasoning = new SysMLine!ItemUsage;
		reasoning.isReference = true;
		reasoning.featureNote.add(":>");
		reasoning.featureSpecialization.add("reasoning");
		reasoning.valuePart = s.reasoning.getEReference();
		t.body.add(reasoning);
	}
}

@lazy
rule AssertedEvidence
	transform s : DSL!AssertedEvidence
	to t : SysMLine!ItemUsage
	extends Base{
	//AssertedEvidence.AssertedEvidence -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//AssertedEvidence.AssertedEvidence -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//AssertedEvidence.AssertedEvidence -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//AssertedEvidence.AssertedEvidence -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null){
		var uninstantiated = new SysMLine!AttributeUsage;
		uninstantiated.featureNote.add(":>>");
		uninstantiated.featureSpecialization.add("uninstantiated");
		uninstantiated.valuePart = s.uninstantiated.getEAttribute();
		t.body.add(uninstantiated);
	}
	//AssertedEvidence.AssertedEvidence -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null){
		var assertionDeclaration = new SysMLine!AttributeUsage;
		assertionDeclaration.featureNote.add(":>>");
		assertionDeclaration.featureSpecialization.add("assertionDeclaration");
		assertionDeclaration.valuePart = s.assertionDeclaration.getEAttribute();
		t.body.add(assertionDeclaration);
	}
	//AssertedEvidence.AssertedEvidence -> EAttribute : isCounter
	if (s.isCounter.getEAttribute() != null){
		var isCounter = new SysMLine!AttributeUsage;
		isCounter.featureNote.add(":>>");
		isCounter.featureSpecialization.add("isCounter");
		isCounter.valuePart = s.isCounter.getEAttribute();
		t.body.add(isCounter);
	}
	//AssertedEvidence.AssertedEvidence -> EAttribute : requies
	if (s.requies.getEAttribute() != null){
		var requies = new SysMLine!AttributeUsage;
		requies.featureNote.add(":>>");
		requies.featureSpecialization.add("requies");
		requies.valuePart = s.requies.getEAttribute();
		t.body.add(requies);
	}
	//AssertedEvidence.AssertedEvidence -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//AssertedEvidence.AssertedEvidence -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//AssertedEvidence.AssertedEvidence -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//AssertedEvidence.AssertedEvidence -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//AssertedEvidence.AssertedEvidence -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//AssertedEvidence.AssertedEvidence -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//AssertedEvidence.AssertedEvidence -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//AssertedEvidence.AssertedEvidence -> EReference : content
	if (s.content.getEReference() != null){
		var content = new SysMLine!ItemUsage;
		content.isReference = true;
		content.featureNote.add(":>");
		content.featureSpecialization.add("content");
		content.valuePart = s.content.getEReference();
		t.body.add(content);
	}
	//AssertedEvidence.AssertedEvidence -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null){
		var metaClaim = new SysMLine!ItemUsage;
		metaClaim.isReference = true;
		metaClaim.featureNote.add(":>");
		metaClaim.featureSpecialization.add("metaClaim");
		metaClaim.valuePart = s.metaClaim.getEReference();
		t.body.add(metaClaim);
	}
	//AssertedEvidence.AssertedEvidence -> EReference : source
	if (s.source.getEReference() != null){
		var source = new SysMLine!ItemUsage;
		source.isReference = true;
		source.featureNote.add(":>");
		source.featureSpecialization.add("source");
		source.valuePart = s.source.getEReference();
		t.body.add(source);
	}
	//AssertedEvidence.AssertedEvidence -> EReference : target
	if (s.target.getEReference() != null){
		var target = new SysMLine!ItemUsage;
		target.isReference = true;
		target.featureNote.add(":>");
		target.featureSpecialization.add("target");
		target.valuePart = s.target.getEReference();
		t.body.add(target);
	}
	//AssertedEvidence.AssertedEvidence -> EReference : reasoning
	if (s.reasoning.getEReference() != null){
		var reasoning = new SysMLine!ItemUsage;
		reasoning.isReference = true;
		reasoning.featureNote.add(":>");
		reasoning.featureSpecialization.add("reasoning");
		reasoning.valuePart = s.reasoning.getEReference();
		t.body.add(reasoning);
	}
}

@lazy
rule AssertedContext
	transform s : DSL!AssertedContext
	to t : SysMLine!ItemUsage
	extends Base{
	//AssertedContext.AssertedContext -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//AssertedContext.AssertedContext -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//AssertedContext.AssertedContext -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//AssertedContext.AssertedContext -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null){
		var uninstantiated = new SysMLine!AttributeUsage;
		uninstantiated.featureNote.add(":>>");
		uninstantiated.featureSpecialization.add("uninstantiated");
		uninstantiated.valuePart = s.uninstantiated.getEAttribute();
		t.body.add(uninstantiated);
	}
	//AssertedContext.AssertedContext -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null){
		var assertionDeclaration = new SysMLine!AttributeUsage;
		assertionDeclaration.featureNote.add(":>>");
		assertionDeclaration.featureSpecialization.add("assertionDeclaration");
		assertionDeclaration.valuePart = s.assertionDeclaration.getEAttribute();
		t.body.add(assertionDeclaration);
	}
	//AssertedContext.AssertedContext -> EAttribute : isCounter
	if (s.isCounter.getEAttribute() != null){
		var isCounter = new SysMLine!AttributeUsage;
		isCounter.featureNote.add(":>>");
		isCounter.featureSpecialization.add("isCounter");
		isCounter.valuePart = s.isCounter.getEAttribute();
		t.body.add(isCounter);
	}
	//AssertedContext.AssertedContext -> EAttribute : requies
	if (s.requies.getEAttribute() != null){
		var requies = new SysMLine!AttributeUsage;
		requies.featureNote.add(":>>");
		requies.featureSpecialization.add("requies");
		requies.valuePart = s.requies.getEAttribute();
		t.body.add(requies);
	}
	//AssertedContext.AssertedContext -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//AssertedContext.AssertedContext -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//AssertedContext.AssertedContext -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//AssertedContext.AssertedContext -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//AssertedContext.AssertedContext -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//AssertedContext.AssertedContext -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//AssertedContext.AssertedContext -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//AssertedContext.AssertedContext -> EReference : content
	if (s.content.getEReference() != null){
		var content = new SysMLine!ItemUsage;
		content.isReference = true;
		content.featureNote.add(":>");
		content.featureSpecialization.add("content");
		content.valuePart = s.content.getEReference();
		t.body.add(content);
	}
	//AssertedContext.AssertedContext -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null){
		var metaClaim = new SysMLine!ItemUsage;
		metaClaim.isReference = true;
		metaClaim.featureNote.add(":>");
		metaClaim.featureSpecialization.add("metaClaim");
		metaClaim.valuePart = s.metaClaim.getEReference();
		t.body.add(metaClaim);
	}
	//AssertedContext.AssertedContext -> EReference : source
	if (s.source.getEReference() != null){
		var source = new SysMLine!ItemUsage;
		source.isReference = true;
		source.featureNote.add(":>");
		source.featureSpecialization.add("source");
		source.valuePart = s.source.getEReference();
		t.body.add(source);
	}
	//AssertedContext.AssertedContext -> EReference : target
	if (s.target.getEReference() != null){
		var target = new SysMLine!ItemUsage;
		target.isReference = true;
		target.featureNote.add(":>");
		target.featureSpecialization.add("target");
		target.valuePart = s.target.getEReference();
		t.body.add(target);
	}
	//AssertedContext.AssertedContext -> EReference : reasoning
	if (s.reasoning.getEReference() != null){
		var reasoning = new SysMLine!ItemUsage;
		reasoning.isReference = true;
		reasoning.featureNote.add(":>");
		reasoning.featureSpecialization.add("reasoning");
		reasoning.valuePart = s.reasoning.getEReference();
		t.body.add(reasoning);
	}
}

@lazy
rule AssertedArtifactContext
	transform s : DSL!AssertedArtifactContext
	to t : SysMLine!ItemUsage
	extends Base{
	//AssertedArtifactContext.AssertedArtifactContext -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//AssertedArtifactContext.AssertedArtifactContext -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//AssertedArtifactContext.AssertedArtifactContext -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//AssertedArtifactContext.AssertedArtifactContext -> EAttribute : uninstantiated
	if (s.uninstantiated.getEAttribute() != null){
		var uninstantiated = new SysMLine!AttributeUsage;
		uninstantiated.featureNote.add(":>>");
		uninstantiated.featureSpecialization.add("uninstantiated");
		uninstantiated.valuePart = s.uninstantiated.getEAttribute();
		t.body.add(uninstantiated);
	}
	//AssertedArtifactContext.AssertedArtifactContext -> EAttribute : assertionDeclaration
	if (s.assertionDeclaration.getEAttribute() != null){
		var assertionDeclaration = new SysMLine!AttributeUsage;
		assertionDeclaration.featureNote.add(":>>");
		assertionDeclaration.featureSpecialization.add("assertionDeclaration");
		assertionDeclaration.valuePart = s.assertionDeclaration.getEAttribute();
		t.body.add(assertionDeclaration);
	}
	//AssertedArtifactContext.AssertedArtifactContext -> EAttribute : isCounter
	if (s.isCounter.getEAttribute() != null){
		var isCounter = new SysMLine!AttributeUsage;
		isCounter.featureNote.add(":>>");
		isCounter.featureSpecialization.add("isCounter");
		isCounter.valuePart = s.isCounter.getEAttribute();
		t.body.add(isCounter);
	}
	//AssertedArtifactContext.AssertedArtifactContext -> EAttribute : requies
	if (s.requies.getEAttribute() != null){
		var requies = new SysMLine!AttributeUsage;
		requies.featureNote.add(":>>");
		requies.featureSpecialization.add("requies");
		requies.valuePart = s.requies.getEAttribute();
		t.body.add(requies);
	}
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : content
	if (s.content.getEReference() != null){
		var content = new SysMLine!ItemUsage;
		content.isReference = true;
		content.featureNote.add(":>");
		content.featureSpecialization.add("content");
		content.valuePart = s.content.getEReference();
		t.body.add(content);
	}
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : metaClaim
	if (s.metaClaim.getEReference() != null){
		var metaClaim = new SysMLine!ItemUsage;
		metaClaim.isReference = true;
		metaClaim.featureNote.add(":>");
		metaClaim.featureSpecialization.add("metaClaim");
		metaClaim.valuePart = s.metaClaim.getEReference();
		t.body.add(metaClaim);
	}
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : source
	if (s.source.getEReference() != null){
		var source = new SysMLine!ItemUsage;
		source.isReference = true;
		source.featureNote.add(":>");
		source.featureSpecialization.add("source");
		source.valuePart = s.source.getEReference();
		t.body.add(source);
	}
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : target
	if (s.target.getEReference() != null){
		var target = new SysMLine!ItemUsage;
		target.isReference = true;
		target.featureNote.add(":>");
		target.featureSpecialization.add("target");
		target.valuePart = s.target.getEReference();
		t.body.add(target);
	}
	//AssertedArtifactContext.AssertedArtifactContext -> EReference : reasoning
	if (s.reasoning.getEReference() != null){
		var reasoning = new SysMLine!ItemUsage;
		reasoning.isReference = true;
		reasoning.featureNote.add(":>");
		reasoning.featureSpecialization.add("reasoning");
		reasoning.valuePart = s.reasoning.getEReference();
		t.body.add(reasoning);
	}
}


// terminology.ecore
@lazy
rule TerminologyElement
	transform s : DSL!TerminologyElement
	to t : SysMLine!ItemUsage
	extends Base{
	//TerminologyElement.TerminologyElement -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//TerminologyElement.TerminologyElement -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//TerminologyElement.TerminologyElement -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//TerminologyElement.TerminologyElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//TerminologyElement.TerminologyElement -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//TerminologyElement.TerminologyElement -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//TerminologyElement.TerminologyElement -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//TerminologyElement.TerminologyElement -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//TerminologyElement.TerminologyElement -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//TerminologyElement.TerminologyElement -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
}

@lazy
rule TerminologyGroup
	transform s : DSL!TerminologyGroup
	to t : SysMLine!ItemUsage
	extends Base{
	//TerminologyGroup.TerminologyGroup -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//TerminologyGroup.TerminologyGroup -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//TerminologyGroup.TerminologyGroup -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//TerminologyGroup.TerminologyGroup -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//TerminologyGroup.TerminologyGroup -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//TerminologyGroup.TerminologyGroup -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//TerminologyGroup.TerminologyGroup -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//TerminologyGroup.TerminologyGroup -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//TerminologyGroup.TerminologyGroup -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//TerminologyGroup.TerminologyGroup -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//TerminologyGroup.TerminologyGroup -> EReference : terminologyElement
	if (s.terminologyElement.getEReference() != null){
		var terminologyElement = new SysMLine!ItemUsage;
		terminologyElement.isReference = true;
		terminologyElement.featureNote.add(":>");
		terminologyElement.featureSpecialization.add("terminologyElement");
		terminologyElement.valuePart = s.terminologyElement.getEReference();
		t.body.add(terminologyElement);
	}
}

@lazy
rule TerminologyPackage
	transform s : DSL!TerminologyPackage
	to t : SysMLine!ItemUsage
	extends Base{
	//TerminologyPackage.TerminologyPackage -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//TerminologyPackage.TerminologyPackage -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//TerminologyPackage.TerminologyPackage -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//TerminologyPackage.TerminologyPackage -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//TerminologyPackage.TerminologyPackage -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//TerminologyPackage.TerminologyPackage -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//TerminologyPackage.TerminologyPackage -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//TerminologyPackage.TerminologyPackage -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//TerminologyPackage.TerminologyPackage -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//TerminologyPackage.TerminologyPackage -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//TerminologyPackage.TerminologyPackage -> EReference : terminologyElement
	if (s.terminologyElement.getEReference() != null){
		var terminologyElement = new SysMLine!ItemUsage;
		terminologyElement.isReference = true;
		terminologyElement.featureNote.add(":>");
		terminologyElement.featureSpecialization.add("terminologyElement");
		terminologyElement.valuePart = s.terminologyElement.getEReference();
		t.body.add(terminologyElement);
	}
}

@lazy
rule TerminologyPackageBinding
	transform s : DSL!TerminologyPackageBinding
	to t : SysMLine!ItemUsage
	extends Base{
	//TerminologyPackageBinding.TerminologyPackageBinding -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//TerminologyPackageBinding.TerminologyPackageBinding -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//TerminologyPackageBinding.TerminologyPackageBinding -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//TerminologyPackageBinding.TerminologyPackageBinding -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//TerminologyPackageBinding.TerminologyPackageBinding -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//TerminologyPackageBinding.TerminologyPackageBinding -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//TerminologyPackageBinding.TerminologyPackageBinding -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//TerminologyPackageBinding.TerminologyPackageBinding -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//TerminologyPackageBinding.TerminologyPackageBinding -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//TerminologyPackageBinding.TerminologyPackageBinding -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//TerminologyPackageBinding.TerminologyPackageBinding -> EReference : terminologyElement
	if (s.terminologyElement.getEReference() != null){
		var terminologyElement = new SysMLine!ItemUsage;
		terminologyElement.isReference = true;
		terminologyElement.featureNote.add(":>");
		terminologyElement.featureSpecialization.add("terminologyElement");
		terminologyElement.valuePart = s.terminologyElement.getEReference();
		t.body.add(terminologyElement);
	}
	//TerminologyPackageBinding.TerminologyPackageBinding -> EReference : participantPackage
	if (s.participantPackage.getEReference() != null){
		var participantPackage = new SysMLine!ItemUsage;
		participantPackage.isReference = true;
		participantPackage.featureNote.add(":>");
		participantPackage.featureSpecialization.add("participantPackage");
		participantPackage.valuePart = s.participantPackage.getEReference();
		t.body.add(participantPackage);
	}
}

@lazy
rule TerminologyPackageInterface
	transform s : DSL!TerminologyPackageInterface
	to t : SysMLine!ItemUsage
	extends Base{
	//TerminologyPackageInterface.TerminologyPackageInterface -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//TerminologyPackageInterface.TerminologyPackageInterface -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//TerminologyPackageInterface.TerminologyPackageInterface -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//TerminologyPackageInterface.TerminologyPackageInterface -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//TerminologyPackageInterface.TerminologyPackageInterface -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//TerminologyPackageInterface.TerminologyPackageInterface -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//TerminologyPackageInterface.TerminologyPackageInterface -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//TerminologyPackageInterface.TerminologyPackageInterface -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//TerminologyPackageInterface.TerminologyPackageInterface -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//TerminologyPackageInterface.TerminologyPackageInterface -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//TerminologyPackageInterface.TerminologyPackageInterface -> EReference : terminologyElement
	if (s.terminologyElement.getEReference() != null){
		var terminologyElement = new SysMLine!ItemUsage;
		terminologyElement.isReference = true;
		terminologyElement.featureNote.add(":>");
		terminologyElement.featureSpecialization.add("terminologyElement");
		terminologyElement.valuePart = s.terminologyElement.getEReference();
		t.body.add(terminologyElement);
	}
	//TerminologyPackageInterface.TerminologyPackageInterface -> EReference : implements
	if (s.implements.getEReference() != null){
		var implements = new SysMLine!ItemUsage;
		implements.isReference = true;
		implements.featureNote.add(":>");
		implements.featureSpecialization.add("implements");
		implements.valuePart = s.implements.getEReference();
		t.body.add(implements);
	}
}

@lazy
rule TerminologyAsset
	transform s : DSL!TerminologyAsset
	to t : SysMLine!ItemUsage
	extends Base{
	//TerminologyAsset.TerminologyAsset -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//TerminologyAsset.TerminologyAsset -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//TerminologyAsset.TerminologyAsset -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//TerminologyAsset.TerminologyAsset -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//TerminologyAsset.TerminologyAsset -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//TerminologyAsset.TerminologyAsset -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//TerminologyAsset.TerminologyAsset -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//TerminologyAsset.TerminologyAsset -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//TerminologyAsset.TerminologyAsset -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//TerminologyAsset.TerminologyAsset -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
}

@lazy
rule Category
	transform s : DSL!Category
	to t : SysMLine!ItemUsage
	extends Base{
	//Category.Category -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//Category.Category -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//Category.Category -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//Category.Category -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//Category.Category -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//Category.Category -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//Category.Category -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//Category.Category -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//Category.Category -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//Category.Category -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//Category.Category -> EReference : category
	if (s.category.getEReference() != null){
		var category = new SysMLine!ItemUsage;
		category.isReference = true;
		category.featureNote.add(":>");
		category.featureSpecialization.add("category");
		category.valuePart = s.category.getEReference();
		t.body.add(category);
	}
}

@lazy
rule ExpressionElement
	transform s : DSL!ExpressionElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ExpressionElement.ExpressionElement -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//ExpressionElement.ExpressionElement -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//ExpressionElement.ExpressionElement -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//ExpressionElement.ExpressionElement -> EAttribute : value
	if (s.value.getEAttribute() != null){
		var value = new SysMLine!AttributeUsage;
		value.featureNote.add(":>>");
		value.featureSpecialization.add("value");
		value.valuePart = s.value.getEAttribute();
		t.body.add(value);
	}
	//ExpressionElement.ExpressionElement -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//ExpressionElement.ExpressionElement -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//ExpressionElement.ExpressionElement -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//ExpressionElement.ExpressionElement -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//ExpressionElement.ExpressionElement -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//ExpressionElement.ExpressionElement -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//ExpressionElement.ExpressionElement -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//ExpressionElement.ExpressionElement -> EReference : category
	if (s.category.getEReference() != null){
		var category = new SysMLine!ItemUsage;
		category.isReference = true;
		category.featureNote.add(":>");
		category.featureSpecialization.add("category");
		category.valuePart = s.category.getEReference();
		t.body.add(category);
	}
}

@lazy
rule Expression
	transform s : DSL!Expression
	to t : SysMLine!ItemUsage
	extends Base{
	//Expression.Expression -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//Expression.Expression -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//Expression.Expression -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//Expression.Expression -> EAttribute : value
	if (s.value.getEAttribute() != null){
		var value = new SysMLine!AttributeUsage;
		value.featureNote.add(":>>");
		value.featureSpecialization.add("value");
		value.valuePart = s.value.getEAttribute();
		t.body.add(value);
	}
	//Expression.Expression -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//Expression.Expression -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//Expression.Expression -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//Expression.Expression -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//Expression.Expression -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//Expression.Expression -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//Expression.Expression -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//Expression.Expression -> EReference : category
	if (s.category.getEReference() != null){
		var category = new SysMLine!ItemUsage;
		category.isReference = true;
		category.featureNote.add(":>");
		category.featureSpecialization.add("category");
		category.valuePart = s.category.getEReference();
		t.body.add(category);
	}
	//Expression.Expression -> EReference : element
	if (s.element.getEReference() != null){
		var element = new SysMLine!ItemUsage;
		element.isReference = true;
		element.featureNote.add(":>");
		element.featureSpecialization.add("element");
		element.valuePart = s.element.getEReference();
		t.body.add(element);
	}
}

@lazy
rule Term
	transform s : DSL!Term
	to t : SysMLine!ItemUsage
	extends Base{
	//Term.Term -> EAttribute : gid
	if (s.gid.getEAttribute() != null){
		var gid = new SysMLine!AttributeUsage;
		gid.featureNote.add(":>>");
		gid.featureSpecialization.add("gid");
		gid.valuePart = s.gid.getEAttribute();
		t.body.add(gid);
	}
	//Term.Term -> EAttribute : isCitation
	if (s.isCitation.getEAttribute() != null){
		var isCitation = new SysMLine!AttributeUsage;
		isCitation.featureNote.add(":>>");
		isCitation.featureSpecialization.add("isCitation");
		isCitation.valuePart = s.isCitation.getEAttribute();
		t.body.add(isCitation);
	}
	//Term.Term -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//Term.Term -> EAttribute : value
	if (s.value.getEAttribute() != null){
		var value = new SysMLine!AttributeUsage;
		value.featureNote.add(":>>");
		value.featureSpecialization.add("value");
		value.valuePart = s.value.getEAttribute();
		t.body.add(value);
	}
	//Term.Term -> EAttribute : externalReference
	if (s.externalReference.getEAttribute() != null){
		var externalReference = new SysMLine!AttributeUsage;
		externalReference.featureNote.add(":>>");
		externalReference.featureSpecialization.add("externalReference");
		externalReference.valuePart = s.externalReference.getEAttribute();
		t.body.add(externalReference);
	}
	//Term.Term -> EReference : citedElement
	if (s.citedElement.getEReference() != null){
		var citedElement = new SysMLine!ItemUsage;
		citedElement.isReference = true;
		citedElement.featureNote.add(":>");
		citedElement.featureSpecialization.add("citedElement");
		citedElement.valuePart = s.citedElement.getEReference();
		t.body.add(citedElement);
	}
	//Term.Term -> EReference : abstractForm
	if (s.abstractForm.getEReference() != null){
		var abstractForm = new SysMLine!ItemUsage;
		abstractForm.isReference = true;
		abstractForm.featureNote.add(":>");
		abstractForm.featureSpecialization.add("abstractForm");
		abstractForm.valuePart = s.abstractForm.getEReference();
		t.body.add(abstractForm);
	}
	//Term.Term -> EReference : name
	if (s.name.getEReference() != null){
		var name = new SysMLine!ItemUsage;
		name.isReference = true;
		name.featureNote.add(":>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEReference();
		t.body.add(name);
	}
	//Term.Term -> EReference : description
	if (s.description.getEReference() != null){
		var description = new SysMLine!ItemUsage;
		description.isReference = true;
		description.featureNote.add(":>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEReference();
		t.body.add(description);
	}
	//Term.Term -> EReference : implementationConstraint
	if (s.implementationConstraint.getEReference() != null){
		var implementationConstraint = new SysMLine!ItemUsage;
		implementationConstraint.isReference = true;
		implementationConstraint.featureNote.add(":>");
		implementationConstraint.featureSpecialization.add("implementationConstraint");
		implementationConstraint.valuePart = s.implementationConstraint.getEReference();
		t.body.add(implementationConstraint);
	}
	//Term.Term -> EReference : note
	if (s.note.getEReference() != null){
		var note = new SysMLine!ItemUsage;
		note.isReference = true;
		note.featureNote.add(":>");
		note.featureSpecialization.add("note");
		note.valuePart = s.note.getEReference();
		t.body.add(note);
	}
	//Term.Term -> EReference : taggedValue
	if (s.taggedValue.getEReference() != null){
		var taggedValue = new SysMLine!ItemUsage;
		taggedValue.isReference = true;
		taggedValue.featureNote.add(":>");
		taggedValue.featureSpecialization.add("taggedValue");
		taggedValue.valuePart = s.taggedValue.getEReference();
		t.body.add(taggedValue);
	}
	//Term.Term -> EReference : category
	if (s.category.getEReference() != null){
		var category = new SysMLine!ItemUsage;
		category.isReference = true;
		category.featureNote.add(":>");
		category.featureSpecialization.add("category");
		category.valuePart = s.category.getEReference();
		t.body.add(category);
	}
	//Term.Term -> EReference : origin
	if (s.origin.getEReference() != null){
		var origin = new SysMLine!ItemUsage;
		origin.isReference = true;
		origin.featureNote.add(":>");
		origin.featureSpecialization.add("origin");
		origin.valuePart = s.origin.getEReference();
		t.body.add(origin);
	}
}


