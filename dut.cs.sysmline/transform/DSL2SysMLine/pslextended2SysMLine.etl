
import "DSL2SysMLine-util.eol";

pre{
	"------------------ ETL Start ------------------".println();
	var eObjectSequence = new Sequence;
	var KeyWords = Sequence{"about", "abstract", "accept", "action", "actor",
							"after", "alias", "all", "allocate", "allocation",
							"analysis", "and", "as", "assign", "assert",
							"assoc", "assume", "at", "attribute", "bind",
							"binding", "block", "by", "calc", "case",
							"comment", "concern", "connect", "connection", "constraint",
							"crosses", "decide", "def", "default", "defined",
							"dependency", "derived", "do", "doc", "else",
							"end", "entry", "enum", "event", "exhibit",
							"exit", "expose", "filter", "first", "flow",
							"for", "fork", "frame", "from", "hastype",
							"if", "implies", "import", "in", "include",
							"individual", "inout", "interface", "istype", "item",
							"join", "language", "loop", "merge", "message",
							"metadata", "nonunique", "not", "objective", "occurrence",
							"of", "or", "ordered", "out", "package",
							"parallel", "part", "perform", "port", "private",
							"protected", "public", "readonly", "redefines", "ref",
							"references", "render", "rendering", "rep", "require",
							"requirement", "return", "satisfy", "send", "snapshot",
							"specializes", "stakeholder", "state", "subject", "subsets",
							"succession", "terminate", "then", "timeslice", "to",
							"transition", "until", "use", "variant", "variation",
							"verification", "verify", "via", "view", "viewpoint",
							"when", "while", "xor", "value", "any"
	  						};
	init_pslextended();
	main_pslextended();
}

post{
	"------------------ ETL Over  ------------------".println();
}

operation main_pslextended(){
	var rootEcore = DSL!EObject.all.first();
	var rootSysMLine = new SysMLine!Namespace;
	var rootPackage = new SysMLine!Package;
	rootPackage.declaredName = "pslextended_model";
	rootSysMLine.body.add(rootPackage);
	var namespaceImport = new SysMLine!NamespaceImport;
	namespaceImport.declaredName = "pslextended";
	rootPackage.body.add(namespaceImport);
	rootEcore.addNodeTo(rootPackage);
}

operation init_pslextended(){
	//Person -> Instantiation
	var idPerson = 0;
	for (ePerson in DSL!EObject.all.select(s|s.isTypeOf(DSL!Person))){
		var ePersonTuple = Tuple{"key"=ePerson.type().name.asString()+"_"+(idPerson++).asString(),"value"= ePerson};
		eObjectSequence.add(ePersonTuple);
	}
}

@abstract
rule Base
	transform s : DSL!EObject
	to t : SysMLine!PartUsage{
	t.declaredName = s.getDeclaredName();
	t.featureNote.add(":");
	t.featureSpecialization.add(s.getfeatureSpecialization());
	if (s.eContainingFeature != null and s.eContainingFeature.name != null){
		t.featureNote.add(":>");
		t.featureSpecialization.add(s.eContainingFeature().name);
	}
}
	
@lazy
rule Person
	transform s : DSL!Person
	to t : SysMLine!PartUsage
	extends Base{
	//Person -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
}


