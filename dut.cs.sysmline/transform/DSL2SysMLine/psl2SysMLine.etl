import "DSL2SysMLine-util.eol";

pre{
	var eObjectSequence = new Sequence;
	var KeyWords = baseKeyWords();
	init_psl();
	main_psl();
}

post{
	("[ETL] psl2SysMLine >> " + SysMLine!Package.all.first().declaredName + ".sysmline").println();
}

operation main_psl(){
	var rootEcore = DSL!EObject.all.first();
	var rootSysMLine = new SysMLine!Namespace;
	var rootPackage = new SysMLine!Package;
	rootPackage.declaredName = "psl_model";
	rootSysMLine.body.add(rootPackage);
	rootPackage.addNamespaceImport("psl");
	rootPackage.addNamespaceImport("pslextended");
	rootEcore.addNodeTo(rootPackage);
}

operation init_psl(){
	//psl.Project -> Instantiation
	var idProject = 0;
	for (eProject in DSL!EObject.all.select(s|s.isTypeOf(DSL!Project))){
		var eProjectTuple = Tuple{"key"=eProject.type().name.asString()+"_"+(idProject++).asString(),"value"= eProject};
		eObjectSequence.add(eProjectTuple);
	}
	//psl.Task -> Instantiation
	var idTask = 0;
	for (eTask in DSL!EObject.all.select(s|s.isTypeOf(DSL!Task))){
		var eTaskTuple = Tuple{"key"=eTask.type().name.asString()+"_"+(idTask++).asString(),"value"= eTask};
		eObjectSequence.add(eTaskTuple);
	}
	//psl.Effort -> Instantiation
	var idEffort = 0;
	for (eEffort in DSL!EObject.all.select(s|s.isTypeOf(DSL!Effort))){
		var eEffortTuple = Tuple{"key"=eEffort.type().name.asString()+"_"+(idEffort++).asString(),"value"= eEffort};
		eObjectSequence.add(eEffortTuple);
	}
	//pslextended.Person -> Instantiation
	var idPerson = 0;
	for (ePerson in DSL!EObject.all.select(s|s.isTypeOf(DSL!Person))){
		var ePersonTuple = Tuple{"key"=ePerson.type().name.asString()+"_"+(idPerson++).asString(),"value"= ePerson};
		eObjectSequence.add(ePersonTuple);
	}
}

@abstract
rule Base
	transform s : DSL!EObject
	to t : SysMLine!ItemUsage{
	t.declaredName = s.getDeclaredName();
	t.featureNote.add(":");
	t.featureSpecialization.add(s.getfeatureSpecialization());
	if (s.eContainingFeature != null and s.eContainingFeature.name != null){
		t.featureNote.add(":>");
		t.featureSpecialization.add(s.eContainingFeature().name);
	}
}

// psl.ecore
@lazy
rule Project
	transform s : DSL!Project
	to t : SysMLine!ItemUsage
	extends Base{
	//Project.Project -> EAttribute : title
	if (s.title.getEAttribute() != null) t.addNewAttribute("title", s.title.getEAttribute());
	//Project.Project -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Project.Project -> EReference : tasks
	if (s.tasks.getEReference() != null) t.addNewReference("tasks", s.tasks.getEReference());
	//Project.Project -> EReference : people
	if (s.people.getEReference() != null) t.addNewReference("people", s.people.getEReference());
}

@lazy
rule Task
	transform s : DSL!Task
	to t : SysMLine!ItemUsage
	extends Base{
	//Task.Task -> EAttribute : title
	if (s.title.getEAttribute() != null) t.addNewAttribute("title", s.title.getEAttribute());
	//Task.Task -> EAttribute : start
	if (s.start.getEAttribute() != null) t.addNewAttribute("start", s.start.getEAttribute());
	//Task.Task -> EAttribute : duration
	if (s.duration.getEAttribute() != null) t.addNewAttribute("duration", s.duration.getEAttribute());
	//Task.Task -> EReference : effort
	if (s.effort.getEReference() != null) t.addNewReference("effort", s.effort.getEReference());
}

@lazy
rule Effort
	transform s : DSL!Effort
	to t : SysMLine!ItemUsage
	extends Base{
	//Effort.Effort -> EAttribute : percentage
	if (s.percentage.getEAttribute() != null) t.addNewAttribute("percentage", s.percentage.getEAttribute());
	//Effort.Effort -> EReference : person
	if (s.person.getEReference() != null) t.addNewReference("person", s.person.getEReference());
}


// pslextended.ecore
@lazy
rule Person
	transform s : DSL!Person
	to t : SysMLine!ItemUsage
	extends Base{
	//Person.Person -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
}


