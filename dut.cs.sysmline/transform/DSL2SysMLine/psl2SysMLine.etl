import "DSL2SysMLine-util.eol";

pre{
	var eObjectSequence = new Sequence;
	var KeyWords = baseKeyWords();
	var i = 0;
	eObjectSequence.init_psl();
	main_psl();
}

post{
	("[ETL] psl2SysMLine >> " + SysMLine!Package.all.first().declaredName + ".sysmline").println();
}

operation main_psl(){
	var rootEcore = DSL!EObject.all.first();
	var rootSysMLine = new SysMLine!Namespace;
	var rootPackage = new SysMLine!Package;
	rootPackage.declaredName = "psl_model";
	rootSysMLine.body.add(rootPackage);
	rootPackage.addNamespaceImport("psl");
	rootEcore.addNodeTo(rootPackage);
}

operation Sequence init_psl(){
	//psl.Project -> Instantiation
	var idProject = 0;
	for (Project_ in DSL!EObject.all.select(s|s.isTypeOf(DSL!Project))){
		var Project_Tuple = Tuple{"key"="Project_"+(idProject++).asString(),"value"= Project_};
		self.add(Project_Tuple);
	}
	//psl.Task -> Instantiation
	var idTask = 0;
	for (Task_ in DSL!EObject.all.select(s|s.isTypeOf(DSL!Task))){
		var Task_Tuple = Tuple{"key"="Task_"+(idTask++).asString(),"value"= Task_};
		self.add(Task_Tuple);
	}
	//psl.Person -> Instantiation
	var idPerson = 0;
	for (Person_ in DSL!EObject.all.select(s|s.isTypeOf(DSL!Person))){
		var Person_Tuple = Tuple{"key"="Person_"+(idPerson++).asString(),"value"= Person_};
		self.add(Person_Tuple);
	}
	//psl.Effort -> Instantiation
	var idEffort = 0;
	for (Effort_ in DSL!EObject.all.select(s|s.isTypeOf(DSL!Effort))){
		var Effort_Tuple = Tuple{"key"="Effort_"+(idEffort++).asString(),"value"= Effort_};
		self.add(Effort_Tuple);
	}
}

@abstract
rule Base
	transform s : DSL!EObject
	to t : SysMLine!PartUsage{
	t.declaredName = s.getDeclaredName();
	t.featureNote.add(":");
	t.featureSpecialization.add(s.getfeatureSpecialization());
	if (s.eContainingFeature != null and s.eContainingFeature.name != null){
		t.featureNote.add(":>");
		t.featureSpecialization.add(s.eContainingFeature().name);
	}
}

// psl.ecore
@lazy
rule Project
	transform s : DSL!Project //psl.Project
	to t : SysMLine!PartUsage
	extends Base{
	//Project.title -> EAttribute : title
	if (s.title.getEAttribute() != null) t.addNewAttribute("title".clearKeyWord(), s.title.getEAttribute());
	//Project.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description".clearKeyWord(), s.description.getEAttribute());
	//Project.tasks -> EReference : tasks
	if (s.tasks.getEReference() != null) t.addNewReference("tasks".clearKeyWord(), s.tasks.getEReference());
	//Project.people -> EReference : people
	if (s.people.getEReference() != null) t.addNewReference("people".clearKeyWord(), s.people.getEReference());
}

@lazy
rule Task
	transform s : DSL!Task //psl.Task
	to t : SysMLine!PartUsage
	extends Base{
	//Task.title -> EAttribute : title
	if (s.title.getEAttribute() != null) t.addNewAttribute("title".clearKeyWord(), s.title.getEAttribute());
	//Task.start -> EAttribute : start
	if (s.start.getEAttribute() != null) t.addNewAttribute("start".clearKeyWord(), s.start.getEAttribute());
	//Task.duration -> EAttribute : duration
	if (s.duration.getEAttribute() != null) t.addNewAttribute("duration".clearKeyWord(), s.duration.getEAttribute());
	//Task.effort -> EReference : effort
	if (s.effort.getEReference() != null) t.addNewReference("effort".clearKeyWord(), s.effort.getEReference());
}

@lazy
rule Person
	transform s : DSL!Person //psl.Person
	to t : SysMLine!PartUsage
	extends Base{
	//Person.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name".clearKeyWord(), s.name.getEAttribute());
}

@lazy
rule Effort
	transform s : DSL!Effort //psl.Effort
	to t : SysMLine!PartUsage
	extends Base{
	//Effort.percentage -> EAttribute : percentage
	if (s.percentage.getEAttribute() != null) t.addNewAttribute("percentage".clearKeyWord(), s.percentage.getEAttribute());
	//Effort.status -> EAttribute : status
	if (s.status.getEEnumLiteral() != null) t.addNewEnumLiteral("status".clearKeyWord(), s.status.getEEnumLiteral());
	//Effort.person -> EReference : person
	if (s.person.getEReference() != null) t.addNewReference("person".clearKeyWord(), s.person.getEReference());
}


