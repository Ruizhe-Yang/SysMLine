import "DSL2SysMLine-util.eol";

pre{
	var eObjectSequence = new Sequence;
	var KeyWords = baseKeyWords();
	init_capellamodeller();
	main_capellamodeller();
}

post{
	("[ETL] capellamodeller2SysMLine >> " + SysMLine!Package.all.first().declaredName + ".sysmline").println();
}

operation main_capellamodeller(){
	var rootEcore = DSL!EObject.all.first();
	var rootSysMLine = new SysMLine!Namespace;
	var rootPackage = new SysMLine!Package;
	rootPackage.declaredName = "capellamodeller_model";
	rootSysMLine.body.add(rootPackage);
	rootPackage.addNamespaceImport("capellamodeller");
	rootPackage.addNamespaceImport("capellacore");
	rootPackage.addNamespaceImport("modellingcore");
	rootPackage.addNamespaceImport("emde");
	rootPackage.addNamespaceImport("oa");
	rootPackage.addNamespaceImport("ctx");
	rootPackage.addNamespaceImport("la");
	rootPackage.addNamespaceImport("pa");
	rootPackage.addNamespaceImport("deployment");
	rootPackage.addNamespaceImport("epbs");
	rootPackage.addNamespaceImport("sharedmodel");
	rootEcore.addNodeTo(rootPackage);
}

operation init_capellamodeller(){
	//Project -> Instantiation
	var idProject = 0;
	for (eProject in DSL!EObject.all.select(s|s.isTypeOf(DSL!Project))){
		var eProjectTuple = Tuple{"key"=eProject.type().name.asString()+"_"+(idProject++).asString(),"value"= eProject};
		eObjectSequence.add(eProjectTuple);
	}
	//Folder -> Instantiation
	var idFolder = 0;
	for (eFolder in DSL!EObject.all.select(s|s.isTypeOf(DSL!Folder))){
		var eFolderTuple = Tuple{"key"=eFolder.type().name.asString()+"_"+(idFolder++).asString(),"value"= eFolder};
		eObjectSequence.add(eFolderTuple);
	}
	//ModelRoot -> Instantiation
	var idModelRoot = 0;
	for (eModelRoot in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModelRoot))){
		var eModelRootTuple = Tuple{"key"=eModelRoot.type().name.asString()+"_"+(idModelRoot++).asString(),"value"= eModelRoot};
		eObjectSequence.add(eModelRootTuple);
	}
	//SystemEngineering -> Instantiation
	var idSystemEngineering = 0;
	for (eSystemEngineering in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemEngineering))){
		var eSystemEngineeringTuple = Tuple{"key"=eSystemEngineering.type().name.asString()+"_"+(idSystemEngineering++).asString(),"value"= eSystemEngineering};
		eObjectSequence.add(eSystemEngineeringTuple);
	}
	//SystemEngineeringPkg -> Instantiation
	var idSystemEngineeringPkg = 0;
	for (eSystemEngineeringPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemEngineeringPkg))){
		var eSystemEngineeringPkgTuple = Tuple{"key"=eSystemEngineeringPkg.type().name.asString()+"_"+(idSystemEngineeringPkg++).asString(),"value"= eSystemEngineeringPkg};
		eObjectSequence.add(eSystemEngineeringPkgTuple);
	}
	//Library -> Instantiation
	var idLibrary = 0;
	for (eLibrary in DSL!EObject.all.select(s|s.isTypeOf(DSL!Library))){
		var eLibraryTuple = Tuple{"key"=eLibrary.type().name.asString()+"_"+(idLibrary++).asString(),"value"= eLibrary};
		eObjectSequence.add(eLibraryTuple);
	}
	//CapellaElement -> Instantiation
	var idCapellaElement = 0;
	for (eCapellaElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapellaElement))){
		var eCapellaElementTuple = Tuple{"key"=eCapellaElement.type().name.asString()+"_"+(idCapellaElement++).asString(),"value"= eCapellaElement};
		eObjectSequence.add(eCapellaElementTuple);
	}
	//NamedElement -> Instantiation
	var idNamedElement = 0;
	for (eNamedElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!NamedElement))){
		var eNamedElementTuple = Tuple{"key"=eNamedElement.type().name.asString()+"_"+(idNamedElement++).asString(),"value"= eNamedElement};
		eObjectSequence.add(eNamedElementTuple);
	}
	//Relationship -> Instantiation
	var idRelationship = 0;
	for (eRelationship in DSL!EObject.all.select(s|s.isTypeOf(DSL!Relationship))){
		var eRelationshipTuple = Tuple{"key"=eRelationship.type().name.asString()+"_"+(idRelationship++).asString(),"value"= eRelationship};
		eObjectSequence.add(eRelationshipTuple);
	}
	//Namespace -> Instantiation
	var idNamespace = 0;
	for (eNamespace in DSL!EObject.all.select(s|s.isTypeOf(DSL!Namespace))){
		var eNamespaceTuple = Tuple{"key"=eNamespace.type().name.asString()+"_"+(idNamespace++).asString(),"value"= eNamespace};
		eObjectSequence.add(eNamespaceTuple);
	}
	//NamedRelationship -> Instantiation
	var idNamedRelationship = 0;
	for (eNamedRelationship in DSL!EObject.all.select(s|s.isTypeOf(DSL!NamedRelationship))){
		var eNamedRelationshipTuple = Tuple{"key"=eNamedRelationship.type().name.asString()+"_"+(idNamedRelationship++).asString(),"value"= eNamedRelationship};
		eObjectSequence.add(eNamedRelationshipTuple);
	}
	//Structure -> Instantiation
	var idStructure = 0;
	for (eStructure in DSL!EObject.all.select(s|s.isTypeOf(DSL!Structure))){
		var eStructureTuple = Tuple{"key"=eStructure.type().name.asString()+"_"+(idStructure++).asString(),"value"= eStructure};
		eObjectSequence.add(eStructureTuple);
	}
	//AbstractModellingStructure -> Instantiation
	var idAbstractModellingStructure = 0;
	for (eAbstractModellingStructure in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractModellingStructure))){
		var eAbstractModellingStructureTuple = Tuple{"key"=eAbstractModellingStructure.type().name.asString()+"_"+(idAbstractModellingStructure++).asString(),"value"= eAbstractModellingStructure};
		eObjectSequence.add(eAbstractModellingStructureTuple);
	}
	//ModellingBlock -> Instantiation
	var idModellingBlock = 0;
	for (eModellingBlock in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModellingBlock))){
		var eModellingBlockTuple = Tuple{"key"=eModellingBlock.type().name.asString()+"_"+(idModellingBlock++).asString(),"value"= eModellingBlock};
		eObjectSequence.add(eModellingBlockTuple);
	}
	//ModellingArchitecture -> Instantiation
	var idModellingArchitecture = 0;
	for (eModellingArchitecture in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModellingArchitecture))){
		var eModellingArchitectureTuple = Tuple{"key"=eModellingArchitecture.type().name.asString()+"_"+(idModellingArchitecture++).asString(),"value"= eModellingArchitecture};
		eObjectSequence.add(eModellingArchitectureTuple);
	}
	//ModellingArchitecturePkg -> Instantiation
	var idModellingArchitecturePkg = 0;
	for (eModellingArchitecturePkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModellingArchitecturePkg))){
		var eModellingArchitecturePkgTuple = Tuple{"key"=eModellingArchitecturePkg.type().name.asString()+"_"+(idModellingArchitecturePkg++).asString(),"value"= eModellingArchitecturePkg};
		eObjectSequence.add(eModellingArchitecturePkgTuple);
	}
	//Type -> Instantiation
	var idType = 0;
	for (eType in DSL!EObject.all.select(s|s.isTypeOf(DSL!Type))){
		var eTypeTuple = Tuple{"key"=eType.type().name.asString()+"_"+(idType++).asString(),"value"= eType};
		eObjectSequence.add(eTypeTuple);
	}
	//TypedElement -> Instantiation
	var idTypedElement = 0;
	for (eTypedElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!TypedElement))){
		var eTypedElementTuple = Tuple{"key"=eTypedElement.type().name.asString()+"_"+(idTypedElement++).asString(),"value"= eTypedElement};
		eObjectSequence.add(eTypedElementTuple);
	}
	//Trace -> Instantiation
	var idTrace = 0;
	for (eTrace in DSL!EObject.all.select(s|s.isTypeOf(DSL!Trace))){
		var eTraceTuple = Tuple{"key"=eTrace.type().name.asString()+"_"+(idTrace++).asString(),"value"= eTrace};
		eObjectSequence.add(eTraceTuple);
	}
	//AbstractAnnotation -> Instantiation
	var idAbstractAnnotation = 0;
	for (eAbstractAnnotation in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractAnnotation))){
		var eAbstractAnnotationTuple = Tuple{"key"=eAbstractAnnotation.type().name.asString()+"_"+(idAbstractAnnotation++).asString(),"value"= eAbstractAnnotation};
		eObjectSequence.add(eAbstractAnnotationTuple);
	}
	//NamingRule -> Instantiation
	var idNamingRule = 0;
	for (eNamingRule in DSL!EObject.all.select(s|s.isTypeOf(DSL!NamingRule))){
		var eNamingRuleTuple = Tuple{"key"=eNamingRule.type().name.asString()+"_"+(idNamingRule++).asString(),"value"= eNamingRule};
		eObjectSequence.add(eNamingRuleTuple);
	}
	//Constraint -> Instantiation
	var idConstraint = 0;
	for (eConstraint in DSL!EObject.all.select(s|s.isTypeOf(DSL!Constraint))){
		var eConstraintTuple = Tuple{"key"=eConstraint.type().name.asString()+"_"+(idConstraint++).asString(),"value"= eConstraint};
		eObjectSequence.add(eConstraintTuple);
	}
	//KeyValue -> Instantiation
	var idKeyValue = 0;
	for (eKeyValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!KeyValue))){
		var eKeyValueTuple = Tuple{"key"=eKeyValue.type().name.asString()+"_"+(idKeyValue++).asString(),"value"= eKeyValue};
		eObjectSequence.add(eKeyValueTuple);
	}
	//ReuseLink -> Instantiation
	var idReuseLink = 0;
	for (eReuseLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!ReuseLink))){
		var eReuseLinkTuple = Tuple{"key"=eReuseLink.type().name.asString()+"_"+(idReuseLink++).asString(),"value"= eReuseLink};
		eObjectSequence.add(eReuseLinkTuple);
	}
	//ReuseableStructure -> Instantiation
	var idReuseableStructure = 0;
	for (eReuseableStructure in DSL!EObject.all.select(s|s.isTypeOf(DSL!ReuseableStructure))){
		var eReuseableStructureTuple = Tuple{"key"=eReuseableStructure.type().name.asString()+"_"+(idReuseableStructure++).asString(),"value"= eReuseableStructure};
		eObjectSequence.add(eReuseableStructureTuple);
	}
	//ReuserStructure -> Instantiation
	var idReuserStructure = 0;
	for (eReuserStructure in DSL!EObject.all.select(s|s.isTypeOf(DSL!ReuserStructure))){
		var eReuserStructureTuple = Tuple{"key"=eReuserStructure.type().name.asString()+"_"+(idReuserStructure++).asString(),"value"= eReuserStructure};
		eObjectSequence.add(eReuserStructureTuple);
	}
	//GeneralizableElement -> Instantiation
	var idGeneralizableElement = 0;
	for (eGeneralizableElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!GeneralizableElement))){
		var eGeneralizableElementTuple = Tuple{"key"=eGeneralizableElement.type().name.asString()+"_"+(idGeneralizableElement++).asString(),"value"= eGeneralizableElement};
		eObjectSequence.add(eGeneralizableElementTuple);
	}
	//Classifier -> Instantiation
	var idClassifier = 0;
	for (eClassifier in DSL!EObject.all.select(s|s.isTypeOf(DSL!Classifier))){
		var eClassifierTuple = Tuple{"key"=eClassifier.type().name.asString()+"_"+(idClassifier++).asString(),"value"= eClassifier};
		eObjectSequence.add(eClassifierTuple);
	}
	//GeneralClass -> Instantiation
	var idGeneralClass = 0;
	for (eGeneralClass in DSL!EObject.all.select(s|s.isTypeOf(DSL!GeneralClass))){
		var eGeneralClassTuple = Tuple{"key"=eGeneralClass.type().name.asString()+"_"+(idGeneralClass++).asString(),"value"= eGeneralClass};
		eObjectSequence.add(eGeneralClassTuple);
	}
	//Generalization -> Instantiation
	var idGeneralization = 0;
	for (eGeneralization in DSL!EObject.all.select(s|s.isTypeOf(DSL!Generalization))){
		var eGeneralizationTuple = Tuple{"key"=eGeneralization.type().name.asString()+"_"+(idGeneralization++).asString(),"value"= eGeneralization};
		eObjectSequence.add(eGeneralizationTuple);
	}
	//Feature -> Instantiation
	var idFeature = 0;
	for (eFeature in DSL!EObject.all.select(s|s.isTypeOf(DSL!Feature))){
		var eFeatureTuple = Tuple{"key"=eFeature.type().name.asString()+"_"+(idFeature++).asString(),"value"= eFeature};
		eObjectSequence.add(eFeatureTuple);
	}
	//AbstractExchangeItemPkg -> Instantiation
	var idAbstractExchangeItemPkg = 0;
	for (eAbstractExchangeItemPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractExchangeItemPkg))){
		var eAbstractExchangeItemPkgTuple = Tuple{"key"=eAbstractExchangeItemPkg.type().name.asString()+"_"+(idAbstractExchangeItemPkg++).asString(),"value"= eAbstractExchangeItemPkg};
		eObjectSequence.add(eAbstractExchangeItemPkgTuple);
	}
	//Allocation -> Instantiation
	var idAllocation = 0;
	for (eAllocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!Allocation))){
		var eAllocationTuple = Tuple{"key"=eAllocation.type().name.asString()+"_"+(idAllocation++).asString(),"value"= eAllocation};
		eObjectSequence.add(eAllocationTuple);
	}
	//Involvement -> Instantiation
	var idInvolvement = 0;
	for (eInvolvement in DSL!EObject.all.select(s|s.isTypeOf(DSL!Involvement))){
		var eInvolvementTuple = Tuple{"key"=eInvolvement.type().name.asString()+"_"+(idInvolvement++).asString(),"value"= eInvolvement};
		eObjectSequence.add(eInvolvementTuple);
	}
	//InvolverElement -> Instantiation
	var idInvolverElement = 0;
	for (eInvolverElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!InvolverElement))){
		var eInvolverElementTuple = Tuple{"key"=eInvolverElement.type().name.asString()+"_"+(idInvolverElement++).asString(),"value"= eInvolverElement};
		eObjectSequence.add(eInvolverElementTuple);
	}
	//InvolvedElement -> Instantiation
	var idInvolvedElement = 0;
	for (eInvolvedElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!InvolvedElement))){
		var eInvolvedElementTuple = Tuple{"key"=eInvolvedElement.type().name.asString()+"_"+(idInvolvedElement++).asString(),"value"= eInvolvedElement};
		eObjectSequence.add(eInvolvedElementTuple);
	}
	//AbstractPropertyValue -> Instantiation
	var idAbstractPropertyValue = 0;
	for (eAbstractPropertyValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractPropertyValue))){
		var eAbstractPropertyValueTuple = Tuple{"key"=eAbstractPropertyValue.type().name.asString()+"_"+(idAbstractPropertyValue++).asString(),"value"= eAbstractPropertyValue};
		eObjectSequence.add(eAbstractPropertyValueTuple);
	}
	//StringPropertyValue -> Instantiation
	var idStringPropertyValue = 0;
	for (eStringPropertyValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!StringPropertyValue))){
		var eStringPropertyValueTuple = Tuple{"key"=eStringPropertyValue.type().name.asString()+"_"+(idStringPropertyValue++).asString(),"value"= eStringPropertyValue};
		eObjectSequence.add(eStringPropertyValueTuple);
	}
	//IntegerPropertyValue -> Instantiation
	var idIntegerPropertyValue = 0;
	for (eIntegerPropertyValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!IntegerPropertyValue))){
		var eIntegerPropertyValueTuple = Tuple{"key"=eIntegerPropertyValue.type().name.asString()+"_"+(idIntegerPropertyValue++).asString(),"value"= eIntegerPropertyValue};
		eObjectSequence.add(eIntegerPropertyValueTuple);
	}
	//BooleanPropertyValue -> Instantiation
	var idBooleanPropertyValue = 0;
	for (eBooleanPropertyValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!BooleanPropertyValue))){
		var eBooleanPropertyValueTuple = Tuple{"key"=eBooleanPropertyValue.type().name.asString()+"_"+(idBooleanPropertyValue++).asString(),"value"= eBooleanPropertyValue};
		eObjectSequence.add(eBooleanPropertyValueTuple);
	}
	//FloatPropertyValue -> Instantiation
	var idFloatPropertyValue = 0;
	for (eFloatPropertyValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!FloatPropertyValue))){
		var eFloatPropertyValueTuple = Tuple{"key"=eFloatPropertyValue.type().name.asString()+"_"+(idFloatPropertyValue++).asString(),"value"= eFloatPropertyValue};
		eObjectSequence.add(eFloatPropertyValueTuple);
	}
	//EnumerationPropertyValue -> Instantiation
	var idEnumerationPropertyValue = 0;
	for (eEnumerationPropertyValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!EnumerationPropertyValue))){
		var eEnumerationPropertyValueTuple = Tuple{"key"=eEnumerationPropertyValue.type().name.asString()+"_"+(idEnumerationPropertyValue++).asString(),"value"= eEnumerationPropertyValue};
		eObjectSequence.add(eEnumerationPropertyValueTuple);
	}
	//EnumerationPropertyType -> Instantiation
	var idEnumerationPropertyType = 0;
	for (eEnumerationPropertyType in DSL!EObject.all.select(s|s.isTypeOf(DSL!EnumerationPropertyType))){
		var eEnumerationPropertyTypeTuple = Tuple{"key"=eEnumerationPropertyType.type().name.asString()+"_"+(idEnumerationPropertyType++).asString(),"value"= eEnumerationPropertyType};
		eObjectSequence.add(eEnumerationPropertyTypeTuple);
	}
	//EnumerationPropertyLiteral -> Instantiation
	var idEnumerationPropertyLiteral = 0;
	for (eEnumerationPropertyLiteral in DSL!EObject.all.select(s|s.isTypeOf(DSL!EnumerationPropertyLiteral))){
		var eEnumerationPropertyLiteralTuple = Tuple{"key"=eEnumerationPropertyLiteral.type().name.asString()+"_"+(idEnumerationPropertyLiteral++).asString(),"value"= eEnumerationPropertyLiteral};
		eObjectSequence.add(eEnumerationPropertyLiteralTuple);
	}
	//PropertyValueGroup -> Instantiation
	var idPropertyValueGroup = 0;
	for (ePropertyValueGroup in DSL!EObject.all.select(s|s.isTypeOf(DSL!PropertyValueGroup))){
		var ePropertyValueGroupTuple = Tuple{"key"=ePropertyValueGroup.type().name.asString()+"_"+(idPropertyValueGroup++).asString(),"value"= ePropertyValueGroup};
		eObjectSequence.add(ePropertyValueGroupTuple);
	}
	//PropertyValuePkg -> Instantiation
	var idPropertyValuePkg = 0;
	for (ePropertyValuePkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!PropertyValuePkg))){
		var ePropertyValuePkgTuple = Tuple{"key"=ePropertyValuePkg.type().name.asString()+"_"+(idPropertyValuePkg++).asString(),"value"= ePropertyValuePkg};
		eObjectSequence.add(ePropertyValuePkgTuple);
	}
	//AbstractDependenciesPkg -> Instantiation
	var idAbstractDependenciesPkg = 0;
	for (eAbstractDependenciesPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractDependenciesPkg))){
		var eAbstractDependenciesPkgTuple = Tuple{"key"=eAbstractDependenciesPkg.type().name.asString()+"_"+(idAbstractDependenciesPkg++).asString(),"value"= eAbstractDependenciesPkg};
		eObjectSequence.add(eAbstractDependenciesPkgTuple);
	}
	//ModelElement -> Instantiation
	var idModelElement = 0;
	for (eModelElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModelElement))){
		var eModelElementTuple = Tuple{"key"=eModelElement.type().name.asString()+"_"+(idModelElement++).asString(),"value"= eModelElement};
		eObjectSequence.add(eModelElementTuple);
	}
	//AbstractRelationship -> Instantiation
	var idAbstractRelationship = 0;
	for (eAbstractRelationship in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractRelationship))){
		var eAbstractRelationshipTuple = Tuple{"key"=eAbstractRelationship.type().name.asString()+"_"+(idAbstractRelationship++).asString(),"value"= eAbstractRelationship};
		eObjectSequence.add(eAbstractRelationshipTuple);
	}
	//AbstractNamedElement -> Instantiation
	var idAbstractNamedElement = 0;
	for (eAbstractNamedElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractNamedElement))){
		var eAbstractNamedElementTuple = Tuple{"key"=eAbstractNamedElement.type().name.asString()+"_"+(idAbstractNamedElement++).asString(),"value"= eAbstractNamedElement};
		eObjectSequence.add(eAbstractNamedElementTuple);
	}
	//InformationsExchanger -> Instantiation
	var idInformationsExchanger = 0;
	for (eInformationsExchanger in DSL!EObject.all.select(s|s.isTypeOf(DSL!InformationsExchanger))){
		var eInformationsExchangerTuple = Tuple{"key"=eInformationsExchanger.type().name.asString()+"_"+(idInformationsExchanger++).asString(),"value"= eInformationsExchanger};
		eObjectSequence.add(eInformationsExchangerTuple);
	}
	//TraceableElement -> Instantiation
	var idTraceableElement = 0;
	for (eTraceableElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!TraceableElement))){
		var eTraceableElementTuple = Tuple{"key"=eTraceableElement.type().name.asString()+"_"+(idTraceableElement++).asString(),"value"= eTraceableElement};
		eObjectSequence.add(eTraceableElementTuple);
	}
	//FinalizableElement -> Instantiation
	var idFinalizableElement = 0;
	for (eFinalizableElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!FinalizableElement))){
		var eFinalizableElementTuple = Tuple{"key"=eFinalizableElement.type().name.asString()+"_"+(idFinalizableElement++).asString(),"value"= eFinalizableElement};
		eObjectSequence.add(eFinalizableElementTuple);
	}
	//PublishableElement -> Instantiation
	var idPublishableElement = 0;
	for (ePublishableElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!PublishableElement))){
		var ePublishableElementTuple = Tuple{"key"=ePublishableElement.type().name.asString()+"_"+(idPublishableElement++).asString(),"value"= ePublishableElement};
		eObjectSequence.add(ePublishableElementTuple);
	}
	//AbstractType -> Instantiation
	var idAbstractType = 0;
	for (eAbstractType in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractType))){
		var eAbstractTypeTuple = Tuple{"key"=eAbstractType.type().name.asString()+"_"+(idAbstractType++).asString(),"value"= eAbstractType};
		eObjectSequence.add(eAbstractTypeTuple);
	}
	//AbstractTypedElement -> Instantiation
	var idAbstractTypedElement = 0;
	for (eAbstractTypedElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractTypedElement))){
		var eAbstractTypedElementTuple = Tuple{"key"=eAbstractTypedElement.type().name.asString()+"_"+(idAbstractTypedElement++).asString(),"value"= eAbstractTypedElement};
		eObjectSequence.add(eAbstractTypedElementTuple);
	}
	//AbstractTrace -> Instantiation
	var idAbstractTrace = 0;
	for (eAbstractTrace in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractTrace))){
		var eAbstractTraceTuple = Tuple{"key"=eAbstractTrace.type().name.asString()+"_"+(idAbstractTrace++).asString(),"value"= eAbstractTrace};
		eObjectSequence.add(eAbstractTraceTuple);
	}
	//AbstractConstraint -> Instantiation
	var idAbstractConstraint = 0;
	for (eAbstractConstraint in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractConstraint))){
		var eAbstractConstraintTuple = Tuple{"key"=eAbstractConstraint.type().name.asString()+"_"+(idAbstractConstraint++).asString(),"value"= eAbstractConstraint};
		eObjectSequence.add(eAbstractConstraintTuple);
	}
	//ValueSpecification -> Instantiation
	var idValueSpecification = 0;
	for (eValueSpecification in DSL!EObject.all.select(s|s.isTypeOf(DSL!ValueSpecification))){
		var eValueSpecificationTuple = Tuple{"key"=eValueSpecification.type().name.asString()+"_"+(idValueSpecification++).asString(),"value"= eValueSpecification};
		eObjectSequence.add(eValueSpecificationTuple);
	}
	//AbstractParameter -> Instantiation
	var idAbstractParameter = 0;
	for (eAbstractParameter in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractParameter))){
		var eAbstractParameterTuple = Tuple{"key"=eAbstractParameter.type().name.asString()+"_"+(idAbstractParameter++).asString(),"value"= eAbstractParameter};
		eObjectSequence.add(eAbstractParameterTuple);
	}
	//AbstractParameterSet -> Instantiation
	var idAbstractParameterSet = 0;
	for (eAbstractParameterSet in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractParameterSet))){
		var eAbstractParameterSetTuple = Tuple{"key"=eAbstractParameterSet.type().name.asString()+"_"+(idAbstractParameterSet++).asString(),"value"= eAbstractParameterSet};
		eObjectSequence.add(eAbstractParameterSetTuple);
	}
	//AbstractInformationFlow -> Instantiation
	var idAbstractInformationFlow = 0;
	for (eAbstractInformationFlow in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractInformationFlow))){
		var eAbstractInformationFlowTuple = Tuple{"key"=eAbstractInformationFlow.type().name.asString()+"_"+(idAbstractInformationFlow++).asString(),"value"= eAbstractInformationFlow};
		eObjectSequence.add(eAbstractInformationFlowTuple);
	}
	//AbstractExchangeItem -> Instantiation
	var idAbstractExchangeItem = 0;
	for (eAbstractExchangeItem in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractExchangeItem))){
		var eAbstractExchangeItemTuple = Tuple{"key"=eAbstractExchangeItem.type().name.asString()+"_"+(idAbstractExchangeItem++).asString(),"value"= eAbstractExchangeItem};
		eObjectSequence.add(eAbstractExchangeItemTuple);
	}
	//IState -> Instantiation
	var idIState = 0;
	for (eIState in DSL!EObject.all.select(s|s.isTypeOf(DSL!IState))){
		var eIStateTuple = Tuple{"key"=eIState.type().name.asString()+"_"+(idIState++).asString(),"value"= eIState};
		eObjectSequence.add(eIStateTuple);
	}
	//Element -> Instantiation
	var idElement = 0;
	for (eElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!Element))){
		var eElementTuple = Tuple{"key"=eElement.type().name.asString()+"_"+(idElement++).asString(),"value"= eElement};
		eObjectSequence.add(eElementTuple);
	}
	//ExtensibleElement -> Instantiation
	var idExtensibleElement = 0;
	for (eExtensibleElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExtensibleElement))){
		var eExtensibleElementTuple = Tuple{"key"=eExtensibleElement.type().name.asString()+"_"+(idExtensibleElement++).asString(),"value"= eExtensibleElement};
		eObjectSequence.add(eExtensibleElementTuple);
	}
	//ElementExtension -> Instantiation
	var idElementExtension = 0;
	for (eElementExtension in DSL!EObject.all.select(s|s.isTypeOf(DSL!ElementExtension))){
		var eElementExtensionTuple = Tuple{"key"=eElementExtension.type().name.asString()+"_"+(idElementExtension++).asString(),"value"= eElementExtension};
		eObjectSequence.add(eElementExtensionTuple);
	}
	//OperationalAnalysis -> Instantiation
	var idOperationalAnalysis = 0;
	for (eOperationalAnalysis in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalAnalysis))){
		var eOperationalAnalysisTuple = Tuple{"key"=eOperationalAnalysis.type().name.asString()+"_"+(idOperationalAnalysis++).asString(),"value"= eOperationalAnalysis};
		eObjectSequence.add(eOperationalAnalysisTuple);
	}
	//OperationalScenario -> Instantiation
	var idOperationalScenario = 0;
	for (eOperationalScenario in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalScenario))){
		var eOperationalScenarioTuple = Tuple{"key"=eOperationalScenario.type().name.asString()+"_"+(idOperationalScenario++).asString(),"value"= eOperationalScenario};
		eObjectSequence.add(eOperationalScenarioTuple);
	}
	//OperationalActivityPkg -> Instantiation
	var idOperationalActivityPkg = 0;
	for (eOperationalActivityPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalActivityPkg))){
		var eOperationalActivityPkgTuple = Tuple{"key"=eOperationalActivityPkg.type().name.asString()+"_"+(idOperationalActivityPkg++).asString(),"value"= eOperationalActivityPkg};
		eObjectSequence.add(eOperationalActivityPkgTuple);
	}
	//OperationalActivity -> Instantiation
	var idOperationalActivity = 0;
	for (eOperationalActivity in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalActivity))){
		var eOperationalActivityTuple = Tuple{"key"=eOperationalActivity.type().name.asString()+"_"+(idOperationalActivity++).asString(),"value"= eOperationalActivity};
		eObjectSequence.add(eOperationalActivityTuple);
	}
	//OperationalProcess -> Instantiation
	var idOperationalProcess = 0;
	for (eOperationalProcess in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalProcess))){
		var eOperationalProcessTuple = Tuple{"key"=eOperationalProcess.type().name.asString()+"_"+(idOperationalProcess++).asString(),"value"= eOperationalProcess};
		eObjectSequence.add(eOperationalProcessTuple);
	}
	//Swimlane -> Instantiation
	var idSwimlane = 0;
	for (eSwimlane in DSL!EObject.all.select(s|s.isTypeOf(DSL!Swimlane))){
		var eSwimlaneTuple = Tuple{"key"=eSwimlane.type().name.asString()+"_"+(idSwimlane++).asString(),"value"= eSwimlane};
		eObjectSequence.add(eSwimlaneTuple);
	}
	//OperationalCapabilityPkg -> Instantiation
	var idOperationalCapabilityPkg = 0;
	for (eOperationalCapabilityPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalCapabilityPkg))){
		var eOperationalCapabilityPkgTuple = Tuple{"key"=eOperationalCapabilityPkg.type().name.asString()+"_"+(idOperationalCapabilityPkg++).asString(),"value"= eOperationalCapabilityPkg};
		eObjectSequence.add(eOperationalCapabilityPkgTuple);
	}
	//OperationalCapability -> Instantiation
	var idOperationalCapability = 0;
	for (eOperationalCapability in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalCapability))){
		var eOperationalCapabilityTuple = Tuple{"key"=eOperationalCapability.type().name.asString()+"_"+(idOperationalCapability++).asString(),"value"= eOperationalCapability};
		eObjectSequence.add(eOperationalCapabilityTuple);
	}
	//ActivityAllocation -> Instantiation
	var idActivityAllocation = 0;
	for (eActivityAllocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!ActivityAllocation))){
		var eActivityAllocationTuple = Tuple{"key"=eActivityAllocation.type().name.asString()+"_"+(idActivityAllocation++).asString(),"value"= eActivityAllocation};
		eObjectSequence.add(eActivityAllocationTuple);
	}
	//RolePkg -> Instantiation
	var idRolePkg = 0;
	for (eRolePkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!RolePkg))){
		var eRolePkgTuple = Tuple{"key"=eRolePkg.type().name.asString()+"_"+(idRolePkg++).asString(),"value"= eRolePkg};
		eObjectSequence.add(eRolePkgTuple);
	}
	//Role -> Instantiation
	var idRole = 0;
	for (eRole in DSL!EObject.all.select(s|s.isTypeOf(DSL!Role))){
		var eRoleTuple = Tuple{"key"=eRole.type().name.asString()+"_"+(idRole++).asString(),"value"= eRole};
		eObjectSequence.add(eRoleTuple);
	}
	//RoleAssemblyUsage -> Instantiation
	var idRoleAssemblyUsage = 0;
	for (eRoleAssemblyUsage in DSL!EObject.all.select(s|s.isTypeOf(DSL!RoleAssemblyUsage))){
		var eRoleAssemblyUsageTuple = Tuple{"key"=eRoleAssemblyUsage.type().name.asString()+"_"+(idRoleAssemblyUsage++).asString(),"value"= eRoleAssemblyUsage};
		eObjectSequence.add(eRoleAssemblyUsageTuple);
	}
	//RoleAllocation -> Instantiation
	var idRoleAllocation = 0;
	for (eRoleAllocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!RoleAllocation))){
		var eRoleAllocationTuple = Tuple{"key"=eRoleAllocation.type().name.asString()+"_"+(idRoleAllocation++).asString(),"value"= eRoleAllocation};
		eObjectSequence.add(eRoleAllocationTuple);
	}
	//EntityPkg -> Instantiation
	var idEntityPkg = 0;
	for (eEntityPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!EntityPkg))){
		var eEntityPkgTuple = Tuple{"key"=eEntityPkg.type().name.asString()+"_"+(idEntityPkg++).asString(),"value"= eEntityPkg};
		eObjectSequence.add(eEntityPkgTuple);
	}
	//Entity -> Instantiation
	var idEntity = 0;
	for (eEntity in DSL!EObject.all.select(s|s.isTypeOf(DSL!Entity))){
		var eEntityTuple = Tuple{"key"=eEntity.type().name.asString()+"_"+(idEntity++).asString(),"value"= eEntity};
		eObjectSequence.add(eEntityTuple);
	}
	//ConceptPkg -> Instantiation
	var idConceptPkg = 0;
	for (eConceptPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!ConceptPkg))){
		var eConceptPkgTuple = Tuple{"key"=eConceptPkg.type().name.asString()+"_"+(idConceptPkg++).asString(),"value"= eConceptPkg};
		eObjectSequence.add(eConceptPkgTuple);
	}
	//Concept -> Instantiation
	var idConcept = 0;
	for (eConcept in DSL!EObject.all.select(s|s.isTypeOf(DSL!Concept))){
		var eConceptTuple = Tuple{"key"=eConcept.type().name.asString()+"_"+(idConcept++).asString(),"value"= eConcept};
		eObjectSequence.add(eConceptTuple);
	}
	//ConceptCompliance -> Instantiation
	var idConceptCompliance = 0;
	for (eConceptCompliance in DSL!EObject.all.select(s|s.isTypeOf(DSL!ConceptCompliance))){
		var eConceptComplianceTuple = Tuple{"key"=eConceptCompliance.type().name.asString()+"_"+(idConceptCompliance++).asString(),"value"= eConceptCompliance};
		eObjectSequence.add(eConceptComplianceTuple);
	}
	//ItemInConcept -> Instantiation
	var idItemInConcept = 0;
	for (eItemInConcept in DSL!EObject.all.select(s|s.isTypeOf(DSL!ItemInConcept))){
		var eItemInConceptTuple = Tuple{"key"=eItemInConcept.type().name.asString()+"_"+(idItemInConcept++).asString(),"value"= eItemInConcept};
		eObjectSequence.add(eItemInConceptTuple);
	}
	//AbstractConceptItem -> Instantiation
	var idAbstractConceptItem = 0;
	for (eAbstractConceptItem in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractConceptItem))){
		var eAbstractConceptItemTuple = Tuple{"key"=eAbstractConceptItem.type().name.asString()+"_"+(idAbstractConceptItem++).asString(),"value"= eAbstractConceptItem};
		eObjectSequence.add(eAbstractConceptItemTuple);
	}
	//CommunityOfInterest -> Instantiation
	var idCommunityOfInterest = 0;
	for (eCommunityOfInterest in DSL!EObject.all.select(s|s.isTypeOf(DSL!CommunityOfInterest))){
		var eCommunityOfInterestTuple = Tuple{"key"=eCommunityOfInterest.type().name.asString()+"_"+(idCommunityOfInterest++).asString(),"value"= eCommunityOfInterest};
		eObjectSequence.add(eCommunityOfInterestTuple);
	}
	//CommunityOfInterestComposition -> Instantiation
	var idCommunityOfInterestComposition = 0;
	for (eCommunityOfInterestComposition in DSL!EObject.all.select(s|s.isTypeOf(DSL!CommunityOfInterestComposition))){
		var eCommunityOfInterestCompositionTuple = Tuple{"key"=eCommunityOfInterestComposition.type().name.asString()+"_"+(idCommunityOfInterestComposition++).asString(),"value"= eCommunityOfInterestComposition};
		eObjectSequence.add(eCommunityOfInterestCompositionTuple);
	}
	//OrganisationalUnit -> Instantiation
	var idOrganisationalUnit = 0;
	for (eOrganisationalUnit in DSL!EObject.all.select(s|s.isTypeOf(DSL!OrganisationalUnit))){
		var eOrganisationalUnitTuple = Tuple{"key"=eOrganisationalUnit.type().name.asString()+"_"+(idOrganisationalUnit++).asString(),"value"= eOrganisationalUnit};
		eObjectSequence.add(eOrganisationalUnitTuple);
	}
	//OrganisationalUnitComposition -> Instantiation
	var idOrganisationalUnitComposition = 0;
	for (eOrganisationalUnitComposition in DSL!EObject.all.select(s|s.isTypeOf(DSL!OrganisationalUnitComposition))){
		var eOrganisationalUnitCompositionTuple = Tuple{"key"=eOrganisationalUnitComposition.type().name.asString()+"_"+(idOrganisationalUnitComposition++).asString(),"value"= eOrganisationalUnitComposition};
		eObjectSequence.add(eOrganisationalUnitCompositionTuple);
	}
	//Location -> Instantiation
	var idLocation = 0;
	for (eLocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!Location))){
		var eLocationTuple = Tuple{"key"=eLocation.type().name.asString()+"_"+(idLocation++).asString(),"value"= eLocation};
		eObjectSequence.add(eLocationTuple);
	}
	//CapabilityConfiguration -> Instantiation
	var idCapabilityConfiguration = 0;
	for (eCapabilityConfiguration in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapabilityConfiguration))){
		var eCapabilityConfigurationTuple = Tuple{"key"=eCapabilityConfiguration.type().name.asString()+"_"+(idCapabilityConfiguration++).asString(),"value"= eCapabilityConfiguration};
		eObjectSequence.add(eCapabilityConfigurationTuple);
	}
	//CommunicationMean -> Instantiation
	var idCommunicationMean = 0;
	for (eCommunicationMean in DSL!EObject.all.select(s|s.isTypeOf(DSL!CommunicationMean))){
		var eCommunicationMeanTuple = Tuple{"key"=eCommunicationMean.type().name.asString()+"_"+(idCommunicationMean++).asString(),"value"= eCommunicationMean};
		eObjectSequence.add(eCommunicationMeanTuple);
	}
	//EntityOperationalCapabilityInvolvement -> Instantiation
	var idEntityOperationalCapabilityInvolvement = 0;
	for (eEntityOperationalCapabilityInvolvement in DSL!EObject.all.select(s|s.isTypeOf(DSL!EntityOperationalCapabilityInvolvement))){
		var eEntityOperationalCapabilityInvolvementTuple = Tuple{"key"=eEntityOperationalCapabilityInvolvement.type().name.asString()+"_"+(idEntityOperationalCapabilityInvolvement++).asString(),"value"= eEntityOperationalCapabilityInvolvement};
		eObjectSequence.add(eEntityOperationalCapabilityInvolvementTuple);
	}
	//SystemAnalysis -> Instantiation
	var idSystemAnalysis = 0;
	for (eSystemAnalysis in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemAnalysis))){
		var eSystemAnalysisTuple = Tuple{"key"=eSystemAnalysis.type().name.asString()+"_"+(idSystemAnalysis++).asString(),"value"= eSystemAnalysis};
		eObjectSequence.add(eSystemAnalysisTuple);
	}
	//SystemFunction -> Instantiation
	var idSystemFunction = 0;
	for (eSystemFunction in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemFunction))){
		var eSystemFunctionTuple = Tuple{"key"=eSystemFunction.type().name.asString()+"_"+(idSystemFunction++).asString(),"value"= eSystemFunction};
		eObjectSequence.add(eSystemFunctionTuple);
	}
	//SystemFunctionPkg -> Instantiation
	var idSystemFunctionPkg = 0;
	for (eSystemFunctionPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemFunctionPkg))){
		var eSystemFunctionPkgTuple = Tuple{"key"=eSystemFunctionPkg.type().name.asString()+"_"+(idSystemFunctionPkg++).asString(),"value"= eSystemFunctionPkg};
		eObjectSequence.add(eSystemFunctionPkgTuple);
	}
	//SystemCommunicationHook -> Instantiation
	var idSystemCommunicationHook = 0;
	for (eSystemCommunicationHook in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemCommunicationHook))){
		var eSystemCommunicationHookTuple = Tuple{"key"=eSystemCommunicationHook.type().name.asString()+"_"+(idSystemCommunicationHook++).asString(),"value"= eSystemCommunicationHook};
		eObjectSequence.add(eSystemCommunicationHookTuple);
	}
	//SystemCommunication -> Instantiation
	var idSystemCommunication = 0;
	for (eSystemCommunication in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemCommunication))){
		var eSystemCommunicationTuple = Tuple{"key"=eSystemCommunication.type().name.asString()+"_"+(idSystemCommunication++).asString(),"value"= eSystemCommunication};
		eObjectSequence.add(eSystemCommunicationTuple);
	}
	//CapabilityInvolvement -> Instantiation
	var idCapabilityInvolvement = 0;
	for (eCapabilityInvolvement in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapabilityInvolvement))){
		var eCapabilityInvolvementTuple = Tuple{"key"=eCapabilityInvolvement.type().name.asString()+"_"+(idCapabilityInvolvement++).asString(),"value"= eCapabilityInvolvement};
		eObjectSequence.add(eCapabilityInvolvementTuple);
	}
	//MissionInvolvement -> Instantiation
	var idMissionInvolvement = 0;
	for (eMissionInvolvement in DSL!EObject.all.select(s|s.isTypeOf(DSL!MissionInvolvement))){
		var eMissionInvolvementTuple = Tuple{"key"=eMissionInvolvement.type().name.asString()+"_"+(idMissionInvolvement++).asString(),"value"= eMissionInvolvement};
		eObjectSequence.add(eMissionInvolvementTuple);
	}
	//Mission -> Instantiation
	var idMission = 0;
	for (eMission in DSL!EObject.all.select(s|s.isTypeOf(DSL!Mission))){
		var eMissionTuple = Tuple{"key"=eMission.type().name.asString()+"_"+(idMission++).asString(),"value"= eMission};
		eObjectSequence.add(eMissionTuple);
	}
	//MissionPkg -> Instantiation
	var idMissionPkg = 0;
	for (eMissionPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!MissionPkg))){
		var eMissionPkgTuple = Tuple{"key"=eMissionPkg.type().name.asString()+"_"+(idMissionPkg++).asString(),"value"= eMissionPkg};
		eObjectSequence.add(eMissionPkgTuple);
	}
	//Capability -> Instantiation
	var idCapability = 0;
	for (eCapability in DSL!EObject.all.select(s|s.isTypeOf(DSL!Capability))){
		var eCapabilityTuple = Tuple{"key"=eCapability.type().name.asString()+"_"+(idCapability++).asString(),"value"= eCapability};
		eObjectSequence.add(eCapabilityTuple);
	}
	//CapabilityExploitation -> Instantiation
	var idCapabilityExploitation = 0;
	for (eCapabilityExploitation in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapabilityExploitation))){
		var eCapabilityExploitationTuple = Tuple{"key"=eCapabilityExploitation.type().name.asString()+"_"+(idCapabilityExploitation++).asString(),"value"= eCapabilityExploitation};
		eObjectSequence.add(eCapabilityExploitationTuple);
	}
	//CapabilityPkg -> Instantiation
	var idCapabilityPkg = 0;
	for (eCapabilityPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapabilityPkg))){
		var eCapabilityPkgTuple = Tuple{"key"=eCapabilityPkg.type().name.asString()+"_"+(idCapabilityPkg++).asString(),"value"= eCapabilityPkg};
		eObjectSequence.add(eCapabilityPkgTuple);
	}
	//OperationalAnalysisRealization -> Instantiation
	var idOperationalAnalysisRealization = 0;
	for (eOperationalAnalysisRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalAnalysisRealization))){
		var eOperationalAnalysisRealizationTuple = Tuple{"key"=eOperationalAnalysisRealization.type().name.asString()+"_"+(idOperationalAnalysisRealization++).asString(),"value"= eOperationalAnalysisRealization};
		eObjectSequence.add(eOperationalAnalysisRealizationTuple);
	}
	//SystemComponentPkg -> Instantiation
	var idSystemComponentPkg = 0;
	for (eSystemComponentPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemComponentPkg))){
		var eSystemComponentPkgTuple = Tuple{"key"=eSystemComponentPkg.type().name.asString()+"_"+(idSystemComponentPkg++).asString(),"value"= eSystemComponentPkg};
		eObjectSequence.add(eSystemComponentPkgTuple);
	}
	//SystemComponent -> Instantiation
	var idSystemComponent = 0;
	for (eSystemComponent in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemComponent))){
		var eSystemComponentTuple = Tuple{"key"=eSystemComponent.type().name.asString()+"_"+(idSystemComponent++).asString(),"value"= eSystemComponent};
		eObjectSequence.add(eSystemComponentTuple);
	}
	//LogicalArchitecturePkg -> Instantiation
	var idLogicalArchitecturePkg = 0;
	for (eLogicalArchitecturePkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalArchitecturePkg))){
		var eLogicalArchitecturePkgTuple = Tuple{"key"=eLogicalArchitecturePkg.type().name.asString()+"_"+(idLogicalArchitecturePkg++).asString(),"value"= eLogicalArchitecturePkg};
		eObjectSequence.add(eLogicalArchitecturePkgTuple);
	}
	//LogicalArchitecture -> Instantiation
	var idLogicalArchitecture = 0;
	for (eLogicalArchitecture in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalArchitecture))){
		var eLogicalArchitectureTuple = Tuple{"key"=eLogicalArchitecture.type().name.asString()+"_"+(idLogicalArchitecture++).asString(),"value"= eLogicalArchitecture};
		eObjectSequence.add(eLogicalArchitectureTuple);
	}
	//LogicalFunction -> Instantiation
	var idLogicalFunction = 0;
	for (eLogicalFunction in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalFunction))){
		var eLogicalFunctionTuple = Tuple{"key"=eLogicalFunction.type().name.asString()+"_"+(idLogicalFunction++).asString(),"value"= eLogicalFunction};
		eObjectSequence.add(eLogicalFunctionTuple);
	}
	//LogicalFunctionPkg -> Instantiation
	var idLogicalFunctionPkg = 0;
	for (eLogicalFunctionPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalFunctionPkg))){
		var eLogicalFunctionPkgTuple = Tuple{"key"=eLogicalFunctionPkg.type().name.asString()+"_"+(idLogicalFunctionPkg++).asString(),"value"= eLogicalFunctionPkg};
		eObjectSequence.add(eLogicalFunctionPkgTuple);
	}
	//LogicalComponent -> Instantiation
	var idLogicalComponent = 0;
	for (eLogicalComponent in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalComponent))){
		var eLogicalComponentTuple = Tuple{"key"=eLogicalComponent.type().name.asString()+"_"+(idLogicalComponent++).asString(),"value"= eLogicalComponent};
		eObjectSequence.add(eLogicalComponentTuple);
	}
	//LogicalComponentPkg -> Instantiation
	var idLogicalComponentPkg = 0;
	for (eLogicalComponentPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalComponentPkg))){
		var eLogicalComponentPkgTuple = Tuple{"key"=eLogicalComponentPkg.type().name.asString()+"_"+(idLogicalComponentPkg++).asString(),"value"= eLogicalComponentPkg};
		eObjectSequence.add(eLogicalComponentPkgTuple);
	}
	//CapabilityRealization -> Instantiation
	var idCapabilityRealization = 0;
	for (eCapabilityRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapabilityRealization))){
		var eCapabilityRealizationTuple = Tuple{"key"=eCapabilityRealization.type().name.asString()+"_"+(idCapabilityRealization++).asString(),"value"= eCapabilityRealization};
		eObjectSequence.add(eCapabilityRealizationTuple);
	}
	//CapabilityRealizationPkg -> Instantiation
	var idCapabilityRealizationPkg = 0;
	for (eCapabilityRealizationPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapabilityRealizationPkg))){
		var eCapabilityRealizationPkgTuple = Tuple{"key"=eCapabilityRealizationPkg.type().name.asString()+"_"+(idCapabilityRealizationPkg++).asString(),"value"= eCapabilityRealizationPkg};
		eObjectSequence.add(eCapabilityRealizationPkgTuple);
	}
	//SystemAnalysisRealization -> Instantiation
	var idSystemAnalysisRealization = 0;
	for (eSystemAnalysisRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemAnalysisRealization))){
		var eSystemAnalysisRealizationTuple = Tuple{"key"=eSystemAnalysisRealization.type().name.asString()+"_"+(idSystemAnalysisRealization++).asString(),"value"= eSystemAnalysisRealization};
		eObjectSequence.add(eSystemAnalysisRealizationTuple);
	}
	//ContextInterfaceRealization -> Instantiation
	var idContextInterfaceRealization = 0;
	for (eContextInterfaceRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!ContextInterfaceRealization))){
		var eContextInterfaceRealizationTuple = Tuple{"key"=eContextInterfaceRealization.type().name.asString()+"_"+(idContextInterfaceRealization++).asString(),"value"= eContextInterfaceRealization};
		eObjectSequence.add(eContextInterfaceRealizationTuple);
	}
	//PhysicalArchitecturePkg -> Instantiation
	var idPhysicalArchitecturePkg = 0;
	for (ePhysicalArchitecturePkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalArchitecturePkg))){
		var ePhysicalArchitecturePkgTuple = Tuple{"key"=ePhysicalArchitecturePkg.type().name.asString()+"_"+(idPhysicalArchitecturePkg++).asString(),"value"= ePhysicalArchitecturePkg};
		eObjectSequence.add(ePhysicalArchitecturePkgTuple);
	}
	//PhysicalArchitecture -> Instantiation
	var idPhysicalArchitecture = 0;
	for (ePhysicalArchitecture in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalArchitecture))){
		var ePhysicalArchitectureTuple = Tuple{"key"=ePhysicalArchitecture.type().name.asString()+"_"+(idPhysicalArchitecture++).asString(),"value"= ePhysicalArchitecture};
		eObjectSequence.add(ePhysicalArchitectureTuple);
	}
	//PhysicalFunction -> Instantiation
	var idPhysicalFunction = 0;
	for (ePhysicalFunction in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalFunction))){
		var ePhysicalFunctionTuple = Tuple{"key"=ePhysicalFunction.type().name.asString()+"_"+(idPhysicalFunction++).asString(),"value"= ePhysicalFunction};
		eObjectSequence.add(ePhysicalFunctionTuple);
	}
	//PhysicalFunctionPkg -> Instantiation
	var idPhysicalFunctionPkg = 0;
	for (ePhysicalFunctionPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalFunctionPkg))){
		var ePhysicalFunctionPkgTuple = Tuple{"key"=ePhysicalFunctionPkg.type().name.asString()+"_"+(idPhysicalFunctionPkg++).asString(),"value"= ePhysicalFunctionPkg};
		eObjectSequence.add(ePhysicalFunctionPkgTuple);
	}
	//PhysicalComponent -> Instantiation
	var idPhysicalComponent = 0;
	for (ePhysicalComponent in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalComponent))){
		var ePhysicalComponentTuple = Tuple{"key"=ePhysicalComponent.type().name.asString()+"_"+(idPhysicalComponent++).asString(),"value"= ePhysicalComponent};
		eObjectSequence.add(ePhysicalComponentTuple);
	}
	//PhysicalComponentPkg -> Instantiation
	var idPhysicalComponentPkg = 0;
	for (ePhysicalComponentPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalComponentPkg))){
		var ePhysicalComponentPkgTuple = Tuple{"key"=ePhysicalComponentPkg.type().name.asString()+"_"+(idPhysicalComponentPkg++).asString(),"value"= ePhysicalComponentPkg};
		eObjectSequence.add(ePhysicalComponentPkgTuple);
	}
	//PhysicalNode -> Instantiation
	var idPhysicalNode = 0;
	for (ePhysicalNode in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalNode))){
		var ePhysicalNodeTuple = Tuple{"key"=ePhysicalNode.type().name.asString()+"_"+(idPhysicalNode++).asString(),"value"= ePhysicalNode};
		eObjectSequence.add(ePhysicalNodeTuple);
	}
	//LogicalArchitectureRealization -> Instantiation
	var idLogicalArchitectureRealization = 0;
	for (eLogicalArchitectureRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalArchitectureRealization))){
		var eLogicalArchitectureRealizationTuple = Tuple{"key"=eLogicalArchitectureRealization.type().name.asString()+"_"+(idLogicalArchitectureRealization++).asString(),"value"= eLogicalArchitectureRealization};
		eObjectSequence.add(eLogicalArchitectureRealizationTuple);
	}
	//LogicalInterfaceRealization -> Instantiation
	var idLogicalInterfaceRealization = 0;
	for (eLogicalInterfaceRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalInterfaceRealization))){
		var eLogicalInterfaceRealizationTuple = Tuple{"key"=eLogicalInterfaceRealization.type().name.asString()+"_"+(idLogicalInterfaceRealization++).asString(),"value"= eLogicalInterfaceRealization};
		eObjectSequence.add(eLogicalInterfaceRealizationTuple);
	}
	//ComponentInstance -> Instantiation
	var idComponentInstance = 0;
	for (eComponentInstance in DSL!EObject.all.select(s|s.isTypeOf(DSL!ComponentInstance))){
		var eComponentInstanceTuple = Tuple{"key"=eComponentInstance.type().name.asString()+"_"+(idComponentInstance++).asString(),"value"= eComponentInstance};
		eObjectSequence.add(eComponentInstanceTuple);
	}
	//ConnectionInstance -> Instantiation
	var idConnectionInstance = 0;
	for (eConnectionInstance in DSL!EObject.all.select(s|s.isTypeOf(DSL!ConnectionInstance))){
		var eConnectionInstanceTuple = Tuple{"key"=eConnectionInstance.type().name.asString()+"_"+(idConnectionInstance++).asString(),"value"= eConnectionInstance};
		eObjectSequence.add(eConnectionInstanceTuple);
	}
	//DeploymentAspect -> Instantiation
	var idDeploymentAspect = 0;
	for (eDeploymentAspect in DSL!EObject.all.select(s|s.isTypeOf(DSL!DeploymentAspect))){
		var eDeploymentAspectTuple = Tuple{"key"=eDeploymentAspect.type().name.asString()+"_"+(idDeploymentAspect++).asString(),"value"= eDeploymentAspect};
		eObjectSequence.add(eDeploymentAspectTuple);
	}
	//DeploymentConfiguration -> Instantiation
	var idDeploymentConfiguration = 0;
	for (eDeploymentConfiguration in DSL!EObject.all.select(s|s.isTypeOf(DSL!DeploymentConfiguration))){
		var eDeploymentConfigurationTuple = Tuple{"key"=eDeploymentConfiguration.type().name.asString()+"_"+(idDeploymentConfiguration++).asString(),"value"= eDeploymentConfiguration};
		eObjectSequence.add(eDeploymentConfigurationTuple);
	}
	//InstanceDeploymentLink -> Instantiation
	var idInstanceDeploymentLink = 0;
	for (eInstanceDeploymentLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!InstanceDeploymentLink))){
		var eInstanceDeploymentLinkTuple = Tuple{"key"=eInstanceDeploymentLink.type().name.asString()+"_"+(idInstanceDeploymentLink++).asString(),"value"= eInstanceDeploymentLink};
		eObjectSequence.add(eInstanceDeploymentLinkTuple);
	}
	//PartDeploymentLink -> Instantiation
	var idPartDeploymentLink = 0;
	for (ePartDeploymentLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!PartDeploymentLink))){
		var ePartDeploymentLinkTuple = Tuple{"key"=ePartDeploymentLink.type().name.asString()+"_"+(idPartDeploymentLink++).asString(),"value"= ePartDeploymentLink};
		eObjectSequence.add(ePartDeploymentLinkTuple);
	}
	//AbstractPhysicalInstance -> Instantiation
	var idAbstractPhysicalInstance = 0;
	for (eAbstractPhysicalInstance in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractPhysicalInstance))){
		var eAbstractPhysicalInstanceTuple = Tuple{"key"=eAbstractPhysicalInstance.type().name.asString()+"_"+(idAbstractPhysicalInstance++).asString(),"value"= eAbstractPhysicalInstance};
		eObjectSequence.add(eAbstractPhysicalInstanceTuple);
	}
	//PortInstance -> Instantiation
	var idPortInstance = 0;
	for (ePortInstance in DSL!EObject.all.select(s|s.isTypeOf(DSL!PortInstance))){
		var ePortInstanceTuple = Tuple{"key"=ePortInstance.type().name.asString()+"_"+(idPortInstance++).asString(),"value"= ePortInstance};
		eObjectSequence.add(ePortInstanceTuple);
	}
	//TypeDeploymentLink -> Instantiation
	var idTypeDeploymentLink = 0;
	for (eTypeDeploymentLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!TypeDeploymentLink))){
		var eTypeDeploymentLinkTuple = Tuple{"key"=eTypeDeploymentLink.type().name.asString()+"_"+(idTypeDeploymentLink++).asString(),"value"= eTypeDeploymentLink};
		eObjectSequence.add(eTypeDeploymentLinkTuple);
	}
	//EPBSArchitecturePkg -> Instantiation
	var idEPBSArchitecturePkg = 0;
	for (eEPBSArchitecturePkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!EPBSArchitecturePkg))){
		var eEPBSArchitecturePkgTuple = Tuple{"key"=eEPBSArchitecturePkg.type().name.asString()+"_"+(idEPBSArchitecturePkg++).asString(),"value"= eEPBSArchitecturePkg};
		eObjectSequence.add(eEPBSArchitecturePkgTuple);
	}
	//EPBSArchitecture -> Instantiation
	var idEPBSArchitecture = 0;
	for (eEPBSArchitecture in DSL!EObject.all.select(s|s.isTypeOf(DSL!EPBSArchitecture))){
		var eEPBSArchitectureTuple = Tuple{"key"=eEPBSArchitecture.type().name.asString()+"_"+(idEPBSArchitecture++).asString(),"value"= eEPBSArchitecture};
		eObjectSequence.add(eEPBSArchitectureTuple);
	}
	//ConfigurationItemPkg -> Instantiation
	var idConfigurationItemPkg = 0;
	for (eConfigurationItemPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!ConfigurationItemPkg))){
		var eConfigurationItemPkgTuple = Tuple{"key"=eConfigurationItemPkg.type().name.asString()+"_"+(idConfigurationItemPkg++).asString(),"value"= eConfigurationItemPkg};
		eObjectSequence.add(eConfigurationItemPkgTuple);
	}
	//ConfigurationItem -> Instantiation
	var idConfigurationItem = 0;
	for (eConfigurationItem in DSL!EObject.all.select(s|s.isTypeOf(DSL!ConfigurationItem))){
		var eConfigurationItemTuple = Tuple{"key"=eConfigurationItem.type().name.asString()+"_"+(idConfigurationItem++).asString(),"value"= eConfigurationItem};
		eObjectSequence.add(eConfigurationItemTuple);
	}
	//PhysicalArchitectureRealization -> Instantiation
	var idPhysicalArchitectureRealization = 0;
	for (ePhysicalArchitectureRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalArchitectureRealization))){
		var ePhysicalArchitectureRealizationTuple = Tuple{"key"=ePhysicalArchitectureRealization.type().name.asString()+"_"+(idPhysicalArchitectureRealization++).asString(),"value"= ePhysicalArchitectureRealization};
		eObjectSequence.add(ePhysicalArchitectureRealizationTuple);
	}
	//PhysicalArtifactRealization -> Instantiation
	var idPhysicalArtifactRealization = 0;
	for (ePhysicalArtifactRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalArtifactRealization))){
		var ePhysicalArtifactRealizationTuple = Tuple{"key"=ePhysicalArtifactRealization.type().name.asString()+"_"+(idPhysicalArtifactRealization++).asString(),"value"= ePhysicalArtifactRealization};
		eObjectSequence.add(ePhysicalArtifactRealizationTuple);
	}
	//SharedPkg -> Instantiation
	var idSharedPkg = 0;
	for (eSharedPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!SharedPkg))){
		var eSharedPkgTuple = Tuple{"key"=eSharedPkg.type().name.asString()+"_"+(idSharedPkg++).asString(),"value"= eSharedPkg};
		eObjectSequence.add(eSharedPkgTuple);
	}
	//GenericPkg -> Instantiation
	var idGenericPkg = 0;
	for (eGenericPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!GenericPkg))){
		var eGenericPkgTuple = Tuple{"key"=eGenericPkg.type().name.asString()+"_"+(idGenericPkg++).asString(),"value"= eGenericPkg};
		eObjectSequence.add(eGenericPkgTuple);
	}
}

@abstract
rule Base
	transform s : DSL!EObject
	to t : SysMLine!ItemUsage{
	t.declaredName = s.getDeclaredName();
	t.featureNote.add(":");
	t.featureSpecialization.add(s.getfeatureSpecialization());
	if (s.eContainingFeature != null and s.eContainingFeature.name != null){
		t.featureNote.add(":>");
		t.featureSpecialization.add(s.eContainingFeature().name);
	}
}

// capellamodeller.ecore
@lazy
rule Project
	transform s : DSL!Project
	to t : SysMLine!ItemUsage
	extends Base{
	//Project -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//Project -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//Project -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//Project -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//Project -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//Project -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//Project -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//Project -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//Project -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//Project -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//Project -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//Project -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//Project -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//Project -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//Project -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//Project -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//Project -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//Project -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//Project -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//Project -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//Project -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//Project -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//Project -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//Project -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//Project -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//Project -> EReference : keyValuePairs
	if (s.keyValuePairs.getEReference() != null){
		var keyValuePairs = new SysMLine!ItemUsage;
		keyValuePairs.isReference = true;
		keyValuePairs.featureNote.add(":>");
		keyValuePairs.featureSpecialization.add("keyValuePairs");
		keyValuePairs.valuePart = s.keyValuePairs.getEReference();
		t.body.add(keyValuePairs);
	}
	//Project -> EReference : ownedFolders
	if (s.ownedFolders.getEReference() != null){
		var ownedFolders = new SysMLine!ItemUsage;
		ownedFolders.isReference = true;
		ownedFolders.featureNote.add(":>");
		ownedFolders.featureSpecialization.add("ownedFolders");
		ownedFolders.valuePart = s.ownedFolders.getEReference();
		t.body.add(ownedFolders);
	}
	//Project -> EReference : ownedModelRoots
	if (s.ownedModelRoots.getEReference() != null){
		var ownedModelRoots = new SysMLine!ItemUsage;
		ownedModelRoots.isReference = true;
		ownedModelRoots.featureNote.add(":>");
		ownedModelRoots.featureSpecialization.add("ownedModelRoots");
		ownedModelRoots.valuePart = s.ownedModelRoots.getEReference();
		t.body.add(ownedModelRoots);
	}
}

@lazy
rule Folder
	transform s : DSL!Folder
	to t : SysMLine!ItemUsage
	extends Base{
	//Folder -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//Folder -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//Folder -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//Folder -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//Folder -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//Folder -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//Folder -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//Folder -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//Folder -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//Folder -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//Folder -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//Folder -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//Folder -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//Folder -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//Folder -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//Folder -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//Folder -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//Folder -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//Folder -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//Folder -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//Folder -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//Folder -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//Folder -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//Folder -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//Folder -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//Folder -> EReference : ownedFolders
	if (s.ownedFolders.getEReference() != null){
		var ownedFolders = new SysMLine!ItemUsage;
		ownedFolders.isReference = true;
		ownedFolders.featureNote.add(":>");
		ownedFolders.featureSpecialization.add("ownedFolders");
		ownedFolders.valuePart = s.ownedFolders.getEReference();
		t.body.add(ownedFolders);
	}
	//Folder -> EReference : ownedModelRoots
	if (s.ownedModelRoots.getEReference() != null){
		var ownedModelRoots = new SysMLine!ItemUsage;
		ownedModelRoots.isReference = true;
		ownedModelRoots.featureNote.add(":>");
		ownedModelRoots.featureSpecialization.add("ownedModelRoots");
		ownedModelRoots.valuePart = s.ownedModelRoots.getEReference();
		t.body.add(ownedModelRoots);
	}
}

@lazy
rule ModelRoot
	transform s : DSL!ModelRoot
	to t : SysMLine!ItemUsage
	extends Base{
	//ModelRoot -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//ModelRoot -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//ModelRoot -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//ModelRoot -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//ModelRoot -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//ModelRoot -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//ModelRoot -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//ModelRoot -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//ModelRoot -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//ModelRoot -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//ModelRoot -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//ModelRoot -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//ModelRoot -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//ModelRoot -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//ModelRoot -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//ModelRoot -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//ModelRoot -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//ModelRoot -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//ModelRoot -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//ModelRoot -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
}

@lazy
rule SystemEngineering
	transform s : DSL!SystemEngineering
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemEngineering -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//SystemEngineering -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//SystemEngineering -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//SystemEngineering -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//SystemEngineering -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//SystemEngineering -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//SystemEngineering -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//SystemEngineering -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//SystemEngineering -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//SystemEngineering -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//SystemEngineering -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//SystemEngineering -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//SystemEngineering -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//SystemEngineering -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//SystemEngineering -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//SystemEngineering -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//SystemEngineering -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//SystemEngineering -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//SystemEngineering -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//SystemEngineering -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//SystemEngineering -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//SystemEngineering -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//SystemEngineering -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//SystemEngineering -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//SystemEngineering -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//SystemEngineering -> EReference : reuseLinks
	if (s.reuseLinks.getEReference() != null){
		var reuseLinks = new SysMLine!ItemUsage;
		reuseLinks.isReference = true;
		reuseLinks.featureNote.add(":>");
		reuseLinks.featureSpecialization.add("reuseLinks");
		reuseLinks.valuePart = s.reuseLinks.getEReference();
		t.body.add(reuseLinks);
	}
	//SystemEngineering -> EReference : ownedReuseLinks
	if (s.ownedReuseLinks.getEReference() != null){
		var ownedReuseLinks = new SysMLine!ItemUsage;
		ownedReuseLinks.isReference = true;
		ownedReuseLinks.featureNote.add(":>");
		ownedReuseLinks.featureSpecialization.add("ownedReuseLinks");
		ownedReuseLinks.valuePart = s.ownedReuseLinks.getEReference();
		t.body.add(ownedReuseLinks);
	}
	//SystemEngineering -> EReference : ownedArchitectures
	if (s.ownedArchitectures.getEReference() != null){
		var ownedArchitectures = new SysMLine!ItemUsage;
		ownedArchitectures.isReference = true;
		ownedArchitectures.featureNote.add(":>");
		ownedArchitectures.featureSpecialization.add("ownedArchitectures");
		ownedArchitectures.valuePart = s.ownedArchitectures.getEReference();
		t.body.add(ownedArchitectures);
	}
	//SystemEngineering -> EReference : ownedArchitecturePkgs
	if (s.ownedArchitecturePkgs.getEReference() != null){
		var ownedArchitecturePkgs = new SysMLine!ItemUsage;
		ownedArchitecturePkgs.isReference = true;
		ownedArchitecturePkgs.featureNote.add(":>");
		ownedArchitecturePkgs.featureSpecialization.add("ownedArchitecturePkgs");
		ownedArchitecturePkgs.valuePart = s.ownedArchitecturePkgs.getEReference();
		t.body.add(ownedArchitecturePkgs);
	}
	//SystemEngineering -> EReference : containedOperationalAnalysis
	if (s.containedOperationalAnalysis.getEReference() != null){
		var containedOperationalAnalysis = new SysMLine!ItemUsage;
		containedOperationalAnalysis.isReference = true;
		containedOperationalAnalysis.featureNote.add(":>");
		containedOperationalAnalysis.featureSpecialization.add("containedOperationalAnalysis");
		containedOperationalAnalysis.valuePart = s.containedOperationalAnalysis.getEReference();
		t.body.add(containedOperationalAnalysis);
	}
	//SystemEngineering -> EReference : containedSystemAnalysis
	if (s.containedSystemAnalysis.getEReference() != null){
		var containedSystemAnalysis = new SysMLine!ItemUsage;
		containedSystemAnalysis.isReference = true;
		containedSystemAnalysis.featureNote.add(":>");
		containedSystemAnalysis.featureSpecialization.add("containedSystemAnalysis");
		containedSystemAnalysis.valuePart = s.containedSystemAnalysis.getEReference();
		t.body.add(containedSystemAnalysis);
	}
	//SystemEngineering -> EReference : containedLogicalArchitectures
	if (s.containedLogicalArchitectures.getEReference() != null){
		var containedLogicalArchitectures = new SysMLine!ItemUsage;
		containedLogicalArchitectures.isReference = true;
		containedLogicalArchitectures.featureNote.add(":>");
		containedLogicalArchitectures.featureSpecialization.add("containedLogicalArchitectures");
		containedLogicalArchitectures.valuePart = s.containedLogicalArchitectures.getEReference();
		t.body.add(containedLogicalArchitectures);
	}
	//SystemEngineering -> EReference : containedPhysicalArchitectures
	if (s.containedPhysicalArchitectures.getEReference() != null){
		var containedPhysicalArchitectures = new SysMLine!ItemUsage;
		containedPhysicalArchitectures.isReference = true;
		containedPhysicalArchitectures.featureNote.add(":>");
		containedPhysicalArchitectures.featureSpecialization.add("containedPhysicalArchitectures");
		containedPhysicalArchitectures.valuePart = s.containedPhysicalArchitectures.getEReference();
		t.body.add(containedPhysicalArchitectures);
	}
	//SystemEngineering -> EReference : containedEPBSArchitectures
	if (s.containedEPBSArchitectures.getEReference() != null){
		var containedEPBSArchitectures = new SysMLine!ItemUsage;
		containedEPBSArchitectures.isReference = true;
		containedEPBSArchitectures.featureNote.add(":>");
		containedEPBSArchitectures.featureSpecialization.add("containedEPBSArchitectures");
		containedEPBSArchitectures.valuePart = s.containedEPBSArchitectures.getEReference();
		t.body.add(containedEPBSArchitectures);
	}
	//SystemEngineering -> EReference : containedSharedPkgs
	if (s.containedSharedPkgs.getEReference() != null){
		var containedSharedPkgs = new SysMLine!ItemUsage;
		containedSharedPkgs.isReference = true;
		containedSharedPkgs.featureNote.add(":>");
		containedSharedPkgs.featureSpecialization.add("containedSharedPkgs");
		containedSharedPkgs.valuePart = s.containedSharedPkgs.getEReference();
		t.body.add(containedSharedPkgs);
	}
}

@lazy
rule SystemEngineeringPkg
	transform s : DSL!SystemEngineeringPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemEngineeringPkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//SystemEngineeringPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//SystemEngineeringPkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//SystemEngineeringPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//SystemEngineeringPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//SystemEngineeringPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//SystemEngineeringPkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//SystemEngineeringPkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//SystemEngineeringPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//SystemEngineeringPkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//SystemEngineeringPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//SystemEngineeringPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//SystemEngineeringPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//SystemEngineeringPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//SystemEngineeringPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//SystemEngineeringPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//SystemEngineeringPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//SystemEngineeringPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//SystemEngineeringPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//SystemEngineeringPkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//SystemEngineeringPkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//SystemEngineeringPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//SystemEngineeringPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//SystemEngineeringPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//SystemEngineeringPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//SystemEngineeringPkg -> EReference : ownedSystemEngineerings
	if (s.ownedSystemEngineerings.getEReference() != null){
		var ownedSystemEngineerings = new SysMLine!ItemUsage;
		ownedSystemEngineerings.isReference = true;
		ownedSystemEngineerings.featureNote.add(":>");
		ownedSystemEngineerings.featureSpecialization.add("ownedSystemEngineerings");
		ownedSystemEngineerings.valuePart = s.ownedSystemEngineerings.getEReference();
		t.body.add(ownedSystemEngineerings);
	}
}

@lazy
rule Library
	transform s : DSL!Library
	to t : SysMLine!ItemUsage
	extends Base{
	//Library -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//Library -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//Library -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//Library -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//Library -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//Library -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//Library -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//Library -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//Library -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//Library -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//Library -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//Library -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//Library -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//Library -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//Library -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//Library -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//Library -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//Library -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//Library -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//Library -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//Library -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//Library -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//Library -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//Library -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//Library -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//Library -> EReference : keyValuePairs
	if (s.keyValuePairs.getEReference() != null){
		var keyValuePairs = new SysMLine!ItemUsage;
		keyValuePairs.isReference = true;
		keyValuePairs.featureNote.add(":>");
		keyValuePairs.featureSpecialization.add("keyValuePairs");
		keyValuePairs.valuePart = s.keyValuePairs.getEReference();
		t.body.add(keyValuePairs);
	}
	//Library -> EReference : ownedFolders
	if (s.ownedFolders.getEReference() != null){
		var ownedFolders = new SysMLine!ItemUsage;
		ownedFolders.isReference = true;
		ownedFolders.featureNote.add(":>");
		ownedFolders.featureSpecialization.add("ownedFolders");
		ownedFolders.valuePart = s.ownedFolders.getEReference();
		t.body.add(ownedFolders);
	}
	//Library -> EReference : ownedModelRoots
	if (s.ownedModelRoots.getEReference() != null){
		var ownedModelRoots = new SysMLine!ItemUsage;
		ownedModelRoots.isReference = true;
		ownedModelRoots.featureNote.add(":>");
		ownedModelRoots.featureSpecialization.add("ownedModelRoots");
		ownedModelRoots.valuePart = s.ownedModelRoots.getEReference();
		t.body.add(ownedModelRoots);
	}
}


// capellacore.ecore
@lazy
rule CapellaElement
	transform s : DSL!CapellaElement
	to t : SysMLine!ItemUsage
	extends Base{
	//CapellaElement -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//CapellaElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//CapellaElement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//CapellaElement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//CapellaElement -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//CapellaElement -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//CapellaElement -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//CapellaElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//CapellaElement -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//CapellaElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//CapellaElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//CapellaElement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//CapellaElement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//CapellaElement -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//CapellaElement -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//CapellaElement -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//CapellaElement -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//CapellaElement -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//CapellaElement -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//CapellaElement -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
}

@lazy
rule NamedElement
	transform s : DSL!NamedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//NamedElement -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//NamedElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//NamedElement -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//NamedElement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//NamedElement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//NamedElement -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//NamedElement -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//NamedElement -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//NamedElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//NamedElement -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//NamedElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//NamedElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//NamedElement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//NamedElement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//NamedElement -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//NamedElement -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//NamedElement -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//NamedElement -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//NamedElement -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//NamedElement -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//NamedElement -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
}

@lazy
rule Relationship
	transform s : DSL!Relationship
	to t : SysMLine!ItemUsage
	extends Base{
	//Relationship -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//Relationship -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//Relationship -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//Relationship -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//Relationship -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//Relationship -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//Relationship -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//Relationship -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//Relationship -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//Relationship -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//Relationship -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//Relationship -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//Relationship -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//Relationship -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//Relationship -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//Relationship -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//Relationship -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//Relationship -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//Relationship -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//Relationship -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//Relationship -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
}

@lazy
rule Namespace
	transform s : DSL!Namespace
	to t : SysMLine!ItemUsage
	extends Base{
	//Namespace -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//Namespace -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//Namespace -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//Namespace -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//Namespace -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//Namespace -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//Namespace -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//Namespace -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//Namespace -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//Namespace -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//Namespace -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//Namespace -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//Namespace -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//Namespace -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//Namespace -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//Namespace -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//Namespace -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//Namespace -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//Namespace -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//Namespace -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//Namespace -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//Namespace -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//Namespace -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//Namespace -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
}

@lazy
rule NamedRelationship
	transform s : DSL!NamedRelationship
	to t : SysMLine!ItemUsage
	extends Base{
	//NamedRelationship -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//NamedRelationship -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//NamedRelationship -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//NamedRelationship -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//NamedRelationship -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//NamedRelationship -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//NamedRelationship -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//NamedRelationship -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//NamedRelationship -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//NamedRelationship -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//NamedRelationship -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//NamedRelationship -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//NamedRelationship -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//NamedRelationship -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//NamedRelationship -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//NamedRelationship -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//NamedRelationship -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//NamedRelationship -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//NamedRelationship -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//NamedRelationship -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//NamedRelationship -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//NamedRelationship -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//NamedRelationship -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
}

@lazy
rule Structure
	transform s : DSL!Structure
	to t : SysMLine!ItemUsage
	extends Base{
	//Structure -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//Structure -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//Structure -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//Structure -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//Structure -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//Structure -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//Structure -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//Structure -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//Structure -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//Structure -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//Structure -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//Structure -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//Structure -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//Structure -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//Structure -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//Structure -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//Structure -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//Structure -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//Structure -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//Structure -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//Structure -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//Structure -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//Structure -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//Structure -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//Structure -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
}

@lazy
rule AbstractModellingStructure
	transform s : DSL!AbstractModellingStructure
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractModellingStructure -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//AbstractModellingStructure -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//AbstractModellingStructure -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//AbstractModellingStructure -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//AbstractModellingStructure -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//AbstractModellingStructure -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//AbstractModellingStructure -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//AbstractModellingStructure -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//AbstractModellingStructure -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//AbstractModellingStructure -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//AbstractModellingStructure -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//AbstractModellingStructure -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//AbstractModellingStructure -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//AbstractModellingStructure -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//AbstractModellingStructure -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//AbstractModellingStructure -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//AbstractModellingStructure -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//AbstractModellingStructure -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//AbstractModellingStructure -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//AbstractModellingStructure -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//AbstractModellingStructure -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//AbstractModellingStructure -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//AbstractModellingStructure -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//AbstractModellingStructure -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//AbstractModellingStructure -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//AbstractModellingStructure -> EReference : reuseLinks
	if (s.reuseLinks.getEReference() != null){
		var reuseLinks = new SysMLine!ItemUsage;
		reuseLinks.isReference = true;
		reuseLinks.featureNote.add(":>");
		reuseLinks.featureSpecialization.add("reuseLinks");
		reuseLinks.valuePart = s.reuseLinks.getEReference();
		t.body.add(reuseLinks);
	}
	//AbstractModellingStructure -> EReference : ownedReuseLinks
	if (s.ownedReuseLinks.getEReference() != null){
		var ownedReuseLinks = new SysMLine!ItemUsage;
		ownedReuseLinks.isReference = true;
		ownedReuseLinks.featureNote.add(":>");
		ownedReuseLinks.featureSpecialization.add("ownedReuseLinks");
		ownedReuseLinks.valuePart = s.ownedReuseLinks.getEReference();
		t.body.add(ownedReuseLinks);
	}
	//AbstractModellingStructure -> EReference : ownedArchitectures
	if (s.ownedArchitectures.getEReference() != null){
		var ownedArchitectures = new SysMLine!ItemUsage;
		ownedArchitectures.isReference = true;
		ownedArchitectures.featureNote.add(":>");
		ownedArchitectures.featureSpecialization.add("ownedArchitectures");
		ownedArchitectures.valuePart = s.ownedArchitectures.getEReference();
		t.body.add(ownedArchitectures);
	}
	//AbstractModellingStructure -> EReference : ownedArchitecturePkgs
	if (s.ownedArchitecturePkgs.getEReference() != null){
		var ownedArchitecturePkgs = new SysMLine!ItemUsage;
		ownedArchitecturePkgs.isReference = true;
		ownedArchitecturePkgs.featureNote.add(":>");
		ownedArchitecturePkgs.featureSpecialization.add("ownedArchitecturePkgs");
		ownedArchitecturePkgs.valuePart = s.ownedArchitecturePkgs.getEReference();
		t.body.add(ownedArchitecturePkgs);
	}
}

@lazy
rule ModellingBlock
	transform s : DSL!ModellingBlock
	to t : SysMLine!ItemUsage
	extends Base{
	//ModellingBlock -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//ModellingBlock -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//ModellingBlock -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//ModellingBlock -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//ModellingBlock -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//ModellingBlock -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//ModellingBlock -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//ModellingBlock -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//ModellingBlock -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//ModellingBlock -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//ModellingBlock -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//ModellingBlock -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//ModellingBlock -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null){
		var abstractTypedElements = new SysMLine!ItemUsage;
		abstractTypedElements.isReference = true;
		abstractTypedElements.featureNote.add(":>");
		abstractTypedElements.featureSpecialization.add("abstractTypedElements");
		abstractTypedElements.valuePart = s.abstractTypedElements.getEReference();
		t.body.add(abstractTypedElements);
	}
	//ModellingBlock -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//ModellingBlock -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//ModellingBlock -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//ModellingBlock -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//ModellingBlock -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//ModellingBlock -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//ModellingBlock -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//ModellingBlock -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//ModellingBlock -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//ModellingBlock -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//ModellingBlock -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//ModellingBlock -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//ModellingBlock -> EReference : typedElements
	if (s.typedElements.getEReference() != null){
		var typedElements = new SysMLine!ItemUsage;
		typedElements.isReference = true;
		typedElements.featureNote.add(":>");
		typedElements.featureSpecialization.add("typedElements");
		typedElements.valuePart = s.typedElements.getEReference();
		t.body.add(typedElements);
	}
}

@lazy
rule ModellingArchitecture
	transform s : DSL!ModellingArchitecture
	to t : SysMLine!ItemUsage
	extends Base{
	//ModellingArchitecture -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//ModellingArchitecture -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//ModellingArchitecture -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//ModellingArchitecture -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//ModellingArchitecture -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//ModellingArchitecture -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//ModellingArchitecture -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//ModellingArchitecture -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//ModellingArchitecture -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//ModellingArchitecture -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//ModellingArchitecture -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//ModellingArchitecture -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//ModellingArchitecture -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//ModellingArchitecture -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//ModellingArchitecture -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//ModellingArchitecture -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//ModellingArchitecture -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//ModellingArchitecture -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//ModellingArchitecture -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//ModellingArchitecture -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//ModellingArchitecture -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//ModellingArchitecture -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//ModellingArchitecture -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//ModellingArchitecture -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//ModellingArchitecture -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
}

@lazy
rule ModellingArchitecturePkg
	transform s : DSL!ModellingArchitecturePkg
	to t : SysMLine!ItemUsage
	extends Base{
	//ModellingArchitecturePkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//ModellingArchitecturePkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//ModellingArchitecturePkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//ModellingArchitecturePkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//ModellingArchitecturePkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//ModellingArchitecturePkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//ModellingArchitecturePkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//ModellingArchitecturePkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//ModellingArchitecturePkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//ModellingArchitecturePkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//ModellingArchitecturePkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//ModellingArchitecturePkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//ModellingArchitecturePkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//ModellingArchitecturePkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//ModellingArchitecturePkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//ModellingArchitecturePkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//ModellingArchitecturePkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//ModellingArchitecturePkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//ModellingArchitecturePkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//ModellingArchitecturePkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//ModellingArchitecturePkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//ModellingArchitecturePkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//ModellingArchitecturePkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//ModellingArchitecturePkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//ModellingArchitecturePkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
}

@lazy
rule Type
	transform s : DSL!Type
	to t : SysMLine!ItemUsage
	extends Base{
	//Type -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//Type -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//Type -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//Type -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//Type -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//Type -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//Type -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//Type -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//Type -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//Type -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//Type -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//Type -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//Type -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null){
		var abstractTypedElements = new SysMLine!ItemUsage;
		abstractTypedElements.isReference = true;
		abstractTypedElements.featureNote.add(":>");
		abstractTypedElements.featureSpecialization.add("abstractTypedElements");
		abstractTypedElements.valuePart = s.abstractTypedElements.getEReference();
		t.body.add(abstractTypedElements);
	}
	//Type -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//Type -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//Type -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//Type -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//Type -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//Type -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//Type -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//Type -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//Type -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//Type -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//Type -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//Type -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//Type -> EReference : typedElements
	if (s.typedElements.getEReference() != null){
		var typedElements = new SysMLine!ItemUsage;
		typedElements.isReference = true;
		typedElements.featureNote.add(":>");
		typedElements.featureSpecialization.add("typedElements");
		typedElements.valuePart = s.typedElements.getEReference();
		t.body.add(typedElements);
	}
}

@lazy
rule TypedElement
	transform s : DSL!TypedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//TypedElement -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//TypedElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//TypedElement -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//TypedElement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//TypedElement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//TypedElement -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//TypedElement -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//TypedElement -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//TypedElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//TypedElement -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//TypedElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//TypedElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//TypedElement -> EReference : abstractType
	if (s.abstractType.getEReference() != null){
		var abstractType = new SysMLine!ItemUsage;
		abstractType.isReference = true;
		abstractType.featureNote.add(":>");
		abstractType.featureSpecialization.add("abstractType");
		abstractType.valuePart = s.abstractType.getEReference();
		t.body.add(abstractType);
	}
	//TypedElement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//TypedElement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//TypedElement -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//TypedElement -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//TypedElement -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//TypedElement -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//TypedElement -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//TypedElement -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//TypedElement -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//TypedElement -> EReference : type
	if (s.type.getEReference() != null){
		var type = new SysMLine!ItemUsage;
		type.isReference = true;
		type.featureNote.add(":>");
		type.featureSpecialization.add("type");
		type.valuePart = s.type.getEReference();
		t.body.add(type);
	}
}

@lazy
rule Trace
	transform s : DSL!Trace
	to t : SysMLine!ItemUsage
	extends Base{
	//Trace -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//Trace -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//Trace -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//Trace -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//Trace -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//Trace -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//Trace -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//Trace -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//Trace -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//Trace -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//Trace -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//Trace -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//Trace -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//Trace -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//Trace -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//Trace -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//Trace -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//Trace -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//Trace -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//Trace -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//Trace -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//Trace -> EReference : targetElement
	if (s.targetElement.getEReference() != null){
		var targetElement = new SysMLine!ItemUsage;
		targetElement.isReference = true;
		targetElement.featureNote.add(":>");
		targetElement.featureSpecialization.add("targetElement");
		targetElement.valuePart = s.targetElement.getEReference();
		t.body.add(targetElement);
	}
	//Trace -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null){
		var sourceElement = new SysMLine!ItemUsage;
		sourceElement.isReference = true;
		sourceElement.featureNote.add(":>");
		sourceElement.featureSpecialization.add("sourceElement");
		sourceElement.valuePart = s.sourceElement.getEReference();
		t.body.add(sourceElement);
	}
}

@lazy
rule AbstractAnnotation
	transform s : DSL!AbstractAnnotation
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractAnnotation -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//AbstractAnnotation -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//AbstractAnnotation -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//AbstractAnnotation -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//AbstractAnnotation -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//AbstractAnnotation -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//AbstractAnnotation -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//AbstractAnnotation -> EAttribute : content
	if (s.content.getEAttribute() != null){
		var content = new SysMLine!AttributeUsage;
		content.featureNote.add(":>>");
		content.featureSpecialization.add("content");
		content.valuePart = s.content.getEAttribute();
		t.body.add(content);
	}
	//AbstractAnnotation -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//AbstractAnnotation -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//AbstractAnnotation -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//AbstractAnnotation -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//AbstractAnnotation -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//AbstractAnnotation -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//AbstractAnnotation -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//AbstractAnnotation -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//AbstractAnnotation -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//AbstractAnnotation -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//AbstractAnnotation -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//AbstractAnnotation -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//AbstractAnnotation -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
}

@lazy
rule NamingRule
	transform s : DSL!NamingRule
	to t : SysMLine!ItemUsage
	extends Base{
	//NamingRule -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//NamingRule -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//NamingRule -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//NamingRule -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//NamingRule -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//NamingRule -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//NamingRule -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//NamingRule -> EAttribute : content
	if (s.content.getEAttribute() != null){
		var content = new SysMLine!AttributeUsage;
		content.featureNote.add(":>>");
		content.featureSpecialization.add("content");
		content.valuePart = s.content.getEAttribute();
		t.body.add(content);
	}
	//NamingRule -> EAttribute : targetType
	if (s.targetType.getEAttribute() != null){
		var targetType = new SysMLine!AttributeUsage;
		targetType.featureNote.add(":>>");
		targetType.featureSpecialization.add("targetType");
		targetType.valuePart = s.targetType.getEAttribute();
		t.body.add(targetType);
	}
	//NamingRule -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//NamingRule -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//NamingRule -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//NamingRule -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//NamingRule -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//NamingRule -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//NamingRule -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//NamingRule -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//NamingRule -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//NamingRule -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//NamingRule -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//NamingRule -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//NamingRule -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
}

@lazy
rule Constraint
	transform s : DSL!Constraint
	to t : SysMLine!ItemUsage
	extends Base{
	//Constraint -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//Constraint -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//Constraint -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//Constraint -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//Constraint -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//Constraint -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//Constraint -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//Constraint -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//Constraint -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//Constraint -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//Constraint -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//Constraint -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//Constraint -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//Constraint -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//Constraint -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//Constraint -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//Constraint -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//Constraint -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//Constraint -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//Constraint -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//Constraint -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//Constraint -> EReference : constrainedElements
	if (s.constrainedElements.getEReference() != null){
		var constrainedElements = new SysMLine!ItemUsage;
		constrainedElements.isReference = true;
		constrainedElements.featureNote.add(":>");
		constrainedElements.featureSpecialization.add("constrainedElements");
		constrainedElements.valuePart = s.constrainedElements.getEReference();
		t.body.add(constrainedElements);
	}
	//Constraint -> EReference : ownedSpecification
	if (s.ownedSpecification.getEReference() != null){
		var ownedSpecification = new SysMLine!ItemUsage;
		ownedSpecification.isReference = true;
		ownedSpecification.featureNote.add(":>");
		ownedSpecification.featureSpecialization.add("ownedSpecification");
		ownedSpecification.valuePart = s.ownedSpecification.getEReference();
		t.body.add(ownedSpecification);
	}
	//Constraint -> EReference : context
	if (s.context.getEReference() != null){
		var context = new SysMLine!ItemUsage;
		context.isReference = true;
		context.featureNote.add(":>");
		context.featureSpecialization.add("context");
		context.valuePart = s.context.getEReference();
		t.body.add(context);
	}
}

@lazy
rule KeyValue
	transform s : DSL!KeyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//KeyValue -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//KeyValue -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//KeyValue -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//KeyValue -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//KeyValue -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//KeyValue -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//KeyValue -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//KeyValue -> EAttribute : key
	if (s.key.getEAttribute() != null){
		var key = new SysMLine!AttributeUsage;
		key.featureNote.add(":>>");
		key.featureSpecialization.add("key");
		key.valuePart = s.key.getEAttribute();
		t.body.add(key);
	}
	//KeyValue -> EAttribute : value
	if (s.value.getEAttribute() != null){
		var value = new SysMLine!AttributeUsage;
		value.featureNote.add(":>>");
		value.featureSpecialization.add("value");
		value.valuePart = s.value.getEAttribute();
		t.body.add(value);
	}
	//KeyValue -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//KeyValue -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//KeyValue -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//KeyValue -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//KeyValue -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//KeyValue -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//KeyValue -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//KeyValue -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//KeyValue -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//KeyValue -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//KeyValue -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//KeyValue -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//KeyValue -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
}

@lazy
rule ReuseLink
	transform s : DSL!ReuseLink
	to t : SysMLine!ItemUsage
	extends Base{
	//ReuseLink -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//ReuseLink -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//ReuseLink -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//ReuseLink -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//ReuseLink -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//ReuseLink -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//ReuseLink -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//ReuseLink -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//ReuseLink -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//ReuseLink -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//ReuseLink -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//ReuseLink -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//ReuseLink -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//ReuseLink -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//ReuseLink -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//ReuseLink -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//ReuseLink -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//ReuseLink -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//ReuseLink -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//ReuseLink -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//ReuseLink -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//ReuseLink -> EReference : reused
	if (s.reused.getEReference() != null){
		var reused = new SysMLine!ItemUsage;
		reused.isReference = true;
		reused.featureNote.add(":>");
		reused.featureSpecialization.add("reused");
		reused.valuePart = s.reused.getEReference();
		t.body.add(reused);
	}
	//ReuseLink -> EReference : reuser
	if (s.reuser.getEReference() != null){
		var reuser = new SysMLine!ItemUsage;
		reuser.isReference = true;
		reuser.featureNote.add(":>");
		reuser.featureSpecialization.add("reuser");
		reuser.valuePart = s.reuser.getEReference();
		t.body.add(reuser);
	}
}

@lazy
rule ReuseableStructure
	transform s : DSL!ReuseableStructure
	to t : SysMLine!ItemUsage
	extends Base{
	//ReuseableStructure -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//ReuseableStructure -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//ReuseableStructure -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//ReuseableStructure -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//ReuseableStructure -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//ReuseableStructure -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//ReuseableStructure -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//ReuseableStructure -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//ReuseableStructure -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//ReuseableStructure -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//ReuseableStructure -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//ReuseableStructure -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//ReuseableStructure -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//ReuseableStructure -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//ReuseableStructure -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//ReuseableStructure -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//ReuseableStructure -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//ReuseableStructure -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//ReuseableStructure -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//ReuseableStructure -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//ReuseableStructure -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//ReuseableStructure -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//ReuseableStructure -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//ReuseableStructure -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//ReuseableStructure -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//ReuseableStructure -> EReference : reuseLinks
	if (s.reuseLinks.getEReference() != null){
		var reuseLinks = new SysMLine!ItemUsage;
		reuseLinks.isReference = true;
		reuseLinks.featureNote.add(":>");
		reuseLinks.featureSpecialization.add("reuseLinks");
		reuseLinks.valuePart = s.reuseLinks.getEReference();
		t.body.add(reuseLinks);
	}
}

@lazy
rule ReuserStructure
	transform s : DSL!ReuserStructure
	to t : SysMLine!ItemUsage
	extends Base{
	//ReuserStructure -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//ReuserStructure -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//ReuserStructure -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//ReuserStructure -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//ReuserStructure -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//ReuserStructure -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//ReuserStructure -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//ReuserStructure -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//ReuserStructure -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//ReuserStructure -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//ReuserStructure -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//ReuserStructure -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//ReuserStructure -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//ReuserStructure -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//ReuserStructure -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//ReuserStructure -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//ReuserStructure -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//ReuserStructure -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//ReuserStructure -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//ReuserStructure -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//ReuserStructure -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//ReuserStructure -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//ReuserStructure -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//ReuserStructure -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//ReuserStructure -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//ReuserStructure -> EReference : reuseLinks
	if (s.reuseLinks.getEReference() != null){
		var reuseLinks = new SysMLine!ItemUsage;
		reuseLinks.isReference = true;
		reuseLinks.featureNote.add(":>");
		reuseLinks.featureSpecialization.add("reuseLinks");
		reuseLinks.valuePart = s.reuseLinks.getEReference();
		t.body.add(reuseLinks);
	}
	//ReuserStructure -> EReference : ownedReuseLinks
	if (s.ownedReuseLinks.getEReference() != null){
		var ownedReuseLinks = new SysMLine!ItemUsage;
		ownedReuseLinks.isReference = true;
		ownedReuseLinks.featureNote.add(":>");
		ownedReuseLinks.featureSpecialization.add("ownedReuseLinks");
		ownedReuseLinks.valuePart = s.ownedReuseLinks.getEReference();
		t.body.add(ownedReuseLinks);
	}
}

@lazy
rule GeneralizableElement
	transform s : DSL!GeneralizableElement
	to t : SysMLine!ItemUsage
	extends Base{
	//GeneralizableElement -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//GeneralizableElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//GeneralizableElement -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//GeneralizableElement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//GeneralizableElement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//GeneralizableElement -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//GeneralizableElement -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//GeneralizableElement -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//GeneralizableElement -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null){
		var abstract = new SysMLine!AttributeUsage;
		abstract.featureNote.add(":>>");
		abstract.featureSpecialization.add("abstract");
		abstract.valuePart = s.abstract.getEAttribute();
		t.body.add(abstract);
	}
	//GeneralizableElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//GeneralizableElement -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//GeneralizableElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//GeneralizableElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//GeneralizableElement -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null){
		var abstractTypedElements = new SysMLine!ItemUsage;
		abstractTypedElements.isReference = true;
		abstractTypedElements.featureNote.add(":>");
		abstractTypedElements.featureSpecialization.add("abstractTypedElements");
		abstractTypedElements.valuePart = s.abstractTypedElements.getEReference();
		t.body.add(abstractTypedElements);
	}
	//GeneralizableElement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//GeneralizableElement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//GeneralizableElement -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//GeneralizableElement -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//GeneralizableElement -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//GeneralizableElement -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//GeneralizableElement -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//GeneralizableElement -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//GeneralizableElement -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//GeneralizableElement -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//GeneralizableElement -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//GeneralizableElement -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//GeneralizableElement -> EReference : typedElements
	if (s.typedElements.getEReference() != null){
		var typedElements = new SysMLine!ItemUsage;
		typedElements.isReference = true;
		typedElements.featureNote.add(":>");
		typedElements.featureSpecialization.add("typedElements");
		typedElements.valuePart = s.typedElements.getEReference();
		t.body.add(typedElements);
	}
	//GeneralizableElement -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null){
		var ownedGeneralizations = new SysMLine!ItemUsage;
		ownedGeneralizations.isReference = true;
		ownedGeneralizations.featureNote.add(":>");
		ownedGeneralizations.featureSpecialization.add("ownedGeneralizations");
		ownedGeneralizations.valuePart = s.ownedGeneralizations.getEReference();
		t.body.add(ownedGeneralizations);
	}
	//GeneralizableElement -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null){
		var superGeneralizations = new SysMLine!ItemUsage;
		superGeneralizations.isReference = true;
		superGeneralizations.featureNote.add(":>");
		superGeneralizations.featureSpecialization.add("superGeneralizations");
		superGeneralizations.valuePart = s.superGeneralizations.getEReference();
		t.body.add(superGeneralizations);
	}
	//GeneralizableElement -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null){
		var subGeneralizations = new SysMLine!ItemUsage;
		subGeneralizations.isReference = true;
		subGeneralizations.featureNote.add(":>");
		subGeneralizations.featureSpecialization.add("subGeneralizations");
		subGeneralizations.valuePart = s.subGeneralizations.getEReference();
		t.body.add(subGeneralizations);
	}
	//GeneralizableElement -> EReference : super
	if (s.super.getEReference() != null){
		var super = new SysMLine!ItemUsage;
		super.isReference = true;
		super.featureNote.add(":>");
		super.featureSpecialization.add("super");
		super.valuePart = s.super.getEReference();
		t.body.add(super);
	}
	//GeneralizableElement -> EReference : sub
	if (s.sub.getEReference() != null){
		var sub = new SysMLine!ItemUsage;
		sub.isReference = true;
		sub.featureNote.add(":>");
		sub.featureSpecialization.add("sub");
		sub.valuePart = s.sub.getEReference();
		t.body.add(sub);
	}
}

@lazy
rule Classifier
	transform s : DSL!Classifier
	to t : SysMLine!ItemUsage
	extends Base{
	//Classifier -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//Classifier -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//Classifier -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//Classifier -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//Classifier -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//Classifier -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//Classifier -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//Classifier -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//Classifier -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null){
		var abstract = new SysMLine!AttributeUsage;
		abstract.featureNote.add(":>>");
		abstract.featureSpecialization.add("abstract");
		abstract.valuePart = s.abstract.getEAttribute();
		t.body.add(abstract);
	}
	//Classifier -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//Classifier -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//Classifier -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//Classifier -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//Classifier -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null){
		var abstractTypedElements = new SysMLine!ItemUsage;
		abstractTypedElements.isReference = true;
		abstractTypedElements.featureNote.add(":>");
		abstractTypedElements.featureSpecialization.add("abstractTypedElements");
		abstractTypedElements.valuePart = s.abstractTypedElements.getEReference();
		t.body.add(abstractTypedElements);
	}
	//Classifier -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//Classifier -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//Classifier -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//Classifier -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//Classifier -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//Classifier -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//Classifier -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//Classifier -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//Classifier -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//Classifier -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//Classifier -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//Classifier -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//Classifier -> EReference : typedElements
	if (s.typedElements.getEReference() != null){
		var typedElements = new SysMLine!ItemUsage;
		typedElements.isReference = true;
		typedElements.featureNote.add(":>");
		typedElements.featureSpecialization.add("typedElements");
		typedElements.valuePart = s.typedElements.getEReference();
		t.body.add(typedElements);
	}
	//Classifier -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null){
		var ownedGeneralizations = new SysMLine!ItemUsage;
		ownedGeneralizations.isReference = true;
		ownedGeneralizations.featureNote.add(":>");
		ownedGeneralizations.featureSpecialization.add("ownedGeneralizations");
		ownedGeneralizations.valuePart = s.ownedGeneralizations.getEReference();
		t.body.add(ownedGeneralizations);
	}
	//Classifier -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null){
		var superGeneralizations = new SysMLine!ItemUsage;
		superGeneralizations.isReference = true;
		superGeneralizations.featureNote.add(":>");
		superGeneralizations.featureSpecialization.add("superGeneralizations");
		superGeneralizations.valuePart = s.superGeneralizations.getEReference();
		t.body.add(superGeneralizations);
	}
	//Classifier -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null){
		var subGeneralizations = new SysMLine!ItemUsage;
		subGeneralizations.isReference = true;
		subGeneralizations.featureNote.add(":>");
		subGeneralizations.featureSpecialization.add("subGeneralizations");
		subGeneralizations.valuePart = s.subGeneralizations.getEReference();
		t.body.add(subGeneralizations);
	}
	//Classifier -> EReference : super
	if (s.super.getEReference() != null){
		var super = new SysMLine!ItemUsage;
		super.isReference = true;
		super.featureNote.add(":>");
		super.featureSpecialization.add("super");
		super.valuePart = s.super.getEReference();
		t.body.add(super);
	}
	//Classifier -> EReference : sub
	if (s.sub.getEReference() != null){
		var sub = new SysMLine!ItemUsage;
		sub.isReference = true;
		sub.featureNote.add(":>");
		sub.featureSpecialization.add("sub");
		sub.valuePart = s.sub.getEReference();
		t.body.add(sub);
	}
	//Classifier -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null){
		var ownedFeatures = new SysMLine!ItemUsage;
		ownedFeatures.isReference = true;
		ownedFeatures.featureNote.add(":>");
		ownedFeatures.featureSpecialization.add("ownedFeatures");
		ownedFeatures.valuePart = s.ownedFeatures.getEReference();
		t.body.add(ownedFeatures);
	}
	//Classifier -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null){
		var containedProperties = new SysMLine!ItemUsage;
		containedProperties.isReference = true;
		containedProperties.featureNote.add(":>");
		containedProperties.featureSpecialization.add("containedProperties");
		containedProperties.valuePart = s.containedProperties.getEReference();
		t.body.add(containedProperties);
	}
}

@lazy
rule GeneralClass
	transform s : DSL!GeneralClass
	to t : SysMLine!ItemUsage
	extends Base{
	//GeneralClass -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//GeneralClass -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//GeneralClass -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//GeneralClass -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//GeneralClass -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//GeneralClass -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//GeneralClass -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//GeneralClass -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//GeneralClass -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null){
		var abstract = new SysMLine!AttributeUsage;
		abstract.featureNote.add(":>>");
		abstract.featureSpecialization.add("abstract");
		abstract.valuePart = s.abstract.getEAttribute();
		t.body.add(abstract);
	}
	//GeneralClass -> EAttribute : final
	if (s.final.getEAttribute() != null){
		var final = new SysMLine!AttributeUsage;
		final.featureNote.add(":>>");
		final.featureSpecialization.add("final");
		final.valuePart = s.final.getEAttribute();
		t.body.add(final);
	}
	//GeneralClass -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null){
		var visibility = new SysMLine!AttributeUsage;
		visibility.featureNote.add(":>>");
		visibility.featureSpecialization.add("visibility");
		visibility.valuePart = s.visibility.getEAttribute();
		t.body.add(visibility);
	}
	//GeneralClass -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//GeneralClass -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//GeneralClass -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//GeneralClass -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//GeneralClass -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null){
		var abstractTypedElements = new SysMLine!ItemUsage;
		abstractTypedElements.isReference = true;
		abstractTypedElements.featureNote.add(":>");
		abstractTypedElements.featureSpecialization.add("abstractTypedElements");
		abstractTypedElements.valuePart = s.abstractTypedElements.getEReference();
		t.body.add(abstractTypedElements);
	}
	//GeneralClass -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//GeneralClass -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//GeneralClass -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//GeneralClass -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//GeneralClass -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//GeneralClass -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//GeneralClass -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//GeneralClass -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//GeneralClass -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//GeneralClass -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//GeneralClass -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//GeneralClass -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//GeneralClass -> EReference : typedElements
	if (s.typedElements.getEReference() != null){
		var typedElements = new SysMLine!ItemUsage;
		typedElements.isReference = true;
		typedElements.featureNote.add(":>");
		typedElements.featureSpecialization.add("typedElements");
		typedElements.valuePart = s.typedElements.getEReference();
		t.body.add(typedElements);
	}
	//GeneralClass -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null){
		var ownedGeneralizations = new SysMLine!ItemUsage;
		ownedGeneralizations.isReference = true;
		ownedGeneralizations.featureNote.add(":>");
		ownedGeneralizations.featureSpecialization.add("ownedGeneralizations");
		ownedGeneralizations.valuePart = s.ownedGeneralizations.getEReference();
		t.body.add(ownedGeneralizations);
	}
	//GeneralClass -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null){
		var superGeneralizations = new SysMLine!ItemUsage;
		superGeneralizations.isReference = true;
		superGeneralizations.featureNote.add(":>");
		superGeneralizations.featureSpecialization.add("superGeneralizations");
		superGeneralizations.valuePart = s.superGeneralizations.getEReference();
		t.body.add(superGeneralizations);
	}
	//GeneralClass -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null){
		var subGeneralizations = new SysMLine!ItemUsage;
		subGeneralizations.isReference = true;
		subGeneralizations.featureNote.add(":>");
		subGeneralizations.featureSpecialization.add("subGeneralizations");
		subGeneralizations.valuePart = s.subGeneralizations.getEReference();
		t.body.add(subGeneralizations);
	}
	//GeneralClass -> EReference : super
	if (s.super.getEReference() != null){
		var super = new SysMLine!ItemUsage;
		super.isReference = true;
		super.featureNote.add(":>");
		super.featureSpecialization.add("super");
		super.valuePart = s.super.getEReference();
		t.body.add(super);
	}
	//GeneralClass -> EReference : sub
	if (s.sub.getEReference() != null){
		var sub = new SysMLine!ItemUsage;
		sub.isReference = true;
		sub.featureNote.add(":>");
		sub.featureSpecialization.add("sub");
		sub.valuePart = s.sub.getEReference();
		t.body.add(sub);
	}
	//GeneralClass -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null){
		var ownedFeatures = new SysMLine!ItemUsage;
		ownedFeatures.isReference = true;
		ownedFeatures.featureNote.add(":>");
		ownedFeatures.featureSpecialization.add("ownedFeatures");
		ownedFeatures.valuePart = s.ownedFeatures.getEReference();
		t.body.add(ownedFeatures);
	}
	//GeneralClass -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null){
		var containedProperties = new SysMLine!ItemUsage;
		containedProperties.isReference = true;
		containedProperties.featureNote.add(":>");
		containedProperties.featureSpecialization.add("containedProperties");
		containedProperties.valuePart = s.containedProperties.getEReference();
		t.body.add(containedProperties);
	}
	//GeneralClass -> EReference : containedOperations
	if (s.containedOperations.getEReference() != null){
		var containedOperations = new SysMLine!ItemUsage;
		containedOperations.isReference = true;
		containedOperations.featureNote.add(":>");
		containedOperations.featureSpecialization.add("containedOperations");
		containedOperations.valuePart = s.containedOperations.getEReference();
		t.body.add(containedOperations);
	}
	//GeneralClass -> EReference : nestedGeneralClasses
	if (s.nestedGeneralClasses.getEReference() != null){
		var nestedGeneralClasses = new SysMLine!ItemUsage;
		nestedGeneralClasses.isReference = true;
		nestedGeneralClasses.featureNote.add(":>");
		nestedGeneralClasses.featureSpecialization.add("nestedGeneralClasses");
		nestedGeneralClasses.valuePart = s.nestedGeneralClasses.getEReference();
		t.body.add(nestedGeneralClasses);
	}
}

@lazy
rule Generalization
	transform s : DSL!Generalization
	to t : SysMLine!ItemUsage
	extends Base{
	//Generalization -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//Generalization -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//Generalization -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//Generalization -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//Generalization -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//Generalization -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//Generalization -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//Generalization -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//Generalization -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//Generalization -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//Generalization -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//Generalization -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//Generalization -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//Generalization -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//Generalization -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//Generalization -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//Generalization -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//Generalization -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//Generalization -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//Generalization -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//Generalization -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//Generalization -> EReference : super
	if (s.super.getEReference() != null){
		var super = new SysMLine!ItemUsage;
		super.isReference = true;
		super.featureNote.add(":>");
		super.featureSpecialization.add("super");
		super.valuePart = s.super.getEReference();
		t.body.add(super);
	}
	//Generalization -> EReference : sub
	if (s.sub.getEReference() != null){
		var sub = new SysMLine!ItemUsage;
		sub.isReference = true;
		sub.featureNote.add(":>");
		sub.featureSpecialization.add("sub");
		sub.valuePart = s.sub.getEReference();
		t.body.add(sub);
	}
}

@lazy
rule Feature
	transform s : DSL!Feature
	to t : SysMLine!ItemUsage
	extends Base{
	//Feature -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//Feature -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//Feature -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//Feature -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//Feature -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//Feature -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//Feature -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//Feature -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//Feature -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//Feature -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null){
		var isStatic = new SysMLine!AttributeUsage;
		isStatic.featureNote.add(":>>");
		isStatic.featureSpecialization.add("isStatic");
		isStatic.valuePart = s.isStatic.getEAttribute();
		t.body.add(isStatic);
	}
	//Feature -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null){
		var visibility = new SysMLine!AttributeUsage;
		visibility.featureNote.add(":>>");
		visibility.featureSpecialization.add("visibility");
		visibility.valuePart = s.visibility.getEAttribute();
		t.body.add(visibility);
	}
	//Feature -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//Feature -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//Feature -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//Feature -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//Feature -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//Feature -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//Feature -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//Feature -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//Feature -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//Feature -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//Feature -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//Feature -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//Feature -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
}

@lazy
rule AbstractExchangeItemPkg
	transform s : DSL!AbstractExchangeItemPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractExchangeItemPkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//AbstractExchangeItemPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//AbstractExchangeItemPkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//AbstractExchangeItemPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//AbstractExchangeItemPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//AbstractExchangeItemPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//AbstractExchangeItemPkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//AbstractExchangeItemPkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//AbstractExchangeItemPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//AbstractExchangeItemPkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//AbstractExchangeItemPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//AbstractExchangeItemPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//AbstractExchangeItemPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//AbstractExchangeItemPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//AbstractExchangeItemPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//AbstractExchangeItemPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//AbstractExchangeItemPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//AbstractExchangeItemPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//AbstractExchangeItemPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//AbstractExchangeItemPkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//AbstractExchangeItemPkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//AbstractExchangeItemPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//AbstractExchangeItemPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//AbstractExchangeItemPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//AbstractExchangeItemPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//AbstractExchangeItemPkg -> EReference : ownedExchangeItems
	if (s.ownedExchangeItems.getEReference() != null){
		var ownedExchangeItems = new SysMLine!ItemUsage;
		ownedExchangeItems.isReference = true;
		ownedExchangeItems.featureNote.add(":>");
		ownedExchangeItems.featureSpecialization.add("ownedExchangeItems");
		ownedExchangeItems.valuePart = s.ownedExchangeItems.getEReference();
		t.body.add(ownedExchangeItems);
	}
}

@lazy
rule Allocation
	transform s : DSL!Allocation
	to t : SysMLine!ItemUsage
	extends Base{
	//Allocation -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//Allocation -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//Allocation -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//Allocation -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//Allocation -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//Allocation -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//Allocation -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//Allocation -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//Allocation -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//Allocation -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//Allocation -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//Allocation -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//Allocation -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//Allocation -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//Allocation -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//Allocation -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//Allocation -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//Allocation -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//Allocation -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//Allocation -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//Allocation -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//Allocation -> EReference : targetElement
	if (s.targetElement.getEReference() != null){
		var targetElement = new SysMLine!ItemUsage;
		targetElement.isReference = true;
		targetElement.featureNote.add(":>");
		targetElement.featureSpecialization.add("targetElement");
		targetElement.valuePart = s.targetElement.getEReference();
		t.body.add(targetElement);
	}
	//Allocation -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null){
		var sourceElement = new SysMLine!ItemUsage;
		sourceElement.isReference = true;
		sourceElement.featureNote.add(":>");
		sourceElement.featureSpecialization.add("sourceElement");
		sourceElement.valuePart = s.sourceElement.getEReference();
		t.body.add(sourceElement);
	}
}

@lazy
rule Involvement
	transform s : DSL!Involvement
	to t : SysMLine!ItemUsage
	extends Base{
	//Involvement -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//Involvement -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//Involvement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//Involvement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//Involvement -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//Involvement -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//Involvement -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//Involvement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//Involvement -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//Involvement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//Involvement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//Involvement -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//Involvement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//Involvement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//Involvement -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//Involvement -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//Involvement -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//Involvement -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//Involvement -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//Involvement -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//Involvement -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//Involvement -> EReference : involver
	if (s.involver.getEReference() != null){
		var involver = new SysMLine!ItemUsage;
		involver.isReference = true;
		involver.featureNote.add(":>");
		involver.featureSpecialization.add("involver");
		involver.valuePart = s.involver.getEReference();
		t.body.add(involver);
	}
	//Involvement -> EReference : involved
	if (s.involved.getEReference() != null){
		var involved = new SysMLine!ItemUsage;
		involved.isReference = true;
		involved.featureNote.add(":>");
		involved.featureSpecialization.add("involved");
		involved.valuePart = s.involved.getEReference();
		t.body.add(involved);
	}
}

@lazy
rule InvolverElement
	transform s : DSL!InvolverElement
	to t : SysMLine!ItemUsage
	extends Base{
	//InvolverElement -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//InvolverElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//InvolverElement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//InvolverElement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//InvolverElement -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//InvolverElement -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//InvolverElement -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//InvolverElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//InvolverElement -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//InvolverElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//InvolverElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//InvolverElement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//InvolverElement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//InvolverElement -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//InvolverElement -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//InvolverElement -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//InvolverElement -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//InvolverElement -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//InvolverElement -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//InvolverElement -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//InvolverElement -> EReference : involvedInvolvements
	if (s.involvedInvolvements.getEReference() != null){
		var involvedInvolvements = new SysMLine!ItemUsage;
		involvedInvolvements.isReference = true;
		involvedInvolvements.featureNote.add(":>");
		involvedInvolvements.featureSpecialization.add("involvedInvolvements");
		involvedInvolvements.valuePart = s.involvedInvolvements.getEReference();
		t.body.add(involvedInvolvements);
	}
}

@lazy
rule InvolvedElement
	transform s : DSL!InvolvedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//InvolvedElement -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//InvolvedElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//InvolvedElement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//InvolvedElement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//InvolvedElement -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//InvolvedElement -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//InvolvedElement -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//InvolvedElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//InvolvedElement -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//InvolvedElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//InvolvedElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//InvolvedElement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//InvolvedElement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//InvolvedElement -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//InvolvedElement -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//InvolvedElement -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//InvolvedElement -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//InvolvedElement -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//InvolvedElement -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//InvolvedElement -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//InvolvedElement -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null){
		var involvingInvolvements = new SysMLine!ItemUsage;
		involvingInvolvements.isReference = true;
		involvingInvolvements.featureNote.add(":>");
		involvingInvolvements.featureSpecialization.add("involvingInvolvements");
		involvingInvolvements.valuePart = s.involvingInvolvements.getEReference();
		t.body.add(involvingInvolvements);
	}
}

@lazy
rule AbstractPropertyValue
	transform s : DSL!AbstractPropertyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractPropertyValue -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//AbstractPropertyValue -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//AbstractPropertyValue -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//AbstractPropertyValue -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//AbstractPropertyValue -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//AbstractPropertyValue -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//AbstractPropertyValue -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//AbstractPropertyValue -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//AbstractPropertyValue -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//AbstractPropertyValue -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//AbstractPropertyValue -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//AbstractPropertyValue -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//AbstractPropertyValue -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//AbstractPropertyValue -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//AbstractPropertyValue -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//AbstractPropertyValue -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//AbstractPropertyValue -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//AbstractPropertyValue -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//AbstractPropertyValue -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//AbstractPropertyValue -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//AbstractPropertyValue -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//AbstractPropertyValue -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null){
		var involvedElements = new SysMLine!ItemUsage;
		involvedElements.isReference = true;
		involvedElements.featureNote.add(":>");
		involvedElements.featureSpecialization.add("involvedElements");
		involvedElements.valuePart = s.involvedElements.getEReference();
		t.body.add(involvedElements);
	}
	//AbstractPropertyValue -> EReference : valuedElements
	if (s.valuedElements.getEReference() != null){
		var valuedElements = new SysMLine!ItemUsage;
		valuedElements.isReference = true;
		valuedElements.featureNote.add(":>");
		valuedElements.featureSpecialization.add("valuedElements");
		valuedElements.valuePart = s.valuedElements.getEReference();
		t.body.add(valuedElements);
	}
}

@lazy
rule StringPropertyValue
	transform s : DSL!StringPropertyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//StringPropertyValue -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//StringPropertyValue -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//StringPropertyValue -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//StringPropertyValue -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//StringPropertyValue -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//StringPropertyValue -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//StringPropertyValue -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//StringPropertyValue -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//StringPropertyValue -> EAttribute : value
	if (s.value.getEAttribute() != null){
		var value = new SysMLine!AttributeUsage;
		value.featureNote.add(":>>");
		value.featureSpecialization.add("value");
		value.valuePart = s.value.getEAttribute();
		t.body.add(value);
	}
	//StringPropertyValue -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//StringPropertyValue -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//StringPropertyValue -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//StringPropertyValue -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//StringPropertyValue -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//StringPropertyValue -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//StringPropertyValue -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//StringPropertyValue -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//StringPropertyValue -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//StringPropertyValue -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//StringPropertyValue -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//StringPropertyValue -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//StringPropertyValue -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//StringPropertyValue -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null){
		var involvedElements = new SysMLine!ItemUsage;
		involvedElements.isReference = true;
		involvedElements.featureNote.add(":>");
		involvedElements.featureSpecialization.add("involvedElements");
		involvedElements.valuePart = s.involvedElements.getEReference();
		t.body.add(involvedElements);
	}
	//StringPropertyValue -> EReference : valuedElements
	if (s.valuedElements.getEReference() != null){
		var valuedElements = new SysMLine!ItemUsage;
		valuedElements.isReference = true;
		valuedElements.featureNote.add(":>");
		valuedElements.featureSpecialization.add("valuedElements");
		valuedElements.valuePart = s.valuedElements.getEReference();
		t.body.add(valuedElements);
	}
}

@lazy
rule IntegerPropertyValue
	transform s : DSL!IntegerPropertyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//IntegerPropertyValue -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//IntegerPropertyValue -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//IntegerPropertyValue -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//IntegerPropertyValue -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//IntegerPropertyValue -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//IntegerPropertyValue -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//IntegerPropertyValue -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//IntegerPropertyValue -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//IntegerPropertyValue -> EAttribute : value
	if (s.value.getEAttribute() != null){
		var value = new SysMLine!AttributeUsage;
		value.featureNote.add(":>>");
		value.featureSpecialization.add("value");
		value.valuePart = s.value.getEAttribute();
		t.body.add(value);
	}
	//IntegerPropertyValue -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//IntegerPropertyValue -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//IntegerPropertyValue -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//IntegerPropertyValue -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//IntegerPropertyValue -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//IntegerPropertyValue -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//IntegerPropertyValue -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//IntegerPropertyValue -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//IntegerPropertyValue -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//IntegerPropertyValue -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//IntegerPropertyValue -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//IntegerPropertyValue -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//IntegerPropertyValue -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//IntegerPropertyValue -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null){
		var involvedElements = new SysMLine!ItemUsage;
		involvedElements.isReference = true;
		involvedElements.featureNote.add(":>");
		involvedElements.featureSpecialization.add("involvedElements");
		involvedElements.valuePart = s.involvedElements.getEReference();
		t.body.add(involvedElements);
	}
	//IntegerPropertyValue -> EReference : valuedElements
	if (s.valuedElements.getEReference() != null){
		var valuedElements = new SysMLine!ItemUsage;
		valuedElements.isReference = true;
		valuedElements.featureNote.add(":>");
		valuedElements.featureSpecialization.add("valuedElements");
		valuedElements.valuePart = s.valuedElements.getEReference();
		t.body.add(valuedElements);
	}
}

@lazy
rule BooleanPropertyValue
	transform s : DSL!BooleanPropertyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//BooleanPropertyValue -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//BooleanPropertyValue -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//BooleanPropertyValue -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//BooleanPropertyValue -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//BooleanPropertyValue -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//BooleanPropertyValue -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//BooleanPropertyValue -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//BooleanPropertyValue -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//BooleanPropertyValue -> EAttribute : value
	if (s.value.getEAttribute() != null){
		var value = new SysMLine!AttributeUsage;
		value.featureNote.add(":>>");
		value.featureSpecialization.add("value");
		value.valuePart = s.value.getEAttribute();
		t.body.add(value);
	}
	//BooleanPropertyValue -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//BooleanPropertyValue -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//BooleanPropertyValue -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//BooleanPropertyValue -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//BooleanPropertyValue -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//BooleanPropertyValue -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//BooleanPropertyValue -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//BooleanPropertyValue -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//BooleanPropertyValue -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//BooleanPropertyValue -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//BooleanPropertyValue -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//BooleanPropertyValue -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//BooleanPropertyValue -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//BooleanPropertyValue -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null){
		var involvedElements = new SysMLine!ItemUsage;
		involvedElements.isReference = true;
		involvedElements.featureNote.add(":>");
		involvedElements.featureSpecialization.add("involvedElements");
		involvedElements.valuePart = s.involvedElements.getEReference();
		t.body.add(involvedElements);
	}
	//BooleanPropertyValue -> EReference : valuedElements
	if (s.valuedElements.getEReference() != null){
		var valuedElements = new SysMLine!ItemUsage;
		valuedElements.isReference = true;
		valuedElements.featureNote.add(":>");
		valuedElements.featureSpecialization.add("valuedElements");
		valuedElements.valuePart = s.valuedElements.getEReference();
		t.body.add(valuedElements);
	}
}

@lazy
rule FloatPropertyValue
	transform s : DSL!FloatPropertyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//FloatPropertyValue -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//FloatPropertyValue -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//FloatPropertyValue -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//FloatPropertyValue -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//FloatPropertyValue -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//FloatPropertyValue -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//FloatPropertyValue -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//FloatPropertyValue -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//FloatPropertyValue -> EAttribute : value
	if (s.value.getEAttribute() != null){
		var value = new SysMLine!AttributeUsage;
		value.featureNote.add(":>>");
		value.featureSpecialization.add("value");
		value.valuePart = s.value.getEAttribute();
		t.body.add(value);
	}
	//FloatPropertyValue -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//FloatPropertyValue -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//FloatPropertyValue -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//FloatPropertyValue -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//FloatPropertyValue -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//FloatPropertyValue -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//FloatPropertyValue -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//FloatPropertyValue -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//FloatPropertyValue -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//FloatPropertyValue -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//FloatPropertyValue -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//FloatPropertyValue -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//FloatPropertyValue -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//FloatPropertyValue -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null){
		var involvedElements = new SysMLine!ItemUsage;
		involvedElements.isReference = true;
		involvedElements.featureNote.add(":>");
		involvedElements.featureSpecialization.add("involvedElements");
		involvedElements.valuePart = s.involvedElements.getEReference();
		t.body.add(involvedElements);
	}
	//FloatPropertyValue -> EReference : valuedElements
	if (s.valuedElements.getEReference() != null){
		var valuedElements = new SysMLine!ItemUsage;
		valuedElements.isReference = true;
		valuedElements.featureNote.add(":>");
		valuedElements.featureSpecialization.add("valuedElements");
		valuedElements.valuePart = s.valuedElements.getEReference();
		t.body.add(valuedElements);
	}
}

@lazy
rule EnumerationPropertyValue
	transform s : DSL!EnumerationPropertyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//EnumerationPropertyValue -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//EnumerationPropertyValue -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//EnumerationPropertyValue -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//EnumerationPropertyValue -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//EnumerationPropertyValue -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//EnumerationPropertyValue -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//EnumerationPropertyValue -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//EnumerationPropertyValue -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//EnumerationPropertyValue -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//EnumerationPropertyValue -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//EnumerationPropertyValue -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//EnumerationPropertyValue -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//EnumerationPropertyValue -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//EnumerationPropertyValue -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//EnumerationPropertyValue -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//EnumerationPropertyValue -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//EnumerationPropertyValue -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//EnumerationPropertyValue -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//EnumerationPropertyValue -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//EnumerationPropertyValue -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//EnumerationPropertyValue -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//EnumerationPropertyValue -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null){
		var involvedElements = new SysMLine!ItemUsage;
		involvedElements.isReference = true;
		involvedElements.featureNote.add(":>");
		involvedElements.featureSpecialization.add("involvedElements");
		involvedElements.valuePart = s.involvedElements.getEReference();
		t.body.add(involvedElements);
	}
	//EnumerationPropertyValue -> EReference : valuedElements
	if (s.valuedElements.getEReference() != null){
		var valuedElements = new SysMLine!ItemUsage;
		valuedElements.isReference = true;
		valuedElements.featureNote.add(":>");
		valuedElements.featureSpecialization.add("valuedElements");
		valuedElements.valuePart = s.valuedElements.getEReference();
		t.body.add(valuedElements);
	}
	//EnumerationPropertyValue -> EReference : type
	if (s.type.getEReference() != null){
		var type = new SysMLine!ItemUsage;
		type.isReference = true;
		type.featureNote.add(":>");
		type.featureSpecialization.add("type");
		type.valuePart = s.type.getEReference();
		t.body.add(type);
	}
	//EnumerationPropertyValue -> EReference : value
	if (s.value.getEReference() != null){
		var value = new SysMLine!ItemUsage;
		value.isReference = true;
		value.featureNote.add(":>");
		value.featureSpecialization.add("value");
		value.valuePart = s.value.getEReference();
		t.body.add(value);
	}
}

@lazy
rule EnumerationPropertyType
	transform s : DSL!EnumerationPropertyType
	to t : SysMLine!ItemUsage
	extends Base{
	//EnumerationPropertyType -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//EnumerationPropertyType -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//EnumerationPropertyType -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//EnumerationPropertyType -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//EnumerationPropertyType -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//EnumerationPropertyType -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//EnumerationPropertyType -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//EnumerationPropertyType -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//EnumerationPropertyType -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//EnumerationPropertyType -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//EnumerationPropertyType -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//EnumerationPropertyType -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//EnumerationPropertyType -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//EnumerationPropertyType -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//EnumerationPropertyType -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//EnumerationPropertyType -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//EnumerationPropertyType -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//EnumerationPropertyType -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//EnumerationPropertyType -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//EnumerationPropertyType -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//EnumerationPropertyType -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//EnumerationPropertyType -> EReference : ownedLiterals
	if (s.ownedLiterals.getEReference() != null){
		var ownedLiterals = new SysMLine!ItemUsage;
		ownedLiterals.isReference = true;
		ownedLiterals.featureNote.add(":>");
		ownedLiterals.featureSpecialization.add("ownedLiterals");
		ownedLiterals.valuePart = s.ownedLiterals.getEReference();
		t.body.add(ownedLiterals);
	}
}

@lazy
rule EnumerationPropertyLiteral
	transform s : DSL!EnumerationPropertyLiteral
	to t : SysMLine!ItemUsage
	extends Base{
	//EnumerationPropertyLiteral -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//EnumerationPropertyLiteral -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//EnumerationPropertyLiteral -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//EnumerationPropertyLiteral -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//EnumerationPropertyLiteral -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//EnumerationPropertyLiteral -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//EnumerationPropertyLiteral -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//EnumerationPropertyLiteral -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//EnumerationPropertyLiteral -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//EnumerationPropertyLiteral -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//EnumerationPropertyLiteral -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//EnumerationPropertyLiteral -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//EnumerationPropertyLiteral -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//EnumerationPropertyLiteral -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//EnumerationPropertyLiteral -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//EnumerationPropertyLiteral -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//EnumerationPropertyLiteral -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//EnumerationPropertyLiteral -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//EnumerationPropertyLiteral -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//EnumerationPropertyLiteral -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//EnumerationPropertyLiteral -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
}

@lazy
rule PropertyValueGroup
	transform s : DSL!PropertyValueGroup
	to t : SysMLine!ItemUsage
	extends Base{
	//PropertyValueGroup -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//PropertyValueGroup -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//PropertyValueGroup -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//PropertyValueGroup -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//PropertyValueGroup -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//PropertyValueGroup -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//PropertyValueGroup -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//PropertyValueGroup -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//PropertyValueGroup -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//PropertyValueGroup -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//PropertyValueGroup -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//PropertyValueGroup -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//PropertyValueGroup -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//PropertyValueGroup -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//PropertyValueGroup -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//PropertyValueGroup -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//PropertyValueGroup -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//PropertyValueGroup -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//PropertyValueGroup -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//PropertyValueGroup -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//PropertyValueGroup -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//PropertyValueGroup -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//PropertyValueGroup -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//PropertyValueGroup -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//PropertyValueGroup -> EReference : valuedElements
	if (s.valuedElements.getEReference() != null){
		var valuedElements = new SysMLine!ItemUsage;
		valuedElements.isReference = true;
		valuedElements.featureNote.add(":>");
		valuedElements.featureSpecialization.add("valuedElements");
		valuedElements.valuePart = s.valuedElements.getEReference();
		t.body.add(valuedElements);
	}
}

@lazy
rule PropertyValuePkg
	transform s : DSL!PropertyValuePkg
	to t : SysMLine!ItemUsage
	extends Base{
	//PropertyValuePkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//PropertyValuePkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//PropertyValuePkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//PropertyValuePkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//PropertyValuePkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//PropertyValuePkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//PropertyValuePkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//PropertyValuePkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//PropertyValuePkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//PropertyValuePkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//PropertyValuePkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//PropertyValuePkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//PropertyValuePkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//PropertyValuePkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//PropertyValuePkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//PropertyValuePkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//PropertyValuePkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//PropertyValuePkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//PropertyValuePkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//PropertyValuePkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//PropertyValuePkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//PropertyValuePkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//PropertyValuePkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//PropertyValuePkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//PropertyValuePkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
}

@lazy
rule AbstractDependenciesPkg
	transform s : DSL!AbstractDependenciesPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractDependenciesPkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//AbstractDependenciesPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//AbstractDependenciesPkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//AbstractDependenciesPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//AbstractDependenciesPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//AbstractDependenciesPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//AbstractDependenciesPkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//AbstractDependenciesPkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//AbstractDependenciesPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//AbstractDependenciesPkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//AbstractDependenciesPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//AbstractDependenciesPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//AbstractDependenciesPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//AbstractDependenciesPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//AbstractDependenciesPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//AbstractDependenciesPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//AbstractDependenciesPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//AbstractDependenciesPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//AbstractDependenciesPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//AbstractDependenciesPkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//AbstractDependenciesPkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//AbstractDependenciesPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//AbstractDependenciesPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//AbstractDependenciesPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//AbstractDependenciesPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
}


// modellingcore.ecore
@lazy
rule ModelElement
	transform s : DSL!ModelElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ModelElement -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//ModelElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//ModelElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//ModelElement -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//ModelElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//ModelElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
}

@lazy
rule AbstractRelationship
	transform s : DSL!AbstractRelationship
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractRelationship -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//AbstractRelationship -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//AbstractRelationship -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//AbstractRelationship -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//AbstractRelationship -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//AbstractRelationship -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//AbstractRelationship -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
}

@lazy
rule AbstractNamedElement
	transform s : DSL!AbstractNamedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractNamedElement -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//AbstractNamedElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//AbstractNamedElement -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//AbstractNamedElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//AbstractNamedElement -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//AbstractNamedElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//AbstractNamedElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
}

@lazy
rule InformationsExchanger
	transform s : DSL!InformationsExchanger
	to t : SysMLine!ItemUsage
	extends Base{
	//InformationsExchanger -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//InformationsExchanger -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//InformationsExchanger -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//InformationsExchanger -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//InformationsExchanger -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//InformationsExchanger -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//InformationsExchanger -> EReference : incomingInformationFlows
	if (s.incomingInformationFlows.getEReference() != null){
		var incomingInformationFlows = new SysMLine!ItemUsage;
		incomingInformationFlows.isReference = true;
		incomingInformationFlows.featureNote.add(":>");
		incomingInformationFlows.featureSpecialization.add("incomingInformationFlows");
		incomingInformationFlows.valuePart = s.incomingInformationFlows.getEReference();
		t.body.add(incomingInformationFlows);
	}
	//InformationsExchanger -> EReference : outgoingInformationFlows
	if (s.outgoingInformationFlows.getEReference() != null){
		var outgoingInformationFlows = new SysMLine!ItemUsage;
		outgoingInformationFlows.isReference = true;
		outgoingInformationFlows.featureNote.add(":>");
		outgoingInformationFlows.featureSpecialization.add("outgoingInformationFlows");
		outgoingInformationFlows.valuePart = s.outgoingInformationFlows.getEReference();
		t.body.add(outgoingInformationFlows);
	}
	//InformationsExchanger -> EReference : informationFlows
	if (s.informationFlows.getEReference() != null){
		var informationFlows = new SysMLine!ItemUsage;
		informationFlows.isReference = true;
		informationFlows.featureNote.add(":>");
		informationFlows.featureSpecialization.add("informationFlows");
		informationFlows.valuePart = s.informationFlows.getEReference();
		t.body.add(informationFlows);
	}
}

@lazy
rule TraceableElement
	transform s : DSL!TraceableElement
	to t : SysMLine!ItemUsage
	extends Base{
	//TraceableElement -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//TraceableElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//TraceableElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//TraceableElement -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//TraceableElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//TraceableElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//TraceableElement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//TraceableElement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
}

@lazy
rule FinalizableElement
	transform s : DSL!FinalizableElement
	to t : SysMLine!ItemUsage
	extends Base{
	//FinalizableElement -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//FinalizableElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//FinalizableElement -> EAttribute : final
	if (s.final.getEAttribute() != null){
		var final = new SysMLine!AttributeUsage;
		final.featureNote.add(":>>");
		final.featureSpecialization.add("final");
		final.valuePart = s.final.getEAttribute();
		t.body.add(final);
	}
	//FinalizableElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//FinalizableElement -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//FinalizableElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//FinalizableElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
}

@lazy
rule PublishableElement
	transform s : DSL!PublishableElement
	to t : SysMLine!ItemUsage
	extends Base{
	//PublishableElement -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//PublishableElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//PublishableElement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//PublishableElement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//PublishableElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//PublishableElement -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//PublishableElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//PublishableElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
}

@lazy
rule AbstractType
	transform s : DSL!AbstractType
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractType -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//AbstractType -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//AbstractType -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//AbstractType -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//AbstractType -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//AbstractType -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//AbstractType -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//AbstractType -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null){
		var abstractTypedElements = new SysMLine!ItemUsage;
		abstractTypedElements.isReference = true;
		abstractTypedElements.featureNote.add(":>");
		abstractTypedElements.featureSpecialization.add("abstractTypedElements");
		abstractTypedElements.valuePart = s.abstractTypedElements.getEReference();
		t.body.add(abstractTypedElements);
	}
}

@lazy
rule AbstractTypedElement
	transform s : DSL!AbstractTypedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractTypedElement -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//AbstractTypedElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//AbstractTypedElement -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//AbstractTypedElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//AbstractTypedElement -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//AbstractTypedElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//AbstractTypedElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//AbstractTypedElement -> EReference : abstractType
	if (s.abstractType.getEReference() != null){
		var abstractType = new SysMLine!ItemUsage;
		abstractType.isReference = true;
		abstractType.featureNote.add(":>");
		abstractType.featureSpecialization.add("abstractType");
		abstractType.valuePart = s.abstractType.getEReference();
		t.body.add(abstractType);
	}
}

@lazy
rule AbstractTrace
	transform s : DSL!AbstractTrace
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractTrace -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//AbstractTrace -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//AbstractTrace -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//AbstractTrace -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//AbstractTrace -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//AbstractTrace -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//AbstractTrace -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//AbstractTrace -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//AbstractTrace -> EReference : targetElement
	if (s.targetElement.getEReference() != null){
		var targetElement = new SysMLine!ItemUsage;
		targetElement.isReference = true;
		targetElement.featureNote.add(":>");
		targetElement.featureSpecialization.add("targetElement");
		targetElement.valuePart = s.targetElement.getEReference();
		t.body.add(targetElement);
	}
	//AbstractTrace -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null){
		var sourceElement = new SysMLine!ItemUsage;
		sourceElement.isReference = true;
		sourceElement.featureNote.add(":>");
		sourceElement.featureSpecialization.add("sourceElement");
		sourceElement.valuePart = s.sourceElement.getEReference();
		t.body.add(sourceElement);
	}
}

@lazy
rule AbstractConstraint
	transform s : DSL!AbstractConstraint
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractConstraint -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//AbstractConstraint -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//AbstractConstraint -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//AbstractConstraint -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//AbstractConstraint -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//AbstractConstraint -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//AbstractConstraint -> EReference : constrainedElements
	if (s.constrainedElements.getEReference() != null){
		var constrainedElements = new SysMLine!ItemUsage;
		constrainedElements.isReference = true;
		constrainedElements.featureNote.add(":>");
		constrainedElements.featureSpecialization.add("constrainedElements");
		constrainedElements.valuePart = s.constrainedElements.getEReference();
		t.body.add(constrainedElements);
	}
	//AbstractConstraint -> EReference : ownedSpecification
	if (s.ownedSpecification.getEReference() != null){
		var ownedSpecification = new SysMLine!ItemUsage;
		ownedSpecification.isReference = true;
		ownedSpecification.featureNote.add(":>");
		ownedSpecification.featureSpecialization.add("ownedSpecification");
		ownedSpecification.valuePart = s.ownedSpecification.getEReference();
		t.body.add(ownedSpecification);
	}
	//AbstractConstraint -> EReference : context
	if (s.context.getEReference() != null){
		var context = new SysMLine!ItemUsage;
		context.isReference = true;
		context.featureNote.add(":>");
		context.featureSpecialization.add("context");
		context.valuePart = s.context.getEReference();
		t.body.add(context);
	}
}

@lazy
rule ValueSpecification
	transform s : DSL!ValueSpecification
	to t : SysMLine!ItemUsage
	extends Base{
	//ValueSpecification -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//ValueSpecification -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//ValueSpecification -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//ValueSpecification -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//ValueSpecification -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//ValueSpecification -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//ValueSpecification -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//ValueSpecification -> EReference : abstractType
	if (s.abstractType.getEReference() != null){
		var abstractType = new SysMLine!ItemUsage;
		abstractType.isReference = true;
		abstractType.featureNote.add(":>");
		abstractType.featureSpecialization.add("abstractType");
		abstractType.valuePart = s.abstractType.getEReference();
		t.body.add(abstractType);
	}
}

@lazy
rule AbstractParameter
	transform s : DSL!AbstractParameter
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractParameter -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//AbstractParameter -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//AbstractParameter -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//AbstractParameter -> EAttribute : isException
	if (s.isException.getEAttribute() != null){
		var isException = new SysMLine!AttributeUsage;
		isException.featureNote.add(":>>");
		isException.featureSpecialization.add("isException");
		isException.valuePart = s.isException.getEAttribute();
		t.body.add(isException);
	}
	//AbstractParameter -> EAttribute : isStream
	if (s.isStream.getEAttribute() != null){
		var isStream = new SysMLine!AttributeUsage;
		isStream.featureNote.add(":>>");
		isStream.featureSpecialization.add("isStream");
		isStream.valuePart = s.isStream.getEAttribute();
		t.body.add(isStream);
	}
	//AbstractParameter -> EAttribute : isOptional
	if (s.isOptional.getEAttribute() != null){
		var isOptional = new SysMLine!AttributeUsage;
		isOptional.featureNote.add(":>>");
		isOptional.featureSpecialization.add("isOptional");
		isOptional.valuePart = s.isOptional.getEAttribute();
		t.body.add(isOptional);
	}
	//AbstractParameter -> EAttribute : kindOfRate
	if (s.kindOfRate.getEAttribute() != null){
		var kindOfRate = new SysMLine!AttributeUsage;
		kindOfRate.featureNote.add(":>>");
		kindOfRate.featureSpecialization.add("kindOfRate");
		kindOfRate.valuePart = s.kindOfRate.getEAttribute();
		t.body.add(kindOfRate);
	}
	//AbstractParameter -> EAttribute : effect
	if (s.effect.getEAttribute() != null){
		var effect = new SysMLine!AttributeUsage;
		effect.featureNote.add(":>>");
		effect.featureSpecialization.add("effect");
		effect.valuePart = s.effect.getEAttribute();
		t.body.add(effect);
	}
	//AbstractParameter -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//AbstractParameter -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//AbstractParameter -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//AbstractParameter -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//AbstractParameter -> EReference : abstractType
	if (s.abstractType.getEReference() != null){
		var abstractType = new SysMLine!ItemUsage;
		abstractType.isReference = true;
		abstractType.featureNote.add(":>");
		abstractType.featureSpecialization.add("abstractType");
		abstractType.valuePart = s.abstractType.getEReference();
		t.body.add(abstractType);
	}
	//AbstractParameter -> EReference : rate
	if (s.rate.getEReference() != null){
		var rate = new SysMLine!ItemUsage;
		rate.isReference = true;
		rate.featureNote.add(":>");
		rate.featureSpecialization.add("rate");
		rate.valuePart = s.rate.getEReference();
		t.body.add(rate);
	}
	//AbstractParameter -> EReference : probability
	if (s.probability.getEReference() != null){
		var probability = new SysMLine!ItemUsage;
		probability.isReference = true;
		probability.featureNote.add(":>");
		probability.featureSpecialization.add("probability");
		probability.valuePart = s.probability.getEReference();
		t.body.add(probability);
	}
	//AbstractParameter -> EReference : parameterSet
	if (s.parameterSet.getEReference() != null){
		var parameterSet = new SysMLine!ItemUsage;
		parameterSet.isReference = true;
		parameterSet.featureNote.add(":>");
		parameterSet.featureSpecialization.add("parameterSet");
		parameterSet.valuePart = s.parameterSet.getEReference();
		t.body.add(parameterSet);
	}
}

@lazy
rule AbstractParameterSet
	transform s : DSL!AbstractParameterSet
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractParameterSet -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//AbstractParameterSet -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//AbstractParameterSet -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//AbstractParameterSet -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//AbstractParameterSet -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//AbstractParameterSet -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//AbstractParameterSet -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//AbstractParameterSet -> EReference : ownedConditions
	if (s.ownedConditions.getEReference() != null){
		var ownedConditions = new SysMLine!ItemUsage;
		ownedConditions.isReference = true;
		ownedConditions.featureNote.add(":>");
		ownedConditions.featureSpecialization.add("ownedConditions");
		ownedConditions.valuePart = s.ownedConditions.getEReference();
		t.body.add(ownedConditions);
	}
	//AbstractParameterSet -> EReference : probability
	if (s.probability.getEReference() != null){
		var probability = new SysMLine!ItemUsage;
		probability.isReference = true;
		probability.featureNote.add(":>");
		probability.featureSpecialization.add("probability");
		probability.valuePart = s.probability.getEReference();
		t.body.add(probability);
	}
	//AbstractParameterSet -> EReference : parameters
	if (s.parameters.getEReference() != null){
		var parameters = new SysMLine!ItemUsage;
		parameters.isReference = true;
		parameters.featureNote.add(":>");
		parameters.featureSpecialization.add("parameters");
		parameters.valuePart = s.parameters.getEReference();
		t.body.add(parameters);
	}
}

@lazy
rule AbstractInformationFlow
	transform s : DSL!AbstractInformationFlow
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractInformationFlow -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//AbstractInformationFlow -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//AbstractInformationFlow -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//AbstractInformationFlow -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//AbstractInformationFlow -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//AbstractInformationFlow -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//AbstractInformationFlow -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//AbstractInformationFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//AbstractInformationFlow -> EReference : realizations
	if (s.realizations.getEReference() != null){
		var realizations = new SysMLine!ItemUsage;
		realizations.isReference = true;
		realizations.featureNote.add(":>");
		realizations.featureSpecialization.add("realizations");
		realizations.valuePart = s.realizations.getEReference();
		t.body.add(realizations);
	}
	//AbstractInformationFlow -> EReference : convoyedInformations
	if (s.convoyedInformations.getEReference() != null){
		var convoyedInformations = new SysMLine!ItemUsage;
		convoyedInformations.isReference = true;
		convoyedInformations.featureNote.add(":>");
		convoyedInformations.featureSpecialization.add("convoyedInformations");
		convoyedInformations.valuePart = s.convoyedInformations.getEReference();
		t.body.add(convoyedInformations);
	}
	//AbstractInformationFlow -> EReference : source
	if (s.source.getEReference() != null){
		var source = new SysMLine!ItemUsage;
		source.isReference = true;
		source.featureNote.add(":>");
		source.featureSpecialization.add("source");
		source.valuePart = s.source.getEReference();
		t.body.add(source);
	}
	//AbstractInformationFlow -> EReference : target
	if (s.target.getEReference() != null){
		var target = new SysMLine!ItemUsage;
		target.isReference = true;
		target.featureNote.add(":>");
		target.featureSpecialization.add("target");
		target.valuePart = s.target.getEReference();
		t.body.add(target);
	}
}

@lazy
rule AbstractExchangeItem
	transform s : DSL!AbstractExchangeItem
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractExchangeItem -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//AbstractExchangeItem -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//AbstractExchangeItem -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//AbstractExchangeItem -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//AbstractExchangeItem -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//AbstractExchangeItem -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//AbstractExchangeItem -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//AbstractExchangeItem -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null){
		var abstractTypedElements = new SysMLine!ItemUsage;
		abstractTypedElements.isReference = true;
		abstractTypedElements.featureNote.add(":>");
		abstractTypedElements.featureSpecialization.add("abstractTypedElements");
		abstractTypedElements.valuePart = s.abstractTypedElements.getEReference();
		t.body.add(abstractTypedElements);
	}
}

@lazy
rule IState
	transform s : DSL!IState
	to t : SysMLine!ItemUsage
	extends Base{
	//IState -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//IState -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//IState -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//IState -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//IState -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//IState -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//IState -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//IState -> EReference : referencedStates
	if (s.referencedStates.getEReference() != null){
		var referencedStates = new SysMLine!ItemUsage;
		referencedStates.isReference = true;
		referencedStates.featureNote.add(":>");
		referencedStates.featureSpecialization.add("referencedStates");
		referencedStates.valuePart = s.referencedStates.getEReference();
		t.body.add(referencedStates);
	}
	//IState -> EReference : exploitedStates
	if (s.exploitedStates.getEReference() != null){
		var exploitedStates = new SysMLine!ItemUsage;
		exploitedStates.isReference = true;
		exploitedStates.featureNote.add(":>");
		exploitedStates.featureSpecialization.add("exploitedStates");
		exploitedStates.valuePart = s.exploitedStates.getEReference();
		t.body.add(exploitedStates);
	}
}


// emde.ecore
@lazy
rule Element
	transform s : DSL!Element
	to t : SysMLine!ItemUsage
	extends Base{
}

@lazy
rule ExtensibleElement
	transform s : DSL!ExtensibleElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ExtensibleElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
}

@lazy
rule ElementExtension
	transform s : DSL!ElementExtension
	to t : SysMLine!ItemUsage
	extends Base{
	//ElementExtension -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
}


// oa.ecore
@lazy
rule OperationalAnalysis
	transform s : DSL!OperationalAnalysis
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalAnalysis -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//OperationalAnalysis -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//OperationalAnalysis -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//OperationalAnalysis -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//OperationalAnalysis -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//OperationalAnalysis -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//OperationalAnalysis -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//OperationalAnalysis -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//OperationalAnalysis -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//OperationalAnalysis -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//OperationalAnalysis -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//OperationalAnalysis -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//OperationalAnalysis -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//OperationalAnalysis -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//OperationalAnalysis -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//OperationalAnalysis -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//OperationalAnalysis -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//OperationalAnalysis -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//OperationalAnalysis -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//OperationalAnalysis -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//OperationalAnalysis -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//OperationalAnalysis -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//OperationalAnalysis -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//OperationalAnalysis -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//OperationalAnalysis -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//OperationalAnalysis -> EReference : ownedFunctionPkg
	if (s.ownedFunctionPkg.getEReference() != null){
		var ownedFunctionPkg = new SysMLine!ItemUsage;
		ownedFunctionPkg.isReference = true;
		ownedFunctionPkg.featureNote.add(":>");
		ownedFunctionPkg.featureSpecialization.add("ownedFunctionPkg");
		ownedFunctionPkg.valuePart = s.ownedFunctionPkg.getEReference();
		t.body.add(ownedFunctionPkg);
	}
	//OperationalAnalysis -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null){
		var ownedComponentExchanges = new SysMLine!ItemUsage;
		ownedComponentExchanges.isReference = true;
		ownedComponentExchanges.featureNote.add(":>");
		ownedComponentExchanges.featureSpecialization.add("ownedComponentExchanges");
		ownedComponentExchanges.valuePart = s.ownedComponentExchanges.getEReference();
		t.body.add(ownedComponentExchanges);
	}
	//OperationalAnalysis -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null){
		var ownedComponentExchangeCategories = new SysMLine!ItemUsage;
		ownedComponentExchangeCategories.isReference = true;
		ownedComponentExchangeCategories.featureNote.add(":>");
		ownedComponentExchangeCategories.featureSpecialization.add("ownedComponentExchangeCategories");
		ownedComponentExchangeCategories.valuePart = s.ownedComponentExchangeCategories.getEReference();
		t.body.add(ownedComponentExchangeCategories);
	}
	//OperationalAnalysis -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null){
		var ownedFunctionalLinks = new SysMLine!ItemUsage;
		ownedFunctionalLinks.isReference = true;
		ownedFunctionalLinks.featureNote.add(":>");
		ownedFunctionalLinks.featureSpecialization.add("ownedFunctionalLinks");
		ownedFunctionalLinks.valuePart = s.ownedFunctionalLinks.getEReference();
		t.body.add(ownedFunctionalLinks);
	}
	//OperationalAnalysis -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null){
		var ownedFunctionalAllocations = new SysMLine!ItemUsage;
		ownedFunctionalAllocations.isReference = true;
		ownedFunctionalAllocations.featureNote.add(":>");
		ownedFunctionalAllocations.featureSpecialization.add("ownedFunctionalAllocations");
		ownedFunctionalAllocations.valuePart = s.ownedFunctionalAllocations.getEReference();
		t.body.add(ownedFunctionalAllocations);
	}
	//OperationalAnalysis -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null){
		var ownedComponentExchangeRealizations = new SysMLine!ItemUsage;
		ownedComponentExchangeRealizations.isReference = true;
		ownedComponentExchangeRealizations.featureNote.add(":>");
		ownedComponentExchangeRealizations.featureSpecialization.add("ownedComponentExchangeRealizations");
		ownedComponentExchangeRealizations.valuePart = s.ownedComponentExchangeRealizations.getEReference();
		t.body.add(ownedComponentExchangeRealizations);
	}
	//OperationalAnalysis -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null){
		var ownedAbstractCapabilityPkg = new SysMLine!ItemUsage;
		ownedAbstractCapabilityPkg.isReference = true;
		ownedAbstractCapabilityPkg.featureNote.add(":>");
		ownedAbstractCapabilityPkg.featureSpecialization.add("ownedAbstractCapabilityPkg");
		ownedAbstractCapabilityPkg.valuePart = s.ownedAbstractCapabilityPkg.getEReference();
		t.body.add(ownedAbstractCapabilityPkg);
	}
	//OperationalAnalysis -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null){
		var ownedInterfacePkg = new SysMLine!ItemUsage;
		ownedInterfacePkg.isReference = true;
		ownedInterfacePkg.featureNote.add(":>");
		ownedInterfacePkg.featureSpecialization.add("ownedInterfacePkg");
		ownedInterfacePkg.valuePart = s.ownedInterfacePkg.getEReference();
		t.body.add(ownedInterfacePkg);
	}
	//OperationalAnalysis -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null){
		var ownedDataPkg = new SysMLine!ItemUsage;
		ownedDataPkg.isReference = true;
		ownedDataPkg.featureNote.add(":>");
		ownedDataPkg.featureSpecialization.add("ownedDataPkg");
		ownedDataPkg.valuePart = s.ownedDataPkg.getEReference();
		t.body.add(ownedDataPkg);
	}
	//OperationalAnalysis -> EReference : provisionedArchitectureAllocations
	if (s.provisionedArchitectureAllocations.getEReference() != null){
		var provisionedArchitectureAllocations = new SysMLine!ItemUsage;
		provisionedArchitectureAllocations.isReference = true;
		provisionedArchitectureAllocations.featureNote.add(":>");
		provisionedArchitectureAllocations.featureSpecialization.add("provisionedArchitectureAllocations");
		provisionedArchitectureAllocations.valuePart = s.provisionedArchitectureAllocations.getEReference();
		t.body.add(provisionedArchitectureAllocations);
	}
	//OperationalAnalysis -> EReference : provisioningArchitectureAllocations
	if (s.provisioningArchitectureAllocations.getEReference() != null){
		var provisioningArchitectureAllocations = new SysMLine!ItemUsage;
		provisioningArchitectureAllocations.isReference = true;
		provisioningArchitectureAllocations.featureNote.add(":>");
		provisioningArchitectureAllocations.featureSpecialization.add("provisioningArchitectureAllocations");
		provisioningArchitectureAllocations.valuePart = s.provisioningArchitectureAllocations.getEReference();
		t.body.add(provisioningArchitectureAllocations);
	}
	//OperationalAnalysis -> EReference : allocatedArchitectures
	if (s.allocatedArchitectures.getEReference() != null){
		var allocatedArchitectures = new SysMLine!ItemUsage;
		allocatedArchitectures.isReference = true;
		allocatedArchitectures.featureNote.add(":>");
		allocatedArchitectures.featureSpecialization.add("allocatedArchitectures");
		allocatedArchitectures.valuePart = s.allocatedArchitectures.getEReference();
		t.body.add(allocatedArchitectures);
	}
	//OperationalAnalysis -> EReference : allocatingArchitectures
	if (s.allocatingArchitectures.getEReference() != null){
		var allocatingArchitectures = new SysMLine!ItemUsage;
		allocatingArchitectures.isReference = true;
		allocatingArchitectures.featureNote.add(":>");
		allocatingArchitectures.featureSpecialization.add("allocatingArchitectures");
		allocatingArchitectures.valuePart = s.allocatingArchitectures.getEReference();
		t.body.add(allocatingArchitectures);
	}
	//OperationalAnalysis -> EReference : system
	if (s.system.getEReference() != null){
		var system = new SysMLine!ItemUsage;
		system.isReference = true;
		system.featureNote.add(":>");
		system.featureSpecialization.add("system");
		system.valuePart = s.system.getEReference();
		t.body.add(system);
	}
	//OperationalAnalysis -> EReference : ownedRolePkg
	if (s.ownedRolePkg.getEReference() != null){
		var ownedRolePkg = new SysMLine!ItemUsage;
		ownedRolePkg.isReference = true;
		ownedRolePkg.featureNote.add(":>");
		ownedRolePkg.featureSpecialization.add("ownedRolePkg");
		ownedRolePkg.valuePart = s.ownedRolePkg.getEReference();
		t.body.add(ownedRolePkg);
	}
	//OperationalAnalysis -> EReference : ownedEntityPkg
	if (s.ownedEntityPkg.getEReference() != null){
		var ownedEntityPkg = new SysMLine!ItemUsage;
		ownedEntityPkg.isReference = true;
		ownedEntityPkg.featureNote.add(":>");
		ownedEntityPkg.featureSpecialization.add("ownedEntityPkg");
		ownedEntityPkg.valuePart = s.ownedEntityPkg.getEReference();
		t.body.add(ownedEntityPkg);
	}
	//OperationalAnalysis -> EReference : ownedConceptPkg
	if (s.ownedConceptPkg.getEReference() != null){
		var ownedConceptPkg = new SysMLine!ItemUsage;
		ownedConceptPkg.isReference = true;
		ownedConceptPkg.featureNote.add(":>");
		ownedConceptPkg.featureSpecialization.add("ownedConceptPkg");
		ownedConceptPkg.valuePart = s.ownedConceptPkg.getEReference();
		t.body.add(ownedConceptPkg);
	}
	//OperationalAnalysis -> EReference : containedOperationalCapabilityPkg
	if (s.containedOperationalCapabilityPkg.getEReference() != null){
		var containedOperationalCapabilityPkg = new SysMLine!ItemUsage;
		containedOperationalCapabilityPkg.isReference = true;
		containedOperationalCapabilityPkg.featureNote.add(":>");
		containedOperationalCapabilityPkg.featureSpecialization.add("containedOperationalCapabilityPkg");
		containedOperationalCapabilityPkg.valuePart = s.containedOperationalCapabilityPkg.getEReference();
		t.body.add(containedOperationalCapabilityPkg);
	}
	//OperationalAnalysis -> EReference : containedOperationalActivityPkg
	if (s.containedOperationalActivityPkg.getEReference() != null){
		var containedOperationalActivityPkg = new SysMLine!ItemUsage;
		containedOperationalActivityPkg.isReference = true;
		containedOperationalActivityPkg.featureNote.add(":>");
		containedOperationalActivityPkg.featureSpecialization.add("containedOperationalActivityPkg");
		containedOperationalActivityPkg.valuePart = s.containedOperationalActivityPkg.getEReference();
		t.body.add(containedOperationalActivityPkg);
	}
	//OperationalAnalysis -> EReference : allocatingSystemAnalyses
	if (s.allocatingSystemAnalyses.getEReference() != null){
		var allocatingSystemAnalyses = new SysMLine!ItemUsage;
		allocatingSystemAnalyses.isReference = true;
		allocatingSystemAnalyses.featureNote.add(":>");
		allocatingSystemAnalyses.featureSpecialization.add("allocatingSystemAnalyses");
		allocatingSystemAnalyses.valuePart = s.allocatingSystemAnalyses.getEReference();
		t.body.add(allocatingSystemAnalyses);
	}
}

@lazy
rule OperationalScenario
	transform s : DSL!OperationalScenario
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalScenario -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//OperationalScenario -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//OperationalScenario -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//OperationalScenario -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//OperationalScenario -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//OperationalScenario -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//OperationalScenario -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//OperationalScenario -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//OperationalScenario -> EAttribute : context
	if (s.context.getEAttribute() != null){
		var context = new SysMLine!AttributeUsage;
		context.featureNote.add(":>>");
		context.featureSpecialization.add("context");
		context.valuePart = s.context.getEAttribute();
		t.body.add(context);
	}
	//OperationalScenario -> EAttribute : objective
	if (s.objective.getEAttribute() != null){
		var objective = new SysMLine!AttributeUsage;
		objective.featureNote.add(":>>");
		objective.featureSpecialization.add("objective");
		objective.valuePart = s.objective.getEAttribute();
		t.body.add(objective);
	}
	//OperationalScenario -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//OperationalScenario -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//OperationalScenario -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//OperationalScenario -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//OperationalScenario -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//OperationalScenario -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//OperationalScenario -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//OperationalScenario -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//OperationalScenario -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//OperationalScenario -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//OperationalScenario -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//OperationalScenario -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//OperationalScenario -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
}

@lazy
rule OperationalActivityPkg
	transform s : DSL!OperationalActivityPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalActivityPkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//OperationalActivityPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//OperationalActivityPkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//OperationalActivityPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//OperationalActivityPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//OperationalActivityPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//OperationalActivityPkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//OperationalActivityPkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//OperationalActivityPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//OperationalActivityPkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//OperationalActivityPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//OperationalActivityPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//OperationalActivityPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//OperationalActivityPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//OperationalActivityPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//OperationalActivityPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//OperationalActivityPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//OperationalActivityPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//OperationalActivityPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//OperationalActivityPkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//OperationalActivityPkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//OperationalActivityPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//OperationalActivityPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//OperationalActivityPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//OperationalActivityPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//OperationalActivityPkg -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null){
		var ownedFunctionalLinks = new SysMLine!ItemUsage;
		ownedFunctionalLinks.isReference = true;
		ownedFunctionalLinks.featureNote.add(":>");
		ownedFunctionalLinks.featureSpecialization.add("ownedFunctionalLinks");
		ownedFunctionalLinks.valuePart = s.ownedFunctionalLinks.getEReference();
		t.body.add(ownedFunctionalLinks);
	}
	//OperationalActivityPkg -> EReference : ownedExchanges
	if (s.ownedExchanges.getEReference() != null){
		var ownedExchanges = new SysMLine!ItemUsage;
		ownedExchanges.isReference = true;
		ownedExchanges.featureNote.add(":>");
		ownedExchanges.featureSpecialization.add("ownedExchanges");
		ownedExchanges.valuePart = s.ownedExchanges.getEReference();
		t.body.add(ownedExchanges);
	}
	//OperationalActivityPkg -> EReference : ownedExchangeSpecificationRealizations
	if (s.ownedExchangeSpecificationRealizations.getEReference() != null){
		var ownedExchangeSpecificationRealizations = new SysMLine!ItemUsage;
		ownedExchangeSpecificationRealizations.isReference = true;
		ownedExchangeSpecificationRealizations.featureNote.add(":>");
		ownedExchangeSpecificationRealizations.featureSpecialization.add("ownedExchangeSpecificationRealizations");
		ownedExchangeSpecificationRealizations.valuePart = s.ownedExchangeSpecificationRealizations.getEReference();
		t.body.add(ownedExchangeSpecificationRealizations);
	}
	//OperationalActivityPkg -> EReference : ownedCategories
	if (s.ownedCategories.getEReference() != null){
		var ownedCategories = new SysMLine!ItemUsage;
		ownedCategories.isReference = true;
		ownedCategories.featureNote.add(":>");
		ownedCategories.featureSpecialization.add("ownedCategories");
		ownedCategories.valuePart = s.ownedCategories.getEReference();
		t.body.add(ownedCategories);
	}
	//OperationalActivityPkg -> EReference : ownedFunctionSpecifications
	if (s.ownedFunctionSpecifications.getEReference() != null){
		var ownedFunctionSpecifications = new SysMLine!ItemUsage;
		ownedFunctionSpecifications.isReference = true;
		ownedFunctionSpecifications.featureNote.add(":>");
		ownedFunctionSpecifications.featureSpecialization.add("ownedFunctionSpecifications");
		ownedFunctionSpecifications.valuePart = s.ownedFunctionSpecifications.getEReference();
		t.body.add(ownedFunctionSpecifications);
	}
	//OperationalActivityPkg -> EReference : ownedOperationalActivities
	if (s.ownedOperationalActivities.getEReference() != null){
		var ownedOperationalActivities = new SysMLine!ItemUsage;
		ownedOperationalActivities.isReference = true;
		ownedOperationalActivities.featureNote.add(":>");
		ownedOperationalActivities.featureSpecialization.add("ownedOperationalActivities");
		ownedOperationalActivities.valuePart = s.ownedOperationalActivities.getEReference();
		t.body.add(ownedOperationalActivities);
	}
	//OperationalActivityPkg -> EReference : ownedOperationalActivityPkgs
	if (s.ownedOperationalActivityPkgs.getEReference() != null){
		var ownedOperationalActivityPkgs = new SysMLine!ItemUsage;
		ownedOperationalActivityPkgs.isReference = true;
		ownedOperationalActivityPkgs.featureNote.add(":>");
		ownedOperationalActivityPkgs.featureSpecialization.add("ownedOperationalActivityPkgs");
		ownedOperationalActivityPkgs.valuePart = s.ownedOperationalActivityPkgs.getEReference();
		t.body.add(ownedOperationalActivityPkgs);
	}
}

@lazy
rule OperationalActivity
	transform s : DSL!OperationalActivity
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalActivity -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//OperationalActivity -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//OperationalActivity -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//OperationalActivity -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//OperationalActivity -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//OperationalActivity -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//OperationalActivity -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//OperationalActivity -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//OperationalActivity -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//OperationalActivity -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null){
		var isStatic = new SysMLine!AttributeUsage;
		isStatic.featureNote.add(":>>");
		isStatic.featureSpecialization.add("isStatic");
		isStatic.valuePart = s.isStatic.getEAttribute();
		t.body.add(isStatic);
	}
	//OperationalActivity -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null){
		var visibility = new SysMLine!AttributeUsage;
		visibility.featureNote.add(":>>");
		visibility.featureSpecialization.add("visibility");
		visibility.valuePart = s.visibility.getEAttribute();
		t.body.add(visibility);
	}
	//OperationalActivity -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null){
		var ordered = new SysMLine!AttributeUsage;
		ordered.featureNote.add(":>>");
		ordered.featureSpecialization.add("ordered");
		ordered.valuePart = s.ordered.getEAttribute();
		t.body.add(ordered);
	}
	//OperationalActivity -> EAttribute : unique
	if (s.unique.getEAttribute() != null){
		var unique = new SysMLine!AttributeUsage;
		unique.featureNote.add(":>>");
		unique.featureSpecialization.add("unique");
		unique.valuePart = s.unique.getEAttribute();
		t.body.add(unique);
	}
	//OperationalActivity -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null){
		var minInclusive = new SysMLine!AttributeUsage;
		minInclusive.featureNote.add(":>>");
		minInclusive.featureSpecialization.add("minInclusive");
		minInclusive.valuePart = s.minInclusive.getEAttribute();
		t.body.add(minInclusive);
	}
	//OperationalActivity -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null){
		var maxInclusive = new SysMLine!AttributeUsage;
		maxInclusive.featureNote.add(":>>");
		maxInclusive.featureSpecialization.add("maxInclusive");
		maxInclusive.valuePart = s.maxInclusive.getEAttribute();
		t.body.add(maxInclusive);
	}
	//OperationalActivity -> EAttribute : final
	if (s.final.getEAttribute() != null){
		var final = new SysMLine!AttributeUsage;
		final.featureNote.add(":>>");
		final.featureSpecialization.add("final");
		final.valuePart = s.final.getEAttribute();
		t.body.add(final);
	}
	//OperationalActivity -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null){
		var aggregationKind = new SysMLine!AttributeUsage;
		aggregationKind.featureNote.add(":>>");
		aggregationKind.featureSpecialization.add("aggregationKind");
		aggregationKind.valuePart = s.aggregationKind.getEAttribute();
		t.body.add(aggregationKind);
	}
	//OperationalActivity -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null){
		var isDerived = new SysMLine!AttributeUsage;
		isDerived.featureNote.add(":>>");
		isDerived.featureSpecialization.add("isDerived");
		isDerived.valuePart = s.isDerived.getEAttribute();
		t.body.add(isDerived);
	}
	//OperationalActivity -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null){
		var isReadOnly = new SysMLine!AttributeUsage;
		isReadOnly.featureNote.add(":>>");
		isReadOnly.featureSpecialization.add("isReadOnly");
		isReadOnly.valuePart = s.isReadOnly.getEAttribute();
		t.body.add(isReadOnly);
	}
	//OperationalActivity -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null){
		var isPartOfKey = new SysMLine!AttributeUsage;
		isPartOfKey.featureNote.add(":>>");
		isPartOfKey.featureSpecialization.add("isPartOfKey");
		isPartOfKey.valuePart = s.isPartOfKey.getEAttribute();
		t.body.add(isPartOfKey);
	}
	//OperationalActivity -> EAttribute : kind
	if (s.kind.getEAttribute() != null){
		var kind = new SysMLine!AttributeUsage;
		kind.featureNote.add(":>>");
		kind.featureSpecialization.add("kind");
		kind.valuePart = s.kind.getEAttribute();
		t.body.add(kind);
	}
	//OperationalActivity -> EAttribute : condition
	if (s.condition.getEAttribute() != null){
		var condition = new SysMLine!AttributeUsage;
		condition.featureNote.add(":>>");
		condition.featureSpecialization.add("condition");
		condition.valuePart = s.condition.getEAttribute();
		t.body.add(condition);
	}
	//OperationalActivity -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//OperationalActivity -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//OperationalActivity -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//OperationalActivity -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//OperationalActivity -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//OperationalActivity -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//OperationalActivity -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//OperationalActivity -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//OperationalActivity -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//OperationalActivity -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//OperationalActivity -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//OperationalActivity -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//OperationalActivity -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//OperationalActivity -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//OperationalActivity -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//OperationalActivity -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//OperationalActivity -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null){
		var involvingInvolvements = new SysMLine!ItemUsage;
		involvingInvolvements.isReference = true;
		involvingInvolvements.featureNote.add(":>");
		involvingInvolvements.featureSpecialization.add("involvingInvolvements");
		involvingInvolvements.valuePart = s.involvingInvolvements.getEReference();
		t.body.add(involvingInvolvements);
	}
	//OperationalActivity -> EReference : abstractType
	if (s.abstractType.getEReference() != null){
		var abstractType = new SysMLine!ItemUsage;
		abstractType.isReference = true;
		abstractType.featureNote.add(":>");
		abstractType.featureSpecialization.add("abstractType");
		abstractType.valuePart = s.abstractType.getEReference();
		t.body.add(abstractType);
	}
	//OperationalActivity -> EReference : type
	if (s.type.getEReference() != null){
		var type = new SysMLine!ItemUsage;
		type.isReference = true;
		type.featureNote.add(":>");
		type.featureSpecialization.add("type");
		type.valuePart = s.type.getEReference();
		t.body.add(type);
	}
	//OperationalActivity -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null){
		var ownedDefaultValue = new SysMLine!ItemUsage;
		ownedDefaultValue.isReference = true;
		ownedDefaultValue.featureNote.add(":>");
		ownedDefaultValue.featureSpecialization.add("ownedDefaultValue");
		ownedDefaultValue.valuePart = s.ownedDefaultValue.getEReference();
		t.body.add(ownedDefaultValue);
	}
	//OperationalActivity -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null){
		var ownedMinValue = new SysMLine!ItemUsage;
		ownedMinValue.isReference = true;
		ownedMinValue.featureNote.add(":>");
		ownedMinValue.featureSpecialization.add("ownedMinValue");
		ownedMinValue.valuePart = s.ownedMinValue.getEReference();
		t.body.add(ownedMinValue);
	}
	//OperationalActivity -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null){
		var ownedMaxValue = new SysMLine!ItemUsage;
		ownedMaxValue.isReference = true;
		ownedMaxValue.featureNote.add(":>");
		ownedMaxValue.featureSpecialization.add("ownedMaxValue");
		ownedMaxValue.valuePart = s.ownedMaxValue.getEReference();
		t.body.add(ownedMaxValue);
	}
	//OperationalActivity -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null){
		var ownedNullValue = new SysMLine!ItemUsage;
		ownedNullValue.isReference = true;
		ownedNullValue.featureNote.add(":>");
		ownedNullValue.featureSpecialization.add("ownedNullValue");
		ownedNullValue.valuePart = s.ownedNullValue.getEReference();
		t.body.add(ownedNullValue);
	}
	//OperationalActivity -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null){
		var ownedMinCard = new SysMLine!ItemUsage;
		ownedMinCard.isReference = true;
		ownedMinCard.featureNote.add(":>");
		ownedMinCard.featureSpecialization.add("ownedMinCard");
		ownedMinCard.valuePart = s.ownedMinCard.getEReference();
		t.body.add(ownedMinCard);
	}
	//OperationalActivity -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null){
		var ownedMinLength = new SysMLine!ItemUsage;
		ownedMinLength.isReference = true;
		ownedMinLength.featureNote.add(":>");
		ownedMinLength.featureSpecialization.add("ownedMinLength");
		ownedMinLength.valuePart = s.ownedMinLength.getEReference();
		t.body.add(ownedMinLength);
	}
	//OperationalActivity -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null){
		var ownedMaxCard = new SysMLine!ItemUsage;
		ownedMaxCard.isReference = true;
		ownedMaxCard.featureNote.add(":>");
		ownedMaxCard.featureSpecialization.add("ownedMaxCard");
		ownedMaxCard.valuePart = s.ownedMaxCard.getEReference();
		t.body.add(ownedMaxCard);
	}
	//OperationalActivity -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null){
		var ownedMaxLength = new SysMLine!ItemUsage;
		ownedMaxLength.isReference = true;
		ownedMaxLength.featureNote.add(":>");
		ownedMaxLength.featureSpecialization.add("ownedMaxLength");
		ownedMaxLength.valuePart = s.ownedMaxLength.getEReference();
		t.body.add(ownedMaxLength);
	}
	//OperationalActivity -> EReference : association
	if (s.association.getEReference() != null){
		var association = new SysMLine!ItemUsage;
		association.isReference = true;
		association.featureNote.add(":>");
		association.featureSpecialization.add("association");
		association.valuePart = s.association.getEReference();
		t.body.add(association);
	}
	//OperationalActivity -> EReference : representingInstanceRoles
	if (s.representingInstanceRoles.getEReference() != null){
		var representingInstanceRoles = new SysMLine!ItemUsage;
		representingInstanceRoles.isReference = true;
		representingInstanceRoles.featureNote.add(":>");
		representingInstanceRoles.featureSpecialization.add("representingInstanceRoles");
		representingInstanceRoles.valuePart = s.representingInstanceRoles.getEReference();
		t.body.add(representingInstanceRoles);
	}
	//OperationalActivity -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null){
		var ownedFunctionalChains = new SysMLine!ItemUsage;
		ownedFunctionalChains.isReference = true;
		ownedFunctionalChains.featureNote.add(":>");
		ownedFunctionalChains.featureSpecialization.add("ownedFunctionalChains");
		ownedFunctionalChains.valuePart = s.ownedFunctionalChains.getEReference();
		t.body.add(ownedFunctionalChains);
	}
	//OperationalActivity -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null){
		var inActivityPartition = new SysMLine!ItemUsage;
		inActivityPartition.isReference = true;
		inActivityPartition.featureNote.add(":>");
		inActivityPartition.featureSpecialization.add("inActivityPartition");
		inActivityPartition.valuePart = s.inActivityPartition.getEReference();
		t.body.add(inActivityPartition);
	}
	//OperationalActivity -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null){
		var inInterruptibleRegion = new SysMLine!ItemUsage;
		inInterruptibleRegion.isReference = true;
		inInterruptibleRegion.featureNote.add(":>");
		inInterruptibleRegion.featureSpecialization.add("inInterruptibleRegion");
		inInterruptibleRegion.valuePart = s.inInterruptibleRegion.getEReference();
		t.body.add(inInterruptibleRegion);
	}
	//OperationalActivity -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null){
		var inStructuredNode = new SysMLine!ItemUsage;
		inStructuredNode.isReference = true;
		inStructuredNode.featureNote.add(":>");
		inStructuredNode.featureSpecialization.add("inStructuredNode");
		inStructuredNode.valuePart = s.inStructuredNode.getEReference();
		t.body.add(inStructuredNode);
	}
	//OperationalActivity -> EReference : outgoing
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMLine!ItemUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	//OperationalActivity -> EReference : incoming
	if (s.incoming.getEReference() != null){
		var incoming = new SysMLine!ItemUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	//OperationalActivity -> EReference : ownedHandlers
	if (s.ownedHandlers.getEReference() != null){
		var ownedHandlers = new SysMLine!ItemUsage;
		ownedHandlers.isReference = true;
		ownedHandlers.featureNote.add(":>");
		ownedHandlers.featureSpecialization.add("ownedHandlers");
		ownedHandlers.valuePart = s.ownedHandlers.getEReference();
		t.body.add(ownedHandlers);
	}
	//OperationalActivity -> EReference : localPrecondition
	if (s.localPrecondition.getEReference() != null){
		var localPrecondition = new SysMLine!ItemUsage;
		localPrecondition.isReference = true;
		localPrecondition.featureNote.add(":>");
		localPrecondition.featureSpecialization.add("localPrecondition");
		localPrecondition.valuePart = s.localPrecondition.getEReference();
		t.body.add(localPrecondition);
	}
	//OperationalActivity -> EReference : localPostcondition
	if (s.localPostcondition.getEReference() != null){
		var localPostcondition = new SysMLine!ItemUsage;
		localPostcondition.isReference = true;
		localPostcondition.featureNote.add(":>");
		localPostcondition.featureSpecialization.add("localPostcondition");
		localPostcondition.valuePart = s.localPostcondition.getEReference();
		t.body.add(localPostcondition);
	}
	//OperationalActivity -> EReference : context
	if (s.context.getEReference() != null){
		var context = new SysMLine!ItemUsage;
		context.isReference = true;
		context.featureNote.add(":>");
		context.featureSpecialization.add("context");
		context.valuePart = s.context.getEReference();
		t.body.add(context);
	}
	//OperationalActivity -> EReference : inputs
	if (s.inputs.getEReference() != null){
		var inputs = new SysMLine!ItemUsage;
		inputs.isReference = true;
		inputs.featureNote.add(":>");
		inputs.featureSpecialization.add("inputs");
		inputs.valuePart = s.inputs.getEReference();
		t.body.add(inputs);
	}
	//OperationalActivity -> EReference : outputs
	if (s.outputs.getEReference() != null){
		var outputs = new SysMLine!ItemUsage;
		outputs.isReference = true;
		outputs.featureNote.add(":>");
		outputs.featureSpecialization.add("outputs");
		outputs.valuePart = s.outputs.getEReference();
		t.body.add(outputs);
	}
	//OperationalActivity -> EReference : arguments
	if (s.arguments.getEReference() != null){
		var arguments = new SysMLine!ItemUsage;
		arguments.isReference = true;
		arguments.featureNote.add(":>");
		arguments.featureSpecialization.add("arguments");
		arguments.valuePart = s.arguments.getEReference();
		t.body.add(arguments);
	}
	//OperationalActivity -> EReference : results
	if (s.results.getEReference() != null){
		var results = new SysMLine!ItemUsage;
		results.isReference = true;
		results.featureNote.add(":>");
		results.featureSpecialization.add("results");
		results.valuePart = s.results.getEReference();
		t.body.add(results);
	}
	//OperationalActivity -> EReference : behavior
	if (s.behavior.getEReference() != null){
		var behavior = new SysMLine!ItemUsage;
		behavior.isReference = true;
		behavior.featureNote.add(":>");
		behavior.featureSpecialization.add("behavior");
		behavior.valuePart = s.behavior.getEReference();
		t.body.add(behavior);
	}
	//OperationalActivity -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null){
		var abstractTypedElements = new SysMLine!ItemUsage;
		abstractTypedElements.isReference = true;
		abstractTypedElements.featureNote.add(":>");
		abstractTypedElements.featureSpecialization.add("abstractTypedElements");
		abstractTypedElements.valuePart = s.abstractTypedElements.getEReference();
		t.body.add(abstractTypedElements);
	}
	//OperationalActivity -> EReference : ownedFunctions
	if (s.ownedFunctions.getEReference() != null){
		var ownedFunctions = new SysMLine!ItemUsage;
		ownedFunctions.isReference = true;
		ownedFunctions.featureNote.add(":>");
		ownedFunctions.featureSpecialization.add("ownedFunctions");
		ownedFunctions.valuePart = s.ownedFunctions.getEReference();
		t.body.add(ownedFunctions);
	}
	//OperationalActivity -> EReference : ownedFunctionRealizations
	if (s.ownedFunctionRealizations.getEReference() != null){
		var ownedFunctionRealizations = new SysMLine!ItemUsage;
		ownedFunctionRealizations.isReference = true;
		ownedFunctionRealizations.featureNote.add(":>");
		ownedFunctionRealizations.featureSpecialization.add("ownedFunctionRealizations");
		ownedFunctionRealizations.valuePart = s.ownedFunctionRealizations.getEReference();
		t.body.add(ownedFunctionRealizations);
	}
	//OperationalActivity -> EReference : ownedFunctionalExchanges
	if (s.ownedFunctionalExchanges.getEReference() != null){
		var ownedFunctionalExchanges = new SysMLine!ItemUsage;
		ownedFunctionalExchanges.isReference = true;
		ownedFunctionalExchanges.featureNote.add(":>");
		ownedFunctionalExchanges.featureSpecialization.add("ownedFunctionalExchanges");
		ownedFunctionalExchanges.valuePart = s.ownedFunctionalExchanges.getEReference();
		t.body.add(ownedFunctionalExchanges);
	}
	//OperationalActivity -> EReference : subFunctions
	if (s.subFunctions.getEReference() != null){
		var subFunctions = new SysMLine!ItemUsage;
		subFunctions.isReference = true;
		subFunctions.featureNote.add(":>");
		subFunctions.featureSpecialization.add("subFunctions");
		subFunctions.valuePart = s.subFunctions.getEReference();
		t.body.add(subFunctions);
	}
	//OperationalActivity -> EReference : outFunctionRealizations
	if (s.outFunctionRealizations.getEReference() != null){
		var outFunctionRealizations = new SysMLine!ItemUsage;
		outFunctionRealizations.isReference = true;
		outFunctionRealizations.featureNote.add(":>");
		outFunctionRealizations.featureSpecialization.add("outFunctionRealizations");
		outFunctionRealizations.valuePart = s.outFunctionRealizations.getEReference();
		t.body.add(outFunctionRealizations);
	}
	//OperationalActivity -> EReference : inFunctionRealizations
	if (s.inFunctionRealizations.getEReference() != null){
		var inFunctionRealizations = new SysMLine!ItemUsage;
		inFunctionRealizations.isReference = true;
		inFunctionRealizations.featureNote.add(":>");
		inFunctionRealizations.featureSpecialization.add("inFunctionRealizations");
		inFunctionRealizations.valuePart = s.inFunctionRealizations.getEReference();
		t.body.add(inFunctionRealizations);
	}
	//OperationalActivity -> EReference : componentFunctionalAllocations
	if (s.componentFunctionalAllocations.getEReference() != null){
		var componentFunctionalAllocations = new SysMLine!ItemUsage;
		componentFunctionalAllocations.isReference = true;
		componentFunctionalAllocations.featureNote.add(":>");
		componentFunctionalAllocations.featureSpecialization.add("componentFunctionalAllocations");
		componentFunctionalAllocations.valuePart = s.componentFunctionalAllocations.getEReference();
		t.body.add(componentFunctionalAllocations);
	}
	//OperationalActivity -> EReference : allocationBlocks
	if (s.allocationBlocks.getEReference() != null){
		var allocationBlocks = new SysMLine!ItemUsage;
		allocationBlocks.isReference = true;
		allocationBlocks.featureNote.add(":>");
		allocationBlocks.featureSpecialization.add("allocationBlocks");
		allocationBlocks.valuePart = s.allocationBlocks.getEReference();
		t.body.add(allocationBlocks);
	}
	//OperationalActivity -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null){
		var availableInStates = new SysMLine!ItemUsage;
		availableInStates.isReference = true;
		availableInStates.featureNote.add(":>");
		availableInStates.featureSpecialization.add("availableInStates");
		availableInStates.valuePart = s.availableInStates.getEReference();
		t.body.add(availableInStates);
	}
	//OperationalActivity -> EReference : involvingCapabilities
	if (s.involvingCapabilities.getEReference() != null){
		var involvingCapabilities = new SysMLine!ItemUsage;
		involvingCapabilities.isReference = true;
		involvingCapabilities.featureNote.add(":>");
		involvingCapabilities.featureSpecialization.add("involvingCapabilities");
		involvingCapabilities.valuePart = s.involvingCapabilities.getEReference();
		t.body.add(involvingCapabilities);
	}
	//OperationalActivity -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null){
		var involvingCapabilityRealizations = new SysMLine!ItemUsage;
		involvingCapabilityRealizations.isReference = true;
		involvingCapabilityRealizations.featureNote.add(":>");
		involvingCapabilityRealizations.featureSpecialization.add("involvingCapabilityRealizations");
		involvingCapabilityRealizations.valuePart = s.involvingCapabilityRealizations.getEReference();
		t.body.add(involvingCapabilityRealizations);
	}
	//OperationalActivity -> EReference : involvingFunctionalChains
	if (s.involvingFunctionalChains.getEReference() != null){
		var involvingFunctionalChains = new SysMLine!ItemUsage;
		involvingFunctionalChains.isReference = true;
		involvingFunctionalChains.featureNote.add(":>");
		involvingFunctionalChains.featureSpecialization.add("involvingFunctionalChains");
		involvingFunctionalChains.valuePart = s.involvingFunctionalChains.getEReference();
		t.body.add(involvingFunctionalChains);
	}
	//OperationalActivity -> EReference : linkedStateMachine
	if (s.linkedStateMachine.getEReference() != null){
		var linkedStateMachine = new SysMLine!ItemUsage;
		linkedStateMachine.isReference = true;
		linkedStateMachine.featureNote.add(":>");
		linkedStateMachine.featureSpecialization.add("linkedStateMachine");
		linkedStateMachine.valuePart = s.linkedStateMachine.getEReference();
		t.body.add(linkedStateMachine);
	}
	//OperationalActivity -> EReference : linkedFunctionSpecification
	if (s.linkedFunctionSpecification.getEReference() != null){
		var linkedFunctionSpecification = new SysMLine!ItemUsage;
		linkedFunctionSpecification.isReference = true;
		linkedFunctionSpecification.featureNote.add(":>");
		linkedFunctionSpecification.featureSpecialization.add("linkedFunctionSpecification");
		linkedFunctionSpecification.valuePart = s.linkedFunctionSpecification.getEReference();
		t.body.add(linkedFunctionSpecification);
	}
	//OperationalActivity -> EReference : ownedOperationalActivityPkgs
	if (s.ownedOperationalActivityPkgs.getEReference() != null){
		var ownedOperationalActivityPkgs = new SysMLine!ItemUsage;
		ownedOperationalActivityPkgs.isReference = true;
		ownedOperationalActivityPkgs.featureNote.add(":>");
		ownedOperationalActivityPkgs.featureSpecialization.add("ownedOperationalActivityPkgs");
		ownedOperationalActivityPkgs.valuePart = s.ownedOperationalActivityPkgs.getEReference();
		t.body.add(ownedOperationalActivityPkgs);
	}
	//OperationalActivity -> EReference : activityAllocations
	if (s.activityAllocations.getEReference() != null){
		var activityAllocations = new SysMLine!ItemUsage;
		activityAllocations.isReference = true;
		activityAllocations.featureNote.add(":>");
		activityAllocations.featureSpecialization.add("activityAllocations");
		activityAllocations.valuePart = s.activityAllocations.getEReference();
		t.body.add(activityAllocations);
	}
	//OperationalActivity -> EReference : ownedSwimlanes
	if (s.ownedSwimlanes.getEReference() != null){
		var ownedSwimlanes = new SysMLine!ItemUsage;
		ownedSwimlanes.isReference = true;
		ownedSwimlanes.featureNote.add(":>");
		ownedSwimlanes.featureSpecialization.add("ownedSwimlanes");
		ownedSwimlanes.valuePart = s.ownedSwimlanes.getEReference();
		t.body.add(ownedSwimlanes);
	}
	//OperationalActivity -> EReference : ownedProcess
	if (s.ownedProcess.getEReference() != null){
		var ownedProcess = new SysMLine!ItemUsage;
		ownedProcess.isReference = true;
		ownedProcess.featureNote.add(":>");
		ownedProcess.featureSpecialization.add("ownedProcess");
		ownedProcess.valuePart = s.ownedProcess.getEReference();
		t.body.add(ownedProcess);
	}
	//OperationalActivity -> EReference : allocatorEntities
	if (s.allocatorEntities.getEReference() != null){
		var allocatorEntities = new SysMLine!ItemUsage;
		allocatorEntities.isReference = true;
		allocatorEntities.featureNote.add(":>");
		allocatorEntities.featureSpecialization.add("allocatorEntities");
		allocatorEntities.valuePart = s.allocatorEntities.getEReference();
		t.body.add(allocatorEntities);
	}
	//OperationalActivity -> EReference : realizingSystemFunctions
	if (s.realizingSystemFunctions.getEReference() != null){
		var realizingSystemFunctions = new SysMLine!ItemUsage;
		realizingSystemFunctions.isReference = true;
		realizingSystemFunctions.featureNote.add(":>");
		realizingSystemFunctions.featureSpecialization.add("realizingSystemFunctions");
		realizingSystemFunctions.valuePart = s.realizingSystemFunctions.getEReference();
		t.body.add(realizingSystemFunctions);
	}
	//OperationalActivity -> EReference : allocatingRoles
	if (s.allocatingRoles.getEReference() != null){
		var allocatingRoles = new SysMLine!ItemUsage;
		allocatingRoles.isReference = true;
		allocatingRoles.featureNote.add(":>");
		allocatingRoles.featureSpecialization.add("allocatingRoles");
		allocatingRoles.valuePart = s.allocatingRoles.getEReference();
		t.body.add(allocatingRoles);
	}
	//OperationalActivity -> EReference : containedOperationalActivities
	if (s.containedOperationalActivities.getEReference() != null){
		var containedOperationalActivities = new SysMLine!ItemUsage;
		containedOperationalActivities.isReference = true;
		containedOperationalActivities.featureNote.add(":>");
		containedOperationalActivities.featureSpecialization.add("containedOperationalActivities");
		containedOperationalActivities.valuePart = s.containedOperationalActivities.getEReference();
		t.body.add(containedOperationalActivities);
	}
	//OperationalActivity -> EReference : childrenOperationalActivities
	if (s.childrenOperationalActivities.getEReference() != null){
		var childrenOperationalActivities = new SysMLine!ItemUsage;
		childrenOperationalActivities.isReference = true;
		childrenOperationalActivities.featureNote.add(":>");
		childrenOperationalActivities.featureSpecialization.add("childrenOperationalActivities");
		childrenOperationalActivities.valuePart = s.childrenOperationalActivities.getEReference();
		t.body.add(childrenOperationalActivities);
	}
}

@lazy
rule OperationalProcess
	transform s : DSL!OperationalProcess
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalProcess -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//OperationalProcess -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//OperationalProcess -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//OperationalProcess -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//OperationalProcess -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//OperationalProcess -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//OperationalProcess -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//OperationalProcess -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//OperationalProcess -> EAttribute : kind
	if (s.kind.getEAttribute() != null){
		var kind = new SysMLine!AttributeUsage;
		kind.featureNote.add(":>>");
		kind.featureSpecialization.add("kind");
		kind.valuePart = s.kind.getEAttribute();
		t.body.add(kind);
	}
	//OperationalProcess -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//OperationalProcess -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//OperationalProcess -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//OperationalProcess -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//OperationalProcess -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//OperationalProcess -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//OperationalProcess -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//OperationalProcess -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//OperationalProcess -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//OperationalProcess -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//OperationalProcess -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//OperationalProcess -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//OperationalProcess -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//OperationalProcess -> EReference : involvedInvolvements
	if (s.involvedInvolvements.getEReference() != null){
		var involvedInvolvements = new SysMLine!ItemUsage;
		involvedInvolvements.isReference = true;
		involvedInvolvements.featureNote.add(":>");
		involvedInvolvements.featureSpecialization.add("involvedInvolvements");
		involvedInvolvements.valuePart = s.involvedInvolvements.getEReference();
		t.body.add(involvedInvolvements);
	}
	//OperationalProcess -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null){
		var involvingInvolvements = new SysMLine!ItemUsage;
		involvingInvolvements.isReference = true;
		involvingInvolvements.featureNote.add(":>");
		involvingInvolvements.featureSpecialization.add("involvingInvolvements");
		involvingInvolvements.valuePart = s.involvingInvolvements.getEReference();
		t.body.add(involvingInvolvements);
	}
	//OperationalProcess -> EReference : ownedFunctionalChainInvolvements
	if (s.ownedFunctionalChainInvolvements.getEReference() != null){
		var ownedFunctionalChainInvolvements = new SysMLine!ItemUsage;
		ownedFunctionalChainInvolvements.isReference = true;
		ownedFunctionalChainInvolvements.featureNote.add(":>");
		ownedFunctionalChainInvolvements.featureSpecialization.add("ownedFunctionalChainInvolvements");
		ownedFunctionalChainInvolvements.valuePart = s.ownedFunctionalChainInvolvements.getEReference();
		t.body.add(ownedFunctionalChainInvolvements);
	}
	//OperationalProcess -> EReference : ownedFunctionalChainRealizations
	if (s.ownedFunctionalChainRealizations.getEReference() != null){
		var ownedFunctionalChainRealizations = new SysMLine!ItemUsage;
		ownedFunctionalChainRealizations.isReference = true;
		ownedFunctionalChainRealizations.featureNote.add(":>");
		ownedFunctionalChainRealizations.featureSpecialization.add("ownedFunctionalChainRealizations");
		ownedFunctionalChainRealizations.valuePart = s.ownedFunctionalChainRealizations.getEReference();
		t.body.add(ownedFunctionalChainRealizations);
	}
	//OperationalProcess -> EReference : involvedFunctionalChainInvolvements
	if (s.involvedFunctionalChainInvolvements.getEReference() != null){
		var involvedFunctionalChainInvolvements = new SysMLine!ItemUsage;
		involvedFunctionalChainInvolvements.isReference = true;
		involvedFunctionalChainInvolvements.featureNote.add(":>");
		involvedFunctionalChainInvolvements.featureSpecialization.add("involvedFunctionalChainInvolvements");
		involvedFunctionalChainInvolvements.valuePart = s.involvedFunctionalChainInvolvements.getEReference();
		t.body.add(involvedFunctionalChainInvolvements);
	}
	//OperationalProcess -> EReference : involvedFunctions
	if (s.involvedFunctions.getEReference() != null){
		var involvedFunctions = new SysMLine!ItemUsage;
		involvedFunctions.isReference = true;
		involvedFunctions.featureNote.add(":>");
		involvedFunctions.featureSpecialization.add("involvedFunctions");
		involvedFunctions.valuePart = s.involvedFunctions.getEReference();
		t.body.add(involvedFunctions);
	}
	//OperationalProcess -> EReference : involvedFunctionalExchanges
	if (s.involvedFunctionalExchanges.getEReference() != null){
		var involvedFunctionalExchanges = new SysMLine!ItemUsage;
		involvedFunctionalExchanges.isReference = true;
		involvedFunctionalExchanges.featureNote.add(":>");
		involvedFunctionalExchanges.featureSpecialization.add("involvedFunctionalExchanges");
		involvedFunctionalExchanges.valuePart = s.involvedFunctionalExchanges.getEReference();
		t.body.add(involvedFunctionalExchanges);
	}
	//OperationalProcess -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null){
		var involvedElements = new SysMLine!ItemUsage;
		involvedElements.isReference = true;
		involvedElements.featureNote.add(":>");
		involvedElements.featureSpecialization.add("involvedElements");
		involvedElements.valuePart = s.involvedElements.getEReference();
		t.body.add(involvedElements);
	}
	//OperationalProcess -> EReference : enactedFunctions
	if (s.enactedFunctions.getEReference() != null){
		var enactedFunctions = new SysMLine!ItemUsage;
		enactedFunctions.isReference = true;
		enactedFunctions.featureNote.add(":>");
		enactedFunctions.featureSpecialization.add("enactedFunctions");
		enactedFunctions.valuePart = s.enactedFunctions.getEReference();
		t.body.add(enactedFunctions);
	}
	//OperationalProcess -> EReference : enactedFunctionalBlocks
	if (s.enactedFunctionalBlocks.getEReference() != null){
		var enactedFunctionalBlocks = new SysMLine!ItemUsage;
		enactedFunctionalBlocks.isReference = true;
		enactedFunctionalBlocks.featureNote.add(":>");
		enactedFunctionalBlocks.featureSpecialization.add("enactedFunctionalBlocks");
		enactedFunctionalBlocks.valuePart = s.enactedFunctionalBlocks.getEReference();
		t.body.add(enactedFunctionalBlocks);
	}
	//OperationalProcess -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null){
		var availableInStates = new SysMLine!ItemUsage;
		availableInStates.isReference = true;
		availableInStates.featureNote.add(":>");
		availableInStates.featureSpecialization.add("availableInStates");
		availableInStates.valuePart = s.availableInStates.getEReference();
		t.body.add(availableInStates);
	}
	//OperationalProcess -> EReference : firstFunctionalChainInvolvements
	if (s.firstFunctionalChainInvolvements.getEReference() != null){
		var firstFunctionalChainInvolvements = new SysMLine!ItemUsage;
		firstFunctionalChainInvolvements.isReference = true;
		firstFunctionalChainInvolvements.featureNote.add(":>");
		firstFunctionalChainInvolvements.featureSpecialization.add("firstFunctionalChainInvolvements");
		firstFunctionalChainInvolvements.valuePart = s.firstFunctionalChainInvolvements.getEReference();
		t.body.add(firstFunctionalChainInvolvements);
	}
	//OperationalProcess -> EReference : involvingCapabilities
	if (s.involvingCapabilities.getEReference() != null){
		var involvingCapabilities = new SysMLine!ItemUsage;
		involvingCapabilities.isReference = true;
		involvingCapabilities.featureNote.add(":>");
		involvingCapabilities.featureSpecialization.add("involvingCapabilities");
		involvingCapabilities.valuePart = s.involvingCapabilities.getEReference();
		t.body.add(involvingCapabilities);
	}
	//OperationalProcess -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null){
		var involvingCapabilityRealizations = new SysMLine!ItemUsage;
		involvingCapabilityRealizations.isReference = true;
		involvingCapabilityRealizations.featureNote.add(":>");
		involvingCapabilityRealizations.featureSpecialization.add("involvingCapabilityRealizations");
		involvingCapabilityRealizations.valuePart = s.involvingCapabilityRealizations.getEReference();
		t.body.add(involvingCapabilityRealizations);
	}
	//OperationalProcess -> EReference : realizedFunctionalChains
	if (s.realizedFunctionalChains.getEReference() != null){
		var realizedFunctionalChains = new SysMLine!ItemUsage;
		realizedFunctionalChains.isReference = true;
		realizedFunctionalChains.featureNote.add(":>");
		realizedFunctionalChains.featureSpecialization.add("realizedFunctionalChains");
		realizedFunctionalChains.valuePart = s.realizedFunctionalChains.getEReference();
		t.body.add(realizedFunctionalChains);
	}
	//OperationalProcess -> EReference : realizingFunctionalChains
	if (s.realizingFunctionalChains.getEReference() != null){
		var realizingFunctionalChains = new SysMLine!ItemUsage;
		realizingFunctionalChains.isReference = true;
		realizingFunctionalChains.featureNote.add(":>");
		realizingFunctionalChains.featureSpecialization.add("realizingFunctionalChains");
		realizingFunctionalChains.valuePart = s.realizingFunctionalChains.getEReference();
		t.body.add(realizingFunctionalChains);
	}
	//OperationalProcess -> EReference : preCondition
	if (s.preCondition.getEReference() != null){
		var preCondition = new SysMLine!ItemUsage;
		preCondition.isReference = true;
		preCondition.featureNote.add(":>");
		preCondition.featureSpecialization.add("preCondition");
		preCondition.valuePart = s.preCondition.getEReference();
		t.body.add(preCondition);
	}
	//OperationalProcess -> EReference : postCondition
	if (s.postCondition.getEReference() != null){
		var postCondition = new SysMLine!ItemUsage;
		postCondition.isReference = true;
		postCondition.featureNote.add(":>");
		postCondition.featureSpecialization.add("postCondition");
		postCondition.valuePart = s.postCondition.getEReference();
		t.body.add(postCondition);
	}
	//OperationalProcess -> EReference : ownedSequenceNodes
	if (s.ownedSequenceNodes.getEReference() != null){
		var ownedSequenceNodes = new SysMLine!ItemUsage;
		ownedSequenceNodes.isReference = true;
		ownedSequenceNodes.featureNote.add(":>");
		ownedSequenceNodes.featureSpecialization.add("ownedSequenceNodes");
		ownedSequenceNodes.valuePart = s.ownedSequenceNodes.getEReference();
		t.body.add(ownedSequenceNodes);
	}
	//OperationalProcess -> EReference : ownedSequenceLinks
	if (s.ownedSequenceLinks.getEReference() != null){
		var ownedSequenceLinks = new SysMLine!ItemUsage;
		ownedSequenceLinks.isReference = true;
		ownedSequenceLinks.featureNote.add(":>");
		ownedSequenceLinks.featureSpecialization.add("ownedSequenceLinks");
		ownedSequenceLinks.valuePart = s.ownedSequenceLinks.getEReference();
		t.body.add(ownedSequenceLinks);
	}
	//OperationalProcess -> EReference : involvingOperationalCapabilities
	if (s.involvingOperationalCapabilities.getEReference() != null){
		var involvingOperationalCapabilities = new SysMLine!ItemUsage;
		involvingOperationalCapabilities.isReference = true;
		involvingOperationalCapabilities.featureNote.add(":>");
		involvingOperationalCapabilities.featureSpecialization.add("involvingOperationalCapabilities");
		involvingOperationalCapabilities.valuePart = s.involvingOperationalCapabilities.getEReference();
		t.body.add(involvingOperationalCapabilities);
	}
}

@lazy
rule Swimlane
	transform s : DSL!Swimlane
	to t : SysMLine!ItemUsage
	extends Base{
	//Swimlane -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//Swimlane -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//Swimlane -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//Swimlane -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//Swimlane -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//Swimlane -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//Swimlane -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//Swimlane -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//Swimlane -> EAttribute : isDimension
	if (s.isDimension.getEAttribute() != null){
		var isDimension = new SysMLine!AttributeUsage;
		isDimension.featureNote.add(":>>");
		isDimension.featureSpecialization.add("isDimension");
		isDimension.valuePart = s.isDimension.getEAttribute();
		t.body.add(isDimension);
	}
	//Swimlane -> EAttribute : isExternal
	if (s.isExternal.getEAttribute() != null){
		var isExternal = new SysMLine!AttributeUsage;
		isExternal.featureNote.add(":>>");
		isExternal.featureSpecialization.add("isExternal");
		isExternal.valuePart = s.isExternal.getEAttribute();
		t.body.add(isExternal);
	}
	//Swimlane -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//Swimlane -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//Swimlane -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//Swimlane -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//Swimlane -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//Swimlane -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//Swimlane -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//Swimlane -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//Swimlane -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//Swimlane -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//Swimlane -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//Swimlane -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//Swimlane -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//Swimlane -> EReference : superGroup
	if (s.superGroup.getEReference() != null){
		var superGroup = new SysMLine!ItemUsage;
		superGroup.isReference = true;
		superGroup.featureNote.add(":>");
		superGroup.featureSpecialization.add("superGroup");
		superGroup.valuePart = s.superGroup.getEReference();
		t.body.add(superGroup);
	}
	//Swimlane -> EReference : subGroups
	if (s.subGroups.getEReference() != null){
		var subGroups = new SysMLine!ItemUsage;
		subGroups.isReference = true;
		subGroups.featureNote.add(":>");
		subGroups.featureSpecialization.add("subGroups");
		subGroups.valuePart = s.subGroups.getEReference();
		t.body.add(subGroups);
	}
	//Swimlane -> EReference : ownedNodes
	if (s.ownedNodes.getEReference() != null){
		var ownedNodes = new SysMLine!ItemUsage;
		ownedNodes.isReference = true;
		ownedNodes.featureNote.add(":>");
		ownedNodes.featureSpecialization.add("ownedNodes");
		ownedNodes.valuePart = s.ownedNodes.getEReference();
		t.body.add(ownedNodes);
	}
	//Swimlane -> EReference : ownedEdges
	if (s.ownedEdges.getEReference() != null){
		var ownedEdges = new SysMLine!ItemUsage;
		ownedEdges.isReference = true;
		ownedEdges.featureNote.add(":>");
		ownedEdges.featureSpecialization.add("ownedEdges");
		ownedEdges.valuePart = s.ownedEdges.getEReference();
		t.body.add(ownedEdges);
	}
	//Swimlane -> EReference : representedElement
	if (s.representedElement.getEReference() != null){
		var representedElement = new SysMLine!ItemUsage;
		representedElement.isReference = true;
		representedElement.featureNote.add(":>");
		representedElement.featureSpecialization.add("representedElement");
		representedElement.valuePart = s.representedElement.getEReference();
		t.body.add(representedElement);
	}
	//Swimlane -> EReference : superPartition
	if (s.superPartition.getEReference() != null){
		var superPartition = new SysMLine!ItemUsage;
		superPartition.isReference = true;
		superPartition.featureNote.add(":>");
		superPartition.featureSpecialization.add("superPartition");
		superPartition.valuePart = s.superPartition.getEReference();
		t.body.add(superPartition);
	}
	//Swimlane -> EReference : subPartitions
	if (s.subPartitions.getEReference() != null){
		var subPartitions = new SysMLine!ItemUsage;
		subPartitions.isReference = true;
		subPartitions.featureNote.add(":>");
		subPartitions.featureSpecialization.add("subPartitions");
		subPartitions.valuePart = s.subPartitions.getEReference();
		t.body.add(subPartitions);
	}
	//Swimlane -> EReference : representedEntity
	if (s.representedEntity.getEReference() != null){
		var representedEntity = new SysMLine!ItemUsage;
		representedEntity.isReference = true;
		representedEntity.featureNote.add(":>");
		representedEntity.featureSpecialization.add("representedEntity");
		representedEntity.valuePart = s.representedEntity.getEReference();
		t.body.add(representedEntity);
	}
}

@lazy
rule OperationalCapabilityPkg
	transform s : DSL!OperationalCapabilityPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalCapabilityPkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//OperationalCapabilityPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//OperationalCapabilityPkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//OperationalCapabilityPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//OperationalCapabilityPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//OperationalCapabilityPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//OperationalCapabilityPkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//OperationalCapabilityPkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//OperationalCapabilityPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//OperationalCapabilityPkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//OperationalCapabilityPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//OperationalCapabilityPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//OperationalCapabilityPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//OperationalCapabilityPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//OperationalCapabilityPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//OperationalCapabilityPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//OperationalCapabilityPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//OperationalCapabilityPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//OperationalCapabilityPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//OperationalCapabilityPkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//OperationalCapabilityPkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//OperationalCapabilityPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//OperationalCapabilityPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//OperationalCapabilityPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//OperationalCapabilityPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//OperationalCapabilityPkg -> EReference : ownedOperationalCapabilities
	if (s.ownedOperationalCapabilities.getEReference() != null){
		var ownedOperationalCapabilities = new SysMLine!ItemUsage;
		ownedOperationalCapabilities.isReference = true;
		ownedOperationalCapabilities.featureNote.add(":>");
		ownedOperationalCapabilities.featureSpecialization.add("ownedOperationalCapabilities");
		ownedOperationalCapabilities.valuePart = s.ownedOperationalCapabilities.getEReference();
		t.body.add(ownedOperationalCapabilities);
	}
	//OperationalCapabilityPkg -> EReference : ownedOperationalCapabilityPkgs
	if (s.ownedOperationalCapabilityPkgs.getEReference() != null){
		var ownedOperationalCapabilityPkgs = new SysMLine!ItemUsage;
		ownedOperationalCapabilityPkgs.isReference = true;
		ownedOperationalCapabilityPkgs.featureNote.add(":>");
		ownedOperationalCapabilityPkgs.featureSpecialization.add("ownedOperationalCapabilityPkgs");
		ownedOperationalCapabilityPkgs.valuePart = s.ownedOperationalCapabilityPkgs.getEReference();
		t.body.add(ownedOperationalCapabilityPkgs);
	}
	//OperationalCapabilityPkg -> EReference : ownedCapabilityConfigurations
	if (s.ownedCapabilityConfigurations.getEReference() != null){
		var ownedCapabilityConfigurations = new SysMLine!ItemUsage;
		ownedCapabilityConfigurations.isReference = true;
		ownedCapabilityConfigurations.featureNote.add(":>");
		ownedCapabilityConfigurations.featureSpecialization.add("ownedCapabilityConfigurations");
		ownedCapabilityConfigurations.valuePart = s.ownedCapabilityConfigurations.getEReference();
		t.body.add(ownedCapabilityConfigurations);
	}
	//OperationalCapabilityPkg -> EReference : ownedConceptCompliances
	if (s.ownedConceptCompliances.getEReference() != null){
		var ownedConceptCompliances = new SysMLine!ItemUsage;
		ownedConceptCompliances.isReference = true;
		ownedConceptCompliances.featureNote.add(":>");
		ownedConceptCompliances.featureSpecialization.add("ownedConceptCompliances");
		ownedConceptCompliances.valuePart = s.ownedConceptCompliances.getEReference();
		t.body.add(ownedConceptCompliances);
	}
}

@lazy
rule OperationalCapability
	transform s : DSL!OperationalCapability
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalCapability -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//OperationalCapability -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//OperationalCapability -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//OperationalCapability -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//OperationalCapability -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//OperationalCapability -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//OperationalCapability -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//OperationalCapability -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//OperationalCapability -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//OperationalCapability -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//OperationalCapability -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//OperationalCapability -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//OperationalCapability -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//OperationalCapability -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//OperationalCapability -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//OperationalCapability -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//OperationalCapability -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//OperationalCapability -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//OperationalCapability -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//OperationalCapability -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//OperationalCapability -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//OperationalCapability -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//OperationalCapability -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//OperationalCapability -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//OperationalCapability -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//OperationalCapability -> EReference : involvedInvolvements
	if (s.involvedInvolvements.getEReference() != null){
		var involvedInvolvements = new SysMLine!ItemUsage;
		involvedInvolvements.isReference = true;
		involvedInvolvements.featureNote.add(":>");
		involvedInvolvements.featureSpecialization.add("involvedInvolvements");
		involvedInvolvements.valuePart = s.involvedInvolvements.getEReference();
		t.body.add(involvedInvolvements);
	}
	//OperationalCapability -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null){
		var ownedFunctionalChains = new SysMLine!ItemUsage;
		ownedFunctionalChains.isReference = true;
		ownedFunctionalChains.featureNote.add(":>");
		ownedFunctionalChains.featureSpecialization.add("ownedFunctionalChains");
		ownedFunctionalChains.valuePart = s.ownedFunctionalChains.getEReference();
		t.body.add(ownedFunctionalChains);
	}
	//OperationalCapability -> EReference : preCondition
	if (s.preCondition.getEReference() != null){
		var preCondition = new SysMLine!ItemUsage;
		preCondition.isReference = true;
		preCondition.featureNote.add(":>");
		preCondition.featureSpecialization.add("preCondition");
		preCondition.valuePart = s.preCondition.getEReference();
		t.body.add(preCondition);
	}
	//OperationalCapability -> EReference : postCondition
	if (s.postCondition.getEReference() != null){
		var postCondition = new SysMLine!ItemUsage;
		postCondition.isReference = true;
		postCondition.featureNote.add(":>");
		postCondition.featureSpecialization.add("postCondition");
		postCondition.valuePart = s.postCondition.getEReference();
		t.body.add(postCondition);
	}
	//OperationalCapability -> EReference : ownedScenarios
	if (s.ownedScenarios.getEReference() != null){
		var ownedScenarios = new SysMLine!ItemUsage;
		ownedScenarios.isReference = true;
		ownedScenarios.featureNote.add(":>");
		ownedScenarios.featureSpecialization.add("ownedScenarios");
		ownedScenarios.valuePart = s.ownedScenarios.getEReference();
		t.body.add(ownedScenarios);
	}
	//OperationalCapability -> EReference : incomingCapabilityAllocation
	if (s.incomingCapabilityAllocation.getEReference() != null){
		var incomingCapabilityAllocation = new SysMLine!ItemUsage;
		incomingCapabilityAllocation.isReference = true;
		incomingCapabilityAllocation.featureNote.add(":>");
		incomingCapabilityAllocation.featureSpecialization.add("incomingCapabilityAllocation");
		incomingCapabilityAllocation.valuePart = s.incomingCapabilityAllocation.getEReference();
		t.body.add(incomingCapabilityAllocation);
	}
	//OperationalCapability -> EReference : outgoingCapabilityAllocation
	if (s.outgoingCapabilityAllocation.getEReference() != null){
		var outgoingCapabilityAllocation = new SysMLine!ItemUsage;
		outgoingCapabilityAllocation.isReference = true;
		outgoingCapabilityAllocation.featureNote.add(":>");
		outgoingCapabilityAllocation.featureSpecialization.add("outgoingCapabilityAllocation");
		outgoingCapabilityAllocation.valuePart = s.outgoingCapabilityAllocation.getEReference();
		t.body.add(outgoingCapabilityAllocation);
	}
	//OperationalCapability -> EReference : extends
	if (s.extends.getEReference() != null){
		var extends = new SysMLine!ItemUsage;
		extends.isReference = true;
		extends.featureNote.add(":>");
		extends.featureSpecialization.add("extends");
		extends.valuePart = s.extends.getEReference();
		t.body.add(extends);
	}
	//OperationalCapability -> EReference : extending
	if (s.extending.getEReference() != null){
		var extending = new SysMLine!ItemUsage;
		extending.isReference = true;
		extending.featureNote.add(":>");
		extending.featureSpecialization.add("extending");
		extending.valuePart = s.extending.getEReference();
		t.body.add(extending);
	}
	//OperationalCapability -> EReference : abstractCapabilityExtensionPoints
	if (s.abstractCapabilityExtensionPoints.getEReference() != null){
		var abstractCapabilityExtensionPoints = new SysMLine!ItemUsage;
		abstractCapabilityExtensionPoints.isReference = true;
		abstractCapabilityExtensionPoints.featureNote.add(":>");
		abstractCapabilityExtensionPoints.featureSpecialization.add("abstractCapabilityExtensionPoints");
		abstractCapabilityExtensionPoints.valuePart = s.abstractCapabilityExtensionPoints.getEReference();
		t.body.add(abstractCapabilityExtensionPoints);
	}
	//OperationalCapability -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null){
		var superGeneralizations = new SysMLine!ItemUsage;
		superGeneralizations.isReference = true;
		superGeneralizations.featureNote.add(":>");
		superGeneralizations.featureSpecialization.add("superGeneralizations");
		superGeneralizations.valuePart = s.superGeneralizations.getEReference();
		t.body.add(superGeneralizations);
	}
	//OperationalCapability -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null){
		var subGeneralizations = new SysMLine!ItemUsage;
		subGeneralizations.isReference = true;
		subGeneralizations.featureNote.add(":>");
		subGeneralizations.featureSpecialization.add("subGeneralizations");
		subGeneralizations.valuePart = s.subGeneralizations.getEReference();
		t.body.add(subGeneralizations);
	}
	//OperationalCapability -> EReference : includes
	if (s.includes.getEReference() != null){
		var includes = new SysMLine!ItemUsage;
		includes.isReference = true;
		includes.featureNote.add(":>");
		includes.featureSpecialization.add("includes");
		includes.valuePart = s.includes.getEReference();
		t.body.add(includes);
	}
	//OperationalCapability -> EReference : including
	if (s.including.getEReference() != null){
		var including = new SysMLine!ItemUsage;
		including.isReference = true;
		including.featureNote.add(":>");
		including.featureSpecialization.add("including");
		including.valuePart = s.including.getEReference();
		t.body.add(including);
	}
	//OperationalCapability -> EReference : super
	if (s.super.getEReference() != null){
		var super = new SysMLine!ItemUsage;
		super.isReference = true;
		super.featureNote.add(":>");
		super.featureSpecialization.add("super");
		super.valuePart = s.super.getEReference();
		t.body.add(super);
	}
	//OperationalCapability -> EReference : sub
	if (s.sub.getEReference() != null){
		var sub = new SysMLine!ItemUsage;
		sub.isReference = true;
		sub.featureNote.add(":>");
		sub.featureSpecialization.add("sub");
		sub.valuePart = s.sub.getEReference();
		t.body.add(sub);
	}
	//OperationalCapability -> EReference : includedAbstractCapabilities
	if (s.includedAbstractCapabilities.getEReference() != null){
		var includedAbstractCapabilities = new SysMLine!ItemUsage;
		includedAbstractCapabilities.isReference = true;
		includedAbstractCapabilities.featureNote.add(":>");
		includedAbstractCapabilities.featureSpecialization.add("includedAbstractCapabilities");
		includedAbstractCapabilities.valuePart = s.includedAbstractCapabilities.getEReference();
		t.body.add(includedAbstractCapabilities);
	}
	//OperationalCapability -> EReference : includingAbstractCapabilities
	if (s.includingAbstractCapabilities.getEReference() != null){
		var includingAbstractCapabilities = new SysMLine!ItemUsage;
		includingAbstractCapabilities.isReference = true;
		includingAbstractCapabilities.featureNote.add(":>");
		includingAbstractCapabilities.featureSpecialization.add("includingAbstractCapabilities");
		includingAbstractCapabilities.valuePart = s.includingAbstractCapabilities.getEReference();
		t.body.add(includingAbstractCapabilities);
	}
	//OperationalCapability -> EReference : extendedAbstractCapabilities
	if (s.extendedAbstractCapabilities.getEReference() != null){
		var extendedAbstractCapabilities = new SysMLine!ItemUsage;
		extendedAbstractCapabilities.isReference = true;
		extendedAbstractCapabilities.featureNote.add(":>");
		extendedAbstractCapabilities.featureSpecialization.add("extendedAbstractCapabilities");
		extendedAbstractCapabilities.valuePart = s.extendedAbstractCapabilities.getEReference();
		t.body.add(extendedAbstractCapabilities);
	}
	//OperationalCapability -> EReference : extendingAbstractCapabilities
	if (s.extendingAbstractCapabilities.getEReference() != null){
		var extendingAbstractCapabilities = new SysMLine!ItemUsage;
		extendingAbstractCapabilities.isReference = true;
		extendingAbstractCapabilities.featureNote.add(":>");
		extendingAbstractCapabilities.featureSpecialization.add("extendingAbstractCapabilities");
		extendingAbstractCapabilities.valuePart = s.extendingAbstractCapabilities.getEReference();
		t.body.add(extendingAbstractCapabilities);
	}
	//OperationalCapability -> EReference : ownedFunctionalChainAbstractCapabilityInvolvements
	if (s.ownedFunctionalChainAbstractCapabilityInvolvements.getEReference() != null){
		var ownedFunctionalChainAbstractCapabilityInvolvements = new SysMLine!ItemUsage;
		ownedFunctionalChainAbstractCapabilityInvolvements.isReference = true;
		ownedFunctionalChainAbstractCapabilityInvolvements.featureNote.add(":>");
		ownedFunctionalChainAbstractCapabilityInvolvements.featureSpecialization.add("ownedFunctionalChainAbstractCapabilityInvolvements");
		ownedFunctionalChainAbstractCapabilityInvolvements.valuePart = s.ownedFunctionalChainAbstractCapabilityInvolvements.getEReference();
		t.body.add(ownedFunctionalChainAbstractCapabilityInvolvements);
	}
	//OperationalCapability -> EReference : ownedAbstractFunctionAbstractCapabilityInvolvements
	if (s.ownedAbstractFunctionAbstractCapabilityInvolvements.getEReference() != null){
		var ownedAbstractFunctionAbstractCapabilityInvolvements = new SysMLine!ItemUsage;
		ownedAbstractFunctionAbstractCapabilityInvolvements.isReference = true;
		ownedAbstractFunctionAbstractCapabilityInvolvements.featureNote.add(":>");
		ownedAbstractFunctionAbstractCapabilityInvolvements.featureSpecialization.add("ownedAbstractFunctionAbstractCapabilityInvolvements");
		ownedAbstractFunctionAbstractCapabilityInvolvements.valuePart = s.ownedAbstractFunctionAbstractCapabilityInvolvements.getEReference();
		t.body.add(ownedAbstractFunctionAbstractCapabilityInvolvements);
	}
	//OperationalCapability -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null){
		var availableInStates = new SysMLine!ItemUsage;
		availableInStates.isReference = true;
		availableInStates.featureNote.add(":>");
		availableInStates.featureSpecialization.add("availableInStates");
		availableInStates.valuePart = s.availableInStates.getEReference();
		t.body.add(availableInStates);
	}
	//OperationalCapability -> EReference : ownedAbstractCapabilityRealizations
	if (s.ownedAbstractCapabilityRealizations.getEReference() != null){
		var ownedAbstractCapabilityRealizations = new SysMLine!ItemUsage;
		ownedAbstractCapabilityRealizations.isReference = true;
		ownedAbstractCapabilityRealizations.featureNote.add(":>");
		ownedAbstractCapabilityRealizations.featureSpecialization.add("ownedAbstractCapabilityRealizations");
		ownedAbstractCapabilityRealizations.valuePart = s.ownedAbstractCapabilityRealizations.getEReference();
		t.body.add(ownedAbstractCapabilityRealizations);
	}
	//OperationalCapability -> EReference : involvedAbstractFunctions
	if (s.involvedAbstractFunctions.getEReference() != null){
		var involvedAbstractFunctions = new SysMLine!ItemUsage;
		involvedAbstractFunctions.isReference = true;
		involvedAbstractFunctions.featureNote.add(":>");
		involvedAbstractFunctions.featureSpecialization.add("involvedAbstractFunctions");
		involvedAbstractFunctions.valuePart = s.involvedAbstractFunctions.getEReference();
		t.body.add(involvedAbstractFunctions);
	}
	//OperationalCapability -> EReference : involvedFunctionalChains
	if (s.involvedFunctionalChains.getEReference() != null){
		var involvedFunctionalChains = new SysMLine!ItemUsage;
		involvedFunctionalChains.isReference = true;
		involvedFunctionalChains.featureNote.add(":>");
		involvedFunctionalChains.featureSpecialization.add("involvedFunctionalChains");
		involvedFunctionalChains.valuePart = s.involvedFunctionalChains.getEReference();
		t.body.add(involvedFunctionalChains);
	}
	//OperationalCapability -> EReference : compliances
	if (s.compliances.getEReference() != null){
		var compliances = new SysMLine!ItemUsage;
		compliances.isReference = true;
		compliances.featureNote.add(":>");
		compliances.featureSpecialization.add("compliances");
		compliances.valuePart = s.compliances.getEReference();
		t.body.add(compliances);
	}
	//OperationalCapability -> EReference : configurations
	if (s.configurations.getEReference() != null){
		var configurations = new SysMLine!ItemUsage;
		configurations.isReference = true;
		configurations.featureNote.add(":>");
		configurations.featureSpecialization.add("configurations");
		configurations.valuePart = s.configurations.getEReference();
		t.body.add(configurations);
	}
	//OperationalCapability -> EReference : ownedEntityOperationalCapabilityInvolvements
	if (s.ownedEntityOperationalCapabilityInvolvements.getEReference() != null){
		var ownedEntityOperationalCapabilityInvolvements = new SysMLine!ItemUsage;
		ownedEntityOperationalCapabilityInvolvements.isReference = true;
		ownedEntityOperationalCapabilityInvolvements.featureNote.add(":>");
		ownedEntityOperationalCapabilityInvolvements.featureSpecialization.add("ownedEntityOperationalCapabilityInvolvements");
		ownedEntityOperationalCapabilityInvolvements.valuePart = s.ownedEntityOperationalCapabilityInvolvements.getEReference();
		t.body.add(ownedEntityOperationalCapabilityInvolvements);
	}
	//OperationalCapability -> EReference : realizingCapabilities
	if (s.realizingCapabilities.getEReference() != null){
		var realizingCapabilities = new SysMLine!ItemUsage;
		realizingCapabilities.isReference = true;
		realizingCapabilities.featureNote.add(":>");
		realizingCapabilities.featureSpecialization.add("realizingCapabilities");
		realizingCapabilities.valuePart = s.realizingCapabilities.getEReference();
		t.body.add(realizingCapabilities);
	}
	//OperationalCapability -> EReference : involvedEntities
	if (s.involvedEntities.getEReference() != null){
		var involvedEntities = new SysMLine!ItemUsage;
		involvedEntities.isReference = true;
		involvedEntities.featureNote.add(":>");
		involvedEntities.featureSpecialization.add("involvedEntities");
		involvedEntities.valuePart = s.involvedEntities.getEReference();
		t.body.add(involvedEntities);
	}
}

@lazy
rule ActivityAllocation
	transform s : DSL!ActivityAllocation
	to t : SysMLine!ItemUsage
	extends Base{
	//ActivityAllocation -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//ActivityAllocation -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//ActivityAllocation -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//ActivityAllocation -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//ActivityAllocation -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//ActivityAllocation -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//ActivityAllocation -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//ActivityAllocation -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//ActivityAllocation -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//ActivityAllocation -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//ActivityAllocation -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//ActivityAllocation -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//ActivityAllocation -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//ActivityAllocation -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//ActivityAllocation -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//ActivityAllocation -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//ActivityAllocation -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//ActivityAllocation -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//ActivityAllocation -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//ActivityAllocation -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//ActivityAllocation -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//ActivityAllocation -> EReference : targetElement
	if (s.targetElement.getEReference() != null){
		var targetElement = new SysMLine!ItemUsage;
		targetElement.isReference = true;
		targetElement.featureNote.add(":>");
		targetElement.featureSpecialization.add("targetElement");
		targetElement.valuePart = s.targetElement.getEReference();
		t.body.add(targetElement);
	}
	//ActivityAllocation -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null){
		var sourceElement = new SysMLine!ItemUsage;
		sourceElement.isReference = true;
		sourceElement.featureNote.add(":>");
		sourceElement.featureSpecialization.add("sourceElement");
		sourceElement.valuePart = s.sourceElement.getEReference();
		t.body.add(sourceElement);
	}
	//ActivityAllocation -> EReference : role
	if (s.role.getEReference() != null){
		var role = new SysMLine!ItemUsage;
		role.isReference = true;
		role.featureNote.add(":>");
		role.featureSpecialization.add("role");
		role.valuePart = s.role.getEReference();
		t.body.add(role);
	}
	//ActivityAllocation -> EReference : activity
	if (s.activity.getEReference() != null){
		var activity = new SysMLine!ItemUsage;
		activity.isReference = true;
		activity.featureNote.add(":>");
		activity.featureSpecialization.add("activity");
		activity.valuePart = s.activity.getEReference();
		t.body.add(activity);
	}
}

@lazy
rule RolePkg
	transform s : DSL!RolePkg
	to t : SysMLine!ItemUsage
	extends Base{
	//RolePkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//RolePkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//RolePkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//RolePkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//RolePkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//RolePkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//RolePkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//RolePkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//RolePkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//RolePkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//RolePkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//RolePkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//RolePkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//RolePkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//RolePkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//RolePkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//RolePkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//RolePkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//RolePkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//RolePkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//RolePkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//RolePkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//RolePkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//RolePkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//RolePkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//RolePkg -> EReference : ownedRolePkgs
	if (s.ownedRolePkgs.getEReference() != null){
		var ownedRolePkgs = new SysMLine!ItemUsage;
		ownedRolePkgs.isReference = true;
		ownedRolePkgs.featureNote.add(":>");
		ownedRolePkgs.featureSpecialization.add("ownedRolePkgs");
		ownedRolePkgs.valuePart = s.ownedRolePkgs.getEReference();
		t.body.add(ownedRolePkgs);
	}
	//RolePkg -> EReference : ownedRoles
	if (s.ownedRoles.getEReference() != null){
		var ownedRoles = new SysMLine!ItemUsage;
		ownedRoles.isReference = true;
		ownedRoles.featureNote.add(":>");
		ownedRoles.featureSpecialization.add("ownedRoles");
		ownedRoles.valuePart = s.ownedRoles.getEReference();
		t.body.add(ownedRoles);
	}
}

@lazy
rule Role
	transform s : DSL!Role
	to t : SysMLine!ItemUsage
	extends Base{
	//Role -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//Role -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//Role -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//Role -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//Role -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//Role -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//Role -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//Role -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//Role -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//Role -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null){
		var isStatic = new SysMLine!AttributeUsage;
		isStatic.featureNote.add(":>>");
		isStatic.featureSpecialization.add("isStatic");
		isStatic.valuePart = s.isStatic.getEAttribute();
		t.body.add(isStatic);
	}
	//Role -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null){
		var visibility = new SysMLine!AttributeUsage;
		visibility.featureNote.add(":>>");
		visibility.featureSpecialization.add("visibility");
		visibility.valuePart = s.visibility.getEAttribute();
		t.body.add(visibility);
	}
	//Role -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null){
		var ordered = new SysMLine!AttributeUsage;
		ordered.featureNote.add(":>>");
		ordered.featureSpecialization.add("ordered");
		ordered.valuePart = s.ordered.getEAttribute();
		t.body.add(ordered);
	}
	//Role -> EAttribute : unique
	if (s.unique.getEAttribute() != null){
		var unique = new SysMLine!AttributeUsage;
		unique.featureNote.add(":>>");
		unique.featureSpecialization.add("unique");
		unique.valuePart = s.unique.getEAttribute();
		t.body.add(unique);
	}
	//Role -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null){
		var minInclusive = new SysMLine!AttributeUsage;
		minInclusive.featureNote.add(":>>");
		minInclusive.featureSpecialization.add("minInclusive");
		minInclusive.valuePart = s.minInclusive.getEAttribute();
		t.body.add(minInclusive);
	}
	//Role -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null){
		var maxInclusive = new SysMLine!AttributeUsage;
		maxInclusive.featureNote.add(":>>");
		maxInclusive.featureSpecialization.add("maxInclusive");
		maxInclusive.valuePart = s.maxInclusive.getEAttribute();
		t.body.add(maxInclusive);
	}
	//Role -> EAttribute : final
	if (s.final.getEAttribute() != null){
		var final = new SysMLine!AttributeUsage;
		final.featureNote.add(":>>");
		final.featureSpecialization.add("final");
		final.valuePart = s.final.getEAttribute();
		t.body.add(final);
	}
	//Role -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null){
		var aggregationKind = new SysMLine!AttributeUsage;
		aggregationKind.featureNote.add(":>>");
		aggregationKind.featureSpecialization.add("aggregationKind");
		aggregationKind.valuePart = s.aggregationKind.getEAttribute();
		t.body.add(aggregationKind);
	}
	//Role -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null){
		var isDerived = new SysMLine!AttributeUsage;
		isDerived.featureNote.add(":>>");
		isDerived.featureSpecialization.add("isDerived");
		isDerived.valuePart = s.isDerived.getEAttribute();
		t.body.add(isDerived);
	}
	//Role -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null){
		var isReadOnly = new SysMLine!AttributeUsage;
		isReadOnly.featureNote.add(":>>");
		isReadOnly.featureSpecialization.add("isReadOnly");
		isReadOnly.valuePart = s.isReadOnly.getEAttribute();
		t.body.add(isReadOnly);
	}
	//Role -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null){
		var isPartOfKey = new SysMLine!AttributeUsage;
		isPartOfKey.featureNote.add(":>>");
		isPartOfKey.featureSpecialization.add("isPartOfKey");
		isPartOfKey.valuePart = s.isPartOfKey.getEAttribute();
		t.body.add(isPartOfKey);
	}
	//Role -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//Role -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//Role -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//Role -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//Role -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//Role -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//Role -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//Role -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//Role -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//Role -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//Role -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//Role -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//Role -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//Role -> EReference : abstractType
	if (s.abstractType.getEReference() != null){
		var abstractType = new SysMLine!ItemUsage;
		abstractType.isReference = true;
		abstractType.featureNote.add(":>");
		abstractType.featureSpecialization.add("abstractType");
		abstractType.valuePart = s.abstractType.getEReference();
		t.body.add(abstractType);
	}
	//Role -> EReference : type
	if (s.type.getEReference() != null){
		var type = new SysMLine!ItemUsage;
		type.isReference = true;
		type.featureNote.add(":>");
		type.featureSpecialization.add("type");
		type.valuePart = s.type.getEReference();
		t.body.add(type);
	}
	//Role -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null){
		var ownedDefaultValue = new SysMLine!ItemUsage;
		ownedDefaultValue.isReference = true;
		ownedDefaultValue.featureNote.add(":>");
		ownedDefaultValue.featureSpecialization.add("ownedDefaultValue");
		ownedDefaultValue.valuePart = s.ownedDefaultValue.getEReference();
		t.body.add(ownedDefaultValue);
	}
	//Role -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null){
		var ownedMinValue = new SysMLine!ItemUsage;
		ownedMinValue.isReference = true;
		ownedMinValue.featureNote.add(":>");
		ownedMinValue.featureSpecialization.add("ownedMinValue");
		ownedMinValue.valuePart = s.ownedMinValue.getEReference();
		t.body.add(ownedMinValue);
	}
	//Role -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null){
		var ownedMaxValue = new SysMLine!ItemUsage;
		ownedMaxValue.isReference = true;
		ownedMaxValue.featureNote.add(":>");
		ownedMaxValue.featureSpecialization.add("ownedMaxValue");
		ownedMaxValue.valuePart = s.ownedMaxValue.getEReference();
		t.body.add(ownedMaxValue);
	}
	//Role -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null){
		var ownedNullValue = new SysMLine!ItemUsage;
		ownedNullValue.isReference = true;
		ownedNullValue.featureNote.add(":>");
		ownedNullValue.featureSpecialization.add("ownedNullValue");
		ownedNullValue.valuePart = s.ownedNullValue.getEReference();
		t.body.add(ownedNullValue);
	}
	//Role -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null){
		var ownedMinCard = new SysMLine!ItemUsage;
		ownedMinCard.isReference = true;
		ownedMinCard.featureNote.add(":>");
		ownedMinCard.featureSpecialization.add("ownedMinCard");
		ownedMinCard.valuePart = s.ownedMinCard.getEReference();
		t.body.add(ownedMinCard);
	}
	//Role -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null){
		var ownedMinLength = new SysMLine!ItemUsage;
		ownedMinLength.isReference = true;
		ownedMinLength.featureNote.add(":>");
		ownedMinLength.featureSpecialization.add("ownedMinLength");
		ownedMinLength.valuePart = s.ownedMinLength.getEReference();
		t.body.add(ownedMinLength);
	}
	//Role -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null){
		var ownedMaxCard = new SysMLine!ItemUsage;
		ownedMaxCard.isReference = true;
		ownedMaxCard.featureNote.add(":>");
		ownedMaxCard.featureSpecialization.add("ownedMaxCard");
		ownedMaxCard.valuePart = s.ownedMaxCard.getEReference();
		t.body.add(ownedMaxCard);
	}
	//Role -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null){
		var ownedMaxLength = new SysMLine!ItemUsage;
		ownedMaxLength.isReference = true;
		ownedMaxLength.featureNote.add(":>");
		ownedMaxLength.featureSpecialization.add("ownedMaxLength");
		ownedMaxLength.valuePart = s.ownedMaxLength.getEReference();
		t.body.add(ownedMaxLength);
	}
	//Role -> EReference : association
	if (s.association.getEReference() != null){
		var association = new SysMLine!ItemUsage;
		association.isReference = true;
		association.featureNote.add(":>");
		association.featureSpecialization.add("association");
		association.valuePart = s.association.getEReference();
		t.body.add(association);
	}
	//Role -> EReference : representingInstanceRoles
	if (s.representingInstanceRoles.getEReference() != null){
		var representingInstanceRoles = new SysMLine!ItemUsage;
		representingInstanceRoles.isReference = true;
		representingInstanceRoles.featureNote.add(":>");
		representingInstanceRoles.featureSpecialization.add("representingInstanceRoles");
		representingInstanceRoles.valuePart = s.representingInstanceRoles.getEReference();
		t.body.add(representingInstanceRoles);
	}
	//Role -> EReference : ownedRoleAssemblyUsages
	if (s.ownedRoleAssemblyUsages.getEReference() != null){
		var ownedRoleAssemblyUsages = new SysMLine!ItemUsage;
		ownedRoleAssemblyUsages.isReference = true;
		ownedRoleAssemblyUsages.featureNote.add(":>");
		ownedRoleAssemblyUsages.featureSpecialization.add("ownedRoleAssemblyUsages");
		ownedRoleAssemblyUsages.valuePart = s.ownedRoleAssemblyUsages.getEReference();
		t.body.add(ownedRoleAssemblyUsages);
	}
	//Role -> EReference : ownedActivityAllocations
	if (s.ownedActivityAllocations.getEReference() != null){
		var ownedActivityAllocations = new SysMLine!ItemUsage;
		ownedActivityAllocations.isReference = true;
		ownedActivityAllocations.featureNote.add(":>");
		ownedActivityAllocations.featureSpecialization.add("ownedActivityAllocations");
		ownedActivityAllocations.valuePart = s.ownedActivityAllocations.getEReference();
		t.body.add(ownedActivityAllocations);
	}
	//Role -> EReference : roleAllocations
	if (s.roleAllocations.getEReference() != null){
		var roleAllocations = new SysMLine!ItemUsage;
		roleAllocations.isReference = true;
		roleAllocations.featureNote.add(":>");
		roleAllocations.featureSpecialization.add("roleAllocations");
		roleAllocations.valuePart = s.roleAllocations.getEReference();
		t.body.add(roleAllocations);
	}
	//Role -> EReference : activityAllocations
	if (s.activityAllocations.getEReference() != null){
		var activityAllocations = new SysMLine!ItemUsage;
		activityAllocations.isReference = true;
		activityAllocations.featureNote.add(":>");
		activityAllocations.featureSpecialization.add("activityAllocations");
		activityAllocations.valuePart = s.activityAllocations.getEReference();
		t.body.add(activityAllocations);
	}
	//Role -> EReference : allocatingEntities
	if (s.allocatingEntities.getEReference() != null){
		var allocatingEntities = new SysMLine!ItemUsage;
		allocatingEntities.isReference = true;
		allocatingEntities.featureNote.add(":>");
		allocatingEntities.featureSpecialization.add("allocatingEntities");
		allocatingEntities.valuePart = s.allocatingEntities.getEReference();
		t.body.add(allocatingEntities);
	}
	//Role -> EReference : allocatedOperationalActivities
	if (s.allocatedOperationalActivities.getEReference() != null){
		var allocatedOperationalActivities = new SysMLine!ItemUsage;
		allocatedOperationalActivities.isReference = true;
		allocatedOperationalActivities.featureNote.add(":>");
		allocatedOperationalActivities.featureSpecialization.add("allocatedOperationalActivities");
		allocatedOperationalActivities.valuePart = s.allocatedOperationalActivities.getEReference();
		t.body.add(allocatedOperationalActivities);
	}
}

@lazy
rule RoleAssemblyUsage
	transform s : DSL!RoleAssemblyUsage
	to t : SysMLine!ItemUsage
	extends Base{
	//RoleAssemblyUsage -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//RoleAssemblyUsage -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//RoleAssemblyUsage -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//RoleAssemblyUsage -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//RoleAssemblyUsage -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//RoleAssemblyUsage -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//RoleAssemblyUsage -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//RoleAssemblyUsage -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//RoleAssemblyUsage -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//RoleAssemblyUsage -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//RoleAssemblyUsage -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//RoleAssemblyUsage -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//RoleAssemblyUsage -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//RoleAssemblyUsage -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//RoleAssemblyUsage -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//RoleAssemblyUsage -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//RoleAssemblyUsage -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//RoleAssemblyUsage -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//RoleAssemblyUsage -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//RoleAssemblyUsage -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//RoleAssemblyUsage -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//RoleAssemblyUsage -> EReference : child
	if (s.child.getEReference() != null){
		var child = new SysMLine!ItemUsage;
		child.isReference = true;
		child.featureNote.add(":>");
		child.featureSpecialization.add("child");
		child.valuePart = s.child.getEReference();
		t.body.add(child);
	}
}

@lazy
rule RoleAllocation
	transform s : DSL!RoleAllocation
	to t : SysMLine!ItemUsage
	extends Base{
	//RoleAllocation -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//RoleAllocation -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//RoleAllocation -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//RoleAllocation -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//RoleAllocation -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//RoleAllocation -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//RoleAllocation -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//RoleAllocation -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//RoleAllocation -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//RoleAllocation -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//RoleAllocation -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//RoleAllocation -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//RoleAllocation -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//RoleAllocation -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//RoleAllocation -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//RoleAllocation -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//RoleAllocation -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//RoleAllocation -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//RoleAllocation -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//RoleAllocation -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//RoleAllocation -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//RoleAllocation -> EReference : targetElement
	if (s.targetElement.getEReference() != null){
		var targetElement = new SysMLine!ItemUsage;
		targetElement.isReference = true;
		targetElement.featureNote.add(":>");
		targetElement.featureSpecialization.add("targetElement");
		targetElement.valuePart = s.targetElement.getEReference();
		t.body.add(targetElement);
	}
	//RoleAllocation -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null){
		var sourceElement = new SysMLine!ItemUsage;
		sourceElement.isReference = true;
		sourceElement.featureNote.add(":>");
		sourceElement.featureSpecialization.add("sourceElement");
		sourceElement.valuePart = s.sourceElement.getEReference();
		t.body.add(sourceElement);
	}
	//RoleAllocation -> EReference : role
	if (s.role.getEReference() != null){
		var role = new SysMLine!ItemUsage;
		role.isReference = true;
		role.featureNote.add(":>");
		role.featureSpecialization.add("role");
		role.valuePart = s.role.getEReference();
		t.body.add(role);
	}
	//RoleAllocation -> EReference : entity
	if (s.entity.getEReference() != null){
		var entity = new SysMLine!ItemUsage;
		entity.isReference = true;
		entity.featureNote.add(":>");
		entity.featureSpecialization.add("entity");
		entity.valuePart = s.entity.getEReference();
		t.body.add(entity);
	}
}

@lazy
rule EntityPkg
	transform s : DSL!EntityPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//EntityPkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//EntityPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//EntityPkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//EntityPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//EntityPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//EntityPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//EntityPkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//EntityPkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//EntityPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//EntityPkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//EntityPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//EntityPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//EntityPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//EntityPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//EntityPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//EntityPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//EntityPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//EntityPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//EntityPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//EntityPkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//EntityPkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//EntityPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//EntityPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//EntityPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//EntityPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//EntityPkg -> EReference : ownedParts
	if (s.ownedParts.getEReference() != null){
		var ownedParts = new SysMLine!ItemUsage;
		ownedParts.isReference = true;
		ownedParts.featureNote.add(":>");
		ownedParts.featureSpecialization.add("ownedParts");
		ownedParts.valuePart = s.ownedParts.getEReference();
		t.body.add(ownedParts);
	}
	//EntityPkg -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null){
		var ownedComponentExchanges = new SysMLine!ItemUsage;
		ownedComponentExchanges.isReference = true;
		ownedComponentExchanges.featureNote.add(":>");
		ownedComponentExchanges.featureSpecialization.add("ownedComponentExchanges");
		ownedComponentExchanges.valuePart = s.ownedComponentExchanges.getEReference();
		t.body.add(ownedComponentExchanges);
	}
	//EntityPkg -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null){
		var ownedComponentExchangeCategories = new SysMLine!ItemUsage;
		ownedComponentExchangeCategories.isReference = true;
		ownedComponentExchangeCategories.featureNote.add(":>");
		ownedComponentExchangeCategories.featureSpecialization.add("ownedComponentExchangeCategories");
		ownedComponentExchangeCategories.valuePart = s.ownedComponentExchangeCategories.getEReference();
		t.body.add(ownedComponentExchangeCategories);
	}
	//EntityPkg -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null){
		var ownedFunctionalLinks = new SysMLine!ItemUsage;
		ownedFunctionalLinks.isReference = true;
		ownedFunctionalLinks.featureNote.add(":>");
		ownedFunctionalLinks.featureSpecialization.add("ownedFunctionalLinks");
		ownedFunctionalLinks.valuePart = s.ownedFunctionalLinks.getEReference();
		t.body.add(ownedFunctionalLinks);
	}
	//EntityPkg -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null){
		var ownedFunctionalAllocations = new SysMLine!ItemUsage;
		ownedFunctionalAllocations.isReference = true;
		ownedFunctionalAllocations.featureNote.add(":>");
		ownedFunctionalAllocations.featureSpecialization.add("ownedFunctionalAllocations");
		ownedFunctionalAllocations.valuePart = s.ownedFunctionalAllocations.getEReference();
		t.body.add(ownedFunctionalAllocations);
	}
	//EntityPkg -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null){
		var ownedComponentExchangeRealizations = new SysMLine!ItemUsage;
		ownedComponentExchangeRealizations.isReference = true;
		ownedComponentExchangeRealizations.featureNote.add(":>");
		ownedComponentExchangeRealizations.featureSpecialization.add("ownedComponentExchangeRealizations");
		ownedComponentExchangeRealizations.valuePart = s.ownedComponentExchangeRealizations.getEReference();
		t.body.add(ownedComponentExchangeRealizations);
	}
	//EntityPkg -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null){
		var ownedPhysicalLinks = new SysMLine!ItemUsage;
		ownedPhysicalLinks.isReference = true;
		ownedPhysicalLinks.featureNote.add(":>");
		ownedPhysicalLinks.featureSpecialization.add("ownedPhysicalLinks");
		ownedPhysicalLinks.valuePart = s.ownedPhysicalLinks.getEReference();
		t.body.add(ownedPhysicalLinks);
	}
	//EntityPkg -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null){
		var ownedPhysicalLinkCategories = new SysMLine!ItemUsage;
		ownedPhysicalLinkCategories.isReference = true;
		ownedPhysicalLinkCategories.featureNote.add(":>");
		ownedPhysicalLinkCategories.featureSpecialization.add("ownedPhysicalLinkCategories");
		ownedPhysicalLinkCategories.valuePart = s.ownedPhysicalLinkCategories.getEReference();
		t.body.add(ownedPhysicalLinkCategories);
	}
	//EntityPkg -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null){
		var ownedStateMachines = new SysMLine!ItemUsage;
		ownedStateMachines.isReference = true;
		ownedStateMachines.featureNote.add(":>");
		ownedStateMachines.featureSpecialization.add("ownedStateMachines");
		ownedStateMachines.valuePart = s.ownedStateMachines.getEReference();
		t.body.add(ownedStateMachines);
	}
	//EntityPkg -> EReference : ownedEntities
	if (s.ownedEntities.getEReference() != null){
		var ownedEntities = new SysMLine!ItemUsage;
		ownedEntities.isReference = true;
		ownedEntities.featureNote.add(":>");
		ownedEntities.featureSpecialization.add("ownedEntities");
		ownedEntities.valuePart = s.ownedEntities.getEReference();
		t.body.add(ownedEntities);
	}
	//EntityPkg -> EReference : ownedEntityPkgs
	if (s.ownedEntityPkgs.getEReference() != null){
		var ownedEntityPkgs = new SysMLine!ItemUsage;
		ownedEntityPkgs.isReference = true;
		ownedEntityPkgs.featureNote.add(":>");
		ownedEntityPkgs.featureSpecialization.add("ownedEntityPkgs");
		ownedEntityPkgs.valuePart = s.ownedEntityPkgs.getEReference();
		t.body.add(ownedEntityPkgs);
	}
	//EntityPkg -> EReference : ownedLocations
	if (s.ownedLocations.getEReference() != null){
		var ownedLocations = new SysMLine!ItemUsage;
		ownedLocations.isReference = true;
		ownedLocations.featureNote.add(":>");
		ownedLocations.featureSpecialization.add("ownedLocations");
		ownedLocations.valuePart = s.ownedLocations.getEReference();
		t.body.add(ownedLocations);
	}
	//EntityPkg -> EReference : ownedCommunicationMeans
	if (s.ownedCommunicationMeans.getEReference() != null){
		var ownedCommunicationMeans = new SysMLine!ItemUsage;
		ownedCommunicationMeans.isReference = true;
		ownedCommunicationMeans.featureNote.add(":>");
		ownedCommunicationMeans.featureSpecialization.add("ownedCommunicationMeans");
		ownedCommunicationMeans.valuePart = s.ownedCommunicationMeans.getEReference();
		t.body.add(ownedCommunicationMeans);
	}
}

@lazy
rule Entity
	transform s : DSL!Entity
	to t : SysMLine!ItemUsage
	extends Base{
	//Entity -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//Entity -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//Entity -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//Entity -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//Entity -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//Entity -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//Entity -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//Entity -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//Entity -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null){
		var abstract = new SysMLine!AttributeUsage;
		abstract.featureNote.add(":>>");
		abstract.featureSpecialization.add("abstract");
		abstract.valuePart = s.abstract.getEAttribute();
		t.body.add(abstract);
	}
	//Entity -> EAttribute : actor
	if (s.actor.getEAttribute() != null){
		var actor = new SysMLine!AttributeUsage;
		actor.featureNote.add(":>>");
		actor.featureSpecialization.add("actor");
		actor.valuePart = s.actor.getEAttribute();
		t.body.add(actor);
	}
	//Entity -> EAttribute : human
	if (s.human.getEAttribute() != null){
		var human = new SysMLine!AttributeUsage;
		human.featureNote.add(":>>");
		human.featureSpecialization.add("human");
		human.valuePart = s.human.getEAttribute();
		t.body.add(human);
	}
	//Entity -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//Entity -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//Entity -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//Entity -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//Entity -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null){
		var abstractTypedElements = new SysMLine!ItemUsage;
		abstractTypedElements.isReference = true;
		abstractTypedElements.featureNote.add(":>");
		abstractTypedElements.featureSpecialization.add("abstractTypedElements");
		abstractTypedElements.valuePart = s.abstractTypedElements.getEReference();
		t.body.add(abstractTypedElements);
	}
	//Entity -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//Entity -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//Entity -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//Entity -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//Entity -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//Entity -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//Entity -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//Entity -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//Entity -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//Entity -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//Entity -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//Entity -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//Entity -> EReference : typedElements
	if (s.typedElements.getEReference() != null){
		var typedElements = new SysMLine!ItemUsage;
		typedElements.isReference = true;
		typedElements.featureNote.add(":>");
		typedElements.featureSpecialization.add("typedElements");
		typedElements.valuePart = s.typedElements.getEReference();
		t.body.add(typedElements);
	}
	//Entity -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null){
		var ownedFunctionalAllocation = new SysMLine!ItemUsage;
		ownedFunctionalAllocation.isReference = true;
		ownedFunctionalAllocation.featureNote.add(":>");
		ownedFunctionalAllocation.featureSpecialization.add("ownedFunctionalAllocation");
		ownedFunctionalAllocation.valuePart = s.ownedFunctionalAllocation.getEReference();
		t.body.add(ownedFunctionalAllocation);
	}
	//Entity -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null){
		var ownedComponentExchanges = new SysMLine!ItemUsage;
		ownedComponentExchanges.isReference = true;
		ownedComponentExchanges.featureNote.add(":>");
		ownedComponentExchanges.featureSpecialization.add("ownedComponentExchanges");
		ownedComponentExchanges.valuePart = s.ownedComponentExchanges.getEReference();
		t.body.add(ownedComponentExchanges);
	}
	//Entity -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null){
		var ownedComponentExchangeCategories = new SysMLine!ItemUsage;
		ownedComponentExchangeCategories.isReference = true;
		ownedComponentExchangeCategories.featureNote.add(":>");
		ownedComponentExchangeCategories.featureSpecialization.add("ownedComponentExchangeCategories");
		ownedComponentExchangeCategories.valuePart = s.ownedComponentExchangeCategories.getEReference();
		t.body.add(ownedComponentExchangeCategories);
	}
	//Entity -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null){
		var functionalAllocations = new SysMLine!ItemUsage;
		functionalAllocations.isReference = true;
		functionalAllocations.featureNote.add(":>");
		functionalAllocations.featureSpecialization.add("functionalAllocations");
		functionalAllocations.valuePart = s.functionalAllocations.getEReference();
		t.body.add(functionalAllocations);
	}
	//Entity -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null){
		var allocatedFunctions = new SysMLine!ItemUsage;
		allocatedFunctions.isReference = true;
		allocatedFunctions.featureNote.add(":>");
		allocatedFunctions.featureSpecialization.add("allocatedFunctions");
		allocatedFunctions.valuePart = s.allocatedFunctions.getEReference();
		t.body.add(allocatedFunctions);
	}
	//Entity -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null){
		var inExchangeLinks = new SysMLine!ItemUsage;
		inExchangeLinks.isReference = true;
		inExchangeLinks.featureNote.add(":>");
		inExchangeLinks.featureSpecialization.add("inExchangeLinks");
		inExchangeLinks.valuePart = s.inExchangeLinks.getEReference();
		t.body.add(inExchangeLinks);
	}
	//Entity -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null){
		var outExchangeLinks = new SysMLine!ItemUsage;
		outExchangeLinks.isReference = true;
		outExchangeLinks.featureNote.add(":>");
		outExchangeLinks.featureSpecialization.add("outExchangeLinks");
		outExchangeLinks.valuePart = s.outExchangeLinks.getEReference();
		t.body.add(outExchangeLinks);
	}
	//Entity -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null){
		var ownedAbstractCapabilityPkg = new SysMLine!ItemUsage;
		ownedAbstractCapabilityPkg.isReference = true;
		ownedAbstractCapabilityPkg.featureNote.add(":>");
		ownedAbstractCapabilityPkg.featureSpecialization.add("ownedAbstractCapabilityPkg");
		ownedAbstractCapabilityPkg.valuePart = s.ownedAbstractCapabilityPkg.getEReference();
		t.body.add(ownedAbstractCapabilityPkg);
	}
	//Entity -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null){
		var ownedInterfacePkg = new SysMLine!ItemUsage;
		ownedInterfacePkg.isReference = true;
		ownedInterfacePkg.featureNote.add(":>");
		ownedInterfacePkg.featureSpecialization.add("ownedInterfacePkg");
		ownedInterfacePkg.valuePart = s.ownedInterfacePkg.getEReference();
		t.body.add(ownedInterfacePkg);
	}
	//Entity -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null){
		var ownedDataPkg = new SysMLine!ItemUsage;
		ownedDataPkg.isReference = true;
		ownedDataPkg.featureNote.add(":>");
		ownedDataPkg.featureSpecialization.add("ownedDataPkg");
		ownedDataPkg.valuePart = s.ownedDataPkg.getEReference();
		t.body.add(ownedDataPkg);
	}
	//Entity -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null){
		var ownedStateMachines = new SysMLine!ItemUsage;
		ownedStateMachines.isReference = true;
		ownedStateMachines.featureNote.add(":>");
		ownedStateMachines.featureSpecialization.add("ownedStateMachines");
		ownedStateMachines.valuePart = s.ownedStateMachines.getEReference();
		t.body.add(ownedStateMachines);
	}
	//Entity -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null){
		var ownedGeneralizations = new SysMLine!ItemUsage;
		ownedGeneralizations.isReference = true;
		ownedGeneralizations.featureNote.add(":>");
		ownedGeneralizations.featureSpecialization.add("ownedGeneralizations");
		ownedGeneralizations.valuePart = s.ownedGeneralizations.getEReference();
		t.body.add(ownedGeneralizations);
	}
	//Entity -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null){
		var superGeneralizations = new SysMLine!ItemUsage;
		superGeneralizations.isReference = true;
		superGeneralizations.featureNote.add(":>");
		superGeneralizations.featureSpecialization.add("superGeneralizations");
		superGeneralizations.valuePart = s.superGeneralizations.getEReference();
		t.body.add(superGeneralizations);
	}
	//Entity -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null){
		var subGeneralizations = new SysMLine!ItemUsage;
		subGeneralizations.isReference = true;
		subGeneralizations.featureNote.add(":>");
		subGeneralizations.featureSpecialization.add("subGeneralizations");
		subGeneralizations.valuePart = s.subGeneralizations.getEReference();
		t.body.add(subGeneralizations);
	}
	//Entity -> EReference : super
	if (s.super.getEReference() != null){
		var super = new SysMLine!ItemUsage;
		super.isReference = true;
		super.featureNote.add(":>");
		super.featureSpecialization.add("super");
		super.valuePart = s.super.getEReference();
		t.body.add(super);
	}
	//Entity -> EReference : sub
	if (s.sub.getEReference() != null){
		var sub = new SysMLine!ItemUsage;
		sub.isReference = true;
		sub.featureNote.add(":>");
		sub.featureSpecialization.add("sub");
		sub.valuePart = s.sub.getEReference();
		t.body.add(sub);
	}
	//Entity -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null){
		var ownedFeatures = new SysMLine!ItemUsage;
		ownedFeatures.isReference = true;
		ownedFeatures.featureNote.add(":>");
		ownedFeatures.featureSpecialization.add("ownedFeatures");
		ownedFeatures.valuePart = s.ownedFeatures.getEReference();
		t.body.add(ownedFeatures);
	}
	//Entity -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null){
		var containedProperties = new SysMLine!ItemUsage;
		containedProperties.isReference = true;
		containedProperties.featureNote.add(":>");
		containedProperties.featureSpecialization.add("containedProperties");
		containedProperties.valuePart = s.containedProperties.getEReference();
		t.body.add(containedProperties);
	}
	//Entity -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null){
		var ownedInterfaceAllocations = new SysMLine!ItemUsage;
		ownedInterfaceAllocations.isReference = true;
		ownedInterfaceAllocations.featureNote.add(":>");
		ownedInterfaceAllocations.featureSpecialization.add("ownedInterfaceAllocations");
		ownedInterfaceAllocations.valuePart = s.ownedInterfaceAllocations.getEReference();
		t.body.add(ownedInterfaceAllocations);
	}
	//Entity -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null){
		var provisionedInterfaceAllocations = new SysMLine!ItemUsage;
		provisionedInterfaceAllocations.isReference = true;
		provisionedInterfaceAllocations.featureNote.add(":>");
		provisionedInterfaceAllocations.featureSpecialization.add("provisionedInterfaceAllocations");
		provisionedInterfaceAllocations.valuePart = s.provisionedInterfaceAllocations.getEReference();
		t.body.add(provisionedInterfaceAllocations);
	}
	//Entity -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null){
		var allocatedInterfaces = new SysMLine!ItemUsage;
		allocatedInterfaces.isReference = true;
		allocatedInterfaces.featureNote.add(":>");
		allocatedInterfaces.featureSpecialization.add("allocatedInterfaces");
		allocatedInterfaces.valuePart = s.allocatedInterfaces.getEReference();
		t.body.add(allocatedInterfaces);
	}
	//Entity -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null){
		var ownedCommunicationLinks = new SysMLine!ItemUsage;
		ownedCommunicationLinks.isReference = true;
		ownedCommunicationLinks.featureNote.add(":>");
		ownedCommunicationLinks.featureSpecialization.add("ownedCommunicationLinks");
		ownedCommunicationLinks.valuePart = s.ownedCommunicationLinks.getEReference();
		t.body.add(ownedCommunicationLinks);
	}
	//Entity -> EReference : produce
	if (s.produce.getEReference() != null){
		var produce = new SysMLine!ItemUsage;
		produce.isReference = true;
		produce.featureNote.add(":>");
		produce.featureSpecialization.add("produce");
		produce.valuePart = s.produce.getEReference();
		t.body.add(produce);
	}
	//Entity -> EReference : consume
	if (s.consume.getEReference() != null){
		var consume = new SysMLine!ItemUsage;
		consume.isReference = true;
		consume.featureNote.add(":>");
		consume.featureSpecialization.add("consume");
		consume.valuePart = s.consume.getEReference();
		t.body.add(consume);
	}
	//Entity -> EReference : send
	if (s.send.getEReference() != null){
		var send = new SysMLine!ItemUsage;
		send.isReference = true;
		send.featureNote.add(":>");
		send.featureSpecialization.add("send");
		send.valuePart = s.send.getEReference();
		t.body.add(send);
	}
	//Entity -> EReference : receive
	if (s.receive.getEReference() != null){
		var receive = new SysMLine!ItemUsage;
		receive.isReference = true;
		receive.featureNote.add(":>");
		receive.featureSpecialization.add("receive");
		receive.valuePart = s.receive.getEReference();
		t.body.add(receive);
	}
	//Entity -> EReference : call
	if (s.call.getEReference() != null){
		var call = new SysMLine!ItemUsage;
		call.isReference = true;
		call.featureNote.add(":>");
		call.featureSpecialization.add("call");
		call.valuePart = s.call.getEReference();
		t.body.add(call);
	}
	//Entity -> EReference : execute
	if (s.execute.getEReference() != null){
		var execute = new SysMLine!ItemUsage;
		execute.isReference = true;
		execute.featureNote.add(":>");
		execute.featureSpecialization.add("execute");
		execute.valuePart = s.execute.getEReference();
		t.body.add(execute);
	}
	//Entity -> EReference : write
	if (s.write.getEReference() != null){
		var write = new SysMLine!ItemUsage;
		write.isReference = true;
		write.featureNote.add(":>");
		write.featureSpecialization.add("write");
		write.valuePart = s.write.getEReference();
		t.body.add(write);
	}
	//Entity -> EReference : access
	if (s.access.getEReference() != null){
		var access = new SysMLine!ItemUsage;
		access.isReference = true;
		access.featureNote.add(":>");
		access.featureSpecialization.add("access");
		access.valuePart = s.access.getEReference();
		t.body.add(access);
	}
	//Entity -> EReference : acquire
	if (s.acquire.getEReference() != null){
		var acquire = new SysMLine!ItemUsage;
		acquire.isReference = true;
		acquire.featureNote.add(":>");
		acquire.featureSpecialization.add("acquire");
		acquire.valuePart = s.acquire.getEReference();
		t.body.add(acquire);
	}
	//Entity -> EReference : transmit
	if (s.transmit.getEReference() != null){
		var transmit = new SysMLine!ItemUsage;
		transmit.isReference = true;
		transmit.featureNote.add(":>");
		transmit.featureSpecialization.add("transmit");
		transmit.valuePart = s.transmit.getEReference();
		t.body.add(transmit);
	}
	//Entity -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null){
		var ownedInterfaceUses = new SysMLine!ItemUsage;
		ownedInterfaceUses.isReference = true;
		ownedInterfaceUses.featureNote.add(":>");
		ownedInterfaceUses.featureSpecialization.add("ownedInterfaceUses");
		ownedInterfaceUses.valuePart = s.ownedInterfaceUses.getEReference();
		t.body.add(ownedInterfaceUses);
	}
	//Entity -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null){
		var usedInterfaceLinks = new SysMLine!ItemUsage;
		usedInterfaceLinks.isReference = true;
		usedInterfaceLinks.featureNote.add(":>");
		usedInterfaceLinks.featureSpecialization.add("usedInterfaceLinks");
		usedInterfaceLinks.valuePart = s.usedInterfaceLinks.getEReference();
		t.body.add(usedInterfaceLinks);
	}
	//Entity -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null){
		var usedInterfaces = new SysMLine!ItemUsage;
		usedInterfaces.isReference = true;
		usedInterfaces.featureNote.add(":>");
		usedInterfaces.featureSpecialization.add("usedInterfaces");
		usedInterfaces.valuePart = s.usedInterfaces.getEReference();
		t.body.add(usedInterfaces);
	}
	//Entity -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null){
		var ownedInterfaceImplementations = new SysMLine!ItemUsage;
		ownedInterfaceImplementations.isReference = true;
		ownedInterfaceImplementations.featureNote.add(":>");
		ownedInterfaceImplementations.featureSpecialization.add("ownedInterfaceImplementations");
		ownedInterfaceImplementations.valuePart = s.ownedInterfaceImplementations.getEReference();
		t.body.add(ownedInterfaceImplementations);
	}
	//Entity -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null){
		var implementedInterfaceLinks = new SysMLine!ItemUsage;
		implementedInterfaceLinks.isReference = true;
		implementedInterfaceLinks.featureNote.add(":>");
		implementedInterfaceLinks.featureSpecialization.add("implementedInterfaceLinks");
		implementedInterfaceLinks.valuePart = s.implementedInterfaceLinks.getEReference();
		t.body.add(implementedInterfaceLinks);
	}
	//Entity -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null){
		var implementedInterfaces = new SysMLine!ItemUsage;
		implementedInterfaces.isReference = true;
		implementedInterfaces.featureNote.add(":>");
		implementedInterfaces.featureSpecialization.add("implementedInterfaces");
		implementedInterfaces.valuePart = s.implementedInterfaces.getEReference();
		t.body.add(implementedInterfaces);
	}
	//Entity -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null){
		var ownedComponentRealizations = new SysMLine!ItemUsage;
		ownedComponentRealizations.isReference = true;
		ownedComponentRealizations.featureNote.add(":>");
		ownedComponentRealizations.featureSpecialization.add("ownedComponentRealizations");
		ownedComponentRealizations.valuePart = s.ownedComponentRealizations.getEReference();
		t.body.add(ownedComponentRealizations);
	}
	//Entity -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null){
		var realizedComponents = new SysMLine!ItemUsage;
		realizedComponents.isReference = true;
		realizedComponents.featureNote.add(":>");
		realizedComponents.featureSpecialization.add("realizedComponents");
		realizedComponents.valuePart = s.realizedComponents.getEReference();
		t.body.add(realizedComponents);
	}
	//Entity -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null){
		var realizingComponents = new SysMLine!ItemUsage;
		realizingComponents.isReference = true;
		realizingComponents.featureNote.add(":>");
		realizingComponents.featureSpecialization.add("realizingComponents");
		realizingComponents.valuePart = s.realizingComponents.getEReference();
		t.body.add(realizingComponents);
	}
	//Entity -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null){
		var providedInterfaces = new SysMLine!ItemUsage;
		providedInterfaces.isReference = true;
		providedInterfaces.featureNote.add(":>");
		providedInterfaces.featureSpecialization.add("providedInterfaces");
		providedInterfaces.valuePart = s.providedInterfaces.getEReference();
		t.body.add(providedInterfaces);
	}
	//Entity -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null){
		var requiredInterfaces = new SysMLine!ItemUsage;
		requiredInterfaces.isReference = true;
		requiredInterfaces.featureNote.add(":>");
		requiredInterfaces.featureSpecialization.add("requiredInterfaces");
		requiredInterfaces.valuePart = s.requiredInterfaces.getEReference();
		t.body.add(requiredInterfaces);
	}
	//Entity -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null){
		var containedComponentPorts = new SysMLine!ItemUsage;
		containedComponentPorts.isReference = true;
		containedComponentPorts.featureNote.add(":>");
		containedComponentPorts.featureSpecialization.add("containedComponentPorts");
		containedComponentPorts.valuePart = s.containedComponentPorts.getEReference();
		t.body.add(containedComponentPorts);
	}
	//Entity -> EReference : containedParts
	if (s.containedParts.getEReference() != null){
		var containedParts = new SysMLine!ItemUsage;
		containedParts.isReference = true;
		containedParts.featureNote.add(":>");
		containedParts.featureSpecialization.add("containedParts");
		containedParts.valuePart = s.containedParts.getEReference();
		t.body.add(containedParts);
	}
	//Entity -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null){
		var containedPhysicalPorts = new SysMLine!ItemUsage;
		containedPhysicalPorts.isReference = true;
		containedPhysicalPorts.featureNote.add(":>");
		containedPhysicalPorts.featureSpecialization.add("containedPhysicalPorts");
		containedPhysicalPorts.valuePart = s.containedPhysicalPorts.getEReference();
		t.body.add(containedPhysicalPorts);
	}
	//Entity -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null){
		var ownedPhysicalPath = new SysMLine!ItemUsage;
		ownedPhysicalPath.isReference = true;
		ownedPhysicalPath.featureNote.add(":>");
		ownedPhysicalPath.featureSpecialization.add("ownedPhysicalPath");
		ownedPhysicalPath.valuePart = s.ownedPhysicalPath.getEReference();
		t.body.add(ownedPhysicalPath);
	}
	//Entity -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null){
		var ownedPhysicalLinks = new SysMLine!ItemUsage;
		ownedPhysicalLinks.isReference = true;
		ownedPhysicalLinks.featureNote.add(":>");
		ownedPhysicalLinks.featureSpecialization.add("ownedPhysicalLinks");
		ownedPhysicalLinks.valuePart = s.ownedPhysicalLinks.getEReference();
		t.body.add(ownedPhysicalLinks);
	}
	//Entity -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null){
		var ownedPhysicalLinkCategories = new SysMLine!ItemUsage;
		ownedPhysicalLinkCategories.isReference = true;
		ownedPhysicalLinkCategories.featureNote.add(":>");
		ownedPhysicalLinkCategories.featureSpecialization.add("ownedPhysicalLinkCategories");
		ownedPhysicalLinkCategories.valuePart = s.ownedPhysicalLinkCategories.getEReference();
		t.body.add(ownedPhysicalLinkCategories);
	}
	//Entity -> EReference : representingParts
	if (s.representingParts.getEReference() != null){
		var representingParts = new SysMLine!ItemUsage;
		representingParts.isReference = true;
		representingParts.featureNote.add(":>");
		representingParts.featureSpecialization.add("representingParts");
		representingParts.valuePart = s.representingParts.getEReference();
		t.body.add(representingParts);
	}
	//Entity -> EReference : composingLinks
	if (s.composingLinks.getEReference() != null){
		var composingLinks = new SysMLine!ItemUsage;
		composingLinks.isReference = true;
		composingLinks.featureNote.add(":>");
		composingLinks.featureSpecialization.add("composingLinks");
		composingLinks.valuePart = s.composingLinks.getEReference();
		t.body.add(composingLinks);
	}
	//Entity -> EReference : incomingInformationFlows
	if (s.incomingInformationFlows.getEReference() != null){
		var incomingInformationFlows = new SysMLine!ItemUsage;
		incomingInformationFlows.isReference = true;
		incomingInformationFlows.featureNote.add(":>");
		incomingInformationFlows.featureSpecialization.add("incomingInformationFlows");
		incomingInformationFlows.valuePart = s.incomingInformationFlows.getEReference();
		t.body.add(incomingInformationFlows);
	}
	//Entity -> EReference : outgoingInformationFlows
	if (s.outgoingInformationFlows.getEReference() != null){
		var outgoingInformationFlows = new SysMLine!ItemUsage;
		outgoingInformationFlows.isReference = true;
		outgoingInformationFlows.featureNote.add(":>");
		outgoingInformationFlows.featureSpecialization.add("outgoingInformationFlows");
		outgoingInformationFlows.valuePart = s.outgoingInformationFlows.getEReference();
		t.body.add(outgoingInformationFlows);
	}
	//Entity -> EReference : informationFlows
	if (s.informationFlows.getEReference() != null){
		var informationFlows = new SysMLine!ItemUsage;
		informationFlows.isReference = true;
		informationFlows.featureNote.add(":>");
		informationFlows.featureSpecialization.add("informationFlows");
		informationFlows.valuePart = s.informationFlows.getEReference();
		t.body.add(informationFlows);
	}
	//Entity -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null){
		var involvingInvolvements = new SysMLine!ItemUsage;
		involvingInvolvements.isReference = true;
		involvingInvolvements.featureNote.add(":>");
		involvingInvolvements.featureSpecialization.add("involvingInvolvements");
		involvingInvolvements.valuePart = s.involvingInvolvements.getEReference();
		t.body.add(involvingInvolvements);
	}
	//Entity -> EReference : roleAllocations
	if (s.roleAllocations.getEReference() != null){
		var roleAllocations = new SysMLine!ItemUsage;
		roleAllocations.isReference = true;
		roleAllocations.featureNote.add(":>");
		roleAllocations.featureSpecialization.add("roleAllocations");
		roleAllocations.valuePart = s.roleAllocations.getEReference();
		t.body.add(roleAllocations);
	}
	//Entity -> EReference : organisationalUnitMemberships
	if (s.organisationalUnitMemberships.getEReference() != null){
		var organisationalUnitMemberships = new SysMLine!ItemUsage;
		organisationalUnitMemberships.isReference = true;
		organisationalUnitMemberships.featureNote.add(":>");
		organisationalUnitMemberships.featureSpecialization.add("organisationalUnitMemberships");
		organisationalUnitMemberships.valuePart = s.organisationalUnitMemberships.getEReference();
		t.body.add(organisationalUnitMemberships);
	}
	//Entity -> EReference : actualLocation
	if (s.actualLocation.getEReference() != null){
		var actualLocation = new SysMLine!ItemUsage;
		actualLocation.isReference = true;
		actualLocation.featureNote.add(":>");
		actualLocation.featureSpecialization.add("actualLocation");
		actualLocation.valuePart = s.actualLocation.getEReference();
		t.body.add(actualLocation);
	}
	//Entity -> EReference : subEntities
	if (s.subEntities.getEReference() != null){
		var subEntities = new SysMLine!ItemUsage;
		subEntities.isReference = true;
		subEntities.featureNote.add(":>");
		subEntities.featureSpecialization.add("subEntities");
		subEntities.valuePart = s.subEntities.getEReference();
		t.body.add(subEntities);
	}
	//Entity -> EReference : ownedEntities
	if (s.ownedEntities.getEReference() != null){
		var ownedEntities = new SysMLine!ItemUsage;
		ownedEntities.isReference = true;
		ownedEntities.featureNote.add(":>");
		ownedEntities.featureSpecialization.add("ownedEntities");
		ownedEntities.valuePart = s.ownedEntities.getEReference();
		t.body.add(ownedEntities);
	}
	//Entity -> EReference : ownedCommunicationMeans
	if (s.ownedCommunicationMeans.getEReference() != null){
		var ownedCommunicationMeans = new SysMLine!ItemUsage;
		ownedCommunicationMeans.isReference = true;
		ownedCommunicationMeans.featureNote.add(":>");
		ownedCommunicationMeans.featureSpecialization.add("ownedCommunicationMeans");
		ownedCommunicationMeans.valuePart = s.ownedCommunicationMeans.getEReference();
		t.body.add(ownedCommunicationMeans);
	}
	//Entity -> EReference : ownedRoleAllocations
	if (s.ownedRoleAllocations.getEReference() != null){
		var ownedRoleAllocations = new SysMLine!ItemUsage;
		ownedRoleAllocations.isReference = true;
		ownedRoleAllocations.featureNote.add(":>");
		ownedRoleAllocations.featureSpecialization.add("ownedRoleAllocations");
		ownedRoleAllocations.valuePart = s.ownedRoleAllocations.getEReference();
		t.body.add(ownedRoleAllocations);
	}
	//Entity -> EReference : allocatedOperationalActivities
	if (s.allocatedOperationalActivities.getEReference() != null){
		var allocatedOperationalActivities = new SysMLine!ItemUsage;
		allocatedOperationalActivities.isReference = true;
		allocatedOperationalActivities.featureNote.add(":>");
		allocatedOperationalActivities.featureSpecialization.add("allocatedOperationalActivities");
		allocatedOperationalActivities.valuePart = s.allocatedOperationalActivities.getEReference();
		t.body.add(allocatedOperationalActivities);
	}
	//Entity -> EReference : allocatedRoles
	if (s.allocatedRoles.getEReference() != null){
		var allocatedRoles = new SysMLine!ItemUsage;
		allocatedRoles.isReference = true;
		allocatedRoles.featureNote.add(":>");
		allocatedRoles.featureSpecialization.add("allocatedRoles");
		allocatedRoles.valuePart = s.allocatedRoles.getEReference();
		t.body.add(allocatedRoles);
	}
	//Entity -> EReference : involvingOperationalCapabilities
	if (s.involvingOperationalCapabilities.getEReference() != null){
		var involvingOperationalCapabilities = new SysMLine!ItemUsage;
		involvingOperationalCapabilities.isReference = true;
		involvingOperationalCapabilities.featureNote.add(":>");
		involvingOperationalCapabilities.featureSpecialization.add("involvingOperationalCapabilities");
		involvingOperationalCapabilities.valuePart = s.involvingOperationalCapabilities.getEReference();
		t.body.add(involvingOperationalCapabilities);
	}
	//Entity -> EReference : realizingSystemComponents
	if (s.realizingSystemComponents.getEReference() != null){
		var realizingSystemComponents = new SysMLine!ItemUsage;
		realizingSystemComponents.isReference = true;
		realizingSystemComponents.featureNote.add(":>");
		realizingSystemComponents.featureSpecialization.add("realizingSystemComponents");
		realizingSystemComponents.valuePart = s.realizingSystemComponents.getEReference();
		t.body.add(realizingSystemComponents);
	}
}

@lazy
rule ConceptPkg
	transform s : DSL!ConceptPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//ConceptPkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//ConceptPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//ConceptPkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//ConceptPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//ConceptPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//ConceptPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//ConceptPkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//ConceptPkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//ConceptPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//ConceptPkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//ConceptPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//ConceptPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//ConceptPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//ConceptPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//ConceptPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//ConceptPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//ConceptPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//ConceptPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//ConceptPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//ConceptPkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//ConceptPkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//ConceptPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//ConceptPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//ConceptPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//ConceptPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//ConceptPkg -> EReference : ownedConceptPkgs
	if (s.ownedConceptPkgs.getEReference() != null){
		var ownedConceptPkgs = new SysMLine!ItemUsage;
		ownedConceptPkgs.isReference = true;
		ownedConceptPkgs.featureNote.add(":>");
		ownedConceptPkgs.featureSpecialization.add("ownedConceptPkgs");
		ownedConceptPkgs.valuePart = s.ownedConceptPkgs.getEReference();
		t.body.add(ownedConceptPkgs);
	}
	//ConceptPkg -> EReference : ownedConcepts
	if (s.ownedConcepts.getEReference() != null){
		var ownedConcepts = new SysMLine!ItemUsage;
		ownedConcepts.isReference = true;
		ownedConcepts.featureNote.add(":>");
		ownedConcepts.featureSpecialization.add("ownedConcepts");
		ownedConcepts.valuePart = s.ownedConcepts.getEReference();
		t.body.add(ownedConcepts);
	}
}

@lazy
rule Concept
	transform s : DSL!Concept
	to t : SysMLine!ItemUsage
	extends Base{
	//Concept -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//Concept -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//Concept -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//Concept -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//Concept -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//Concept -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//Concept -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//Concept -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//Concept -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//Concept -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//Concept -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//Concept -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//Concept -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//Concept -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//Concept -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//Concept -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//Concept -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//Concept -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//Concept -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//Concept -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//Concept -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//Concept -> EReference : compliances
	if (s.compliances.getEReference() != null){
		var compliances = new SysMLine!ItemUsage;
		compliances.isReference = true;
		compliances.featureNote.add(":>");
		compliances.featureSpecialization.add("compliances");
		compliances.valuePart = s.compliances.getEReference();
		t.body.add(compliances);
	}
	//Concept -> EReference : compositeLinks
	if (s.compositeLinks.getEReference() != null){
		var compositeLinks = new SysMLine!ItemUsage;
		compositeLinks.isReference = true;
		compositeLinks.featureNote.add(":>");
		compositeLinks.featureSpecialization.add("compositeLinks");
		compositeLinks.valuePart = s.compositeLinks.getEReference();
		t.body.add(compositeLinks);
	}
}

@lazy
rule ConceptCompliance
	transform s : DSL!ConceptCompliance
	to t : SysMLine!ItemUsage
	extends Base{
	//ConceptCompliance -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//ConceptCompliance -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//ConceptCompliance -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//ConceptCompliance -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//ConceptCompliance -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//ConceptCompliance -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//ConceptCompliance -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//ConceptCompliance -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//ConceptCompliance -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//ConceptCompliance -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//ConceptCompliance -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//ConceptCompliance -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//ConceptCompliance -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//ConceptCompliance -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//ConceptCompliance -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//ConceptCompliance -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//ConceptCompliance -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//ConceptCompliance -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//ConceptCompliance -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//ConceptCompliance -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//ConceptCompliance -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//ConceptCompliance -> EReference : complyWithConcept
	if (s.complyWithConcept.getEReference() != null){
		var complyWithConcept = new SysMLine!ItemUsage;
		complyWithConcept.isReference = true;
		complyWithConcept.featureNote.add(":>");
		complyWithConcept.featureSpecialization.add("complyWithConcept");
		complyWithConcept.valuePart = s.complyWithConcept.getEReference();
		t.body.add(complyWithConcept);
	}
	//ConceptCompliance -> EReference : compliantCapability
	if (s.compliantCapability.getEReference() != null){
		var compliantCapability = new SysMLine!ItemUsage;
		compliantCapability.isReference = true;
		compliantCapability.featureNote.add(":>");
		compliantCapability.featureSpecialization.add("compliantCapability");
		compliantCapability.valuePart = s.compliantCapability.getEReference();
		t.body.add(compliantCapability);
	}
}

@lazy
rule ItemInConcept
	transform s : DSL!ItemInConcept
	to t : SysMLine!ItemUsage
	extends Base{
	//ItemInConcept -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//ItemInConcept -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//ItemInConcept -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//ItemInConcept -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//ItemInConcept -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//ItemInConcept -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//ItemInConcept -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//ItemInConcept -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//ItemInConcept -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//ItemInConcept -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//ItemInConcept -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//ItemInConcept -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//ItemInConcept -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//ItemInConcept -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//ItemInConcept -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//ItemInConcept -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//ItemInConcept -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//ItemInConcept -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//ItemInConcept -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//ItemInConcept -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//ItemInConcept -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//ItemInConcept -> EReference : concept
	if (s.concept.getEReference() != null){
		var concept = new SysMLine!ItemUsage;
		concept.isReference = true;
		concept.featureNote.add(":>");
		concept.featureSpecialization.add("concept");
		concept.valuePart = s.concept.getEReference();
		t.body.add(concept);
	}
	//ItemInConcept -> EReference : item
	if (s.item.getEReference() != null){
		var item = new SysMLine!ItemUsage;
		item.isReference = true;
		item.featureNote.add(":>");
		item.featureSpecialization.add("item");
		item.valuePart = s.item.getEReference();
		t.body.add(item);
	}
}

@lazy
rule AbstractConceptItem
	transform s : DSL!AbstractConceptItem
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractConceptItem -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//AbstractConceptItem -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//AbstractConceptItem -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//AbstractConceptItem -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//AbstractConceptItem -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//AbstractConceptItem -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//AbstractConceptItem -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//AbstractConceptItem -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//AbstractConceptItem -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null){
		var abstract = new SysMLine!AttributeUsage;
		abstract.featureNote.add(":>>");
		abstract.featureSpecialization.add("abstract");
		abstract.valuePart = s.abstract.getEAttribute();
		t.body.add(abstract);
	}
	//AbstractConceptItem -> EAttribute : actor
	if (s.actor.getEAttribute() != null){
		var actor = new SysMLine!AttributeUsage;
		actor.featureNote.add(":>>");
		actor.featureSpecialization.add("actor");
		actor.valuePart = s.actor.getEAttribute();
		t.body.add(actor);
	}
	//AbstractConceptItem -> EAttribute : human
	if (s.human.getEAttribute() != null){
		var human = new SysMLine!AttributeUsage;
		human.featureNote.add(":>>");
		human.featureSpecialization.add("human");
		human.valuePart = s.human.getEAttribute();
		t.body.add(human);
	}
	//AbstractConceptItem -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//AbstractConceptItem -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//AbstractConceptItem -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//AbstractConceptItem -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//AbstractConceptItem -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null){
		var abstractTypedElements = new SysMLine!ItemUsage;
		abstractTypedElements.isReference = true;
		abstractTypedElements.featureNote.add(":>");
		abstractTypedElements.featureSpecialization.add("abstractTypedElements");
		abstractTypedElements.valuePart = s.abstractTypedElements.getEReference();
		t.body.add(abstractTypedElements);
	}
	//AbstractConceptItem -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//AbstractConceptItem -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//AbstractConceptItem -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//AbstractConceptItem -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//AbstractConceptItem -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//AbstractConceptItem -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//AbstractConceptItem -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//AbstractConceptItem -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//AbstractConceptItem -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//AbstractConceptItem -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//AbstractConceptItem -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//AbstractConceptItem -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//AbstractConceptItem -> EReference : typedElements
	if (s.typedElements.getEReference() != null){
		var typedElements = new SysMLine!ItemUsage;
		typedElements.isReference = true;
		typedElements.featureNote.add(":>");
		typedElements.featureSpecialization.add("typedElements");
		typedElements.valuePart = s.typedElements.getEReference();
		t.body.add(typedElements);
	}
	//AbstractConceptItem -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null){
		var ownedFunctionalAllocation = new SysMLine!ItemUsage;
		ownedFunctionalAllocation.isReference = true;
		ownedFunctionalAllocation.featureNote.add(":>");
		ownedFunctionalAllocation.featureSpecialization.add("ownedFunctionalAllocation");
		ownedFunctionalAllocation.valuePart = s.ownedFunctionalAllocation.getEReference();
		t.body.add(ownedFunctionalAllocation);
	}
	//AbstractConceptItem -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null){
		var ownedComponentExchanges = new SysMLine!ItemUsage;
		ownedComponentExchanges.isReference = true;
		ownedComponentExchanges.featureNote.add(":>");
		ownedComponentExchanges.featureSpecialization.add("ownedComponentExchanges");
		ownedComponentExchanges.valuePart = s.ownedComponentExchanges.getEReference();
		t.body.add(ownedComponentExchanges);
	}
	//AbstractConceptItem -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null){
		var ownedComponentExchangeCategories = new SysMLine!ItemUsage;
		ownedComponentExchangeCategories.isReference = true;
		ownedComponentExchangeCategories.featureNote.add(":>");
		ownedComponentExchangeCategories.featureSpecialization.add("ownedComponentExchangeCategories");
		ownedComponentExchangeCategories.valuePart = s.ownedComponentExchangeCategories.getEReference();
		t.body.add(ownedComponentExchangeCategories);
	}
	//AbstractConceptItem -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null){
		var functionalAllocations = new SysMLine!ItemUsage;
		functionalAllocations.isReference = true;
		functionalAllocations.featureNote.add(":>");
		functionalAllocations.featureSpecialization.add("functionalAllocations");
		functionalAllocations.valuePart = s.functionalAllocations.getEReference();
		t.body.add(functionalAllocations);
	}
	//AbstractConceptItem -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null){
		var allocatedFunctions = new SysMLine!ItemUsage;
		allocatedFunctions.isReference = true;
		allocatedFunctions.featureNote.add(":>");
		allocatedFunctions.featureSpecialization.add("allocatedFunctions");
		allocatedFunctions.valuePart = s.allocatedFunctions.getEReference();
		t.body.add(allocatedFunctions);
	}
	//AbstractConceptItem -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null){
		var inExchangeLinks = new SysMLine!ItemUsage;
		inExchangeLinks.isReference = true;
		inExchangeLinks.featureNote.add(":>");
		inExchangeLinks.featureSpecialization.add("inExchangeLinks");
		inExchangeLinks.valuePart = s.inExchangeLinks.getEReference();
		t.body.add(inExchangeLinks);
	}
	//AbstractConceptItem -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null){
		var outExchangeLinks = new SysMLine!ItemUsage;
		outExchangeLinks.isReference = true;
		outExchangeLinks.featureNote.add(":>");
		outExchangeLinks.featureSpecialization.add("outExchangeLinks");
		outExchangeLinks.valuePart = s.outExchangeLinks.getEReference();
		t.body.add(outExchangeLinks);
	}
	//AbstractConceptItem -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null){
		var ownedAbstractCapabilityPkg = new SysMLine!ItemUsage;
		ownedAbstractCapabilityPkg.isReference = true;
		ownedAbstractCapabilityPkg.featureNote.add(":>");
		ownedAbstractCapabilityPkg.featureSpecialization.add("ownedAbstractCapabilityPkg");
		ownedAbstractCapabilityPkg.valuePart = s.ownedAbstractCapabilityPkg.getEReference();
		t.body.add(ownedAbstractCapabilityPkg);
	}
	//AbstractConceptItem -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null){
		var ownedInterfacePkg = new SysMLine!ItemUsage;
		ownedInterfacePkg.isReference = true;
		ownedInterfacePkg.featureNote.add(":>");
		ownedInterfacePkg.featureSpecialization.add("ownedInterfacePkg");
		ownedInterfacePkg.valuePart = s.ownedInterfacePkg.getEReference();
		t.body.add(ownedInterfacePkg);
	}
	//AbstractConceptItem -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null){
		var ownedDataPkg = new SysMLine!ItemUsage;
		ownedDataPkg.isReference = true;
		ownedDataPkg.featureNote.add(":>");
		ownedDataPkg.featureSpecialization.add("ownedDataPkg");
		ownedDataPkg.valuePart = s.ownedDataPkg.getEReference();
		t.body.add(ownedDataPkg);
	}
	//AbstractConceptItem -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null){
		var ownedStateMachines = new SysMLine!ItemUsage;
		ownedStateMachines.isReference = true;
		ownedStateMachines.featureNote.add(":>");
		ownedStateMachines.featureSpecialization.add("ownedStateMachines");
		ownedStateMachines.valuePart = s.ownedStateMachines.getEReference();
		t.body.add(ownedStateMachines);
	}
	//AbstractConceptItem -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null){
		var ownedGeneralizations = new SysMLine!ItemUsage;
		ownedGeneralizations.isReference = true;
		ownedGeneralizations.featureNote.add(":>");
		ownedGeneralizations.featureSpecialization.add("ownedGeneralizations");
		ownedGeneralizations.valuePart = s.ownedGeneralizations.getEReference();
		t.body.add(ownedGeneralizations);
	}
	//AbstractConceptItem -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null){
		var superGeneralizations = new SysMLine!ItemUsage;
		superGeneralizations.isReference = true;
		superGeneralizations.featureNote.add(":>");
		superGeneralizations.featureSpecialization.add("superGeneralizations");
		superGeneralizations.valuePart = s.superGeneralizations.getEReference();
		t.body.add(superGeneralizations);
	}
	//AbstractConceptItem -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null){
		var subGeneralizations = new SysMLine!ItemUsage;
		subGeneralizations.isReference = true;
		subGeneralizations.featureNote.add(":>");
		subGeneralizations.featureSpecialization.add("subGeneralizations");
		subGeneralizations.valuePart = s.subGeneralizations.getEReference();
		t.body.add(subGeneralizations);
	}
	//AbstractConceptItem -> EReference : super
	if (s.super.getEReference() != null){
		var super = new SysMLine!ItemUsage;
		super.isReference = true;
		super.featureNote.add(":>");
		super.featureSpecialization.add("super");
		super.valuePart = s.super.getEReference();
		t.body.add(super);
	}
	//AbstractConceptItem -> EReference : sub
	if (s.sub.getEReference() != null){
		var sub = new SysMLine!ItemUsage;
		sub.isReference = true;
		sub.featureNote.add(":>");
		sub.featureSpecialization.add("sub");
		sub.valuePart = s.sub.getEReference();
		t.body.add(sub);
	}
	//AbstractConceptItem -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null){
		var ownedFeatures = new SysMLine!ItemUsage;
		ownedFeatures.isReference = true;
		ownedFeatures.featureNote.add(":>");
		ownedFeatures.featureSpecialization.add("ownedFeatures");
		ownedFeatures.valuePart = s.ownedFeatures.getEReference();
		t.body.add(ownedFeatures);
	}
	//AbstractConceptItem -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null){
		var containedProperties = new SysMLine!ItemUsage;
		containedProperties.isReference = true;
		containedProperties.featureNote.add(":>");
		containedProperties.featureSpecialization.add("containedProperties");
		containedProperties.valuePart = s.containedProperties.getEReference();
		t.body.add(containedProperties);
	}
	//AbstractConceptItem -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null){
		var ownedInterfaceAllocations = new SysMLine!ItemUsage;
		ownedInterfaceAllocations.isReference = true;
		ownedInterfaceAllocations.featureNote.add(":>");
		ownedInterfaceAllocations.featureSpecialization.add("ownedInterfaceAllocations");
		ownedInterfaceAllocations.valuePart = s.ownedInterfaceAllocations.getEReference();
		t.body.add(ownedInterfaceAllocations);
	}
	//AbstractConceptItem -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null){
		var provisionedInterfaceAllocations = new SysMLine!ItemUsage;
		provisionedInterfaceAllocations.isReference = true;
		provisionedInterfaceAllocations.featureNote.add(":>");
		provisionedInterfaceAllocations.featureSpecialization.add("provisionedInterfaceAllocations");
		provisionedInterfaceAllocations.valuePart = s.provisionedInterfaceAllocations.getEReference();
		t.body.add(provisionedInterfaceAllocations);
	}
	//AbstractConceptItem -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null){
		var allocatedInterfaces = new SysMLine!ItemUsage;
		allocatedInterfaces.isReference = true;
		allocatedInterfaces.featureNote.add(":>");
		allocatedInterfaces.featureSpecialization.add("allocatedInterfaces");
		allocatedInterfaces.valuePart = s.allocatedInterfaces.getEReference();
		t.body.add(allocatedInterfaces);
	}
	//AbstractConceptItem -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null){
		var ownedCommunicationLinks = new SysMLine!ItemUsage;
		ownedCommunicationLinks.isReference = true;
		ownedCommunicationLinks.featureNote.add(":>");
		ownedCommunicationLinks.featureSpecialization.add("ownedCommunicationLinks");
		ownedCommunicationLinks.valuePart = s.ownedCommunicationLinks.getEReference();
		t.body.add(ownedCommunicationLinks);
	}
	//AbstractConceptItem -> EReference : produce
	if (s.produce.getEReference() != null){
		var produce = new SysMLine!ItemUsage;
		produce.isReference = true;
		produce.featureNote.add(":>");
		produce.featureSpecialization.add("produce");
		produce.valuePart = s.produce.getEReference();
		t.body.add(produce);
	}
	//AbstractConceptItem -> EReference : consume
	if (s.consume.getEReference() != null){
		var consume = new SysMLine!ItemUsage;
		consume.isReference = true;
		consume.featureNote.add(":>");
		consume.featureSpecialization.add("consume");
		consume.valuePart = s.consume.getEReference();
		t.body.add(consume);
	}
	//AbstractConceptItem -> EReference : send
	if (s.send.getEReference() != null){
		var send = new SysMLine!ItemUsage;
		send.isReference = true;
		send.featureNote.add(":>");
		send.featureSpecialization.add("send");
		send.valuePart = s.send.getEReference();
		t.body.add(send);
	}
	//AbstractConceptItem -> EReference : receive
	if (s.receive.getEReference() != null){
		var receive = new SysMLine!ItemUsage;
		receive.isReference = true;
		receive.featureNote.add(":>");
		receive.featureSpecialization.add("receive");
		receive.valuePart = s.receive.getEReference();
		t.body.add(receive);
	}
	//AbstractConceptItem -> EReference : call
	if (s.call.getEReference() != null){
		var call = new SysMLine!ItemUsage;
		call.isReference = true;
		call.featureNote.add(":>");
		call.featureSpecialization.add("call");
		call.valuePart = s.call.getEReference();
		t.body.add(call);
	}
	//AbstractConceptItem -> EReference : execute
	if (s.execute.getEReference() != null){
		var execute = new SysMLine!ItemUsage;
		execute.isReference = true;
		execute.featureNote.add(":>");
		execute.featureSpecialization.add("execute");
		execute.valuePart = s.execute.getEReference();
		t.body.add(execute);
	}
	//AbstractConceptItem -> EReference : write
	if (s.write.getEReference() != null){
		var write = new SysMLine!ItemUsage;
		write.isReference = true;
		write.featureNote.add(":>");
		write.featureSpecialization.add("write");
		write.valuePart = s.write.getEReference();
		t.body.add(write);
	}
	//AbstractConceptItem -> EReference : access
	if (s.access.getEReference() != null){
		var access = new SysMLine!ItemUsage;
		access.isReference = true;
		access.featureNote.add(":>");
		access.featureSpecialization.add("access");
		access.valuePart = s.access.getEReference();
		t.body.add(access);
	}
	//AbstractConceptItem -> EReference : acquire
	if (s.acquire.getEReference() != null){
		var acquire = new SysMLine!ItemUsage;
		acquire.isReference = true;
		acquire.featureNote.add(":>");
		acquire.featureSpecialization.add("acquire");
		acquire.valuePart = s.acquire.getEReference();
		t.body.add(acquire);
	}
	//AbstractConceptItem -> EReference : transmit
	if (s.transmit.getEReference() != null){
		var transmit = new SysMLine!ItemUsage;
		transmit.isReference = true;
		transmit.featureNote.add(":>");
		transmit.featureSpecialization.add("transmit");
		transmit.valuePart = s.transmit.getEReference();
		t.body.add(transmit);
	}
	//AbstractConceptItem -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null){
		var ownedInterfaceUses = new SysMLine!ItemUsage;
		ownedInterfaceUses.isReference = true;
		ownedInterfaceUses.featureNote.add(":>");
		ownedInterfaceUses.featureSpecialization.add("ownedInterfaceUses");
		ownedInterfaceUses.valuePart = s.ownedInterfaceUses.getEReference();
		t.body.add(ownedInterfaceUses);
	}
	//AbstractConceptItem -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null){
		var usedInterfaceLinks = new SysMLine!ItemUsage;
		usedInterfaceLinks.isReference = true;
		usedInterfaceLinks.featureNote.add(":>");
		usedInterfaceLinks.featureSpecialization.add("usedInterfaceLinks");
		usedInterfaceLinks.valuePart = s.usedInterfaceLinks.getEReference();
		t.body.add(usedInterfaceLinks);
	}
	//AbstractConceptItem -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null){
		var usedInterfaces = new SysMLine!ItemUsage;
		usedInterfaces.isReference = true;
		usedInterfaces.featureNote.add(":>");
		usedInterfaces.featureSpecialization.add("usedInterfaces");
		usedInterfaces.valuePart = s.usedInterfaces.getEReference();
		t.body.add(usedInterfaces);
	}
	//AbstractConceptItem -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null){
		var ownedInterfaceImplementations = new SysMLine!ItemUsage;
		ownedInterfaceImplementations.isReference = true;
		ownedInterfaceImplementations.featureNote.add(":>");
		ownedInterfaceImplementations.featureSpecialization.add("ownedInterfaceImplementations");
		ownedInterfaceImplementations.valuePart = s.ownedInterfaceImplementations.getEReference();
		t.body.add(ownedInterfaceImplementations);
	}
	//AbstractConceptItem -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null){
		var implementedInterfaceLinks = new SysMLine!ItemUsage;
		implementedInterfaceLinks.isReference = true;
		implementedInterfaceLinks.featureNote.add(":>");
		implementedInterfaceLinks.featureSpecialization.add("implementedInterfaceLinks");
		implementedInterfaceLinks.valuePart = s.implementedInterfaceLinks.getEReference();
		t.body.add(implementedInterfaceLinks);
	}
	//AbstractConceptItem -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null){
		var implementedInterfaces = new SysMLine!ItemUsage;
		implementedInterfaces.isReference = true;
		implementedInterfaces.featureNote.add(":>");
		implementedInterfaces.featureSpecialization.add("implementedInterfaces");
		implementedInterfaces.valuePart = s.implementedInterfaces.getEReference();
		t.body.add(implementedInterfaces);
	}
	//AbstractConceptItem -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null){
		var ownedComponentRealizations = new SysMLine!ItemUsage;
		ownedComponentRealizations.isReference = true;
		ownedComponentRealizations.featureNote.add(":>");
		ownedComponentRealizations.featureSpecialization.add("ownedComponentRealizations");
		ownedComponentRealizations.valuePart = s.ownedComponentRealizations.getEReference();
		t.body.add(ownedComponentRealizations);
	}
	//AbstractConceptItem -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null){
		var realizedComponents = new SysMLine!ItemUsage;
		realizedComponents.isReference = true;
		realizedComponents.featureNote.add(":>");
		realizedComponents.featureSpecialization.add("realizedComponents");
		realizedComponents.valuePart = s.realizedComponents.getEReference();
		t.body.add(realizedComponents);
	}
	//AbstractConceptItem -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null){
		var realizingComponents = new SysMLine!ItemUsage;
		realizingComponents.isReference = true;
		realizingComponents.featureNote.add(":>");
		realizingComponents.featureSpecialization.add("realizingComponents");
		realizingComponents.valuePart = s.realizingComponents.getEReference();
		t.body.add(realizingComponents);
	}
	//AbstractConceptItem -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null){
		var providedInterfaces = new SysMLine!ItemUsage;
		providedInterfaces.isReference = true;
		providedInterfaces.featureNote.add(":>");
		providedInterfaces.featureSpecialization.add("providedInterfaces");
		providedInterfaces.valuePart = s.providedInterfaces.getEReference();
		t.body.add(providedInterfaces);
	}
	//AbstractConceptItem -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null){
		var requiredInterfaces = new SysMLine!ItemUsage;
		requiredInterfaces.isReference = true;
		requiredInterfaces.featureNote.add(":>");
		requiredInterfaces.featureSpecialization.add("requiredInterfaces");
		requiredInterfaces.valuePart = s.requiredInterfaces.getEReference();
		t.body.add(requiredInterfaces);
	}
	//AbstractConceptItem -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null){
		var containedComponentPorts = new SysMLine!ItemUsage;
		containedComponentPorts.isReference = true;
		containedComponentPorts.featureNote.add(":>");
		containedComponentPorts.featureSpecialization.add("containedComponentPorts");
		containedComponentPorts.valuePart = s.containedComponentPorts.getEReference();
		t.body.add(containedComponentPorts);
	}
	//AbstractConceptItem -> EReference : containedParts
	if (s.containedParts.getEReference() != null){
		var containedParts = new SysMLine!ItemUsage;
		containedParts.isReference = true;
		containedParts.featureNote.add(":>");
		containedParts.featureSpecialization.add("containedParts");
		containedParts.valuePart = s.containedParts.getEReference();
		t.body.add(containedParts);
	}
	//AbstractConceptItem -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null){
		var containedPhysicalPorts = new SysMLine!ItemUsage;
		containedPhysicalPorts.isReference = true;
		containedPhysicalPorts.featureNote.add(":>");
		containedPhysicalPorts.featureSpecialization.add("containedPhysicalPorts");
		containedPhysicalPorts.valuePart = s.containedPhysicalPorts.getEReference();
		t.body.add(containedPhysicalPorts);
	}
	//AbstractConceptItem -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null){
		var ownedPhysicalPath = new SysMLine!ItemUsage;
		ownedPhysicalPath.isReference = true;
		ownedPhysicalPath.featureNote.add(":>");
		ownedPhysicalPath.featureSpecialization.add("ownedPhysicalPath");
		ownedPhysicalPath.valuePart = s.ownedPhysicalPath.getEReference();
		t.body.add(ownedPhysicalPath);
	}
	//AbstractConceptItem -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null){
		var ownedPhysicalLinks = new SysMLine!ItemUsage;
		ownedPhysicalLinks.isReference = true;
		ownedPhysicalLinks.featureNote.add(":>");
		ownedPhysicalLinks.featureSpecialization.add("ownedPhysicalLinks");
		ownedPhysicalLinks.valuePart = s.ownedPhysicalLinks.getEReference();
		t.body.add(ownedPhysicalLinks);
	}
	//AbstractConceptItem -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null){
		var ownedPhysicalLinkCategories = new SysMLine!ItemUsage;
		ownedPhysicalLinkCategories.isReference = true;
		ownedPhysicalLinkCategories.featureNote.add(":>");
		ownedPhysicalLinkCategories.featureSpecialization.add("ownedPhysicalLinkCategories");
		ownedPhysicalLinkCategories.valuePart = s.ownedPhysicalLinkCategories.getEReference();
		t.body.add(ownedPhysicalLinkCategories);
	}
	//AbstractConceptItem -> EReference : representingParts
	if (s.representingParts.getEReference() != null){
		var representingParts = new SysMLine!ItemUsage;
		representingParts.isReference = true;
		representingParts.featureNote.add(":>");
		representingParts.featureSpecialization.add("representingParts");
		representingParts.valuePart = s.representingParts.getEReference();
		t.body.add(representingParts);
	}
	//AbstractConceptItem -> EReference : composingLinks
	if (s.composingLinks.getEReference() != null){
		var composingLinks = new SysMLine!ItemUsage;
		composingLinks.isReference = true;
		composingLinks.featureNote.add(":>");
		composingLinks.featureSpecialization.add("composingLinks");
		composingLinks.valuePart = s.composingLinks.getEReference();
		t.body.add(composingLinks);
	}
}

@lazy
rule CommunityOfInterest
	transform s : DSL!CommunityOfInterest
	to t : SysMLine!ItemUsage
	extends Base{
	//CommunityOfInterest -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//CommunityOfInterest -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//CommunityOfInterest -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//CommunityOfInterest -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//CommunityOfInterest -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//CommunityOfInterest -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//CommunityOfInterest -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//CommunityOfInterest -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//CommunityOfInterest -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//CommunityOfInterest -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//CommunityOfInterest -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//CommunityOfInterest -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//CommunityOfInterest -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//CommunityOfInterest -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//CommunityOfInterest -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//CommunityOfInterest -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//CommunityOfInterest -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//CommunityOfInterest -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//CommunityOfInterest -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//CommunityOfInterest -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//CommunityOfInterest -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//CommunityOfInterest -> EReference : communityOfInterestCompositions
	if (s.communityOfInterestCompositions.getEReference() != null){
		var communityOfInterestCompositions = new SysMLine!ItemUsage;
		communityOfInterestCompositions.isReference = true;
		communityOfInterestCompositions.featureNote.add(":>");
		communityOfInterestCompositions.featureSpecialization.add("communityOfInterestCompositions");
		communityOfInterestCompositions.valuePart = s.communityOfInterestCompositions.getEReference();
		t.body.add(communityOfInterestCompositions);
	}
}

@lazy
rule CommunityOfInterestComposition
	transform s : DSL!CommunityOfInterestComposition
	to t : SysMLine!ItemUsage
	extends Base{
	//CommunityOfInterestComposition -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//CommunityOfInterestComposition -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//CommunityOfInterestComposition -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//CommunityOfInterestComposition -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//CommunityOfInterestComposition -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//CommunityOfInterestComposition -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//CommunityOfInterestComposition -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//CommunityOfInterestComposition -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//CommunityOfInterestComposition -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//CommunityOfInterestComposition -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//CommunityOfInterestComposition -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//CommunityOfInterestComposition -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//CommunityOfInterestComposition -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//CommunityOfInterestComposition -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//CommunityOfInterestComposition -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//CommunityOfInterestComposition -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//CommunityOfInterestComposition -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//CommunityOfInterestComposition -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//CommunityOfInterestComposition -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//CommunityOfInterestComposition -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//CommunityOfInterestComposition -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//CommunityOfInterestComposition -> EReference : communityOfInterest
	if (s.communityOfInterest.getEReference() != null){
		var communityOfInterest = new SysMLine!ItemUsage;
		communityOfInterest.isReference = true;
		communityOfInterest.featureNote.add(":>");
		communityOfInterest.featureSpecialization.add("communityOfInterest");
		communityOfInterest.valuePart = s.communityOfInterest.getEReference();
		t.body.add(communityOfInterest);
	}
	//CommunityOfInterestComposition -> EReference : interestedOrganisationUnit
	if (s.interestedOrganisationUnit.getEReference() != null){
		var interestedOrganisationUnit = new SysMLine!ItemUsage;
		interestedOrganisationUnit.isReference = true;
		interestedOrganisationUnit.featureNote.add(":>");
		interestedOrganisationUnit.featureSpecialization.add("interestedOrganisationUnit");
		interestedOrganisationUnit.valuePart = s.interestedOrganisationUnit.getEReference();
		t.body.add(interestedOrganisationUnit);
	}
}

@lazy
rule OrganisationalUnit
	transform s : DSL!OrganisationalUnit
	to t : SysMLine!ItemUsage
	extends Base{
	//OrganisationalUnit -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//OrganisationalUnit -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//OrganisationalUnit -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//OrganisationalUnit -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//OrganisationalUnit -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//OrganisationalUnit -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//OrganisationalUnit -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//OrganisationalUnit -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//OrganisationalUnit -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//OrganisationalUnit -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//OrganisationalUnit -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//OrganisationalUnit -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//OrganisationalUnit -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//OrganisationalUnit -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//OrganisationalUnit -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//OrganisationalUnit -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//OrganisationalUnit -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//OrganisationalUnit -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//OrganisationalUnit -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//OrganisationalUnit -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//OrganisationalUnit -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//OrganisationalUnit -> EReference : organisationalUnitCompositions
	if (s.organisationalUnitCompositions.getEReference() != null){
		var organisationalUnitCompositions = new SysMLine!ItemUsage;
		organisationalUnitCompositions.isReference = true;
		organisationalUnitCompositions.featureNote.add(":>");
		organisationalUnitCompositions.featureSpecialization.add("organisationalUnitCompositions");
		organisationalUnitCompositions.valuePart = s.organisationalUnitCompositions.getEReference();
		t.body.add(organisationalUnitCompositions);
	}
	//OrganisationalUnit -> EReference : communityOfInterestMemberships
	if (s.communityOfInterestMemberships.getEReference() != null){
		var communityOfInterestMemberships = new SysMLine!ItemUsage;
		communityOfInterestMemberships.isReference = true;
		communityOfInterestMemberships.featureNote.add(":>");
		communityOfInterestMemberships.featureSpecialization.add("communityOfInterestMemberships");
		communityOfInterestMemberships.valuePart = s.communityOfInterestMemberships.getEReference();
		t.body.add(communityOfInterestMemberships);
	}
}

@lazy
rule OrganisationalUnitComposition
	transform s : DSL!OrganisationalUnitComposition
	to t : SysMLine!ItemUsage
	extends Base{
	//OrganisationalUnitComposition -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//OrganisationalUnitComposition -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//OrganisationalUnitComposition -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//OrganisationalUnitComposition -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//OrganisationalUnitComposition -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//OrganisationalUnitComposition -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//OrganisationalUnitComposition -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//OrganisationalUnitComposition -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//OrganisationalUnitComposition -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//OrganisationalUnitComposition -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//OrganisationalUnitComposition -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//OrganisationalUnitComposition -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//OrganisationalUnitComposition -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//OrganisationalUnitComposition -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//OrganisationalUnitComposition -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//OrganisationalUnitComposition -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//OrganisationalUnitComposition -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//OrganisationalUnitComposition -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//OrganisationalUnitComposition -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//OrganisationalUnitComposition -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//OrganisationalUnitComposition -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//OrganisationalUnitComposition -> EReference : organisationalUnit
	if (s.organisationalUnit.getEReference() != null){
		var organisationalUnit = new SysMLine!ItemUsage;
		organisationalUnit.isReference = true;
		organisationalUnit.featureNote.add(":>");
		organisationalUnit.featureSpecialization.add("organisationalUnit");
		organisationalUnit.valuePart = s.organisationalUnit.getEReference();
		t.body.add(organisationalUnit);
	}
	//OrganisationalUnitComposition -> EReference : participatingEntity
	if (s.participatingEntity.getEReference() != null){
		var participatingEntity = new SysMLine!ItemUsage;
		participatingEntity.isReference = true;
		participatingEntity.featureNote.add(":>");
		participatingEntity.featureSpecialization.add("participatingEntity");
		participatingEntity.valuePart = s.participatingEntity.getEReference();
		t.body.add(participatingEntity);
	}
}

@lazy
rule Location
	transform s : DSL!Location
	to t : SysMLine!ItemUsage
	extends Base{
	//Location -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//Location -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//Location -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//Location -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//Location -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//Location -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//Location -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//Location -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//Location -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null){
		var abstract = new SysMLine!AttributeUsage;
		abstract.featureNote.add(":>>");
		abstract.featureSpecialization.add("abstract");
		abstract.valuePart = s.abstract.getEAttribute();
		t.body.add(abstract);
	}
	//Location -> EAttribute : actor
	if (s.actor.getEAttribute() != null){
		var actor = new SysMLine!AttributeUsage;
		actor.featureNote.add(":>>");
		actor.featureSpecialization.add("actor");
		actor.valuePart = s.actor.getEAttribute();
		t.body.add(actor);
	}
	//Location -> EAttribute : human
	if (s.human.getEAttribute() != null){
		var human = new SysMLine!AttributeUsage;
		human.featureNote.add(":>>");
		human.featureSpecialization.add("human");
		human.valuePart = s.human.getEAttribute();
		t.body.add(human);
	}
	//Location -> EAttribute : locationDescription
	if (s.locationDescription.getEAttribute() != null){
		var locationDescription = new SysMLine!AttributeUsage;
		locationDescription.featureNote.add(":>>");
		locationDescription.featureSpecialization.add("locationDescription");
		locationDescription.valuePart = s.locationDescription.getEAttribute();
		t.body.add(locationDescription);
	}
	//Location -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//Location -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//Location -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//Location -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//Location -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null){
		var abstractTypedElements = new SysMLine!ItemUsage;
		abstractTypedElements.isReference = true;
		abstractTypedElements.featureNote.add(":>");
		abstractTypedElements.featureSpecialization.add("abstractTypedElements");
		abstractTypedElements.valuePart = s.abstractTypedElements.getEReference();
		t.body.add(abstractTypedElements);
	}
	//Location -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//Location -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//Location -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//Location -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//Location -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//Location -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//Location -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//Location -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//Location -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//Location -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//Location -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//Location -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//Location -> EReference : typedElements
	if (s.typedElements.getEReference() != null){
		var typedElements = new SysMLine!ItemUsage;
		typedElements.isReference = true;
		typedElements.featureNote.add(":>");
		typedElements.featureSpecialization.add("typedElements");
		typedElements.valuePart = s.typedElements.getEReference();
		t.body.add(typedElements);
	}
	//Location -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null){
		var ownedFunctionalAllocation = new SysMLine!ItemUsage;
		ownedFunctionalAllocation.isReference = true;
		ownedFunctionalAllocation.featureNote.add(":>");
		ownedFunctionalAllocation.featureSpecialization.add("ownedFunctionalAllocation");
		ownedFunctionalAllocation.valuePart = s.ownedFunctionalAllocation.getEReference();
		t.body.add(ownedFunctionalAllocation);
	}
	//Location -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null){
		var ownedComponentExchanges = new SysMLine!ItemUsage;
		ownedComponentExchanges.isReference = true;
		ownedComponentExchanges.featureNote.add(":>");
		ownedComponentExchanges.featureSpecialization.add("ownedComponentExchanges");
		ownedComponentExchanges.valuePart = s.ownedComponentExchanges.getEReference();
		t.body.add(ownedComponentExchanges);
	}
	//Location -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null){
		var ownedComponentExchangeCategories = new SysMLine!ItemUsage;
		ownedComponentExchangeCategories.isReference = true;
		ownedComponentExchangeCategories.featureNote.add(":>");
		ownedComponentExchangeCategories.featureSpecialization.add("ownedComponentExchangeCategories");
		ownedComponentExchangeCategories.valuePart = s.ownedComponentExchangeCategories.getEReference();
		t.body.add(ownedComponentExchangeCategories);
	}
	//Location -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null){
		var functionalAllocations = new SysMLine!ItemUsage;
		functionalAllocations.isReference = true;
		functionalAllocations.featureNote.add(":>");
		functionalAllocations.featureSpecialization.add("functionalAllocations");
		functionalAllocations.valuePart = s.functionalAllocations.getEReference();
		t.body.add(functionalAllocations);
	}
	//Location -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null){
		var allocatedFunctions = new SysMLine!ItemUsage;
		allocatedFunctions.isReference = true;
		allocatedFunctions.featureNote.add(":>");
		allocatedFunctions.featureSpecialization.add("allocatedFunctions");
		allocatedFunctions.valuePart = s.allocatedFunctions.getEReference();
		t.body.add(allocatedFunctions);
	}
	//Location -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null){
		var inExchangeLinks = new SysMLine!ItemUsage;
		inExchangeLinks.isReference = true;
		inExchangeLinks.featureNote.add(":>");
		inExchangeLinks.featureSpecialization.add("inExchangeLinks");
		inExchangeLinks.valuePart = s.inExchangeLinks.getEReference();
		t.body.add(inExchangeLinks);
	}
	//Location -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null){
		var outExchangeLinks = new SysMLine!ItemUsage;
		outExchangeLinks.isReference = true;
		outExchangeLinks.featureNote.add(":>");
		outExchangeLinks.featureSpecialization.add("outExchangeLinks");
		outExchangeLinks.valuePart = s.outExchangeLinks.getEReference();
		t.body.add(outExchangeLinks);
	}
	//Location -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null){
		var ownedAbstractCapabilityPkg = new SysMLine!ItemUsage;
		ownedAbstractCapabilityPkg.isReference = true;
		ownedAbstractCapabilityPkg.featureNote.add(":>");
		ownedAbstractCapabilityPkg.featureSpecialization.add("ownedAbstractCapabilityPkg");
		ownedAbstractCapabilityPkg.valuePart = s.ownedAbstractCapabilityPkg.getEReference();
		t.body.add(ownedAbstractCapabilityPkg);
	}
	//Location -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null){
		var ownedInterfacePkg = new SysMLine!ItemUsage;
		ownedInterfacePkg.isReference = true;
		ownedInterfacePkg.featureNote.add(":>");
		ownedInterfacePkg.featureSpecialization.add("ownedInterfacePkg");
		ownedInterfacePkg.valuePart = s.ownedInterfacePkg.getEReference();
		t.body.add(ownedInterfacePkg);
	}
	//Location -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null){
		var ownedDataPkg = new SysMLine!ItemUsage;
		ownedDataPkg.isReference = true;
		ownedDataPkg.featureNote.add(":>");
		ownedDataPkg.featureSpecialization.add("ownedDataPkg");
		ownedDataPkg.valuePart = s.ownedDataPkg.getEReference();
		t.body.add(ownedDataPkg);
	}
	//Location -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null){
		var ownedStateMachines = new SysMLine!ItemUsage;
		ownedStateMachines.isReference = true;
		ownedStateMachines.featureNote.add(":>");
		ownedStateMachines.featureSpecialization.add("ownedStateMachines");
		ownedStateMachines.valuePart = s.ownedStateMachines.getEReference();
		t.body.add(ownedStateMachines);
	}
	//Location -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null){
		var ownedGeneralizations = new SysMLine!ItemUsage;
		ownedGeneralizations.isReference = true;
		ownedGeneralizations.featureNote.add(":>");
		ownedGeneralizations.featureSpecialization.add("ownedGeneralizations");
		ownedGeneralizations.valuePart = s.ownedGeneralizations.getEReference();
		t.body.add(ownedGeneralizations);
	}
	//Location -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null){
		var superGeneralizations = new SysMLine!ItemUsage;
		superGeneralizations.isReference = true;
		superGeneralizations.featureNote.add(":>");
		superGeneralizations.featureSpecialization.add("superGeneralizations");
		superGeneralizations.valuePart = s.superGeneralizations.getEReference();
		t.body.add(superGeneralizations);
	}
	//Location -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null){
		var subGeneralizations = new SysMLine!ItemUsage;
		subGeneralizations.isReference = true;
		subGeneralizations.featureNote.add(":>");
		subGeneralizations.featureSpecialization.add("subGeneralizations");
		subGeneralizations.valuePart = s.subGeneralizations.getEReference();
		t.body.add(subGeneralizations);
	}
	//Location -> EReference : super
	if (s.super.getEReference() != null){
		var super = new SysMLine!ItemUsage;
		super.isReference = true;
		super.featureNote.add(":>");
		super.featureSpecialization.add("super");
		super.valuePart = s.super.getEReference();
		t.body.add(super);
	}
	//Location -> EReference : sub
	if (s.sub.getEReference() != null){
		var sub = new SysMLine!ItemUsage;
		sub.isReference = true;
		sub.featureNote.add(":>");
		sub.featureSpecialization.add("sub");
		sub.valuePart = s.sub.getEReference();
		t.body.add(sub);
	}
	//Location -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null){
		var ownedFeatures = new SysMLine!ItemUsage;
		ownedFeatures.isReference = true;
		ownedFeatures.featureNote.add(":>");
		ownedFeatures.featureSpecialization.add("ownedFeatures");
		ownedFeatures.valuePart = s.ownedFeatures.getEReference();
		t.body.add(ownedFeatures);
	}
	//Location -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null){
		var containedProperties = new SysMLine!ItemUsage;
		containedProperties.isReference = true;
		containedProperties.featureNote.add(":>");
		containedProperties.featureSpecialization.add("containedProperties");
		containedProperties.valuePart = s.containedProperties.getEReference();
		t.body.add(containedProperties);
	}
	//Location -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null){
		var ownedInterfaceAllocations = new SysMLine!ItemUsage;
		ownedInterfaceAllocations.isReference = true;
		ownedInterfaceAllocations.featureNote.add(":>");
		ownedInterfaceAllocations.featureSpecialization.add("ownedInterfaceAllocations");
		ownedInterfaceAllocations.valuePart = s.ownedInterfaceAllocations.getEReference();
		t.body.add(ownedInterfaceAllocations);
	}
	//Location -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null){
		var provisionedInterfaceAllocations = new SysMLine!ItemUsage;
		provisionedInterfaceAllocations.isReference = true;
		provisionedInterfaceAllocations.featureNote.add(":>");
		provisionedInterfaceAllocations.featureSpecialization.add("provisionedInterfaceAllocations");
		provisionedInterfaceAllocations.valuePart = s.provisionedInterfaceAllocations.getEReference();
		t.body.add(provisionedInterfaceAllocations);
	}
	//Location -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null){
		var allocatedInterfaces = new SysMLine!ItemUsage;
		allocatedInterfaces.isReference = true;
		allocatedInterfaces.featureNote.add(":>");
		allocatedInterfaces.featureSpecialization.add("allocatedInterfaces");
		allocatedInterfaces.valuePart = s.allocatedInterfaces.getEReference();
		t.body.add(allocatedInterfaces);
	}
	//Location -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null){
		var ownedCommunicationLinks = new SysMLine!ItemUsage;
		ownedCommunicationLinks.isReference = true;
		ownedCommunicationLinks.featureNote.add(":>");
		ownedCommunicationLinks.featureSpecialization.add("ownedCommunicationLinks");
		ownedCommunicationLinks.valuePart = s.ownedCommunicationLinks.getEReference();
		t.body.add(ownedCommunicationLinks);
	}
	//Location -> EReference : produce
	if (s.produce.getEReference() != null){
		var produce = new SysMLine!ItemUsage;
		produce.isReference = true;
		produce.featureNote.add(":>");
		produce.featureSpecialization.add("produce");
		produce.valuePart = s.produce.getEReference();
		t.body.add(produce);
	}
	//Location -> EReference : consume
	if (s.consume.getEReference() != null){
		var consume = new SysMLine!ItemUsage;
		consume.isReference = true;
		consume.featureNote.add(":>");
		consume.featureSpecialization.add("consume");
		consume.valuePart = s.consume.getEReference();
		t.body.add(consume);
	}
	//Location -> EReference : send
	if (s.send.getEReference() != null){
		var send = new SysMLine!ItemUsage;
		send.isReference = true;
		send.featureNote.add(":>");
		send.featureSpecialization.add("send");
		send.valuePart = s.send.getEReference();
		t.body.add(send);
	}
	//Location -> EReference : receive
	if (s.receive.getEReference() != null){
		var receive = new SysMLine!ItemUsage;
		receive.isReference = true;
		receive.featureNote.add(":>");
		receive.featureSpecialization.add("receive");
		receive.valuePart = s.receive.getEReference();
		t.body.add(receive);
	}
	//Location -> EReference : call
	if (s.call.getEReference() != null){
		var call = new SysMLine!ItemUsage;
		call.isReference = true;
		call.featureNote.add(":>");
		call.featureSpecialization.add("call");
		call.valuePart = s.call.getEReference();
		t.body.add(call);
	}
	//Location -> EReference : execute
	if (s.execute.getEReference() != null){
		var execute = new SysMLine!ItemUsage;
		execute.isReference = true;
		execute.featureNote.add(":>");
		execute.featureSpecialization.add("execute");
		execute.valuePart = s.execute.getEReference();
		t.body.add(execute);
	}
	//Location -> EReference : write
	if (s.write.getEReference() != null){
		var write = new SysMLine!ItemUsage;
		write.isReference = true;
		write.featureNote.add(":>");
		write.featureSpecialization.add("write");
		write.valuePart = s.write.getEReference();
		t.body.add(write);
	}
	//Location -> EReference : access
	if (s.access.getEReference() != null){
		var access = new SysMLine!ItemUsage;
		access.isReference = true;
		access.featureNote.add(":>");
		access.featureSpecialization.add("access");
		access.valuePart = s.access.getEReference();
		t.body.add(access);
	}
	//Location -> EReference : acquire
	if (s.acquire.getEReference() != null){
		var acquire = new SysMLine!ItemUsage;
		acquire.isReference = true;
		acquire.featureNote.add(":>");
		acquire.featureSpecialization.add("acquire");
		acquire.valuePart = s.acquire.getEReference();
		t.body.add(acquire);
	}
	//Location -> EReference : transmit
	if (s.transmit.getEReference() != null){
		var transmit = new SysMLine!ItemUsage;
		transmit.isReference = true;
		transmit.featureNote.add(":>");
		transmit.featureSpecialization.add("transmit");
		transmit.valuePart = s.transmit.getEReference();
		t.body.add(transmit);
	}
	//Location -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null){
		var ownedInterfaceUses = new SysMLine!ItemUsage;
		ownedInterfaceUses.isReference = true;
		ownedInterfaceUses.featureNote.add(":>");
		ownedInterfaceUses.featureSpecialization.add("ownedInterfaceUses");
		ownedInterfaceUses.valuePart = s.ownedInterfaceUses.getEReference();
		t.body.add(ownedInterfaceUses);
	}
	//Location -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null){
		var usedInterfaceLinks = new SysMLine!ItemUsage;
		usedInterfaceLinks.isReference = true;
		usedInterfaceLinks.featureNote.add(":>");
		usedInterfaceLinks.featureSpecialization.add("usedInterfaceLinks");
		usedInterfaceLinks.valuePart = s.usedInterfaceLinks.getEReference();
		t.body.add(usedInterfaceLinks);
	}
	//Location -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null){
		var usedInterfaces = new SysMLine!ItemUsage;
		usedInterfaces.isReference = true;
		usedInterfaces.featureNote.add(":>");
		usedInterfaces.featureSpecialization.add("usedInterfaces");
		usedInterfaces.valuePart = s.usedInterfaces.getEReference();
		t.body.add(usedInterfaces);
	}
	//Location -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null){
		var ownedInterfaceImplementations = new SysMLine!ItemUsage;
		ownedInterfaceImplementations.isReference = true;
		ownedInterfaceImplementations.featureNote.add(":>");
		ownedInterfaceImplementations.featureSpecialization.add("ownedInterfaceImplementations");
		ownedInterfaceImplementations.valuePart = s.ownedInterfaceImplementations.getEReference();
		t.body.add(ownedInterfaceImplementations);
	}
	//Location -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null){
		var implementedInterfaceLinks = new SysMLine!ItemUsage;
		implementedInterfaceLinks.isReference = true;
		implementedInterfaceLinks.featureNote.add(":>");
		implementedInterfaceLinks.featureSpecialization.add("implementedInterfaceLinks");
		implementedInterfaceLinks.valuePart = s.implementedInterfaceLinks.getEReference();
		t.body.add(implementedInterfaceLinks);
	}
	//Location -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null){
		var implementedInterfaces = new SysMLine!ItemUsage;
		implementedInterfaces.isReference = true;
		implementedInterfaces.featureNote.add(":>");
		implementedInterfaces.featureSpecialization.add("implementedInterfaces");
		implementedInterfaces.valuePart = s.implementedInterfaces.getEReference();
		t.body.add(implementedInterfaces);
	}
	//Location -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null){
		var ownedComponentRealizations = new SysMLine!ItemUsage;
		ownedComponentRealizations.isReference = true;
		ownedComponentRealizations.featureNote.add(":>");
		ownedComponentRealizations.featureSpecialization.add("ownedComponentRealizations");
		ownedComponentRealizations.valuePart = s.ownedComponentRealizations.getEReference();
		t.body.add(ownedComponentRealizations);
	}
	//Location -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null){
		var realizedComponents = new SysMLine!ItemUsage;
		realizedComponents.isReference = true;
		realizedComponents.featureNote.add(":>");
		realizedComponents.featureSpecialization.add("realizedComponents");
		realizedComponents.valuePart = s.realizedComponents.getEReference();
		t.body.add(realizedComponents);
	}
	//Location -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null){
		var realizingComponents = new SysMLine!ItemUsage;
		realizingComponents.isReference = true;
		realizingComponents.featureNote.add(":>");
		realizingComponents.featureSpecialization.add("realizingComponents");
		realizingComponents.valuePart = s.realizingComponents.getEReference();
		t.body.add(realizingComponents);
	}
	//Location -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null){
		var providedInterfaces = new SysMLine!ItemUsage;
		providedInterfaces.isReference = true;
		providedInterfaces.featureNote.add(":>");
		providedInterfaces.featureSpecialization.add("providedInterfaces");
		providedInterfaces.valuePart = s.providedInterfaces.getEReference();
		t.body.add(providedInterfaces);
	}
	//Location -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null){
		var requiredInterfaces = new SysMLine!ItemUsage;
		requiredInterfaces.isReference = true;
		requiredInterfaces.featureNote.add(":>");
		requiredInterfaces.featureSpecialization.add("requiredInterfaces");
		requiredInterfaces.valuePart = s.requiredInterfaces.getEReference();
		t.body.add(requiredInterfaces);
	}
	//Location -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null){
		var containedComponentPorts = new SysMLine!ItemUsage;
		containedComponentPorts.isReference = true;
		containedComponentPorts.featureNote.add(":>");
		containedComponentPorts.featureSpecialization.add("containedComponentPorts");
		containedComponentPorts.valuePart = s.containedComponentPorts.getEReference();
		t.body.add(containedComponentPorts);
	}
	//Location -> EReference : containedParts
	if (s.containedParts.getEReference() != null){
		var containedParts = new SysMLine!ItemUsage;
		containedParts.isReference = true;
		containedParts.featureNote.add(":>");
		containedParts.featureSpecialization.add("containedParts");
		containedParts.valuePart = s.containedParts.getEReference();
		t.body.add(containedParts);
	}
	//Location -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null){
		var containedPhysicalPorts = new SysMLine!ItemUsage;
		containedPhysicalPorts.isReference = true;
		containedPhysicalPorts.featureNote.add(":>");
		containedPhysicalPorts.featureSpecialization.add("containedPhysicalPorts");
		containedPhysicalPorts.valuePart = s.containedPhysicalPorts.getEReference();
		t.body.add(containedPhysicalPorts);
	}
	//Location -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null){
		var ownedPhysicalPath = new SysMLine!ItemUsage;
		ownedPhysicalPath.isReference = true;
		ownedPhysicalPath.featureNote.add(":>");
		ownedPhysicalPath.featureSpecialization.add("ownedPhysicalPath");
		ownedPhysicalPath.valuePart = s.ownedPhysicalPath.getEReference();
		t.body.add(ownedPhysicalPath);
	}
	//Location -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null){
		var ownedPhysicalLinks = new SysMLine!ItemUsage;
		ownedPhysicalLinks.isReference = true;
		ownedPhysicalLinks.featureNote.add(":>");
		ownedPhysicalLinks.featureSpecialization.add("ownedPhysicalLinks");
		ownedPhysicalLinks.valuePart = s.ownedPhysicalLinks.getEReference();
		t.body.add(ownedPhysicalLinks);
	}
	//Location -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null){
		var ownedPhysicalLinkCategories = new SysMLine!ItemUsage;
		ownedPhysicalLinkCategories.isReference = true;
		ownedPhysicalLinkCategories.featureNote.add(":>");
		ownedPhysicalLinkCategories.featureSpecialization.add("ownedPhysicalLinkCategories");
		ownedPhysicalLinkCategories.valuePart = s.ownedPhysicalLinkCategories.getEReference();
		t.body.add(ownedPhysicalLinkCategories);
	}
	//Location -> EReference : representingParts
	if (s.representingParts.getEReference() != null){
		var representingParts = new SysMLine!ItemUsage;
		representingParts.isReference = true;
		representingParts.featureNote.add(":>");
		representingParts.featureSpecialization.add("representingParts");
		representingParts.valuePart = s.representingParts.getEReference();
		t.body.add(representingParts);
	}
	//Location -> EReference : composingLinks
	if (s.composingLinks.getEReference() != null){
		var composingLinks = new SysMLine!ItemUsage;
		composingLinks.isReference = true;
		composingLinks.featureNote.add(":>");
		composingLinks.featureSpecialization.add("composingLinks");
		composingLinks.valuePart = s.composingLinks.getEReference();
		t.body.add(composingLinks);
	}
	//Location -> EReference : locatedEntities
	if (s.locatedEntities.getEReference() != null){
		var locatedEntities = new SysMLine!ItemUsage;
		locatedEntities.isReference = true;
		locatedEntities.featureNote.add(":>");
		locatedEntities.featureSpecialization.add("locatedEntities");
		locatedEntities.valuePart = s.locatedEntities.getEReference();
		t.body.add(locatedEntities);
	}
}

@lazy
rule CapabilityConfiguration
	transform s : DSL!CapabilityConfiguration
	to t : SysMLine!ItemUsage
	extends Base{
	//CapabilityConfiguration -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//CapabilityConfiguration -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//CapabilityConfiguration -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//CapabilityConfiguration -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//CapabilityConfiguration -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//CapabilityConfiguration -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//CapabilityConfiguration -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//CapabilityConfiguration -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//CapabilityConfiguration -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null){
		var abstract = new SysMLine!AttributeUsage;
		abstract.featureNote.add(":>>");
		abstract.featureSpecialization.add("abstract");
		abstract.valuePart = s.abstract.getEAttribute();
		t.body.add(abstract);
	}
	//CapabilityConfiguration -> EAttribute : actor
	if (s.actor.getEAttribute() != null){
		var actor = new SysMLine!AttributeUsage;
		actor.featureNote.add(":>>");
		actor.featureSpecialization.add("actor");
		actor.valuePart = s.actor.getEAttribute();
		t.body.add(actor);
	}
	//CapabilityConfiguration -> EAttribute : human
	if (s.human.getEAttribute() != null){
		var human = new SysMLine!AttributeUsage;
		human.featureNote.add(":>>");
		human.featureSpecialization.add("human");
		human.valuePart = s.human.getEAttribute();
		t.body.add(human);
	}
	//CapabilityConfiguration -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//CapabilityConfiguration -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//CapabilityConfiguration -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//CapabilityConfiguration -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//CapabilityConfiguration -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null){
		var abstractTypedElements = new SysMLine!ItemUsage;
		abstractTypedElements.isReference = true;
		abstractTypedElements.featureNote.add(":>");
		abstractTypedElements.featureSpecialization.add("abstractTypedElements");
		abstractTypedElements.valuePart = s.abstractTypedElements.getEReference();
		t.body.add(abstractTypedElements);
	}
	//CapabilityConfiguration -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//CapabilityConfiguration -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//CapabilityConfiguration -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//CapabilityConfiguration -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//CapabilityConfiguration -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//CapabilityConfiguration -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//CapabilityConfiguration -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//CapabilityConfiguration -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//CapabilityConfiguration -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//CapabilityConfiguration -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//CapabilityConfiguration -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//CapabilityConfiguration -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//CapabilityConfiguration -> EReference : typedElements
	if (s.typedElements.getEReference() != null){
		var typedElements = new SysMLine!ItemUsage;
		typedElements.isReference = true;
		typedElements.featureNote.add(":>");
		typedElements.featureSpecialization.add("typedElements");
		typedElements.valuePart = s.typedElements.getEReference();
		t.body.add(typedElements);
	}
	//CapabilityConfiguration -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null){
		var ownedFunctionalAllocation = new SysMLine!ItemUsage;
		ownedFunctionalAllocation.isReference = true;
		ownedFunctionalAllocation.featureNote.add(":>");
		ownedFunctionalAllocation.featureSpecialization.add("ownedFunctionalAllocation");
		ownedFunctionalAllocation.valuePart = s.ownedFunctionalAllocation.getEReference();
		t.body.add(ownedFunctionalAllocation);
	}
	//CapabilityConfiguration -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null){
		var ownedComponentExchanges = new SysMLine!ItemUsage;
		ownedComponentExchanges.isReference = true;
		ownedComponentExchanges.featureNote.add(":>");
		ownedComponentExchanges.featureSpecialization.add("ownedComponentExchanges");
		ownedComponentExchanges.valuePart = s.ownedComponentExchanges.getEReference();
		t.body.add(ownedComponentExchanges);
	}
	//CapabilityConfiguration -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null){
		var ownedComponentExchangeCategories = new SysMLine!ItemUsage;
		ownedComponentExchangeCategories.isReference = true;
		ownedComponentExchangeCategories.featureNote.add(":>");
		ownedComponentExchangeCategories.featureSpecialization.add("ownedComponentExchangeCategories");
		ownedComponentExchangeCategories.valuePart = s.ownedComponentExchangeCategories.getEReference();
		t.body.add(ownedComponentExchangeCategories);
	}
	//CapabilityConfiguration -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null){
		var functionalAllocations = new SysMLine!ItemUsage;
		functionalAllocations.isReference = true;
		functionalAllocations.featureNote.add(":>");
		functionalAllocations.featureSpecialization.add("functionalAllocations");
		functionalAllocations.valuePart = s.functionalAllocations.getEReference();
		t.body.add(functionalAllocations);
	}
	//CapabilityConfiguration -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null){
		var allocatedFunctions = new SysMLine!ItemUsage;
		allocatedFunctions.isReference = true;
		allocatedFunctions.featureNote.add(":>");
		allocatedFunctions.featureSpecialization.add("allocatedFunctions");
		allocatedFunctions.valuePart = s.allocatedFunctions.getEReference();
		t.body.add(allocatedFunctions);
	}
	//CapabilityConfiguration -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null){
		var inExchangeLinks = new SysMLine!ItemUsage;
		inExchangeLinks.isReference = true;
		inExchangeLinks.featureNote.add(":>");
		inExchangeLinks.featureSpecialization.add("inExchangeLinks");
		inExchangeLinks.valuePart = s.inExchangeLinks.getEReference();
		t.body.add(inExchangeLinks);
	}
	//CapabilityConfiguration -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null){
		var outExchangeLinks = new SysMLine!ItemUsage;
		outExchangeLinks.isReference = true;
		outExchangeLinks.featureNote.add(":>");
		outExchangeLinks.featureSpecialization.add("outExchangeLinks");
		outExchangeLinks.valuePart = s.outExchangeLinks.getEReference();
		t.body.add(outExchangeLinks);
	}
	//CapabilityConfiguration -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null){
		var ownedAbstractCapabilityPkg = new SysMLine!ItemUsage;
		ownedAbstractCapabilityPkg.isReference = true;
		ownedAbstractCapabilityPkg.featureNote.add(":>");
		ownedAbstractCapabilityPkg.featureSpecialization.add("ownedAbstractCapabilityPkg");
		ownedAbstractCapabilityPkg.valuePart = s.ownedAbstractCapabilityPkg.getEReference();
		t.body.add(ownedAbstractCapabilityPkg);
	}
	//CapabilityConfiguration -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null){
		var ownedInterfacePkg = new SysMLine!ItemUsage;
		ownedInterfacePkg.isReference = true;
		ownedInterfacePkg.featureNote.add(":>");
		ownedInterfacePkg.featureSpecialization.add("ownedInterfacePkg");
		ownedInterfacePkg.valuePart = s.ownedInterfacePkg.getEReference();
		t.body.add(ownedInterfacePkg);
	}
	//CapabilityConfiguration -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null){
		var ownedDataPkg = new SysMLine!ItemUsage;
		ownedDataPkg.isReference = true;
		ownedDataPkg.featureNote.add(":>");
		ownedDataPkg.featureSpecialization.add("ownedDataPkg");
		ownedDataPkg.valuePart = s.ownedDataPkg.getEReference();
		t.body.add(ownedDataPkg);
	}
	//CapabilityConfiguration -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null){
		var ownedStateMachines = new SysMLine!ItemUsage;
		ownedStateMachines.isReference = true;
		ownedStateMachines.featureNote.add(":>");
		ownedStateMachines.featureSpecialization.add("ownedStateMachines");
		ownedStateMachines.valuePart = s.ownedStateMachines.getEReference();
		t.body.add(ownedStateMachines);
	}
	//CapabilityConfiguration -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null){
		var ownedGeneralizations = new SysMLine!ItemUsage;
		ownedGeneralizations.isReference = true;
		ownedGeneralizations.featureNote.add(":>");
		ownedGeneralizations.featureSpecialization.add("ownedGeneralizations");
		ownedGeneralizations.valuePart = s.ownedGeneralizations.getEReference();
		t.body.add(ownedGeneralizations);
	}
	//CapabilityConfiguration -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null){
		var superGeneralizations = new SysMLine!ItemUsage;
		superGeneralizations.isReference = true;
		superGeneralizations.featureNote.add(":>");
		superGeneralizations.featureSpecialization.add("superGeneralizations");
		superGeneralizations.valuePart = s.superGeneralizations.getEReference();
		t.body.add(superGeneralizations);
	}
	//CapabilityConfiguration -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null){
		var subGeneralizations = new SysMLine!ItemUsage;
		subGeneralizations.isReference = true;
		subGeneralizations.featureNote.add(":>");
		subGeneralizations.featureSpecialization.add("subGeneralizations");
		subGeneralizations.valuePart = s.subGeneralizations.getEReference();
		t.body.add(subGeneralizations);
	}
	//CapabilityConfiguration -> EReference : super
	if (s.super.getEReference() != null){
		var super = new SysMLine!ItemUsage;
		super.isReference = true;
		super.featureNote.add(":>");
		super.featureSpecialization.add("super");
		super.valuePart = s.super.getEReference();
		t.body.add(super);
	}
	//CapabilityConfiguration -> EReference : sub
	if (s.sub.getEReference() != null){
		var sub = new SysMLine!ItemUsage;
		sub.isReference = true;
		sub.featureNote.add(":>");
		sub.featureSpecialization.add("sub");
		sub.valuePart = s.sub.getEReference();
		t.body.add(sub);
	}
	//CapabilityConfiguration -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null){
		var ownedFeatures = new SysMLine!ItemUsage;
		ownedFeatures.isReference = true;
		ownedFeatures.featureNote.add(":>");
		ownedFeatures.featureSpecialization.add("ownedFeatures");
		ownedFeatures.valuePart = s.ownedFeatures.getEReference();
		t.body.add(ownedFeatures);
	}
	//CapabilityConfiguration -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null){
		var containedProperties = new SysMLine!ItemUsage;
		containedProperties.isReference = true;
		containedProperties.featureNote.add(":>");
		containedProperties.featureSpecialization.add("containedProperties");
		containedProperties.valuePart = s.containedProperties.getEReference();
		t.body.add(containedProperties);
	}
	//CapabilityConfiguration -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null){
		var ownedInterfaceAllocations = new SysMLine!ItemUsage;
		ownedInterfaceAllocations.isReference = true;
		ownedInterfaceAllocations.featureNote.add(":>");
		ownedInterfaceAllocations.featureSpecialization.add("ownedInterfaceAllocations");
		ownedInterfaceAllocations.valuePart = s.ownedInterfaceAllocations.getEReference();
		t.body.add(ownedInterfaceAllocations);
	}
	//CapabilityConfiguration -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null){
		var provisionedInterfaceAllocations = new SysMLine!ItemUsage;
		provisionedInterfaceAllocations.isReference = true;
		provisionedInterfaceAllocations.featureNote.add(":>");
		provisionedInterfaceAllocations.featureSpecialization.add("provisionedInterfaceAllocations");
		provisionedInterfaceAllocations.valuePart = s.provisionedInterfaceAllocations.getEReference();
		t.body.add(provisionedInterfaceAllocations);
	}
	//CapabilityConfiguration -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null){
		var allocatedInterfaces = new SysMLine!ItemUsage;
		allocatedInterfaces.isReference = true;
		allocatedInterfaces.featureNote.add(":>");
		allocatedInterfaces.featureSpecialization.add("allocatedInterfaces");
		allocatedInterfaces.valuePart = s.allocatedInterfaces.getEReference();
		t.body.add(allocatedInterfaces);
	}
	//CapabilityConfiguration -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null){
		var ownedCommunicationLinks = new SysMLine!ItemUsage;
		ownedCommunicationLinks.isReference = true;
		ownedCommunicationLinks.featureNote.add(":>");
		ownedCommunicationLinks.featureSpecialization.add("ownedCommunicationLinks");
		ownedCommunicationLinks.valuePart = s.ownedCommunicationLinks.getEReference();
		t.body.add(ownedCommunicationLinks);
	}
	//CapabilityConfiguration -> EReference : produce
	if (s.produce.getEReference() != null){
		var produce = new SysMLine!ItemUsage;
		produce.isReference = true;
		produce.featureNote.add(":>");
		produce.featureSpecialization.add("produce");
		produce.valuePart = s.produce.getEReference();
		t.body.add(produce);
	}
	//CapabilityConfiguration -> EReference : consume
	if (s.consume.getEReference() != null){
		var consume = new SysMLine!ItemUsage;
		consume.isReference = true;
		consume.featureNote.add(":>");
		consume.featureSpecialization.add("consume");
		consume.valuePart = s.consume.getEReference();
		t.body.add(consume);
	}
	//CapabilityConfiguration -> EReference : send
	if (s.send.getEReference() != null){
		var send = new SysMLine!ItemUsage;
		send.isReference = true;
		send.featureNote.add(":>");
		send.featureSpecialization.add("send");
		send.valuePart = s.send.getEReference();
		t.body.add(send);
	}
	//CapabilityConfiguration -> EReference : receive
	if (s.receive.getEReference() != null){
		var receive = new SysMLine!ItemUsage;
		receive.isReference = true;
		receive.featureNote.add(":>");
		receive.featureSpecialization.add("receive");
		receive.valuePart = s.receive.getEReference();
		t.body.add(receive);
	}
	//CapabilityConfiguration -> EReference : call
	if (s.call.getEReference() != null){
		var call = new SysMLine!ItemUsage;
		call.isReference = true;
		call.featureNote.add(":>");
		call.featureSpecialization.add("call");
		call.valuePart = s.call.getEReference();
		t.body.add(call);
	}
	//CapabilityConfiguration -> EReference : execute
	if (s.execute.getEReference() != null){
		var execute = new SysMLine!ItemUsage;
		execute.isReference = true;
		execute.featureNote.add(":>");
		execute.featureSpecialization.add("execute");
		execute.valuePart = s.execute.getEReference();
		t.body.add(execute);
	}
	//CapabilityConfiguration -> EReference : write
	if (s.write.getEReference() != null){
		var write = new SysMLine!ItemUsage;
		write.isReference = true;
		write.featureNote.add(":>");
		write.featureSpecialization.add("write");
		write.valuePart = s.write.getEReference();
		t.body.add(write);
	}
	//CapabilityConfiguration -> EReference : access
	if (s.access.getEReference() != null){
		var access = new SysMLine!ItemUsage;
		access.isReference = true;
		access.featureNote.add(":>");
		access.featureSpecialization.add("access");
		access.valuePart = s.access.getEReference();
		t.body.add(access);
	}
	//CapabilityConfiguration -> EReference : acquire
	if (s.acquire.getEReference() != null){
		var acquire = new SysMLine!ItemUsage;
		acquire.isReference = true;
		acquire.featureNote.add(":>");
		acquire.featureSpecialization.add("acquire");
		acquire.valuePart = s.acquire.getEReference();
		t.body.add(acquire);
	}
	//CapabilityConfiguration -> EReference : transmit
	if (s.transmit.getEReference() != null){
		var transmit = new SysMLine!ItemUsage;
		transmit.isReference = true;
		transmit.featureNote.add(":>");
		transmit.featureSpecialization.add("transmit");
		transmit.valuePart = s.transmit.getEReference();
		t.body.add(transmit);
	}
	//CapabilityConfiguration -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null){
		var ownedInterfaceUses = new SysMLine!ItemUsage;
		ownedInterfaceUses.isReference = true;
		ownedInterfaceUses.featureNote.add(":>");
		ownedInterfaceUses.featureSpecialization.add("ownedInterfaceUses");
		ownedInterfaceUses.valuePart = s.ownedInterfaceUses.getEReference();
		t.body.add(ownedInterfaceUses);
	}
	//CapabilityConfiguration -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null){
		var usedInterfaceLinks = new SysMLine!ItemUsage;
		usedInterfaceLinks.isReference = true;
		usedInterfaceLinks.featureNote.add(":>");
		usedInterfaceLinks.featureSpecialization.add("usedInterfaceLinks");
		usedInterfaceLinks.valuePart = s.usedInterfaceLinks.getEReference();
		t.body.add(usedInterfaceLinks);
	}
	//CapabilityConfiguration -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null){
		var usedInterfaces = new SysMLine!ItemUsage;
		usedInterfaces.isReference = true;
		usedInterfaces.featureNote.add(":>");
		usedInterfaces.featureSpecialization.add("usedInterfaces");
		usedInterfaces.valuePart = s.usedInterfaces.getEReference();
		t.body.add(usedInterfaces);
	}
	//CapabilityConfiguration -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null){
		var ownedInterfaceImplementations = new SysMLine!ItemUsage;
		ownedInterfaceImplementations.isReference = true;
		ownedInterfaceImplementations.featureNote.add(":>");
		ownedInterfaceImplementations.featureSpecialization.add("ownedInterfaceImplementations");
		ownedInterfaceImplementations.valuePart = s.ownedInterfaceImplementations.getEReference();
		t.body.add(ownedInterfaceImplementations);
	}
	//CapabilityConfiguration -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null){
		var implementedInterfaceLinks = new SysMLine!ItemUsage;
		implementedInterfaceLinks.isReference = true;
		implementedInterfaceLinks.featureNote.add(":>");
		implementedInterfaceLinks.featureSpecialization.add("implementedInterfaceLinks");
		implementedInterfaceLinks.valuePart = s.implementedInterfaceLinks.getEReference();
		t.body.add(implementedInterfaceLinks);
	}
	//CapabilityConfiguration -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null){
		var implementedInterfaces = new SysMLine!ItemUsage;
		implementedInterfaces.isReference = true;
		implementedInterfaces.featureNote.add(":>");
		implementedInterfaces.featureSpecialization.add("implementedInterfaces");
		implementedInterfaces.valuePart = s.implementedInterfaces.getEReference();
		t.body.add(implementedInterfaces);
	}
	//CapabilityConfiguration -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null){
		var ownedComponentRealizations = new SysMLine!ItemUsage;
		ownedComponentRealizations.isReference = true;
		ownedComponentRealizations.featureNote.add(":>");
		ownedComponentRealizations.featureSpecialization.add("ownedComponentRealizations");
		ownedComponentRealizations.valuePart = s.ownedComponentRealizations.getEReference();
		t.body.add(ownedComponentRealizations);
	}
	//CapabilityConfiguration -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null){
		var realizedComponents = new SysMLine!ItemUsage;
		realizedComponents.isReference = true;
		realizedComponents.featureNote.add(":>");
		realizedComponents.featureSpecialization.add("realizedComponents");
		realizedComponents.valuePart = s.realizedComponents.getEReference();
		t.body.add(realizedComponents);
	}
	//CapabilityConfiguration -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null){
		var realizingComponents = new SysMLine!ItemUsage;
		realizingComponents.isReference = true;
		realizingComponents.featureNote.add(":>");
		realizingComponents.featureSpecialization.add("realizingComponents");
		realizingComponents.valuePart = s.realizingComponents.getEReference();
		t.body.add(realizingComponents);
	}
	//CapabilityConfiguration -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null){
		var providedInterfaces = new SysMLine!ItemUsage;
		providedInterfaces.isReference = true;
		providedInterfaces.featureNote.add(":>");
		providedInterfaces.featureSpecialization.add("providedInterfaces");
		providedInterfaces.valuePart = s.providedInterfaces.getEReference();
		t.body.add(providedInterfaces);
	}
	//CapabilityConfiguration -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null){
		var requiredInterfaces = new SysMLine!ItemUsage;
		requiredInterfaces.isReference = true;
		requiredInterfaces.featureNote.add(":>");
		requiredInterfaces.featureSpecialization.add("requiredInterfaces");
		requiredInterfaces.valuePart = s.requiredInterfaces.getEReference();
		t.body.add(requiredInterfaces);
	}
	//CapabilityConfiguration -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null){
		var containedComponentPorts = new SysMLine!ItemUsage;
		containedComponentPorts.isReference = true;
		containedComponentPorts.featureNote.add(":>");
		containedComponentPorts.featureSpecialization.add("containedComponentPorts");
		containedComponentPorts.valuePart = s.containedComponentPorts.getEReference();
		t.body.add(containedComponentPorts);
	}
	//CapabilityConfiguration -> EReference : containedParts
	if (s.containedParts.getEReference() != null){
		var containedParts = new SysMLine!ItemUsage;
		containedParts.isReference = true;
		containedParts.featureNote.add(":>");
		containedParts.featureSpecialization.add("containedParts");
		containedParts.valuePart = s.containedParts.getEReference();
		t.body.add(containedParts);
	}
	//CapabilityConfiguration -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null){
		var containedPhysicalPorts = new SysMLine!ItemUsage;
		containedPhysicalPorts.isReference = true;
		containedPhysicalPorts.featureNote.add(":>");
		containedPhysicalPorts.featureSpecialization.add("containedPhysicalPorts");
		containedPhysicalPorts.valuePart = s.containedPhysicalPorts.getEReference();
		t.body.add(containedPhysicalPorts);
	}
	//CapabilityConfiguration -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null){
		var ownedPhysicalPath = new SysMLine!ItemUsage;
		ownedPhysicalPath.isReference = true;
		ownedPhysicalPath.featureNote.add(":>");
		ownedPhysicalPath.featureSpecialization.add("ownedPhysicalPath");
		ownedPhysicalPath.valuePart = s.ownedPhysicalPath.getEReference();
		t.body.add(ownedPhysicalPath);
	}
	//CapabilityConfiguration -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null){
		var ownedPhysicalLinks = new SysMLine!ItemUsage;
		ownedPhysicalLinks.isReference = true;
		ownedPhysicalLinks.featureNote.add(":>");
		ownedPhysicalLinks.featureSpecialization.add("ownedPhysicalLinks");
		ownedPhysicalLinks.valuePart = s.ownedPhysicalLinks.getEReference();
		t.body.add(ownedPhysicalLinks);
	}
	//CapabilityConfiguration -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null){
		var ownedPhysicalLinkCategories = new SysMLine!ItemUsage;
		ownedPhysicalLinkCategories.isReference = true;
		ownedPhysicalLinkCategories.featureNote.add(":>");
		ownedPhysicalLinkCategories.featureSpecialization.add("ownedPhysicalLinkCategories");
		ownedPhysicalLinkCategories.valuePart = s.ownedPhysicalLinkCategories.getEReference();
		t.body.add(ownedPhysicalLinkCategories);
	}
	//CapabilityConfiguration -> EReference : representingParts
	if (s.representingParts.getEReference() != null){
		var representingParts = new SysMLine!ItemUsage;
		representingParts.isReference = true;
		representingParts.featureNote.add(":>");
		representingParts.featureSpecialization.add("representingParts");
		representingParts.valuePart = s.representingParts.getEReference();
		t.body.add(representingParts);
	}
	//CapabilityConfiguration -> EReference : composingLinks
	if (s.composingLinks.getEReference() != null){
		var composingLinks = new SysMLine!ItemUsage;
		composingLinks.isReference = true;
		composingLinks.featureNote.add(":>");
		composingLinks.featureSpecialization.add("composingLinks");
		composingLinks.valuePart = s.composingLinks.getEReference();
		t.body.add(composingLinks);
	}
	//CapabilityConfiguration -> EReference : configuredCapability
	if (s.configuredCapability.getEReference() != null){
		var configuredCapability = new SysMLine!ItemUsage;
		configuredCapability.isReference = true;
		configuredCapability.featureNote.add(":>");
		configuredCapability.featureSpecialization.add("configuredCapability");
		configuredCapability.valuePart = s.configuredCapability.getEReference();
		t.body.add(configuredCapability);
	}
}

@lazy
rule CommunicationMean
	transform s : DSL!CommunicationMean
	to t : SysMLine!ItemUsage
	extends Base{
	//CommunicationMean -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//CommunicationMean -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//CommunicationMean -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//CommunicationMean -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//CommunicationMean -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//CommunicationMean -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//CommunicationMean -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//CommunicationMean -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//CommunicationMean -> EAttribute : kind
	if (s.kind.getEAttribute() != null){
		var kind = new SysMLine!AttributeUsage;
		kind.featureNote.add(":>>");
		kind.featureSpecialization.add("kind");
		kind.valuePart = s.kind.getEAttribute();
		t.body.add(kind);
	}
	//CommunicationMean -> EAttribute : oriented
	if (s.oriented.getEAttribute() != null){
		var oriented = new SysMLine!AttributeUsage;
		oriented.featureNote.add(":>>");
		oriented.featureSpecialization.add("oriented");
		oriented.valuePart = s.oriented.getEAttribute();
		t.body.add(oriented);
	}
	//CommunicationMean -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//CommunicationMean -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//CommunicationMean -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//CommunicationMean -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//CommunicationMean -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//CommunicationMean -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//CommunicationMean -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//CommunicationMean -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//CommunicationMean -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//CommunicationMean -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//CommunicationMean -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//CommunicationMean -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//CommunicationMean -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//CommunicationMean -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//CommunicationMean -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//CommunicationMean -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null){
		var abstractTypedElements = new SysMLine!ItemUsage;
		abstractTypedElements.isReference = true;
		abstractTypedElements.featureNote.add(":>");
		abstractTypedElements.featureSpecialization.add("abstractTypedElements");
		abstractTypedElements.valuePart = s.abstractTypedElements.getEReference();
		t.body.add(abstractTypedElements);
	}
	//CommunicationMean -> EReference : invokingSequenceMessages
	if (s.invokingSequenceMessages.getEReference() != null){
		var invokingSequenceMessages = new SysMLine!ItemUsage;
		invokingSequenceMessages.isReference = true;
		invokingSequenceMessages.featureNote.add(":>");
		invokingSequenceMessages.featureSpecialization.add("invokingSequenceMessages");
		invokingSequenceMessages.valuePart = s.invokingSequenceMessages.getEReference();
		t.body.add(invokingSequenceMessages);
	}
	//CommunicationMean -> EReference : realizations
	if (s.realizations.getEReference() != null){
		var realizations = new SysMLine!ItemUsage;
		realizations.isReference = true;
		realizations.featureNote.add(":>");
		realizations.featureSpecialization.add("realizations");
		realizations.valuePart = s.realizations.getEReference();
		t.body.add(realizations);
	}
	//CommunicationMean -> EReference : convoyedInformations
	if (s.convoyedInformations.getEReference() != null){
		var convoyedInformations = new SysMLine!ItemUsage;
		convoyedInformations.isReference = true;
		convoyedInformations.featureNote.add(":>");
		convoyedInformations.featureSpecialization.add("convoyedInformations");
		convoyedInformations.valuePart = s.convoyedInformations.getEReference();
		t.body.add(convoyedInformations);
	}
	//CommunicationMean -> EReference : source
	if (s.source.getEReference() != null){
		var source = new SysMLine!ItemUsage;
		source.isReference = true;
		source.featureNote.add(":>");
		source.featureSpecialization.add("source");
		source.valuePart = s.source.getEReference();
		t.body.add(source);
	}
	//CommunicationMean -> EReference : target
	if (s.target.getEReference() != null){
		var target = new SysMLine!ItemUsage;
		target.isReference = true;
		target.featureNote.add(":>");
		target.featureSpecialization.add("target");
		target.valuePart = s.target.getEReference();
		t.body.add(target);
	}
	//CommunicationMean -> EReference : realizingActivityFlows
	if (s.realizingActivityFlows.getEReference() != null){
		var realizingActivityFlows = new SysMLine!ItemUsage;
		realizingActivityFlows.isReference = true;
		realizingActivityFlows.featureNote.add(":>");
		realizingActivityFlows.featureSpecialization.add("realizingActivityFlows");
		realizingActivityFlows.valuePart = s.realizingActivityFlows.getEReference();
		t.body.add(realizingActivityFlows);
	}
	//CommunicationMean -> EReference : containingLink
	if (s.containingLink.getEReference() != null){
		var containingLink = new SysMLine!ItemUsage;
		containingLink.isReference = true;
		containingLink.featureNote.add(":>");
		containingLink.featureSpecialization.add("containingLink");
		containingLink.valuePart = s.containingLink.getEReference();
		t.body.add(containingLink);
	}
	//CommunicationMean -> EReference : link
	if (s.link.getEReference() != null){
		var link = new SysMLine!ItemUsage;
		link.isReference = true;
		link.featureNote.add(":>");
		link.featureSpecialization.add("link");
		link.valuePart = s.link.getEReference();
		t.body.add(link);
	}
	//CommunicationMean -> EReference : outgoingExchangeSpecificationRealizations
	if (s.outgoingExchangeSpecificationRealizations.getEReference() != null){
		var outgoingExchangeSpecificationRealizations = new SysMLine!ItemUsage;
		outgoingExchangeSpecificationRealizations.isReference = true;
		outgoingExchangeSpecificationRealizations.featureNote.add(":>");
		outgoingExchangeSpecificationRealizations.featureSpecialization.add("outgoingExchangeSpecificationRealizations");
		outgoingExchangeSpecificationRealizations.valuePart = s.outgoingExchangeSpecificationRealizations.getEReference();
		t.body.add(outgoingExchangeSpecificationRealizations);
	}
	//CommunicationMean -> EReference : incomingExchangeSpecificationRealizations
	if (s.incomingExchangeSpecificationRealizations.getEReference() != null){
		var incomingExchangeSpecificationRealizations = new SysMLine!ItemUsage;
		incomingExchangeSpecificationRealizations.isReference = true;
		incomingExchangeSpecificationRealizations.featureNote.add(":>");
		incomingExchangeSpecificationRealizations.featureSpecialization.add("incomingExchangeSpecificationRealizations");
		incomingExchangeSpecificationRealizations.valuePart = s.incomingExchangeSpecificationRealizations.getEReference();
		t.body.add(incomingExchangeSpecificationRealizations);
	}
	//CommunicationMean -> EReference : allocatedFunctionalExchanges
	if (s.allocatedFunctionalExchanges.getEReference() != null){
		var allocatedFunctionalExchanges = new SysMLine!ItemUsage;
		allocatedFunctionalExchanges.isReference = true;
		allocatedFunctionalExchanges.featureNote.add(":>");
		allocatedFunctionalExchanges.featureSpecialization.add("allocatedFunctionalExchanges");
		allocatedFunctionalExchanges.valuePart = s.allocatedFunctionalExchanges.getEReference();
		t.body.add(allocatedFunctionalExchanges);
	}
	//CommunicationMean -> EReference : incomingComponentExchangeRealizations
	if (s.incomingComponentExchangeRealizations.getEReference() != null){
		var incomingComponentExchangeRealizations = new SysMLine!ItemUsage;
		incomingComponentExchangeRealizations.isReference = true;
		incomingComponentExchangeRealizations.featureNote.add(":>");
		incomingComponentExchangeRealizations.featureSpecialization.add("incomingComponentExchangeRealizations");
		incomingComponentExchangeRealizations.valuePart = s.incomingComponentExchangeRealizations.getEReference();
		t.body.add(incomingComponentExchangeRealizations);
	}
	//CommunicationMean -> EReference : outgoingComponentExchangeRealizations
	if (s.outgoingComponentExchangeRealizations.getEReference() != null){
		var outgoingComponentExchangeRealizations = new SysMLine!ItemUsage;
		outgoingComponentExchangeRealizations.isReference = true;
		outgoingComponentExchangeRealizations.featureNote.add(":>");
		outgoingComponentExchangeRealizations.featureSpecialization.add("outgoingComponentExchangeRealizations");
		outgoingComponentExchangeRealizations.valuePart = s.outgoingComponentExchangeRealizations.getEReference();
		t.body.add(outgoingComponentExchangeRealizations);
	}
	//CommunicationMean -> EReference : outgoingComponentExchangeFunctionalExchangeAllocations
	if (s.outgoingComponentExchangeFunctionalExchangeAllocations.getEReference() != null){
		var outgoingComponentExchangeFunctionalExchangeAllocations = new SysMLine!ItemUsage;
		outgoingComponentExchangeFunctionalExchangeAllocations.isReference = true;
		outgoingComponentExchangeFunctionalExchangeAllocations.featureNote.add(":>");
		outgoingComponentExchangeFunctionalExchangeAllocations.featureSpecialization.add("outgoingComponentExchangeFunctionalExchangeAllocations");
		outgoingComponentExchangeFunctionalExchangeAllocations.valuePart = s.outgoingComponentExchangeFunctionalExchangeAllocations.getEReference();
		t.body.add(outgoingComponentExchangeFunctionalExchangeAllocations);
	}
	//CommunicationMean -> EReference : ownedComponentExchangeFunctionalExchangeAllocations
	if (s.ownedComponentExchangeFunctionalExchangeAllocations.getEReference() != null){
		var ownedComponentExchangeFunctionalExchangeAllocations = new SysMLine!ItemUsage;
		ownedComponentExchangeFunctionalExchangeAllocations.isReference = true;
		ownedComponentExchangeFunctionalExchangeAllocations.featureNote.add(":>");
		ownedComponentExchangeFunctionalExchangeAllocations.featureSpecialization.add("ownedComponentExchangeFunctionalExchangeAllocations");
		ownedComponentExchangeFunctionalExchangeAllocations.valuePart = s.ownedComponentExchangeFunctionalExchangeAllocations.getEReference();
		t.body.add(ownedComponentExchangeFunctionalExchangeAllocations);
	}
	//CommunicationMean -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null){
		var ownedComponentExchangeRealizations = new SysMLine!ItemUsage;
		ownedComponentExchangeRealizations.isReference = true;
		ownedComponentExchangeRealizations.featureNote.add(":>");
		ownedComponentExchangeRealizations.featureSpecialization.add("ownedComponentExchangeRealizations");
		ownedComponentExchangeRealizations.valuePart = s.ownedComponentExchangeRealizations.getEReference();
		t.body.add(ownedComponentExchangeRealizations);
	}
	//CommunicationMean -> EReference : ownedComponentExchangeEnds
	if (s.ownedComponentExchangeEnds.getEReference() != null){
		var ownedComponentExchangeEnds = new SysMLine!ItemUsage;
		ownedComponentExchangeEnds.isReference = true;
		ownedComponentExchangeEnds.featureNote.add(":>");
		ownedComponentExchangeEnds.featureSpecialization.add("ownedComponentExchangeEnds");
		ownedComponentExchangeEnds.valuePart = s.ownedComponentExchangeEnds.getEReference();
		t.body.add(ownedComponentExchangeEnds);
	}
	//CommunicationMean -> EReference : sourcePort
	if (s.sourcePort.getEReference() != null){
		var sourcePort = new SysMLine!ItemUsage;
		sourcePort.isReference = true;
		sourcePort.featureNote.add(":>");
		sourcePort.featureSpecialization.add("sourcePort");
		sourcePort.valuePart = s.sourcePort.getEReference();
		t.body.add(sourcePort);
	}
	//CommunicationMean -> EReference : sourcePart
	if (s.sourcePart.getEReference() != null){
		var sourcePart = new SysMLine!ItemUsage;
		sourcePart.isReference = true;
		sourcePart.featureNote.add(":>");
		sourcePart.featureSpecialization.add("sourcePart");
		sourcePart.valuePart = s.sourcePart.getEReference();
		t.body.add(sourcePart);
	}
	//CommunicationMean -> EReference : targetPort
	if (s.targetPort.getEReference() != null){
		var targetPort = new SysMLine!ItemUsage;
		targetPort.isReference = true;
		targetPort.featureNote.add(":>");
		targetPort.featureSpecialization.add("targetPort");
		targetPort.valuePart = s.targetPort.getEReference();
		t.body.add(targetPort);
	}
	//CommunicationMean -> EReference : targetPart
	if (s.targetPart.getEReference() != null){
		var targetPart = new SysMLine!ItemUsage;
		targetPart.isReference = true;
		targetPart.featureNote.add(":>");
		targetPart.featureSpecialization.add("targetPart");
		targetPart.valuePart = s.targetPart.getEReference();
		t.body.add(targetPart);
	}
	//CommunicationMean -> EReference : categories
	if (s.categories.getEReference() != null){
		var categories = new SysMLine!ItemUsage;
		categories.isReference = true;
		categories.featureNote.add(":>");
		categories.featureSpecialization.add("categories");
		categories.valuePart = s.categories.getEReference();
		t.body.add(categories);
	}
	//CommunicationMean -> EReference : allocatorPhysicalLinks
	if (s.allocatorPhysicalLinks.getEReference() != null){
		var allocatorPhysicalLinks = new SysMLine!ItemUsage;
		allocatorPhysicalLinks.isReference = true;
		allocatorPhysicalLinks.featureNote.add(":>");
		allocatorPhysicalLinks.featureSpecialization.add("allocatorPhysicalLinks");
		allocatorPhysicalLinks.valuePart = s.allocatorPhysicalLinks.getEReference();
		t.body.add(allocatorPhysicalLinks);
	}
	//CommunicationMean -> EReference : realizedComponentExchanges
	if (s.realizedComponentExchanges.getEReference() != null){
		var realizedComponentExchanges = new SysMLine!ItemUsage;
		realizedComponentExchanges.isReference = true;
		realizedComponentExchanges.featureNote.add(":>");
		realizedComponentExchanges.featureSpecialization.add("realizedComponentExchanges");
		realizedComponentExchanges.valuePart = s.realizedComponentExchanges.getEReference();
		t.body.add(realizedComponentExchanges);
	}
	//CommunicationMean -> EReference : realizingComponentExchanges
	if (s.realizingComponentExchanges.getEReference() != null){
		var realizingComponentExchanges = new SysMLine!ItemUsage;
		realizingComponentExchanges.isReference = true;
		realizingComponentExchanges.featureNote.add(":>");
		realizingComponentExchanges.featureSpecialization.add("realizingComponentExchanges");
		realizingComponentExchanges.valuePart = s.realizingComponentExchanges.getEReference();
		t.body.add(realizingComponentExchanges);
	}
	//CommunicationMean -> EReference : sourceEntity
	if (s.sourceEntity.getEReference() != null){
		var sourceEntity = new SysMLine!ItemUsage;
		sourceEntity.isReference = true;
		sourceEntity.featureNote.add(":>");
		sourceEntity.featureSpecialization.add("sourceEntity");
		sourceEntity.valuePart = s.sourceEntity.getEReference();
		t.body.add(sourceEntity);
	}
	//CommunicationMean -> EReference : targetEntity
	if (s.targetEntity.getEReference() != null){
		var targetEntity = new SysMLine!ItemUsage;
		targetEntity.isReference = true;
		targetEntity.featureNote.add(":>");
		targetEntity.featureSpecialization.add("targetEntity");
		targetEntity.valuePart = s.targetEntity.getEReference();
		t.body.add(targetEntity);
	}
}

@lazy
rule EntityOperationalCapabilityInvolvement
	transform s : DSL!EntityOperationalCapabilityInvolvement
	to t : SysMLine!ItemUsage
	extends Base{
	//EntityOperationalCapabilityInvolvement -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//EntityOperationalCapabilityInvolvement -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//EntityOperationalCapabilityInvolvement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//EntityOperationalCapabilityInvolvement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//EntityOperationalCapabilityInvolvement -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//EntityOperationalCapabilityInvolvement -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//EntityOperationalCapabilityInvolvement -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//EntityOperationalCapabilityInvolvement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//EntityOperationalCapabilityInvolvement -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//EntityOperationalCapabilityInvolvement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//EntityOperationalCapabilityInvolvement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//EntityOperationalCapabilityInvolvement -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//EntityOperationalCapabilityInvolvement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//EntityOperationalCapabilityInvolvement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//EntityOperationalCapabilityInvolvement -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//EntityOperationalCapabilityInvolvement -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//EntityOperationalCapabilityInvolvement -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//EntityOperationalCapabilityInvolvement -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//EntityOperationalCapabilityInvolvement -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//EntityOperationalCapabilityInvolvement -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//EntityOperationalCapabilityInvolvement -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//EntityOperationalCapabilityInvolvement -> EReference : involver
	if (s.involver.getEReference() != null){
		var involver = new SysMLine!ItemUsage;
		involver.isReference = true;
		involver.featureNote.add(":>");
		involver.featureSpecialization.add("involver");
		involver.valuePart = s.involver.getEReference();
		t.body.add(involver);
	}
	//EntityOperationalCapabilityInvolvement -> EReference : involved
	if (s.involved.getEReference() != null){
		var involved = new SysMLine!ItemUsage;
		involved.isReference = true;
		involved.featureNote.add(":>");
		involved.featureSpecialization.add("involved");
		involved.valuePart = s.involved.getEReference();
		t.body.add(involved);
	}
	//EntityOperationalCapabilityInvolvement -> EReference : entity
	if (s.entity.getEReference() != null){
		var entity = new SysMLine!ItemUsage;
		entity.isReference = true;
		entity.featureNote.add(":>");
		entity.featureSpecialization.add("entity");
		entity.valuePart = s.entity.getEReference();
		t.body.add(entity);
	}
	//EntityOperationalCapabilityInvolvement -> EReference : capability
	if (s.capability.getEReference() != null){
		var capability = new SysMLine!ItemUsage;
		capability.isReference = true;
		capability.featureNote.add(":>");
		capability.featureSpecialization.add("capability");
		capability.valuePart = s.capability.getEReference();
		t.body.add(capability);
	}
}


// ctx.ecore
@lazy
rule SystemAnalysis
	transform s : DSL!SystemAnalysis
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemAnalysis -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//SystemAnalysis -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//SystemAnalysis -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//SystemAnalysis -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//SystemAnalysis -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//SystemAnalysis -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//SystemAnalysis -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//SystemAnalysis -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//SystemAnalysis -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//SystemAnalysis -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//SystemAnalysis -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//SystemAnalysis -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//SystemAnalysis -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//SystemAnalysis -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//SystemAnalysis -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//SystemAnalysis -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//SystemAnalysis -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//SystemAnalysis -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//SystemAnalysis -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//SystemAnalysis -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//SystemAnalysis -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//SystemAnalysis -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//SystemAnalysis -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//SystemAnalysis -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//SystemAnalysis -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//SystemAnalysis -> EReference : ownedFunctionPkg
	if (s.ownedFunctionPkg.getEReference() != null){
		var ownedFunctionPkg = new SysMLine!ItemUsage;
		ownedFunctionPkg.isReference = true;
		ownedFunctionPkg.featureNote.add(":>");
		ownedFunctionPkg.featureSpecialization.add("ownedFunctionPkg");
		ownedFunctionPkg.valuePart = s.ownedFunctionPkg.getEReference();
		t.body.add(ownedFunctionPkg);
	}
	//SystemAnalysis -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null){
		var ownedComponentExchanges = new SysMLine!ItemUsage;
		ownedComponentExchanges.isReference = true;
		ownedComponentExchanges.featureNote.add(":>");
		ownedComponentExchanges.featureSpecialization.add("ownedComponentExchanges");
		ownedComponentExchanges.valuePart = s.ownedComponentExchanges.getEReference();
		t.body.add(ownedComponentExchanges);
	}
	//SystemAnalysis -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null){
		var ownedComponentExchangeCategories = new SysMLine!ItemUsage;
		ownedComponentExchangeCategories.isReference = true;
		ownedComponentExchangeCategories.featureNote.add(":>");
		ownedComponentExchangeCategories.featureSpecialization.add("ownedComponentExchangeCategories");
		ownedComponentExchangeCategories.valuePart = s.ownedComponentExchangeCategories.getEReference();
		t.body.add(ownedComponentExchangeCategories);
	}
	//SystemAnalysis -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null){
		var ownedFunctionalLinks = new SysMLine!ItemUsage;
		ownedFunctionalLinks.isReference = true;
		ownedFunctionalLinks.featureNote.add(":>");
		ownedFunctionalLinks.featureSpecialization.add("ownedFunctionalLinks");
		ownedFunctionalLinks.valuePart = s.ownedFunctionalLinks.getEReference();
		t.body.add(ownedFunctionalLinks);
	}
	//SystemAnalysis -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null){
		var ownedFunctionalAllocations = new SysMLine!ItemUsage;
		ownedFunctionalAllocations.isReference = true;
		ownedFunctionalAllocations.featureNote.add(":>");
		ownedFunctionalAllocations.featureSpecialization.add("ownedFunctionalAllocations");
		ownedFunctionalAllocations.valuePart = s.ownedFunctionalAllocations.getEReference();
		t.body.add(ownedFunctionalAllocations);
	}
	//SystemAnalysis -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null){
		var ownedComponentExchangeRealizations = new SysMLine!ItemUsage;
		ownedComponentExchangeRealizations.isReference = true;
		ownedComponentExchangeRealizations.featureNote.add(":>");
		ownedComponentExchangeRealizations.featureSpecialization.add("ownedComponentExchangeRealizations");
		ownedComponentExchangeRealizations.valuePart = s.ownedComponentExchangeRealizations.getEReference();
		t.body.add(ownedComponentExchangeRealizations);
	}
	//SystemAnalysis -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null){
		var ownedAbstractCapabilityPkg = new SysMLine!ItemUsage;
		ownedAbstractCapabilityPkg.isReference = true;
		ownedAbstractCapabilityPkg.featureNote.add(":>");
		ownedAbstractCapabilityPkg.featureSpecialization.add("ownedAbstractCapabilityPkg");
		ownedAbstractCapabilityPkg.valuePart = s.ownedAbstractCapabilityPkg.getEReference();
		t.body.add(ownedAbstractCapabilityPkg);
	}
	//SystemAnalysis -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null){
		var ownedInterfacePkg = new SysMLine!ItemUsage;
		ownedInterfacePkg.isReference = true;
		ownedInterfacePkg.featureNote.add(":>");
		ownedInterfacePkg.featureSpecialization.add("ownedInterfacePkg");
		ownedInterfacePkg.valuePart = s.ownedInterfacePkg.getEReference();
		t.body.add(ownedInterfacePkg);
	}
	//SystemAnalysis -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null){
		var ownedDataPkg = new SysMLine!ItemUsage;
		ownedDataPkg.isReference = true;
		ownedDataPkg.featureNote.add(":>");
		ownedDataPkg.featureSpecialization.add("ownedDataPkg");
		ownedDataPkg.valuePart = s.ownedDataPkg.getEReference();
		t.body.add(ownedDataPkg);
	}
	//SystemAnalysis -> EReference : provisionedArchitectureAllocations
	if (s.provisionedArchitectureAllocations.getEReference() != null){
		var provisionedArchitectureAllocations = new SysMLine!ItemUsage;
		provisionedArchitectureAllocations.isReference = true;
		provisionedArchitectureAllocations.featureNote.add(":>");
		provisionedArchitectureAllocations.featureSpecialization.add("provisionedArchitectureAllocations");
		provisionedArchitectureAllocations.valuePart = s.provisionedArchitectureAllocations.getEReference();
		t.body.add(provisionedArchitectureAllocations);
	}
	//SystemAnalysis -> EReference : provisioningArchitectureAllocations
	if (s.provisioningArchitectureAllocations.getEReference() != null){
		var provisioningArchitectureAllocations = new SysMLine!ItemUsage;
		provisioningArchitectureAllocations.isReference = true;
		provisioningArchitectureAllocations.featureNote.add(":>");
		provisioningArchitectureAllocations.featureSpecialization.add("provisioningArchitectureAllocations");
		provisioningArchitectureAllocations.valuePart = s.provisioningArchitectureAllocations.getEReference();
		t.body.add(provisioningArchitectureAllocations);
	}
	//SystemAnalysis -> EReference : allocatedArchitectures
	if (s.allocatedArchitectures.getEReference() != null){
		var allocatedArchitectures = new SysMLine!ItemUsage;
		allocatedArchitectures.isReference = true;
		allocatedArchitectures.featureNote.add(":>");
		allocatedArchitectures.featureSpecialization.add("allocatedArchitectures");
		allocatedArchitectures.valuePart = s.allocatedArchitectures.getEReference();
		t.body.add(allocatedArchitectures);
	}
	//SystemAnalysis -> EReference : allocatingArchitectures
	if (s.allocatingArchitectures.getEReference() != null){
		var allocatingArchitectures = new SysMLine!ItemUsage;
		allocatingArchitectures.isReference = true;
		allocatingArchitectures.featureNote.add(":>");
		allocatingArchitectures.featureSpecialization.add("allocatingArchitectures");
		allocatingArchitectures.valuePart = s.allocatingArchitectures.getEReference();
		t.body.add(allocatingArchitectures);
	}
	//SystemAnalysis -> EReference : system
	if (s.system.getEReference() != null){
		var system = new SysMLine!ItemUsage;
		system.isReference = true;
		system.featureNote.add(":>");
		system.featureSpecialization.add("system");
		system.valuePart = s.system.getEReference();
		t.body.add(system);
	}
	//SystemAnalysis -> EReference : ownedSystemComponentPkg
	if (s.ownedSystemComponentPkg.getEReference() != null){
		var ownedSystemComponentPkg = new SysMLine!ItemUsage;
		ownedSystemComponentPkg.isReference = true;
		ownedSystemComponentPkg.featureNote.add(":>");
		ownedSystemComponentPkg.featureSpecialization.add("ownedSystemComponentPkg");
		ownedSystemComponentPkg.valuePart = s.ownedSystemComponentPkg.getEReference();
		t.body.add(ownedSystemComponentPkg);
	}
	//SystemAnalysis -> EReference : ownedMissionPkg
	if (s.ownedMissionPkg.getEReference() != null){
		var ownedMissionPkg = new SysMLine!ItemUsage;
		ownedMissionPkg.isReference = true;
		ownedMissionPkg.featureNote.add(":>");
		ownedMissionPkg.featureSpecialization.add("ownedMissionPkg");
		ownedMissionPkg.valuePart = s.ownedMissionPkg.getEReference();
		t.body.add(ownedMissionPkg);
	}
	//SystemAnalysis -> EReference : containedCapabilityPkg
	if (s.containedCapabilityPkg.getEReference() != null){
		var containedCapabilityPkg = new SysMLine!ItemUsage;
		containedCapabilityPkg.isReference = true;
		containedCapabilityPkg.featureNote.add(":>");
		containedCapabilityPkg.featureSpecialization.add("containedCapabilityPkg");
		containedCapabilityPkg.valuePart = s.containedCapabilityPkg.getEReference();
		t.body.add(containedCapabilityPkg);
	}
	//SystemAnalysis -> EReference : containedSystemFunctionPkg
	if (s.containedSystemFunctionPkg.getEReference() != null){
		var containedSystemFunctionPkg = new SysMLine!ItemUsage;
		containedSystemFunctionPkg.isReference = true;
		containedSystemFunctionPkg.featureNote.add(":>");
		containedSystemFunctionPkg.featureSpecialization.add("containedSystemFunctionPkg");
		containedSystemFunctionPkg.valuePart = s.containedSystemFunctionPkg.getEReference();
		t.body.add(containedSystemFunctionPkg);
	}
	//SystemAnalysis -> EReference : ownedOperationalAnalysisRealizations
	if (s.ownedOperationalAnalysisRealizations.getEReference() != null){
		var ownedOperationalAnalysisRealizations = new SysMLine!ItemUsage;
		ownedOperationalAnalysisRealizations.isReference = true;
		ownedOperationalAnalysisRealizations.featureNote.add(":>");
		ownedOperationalAnalysisRealizations.featureSpecialization.add("ownedOperationalAnalysisRealizations");
		ownedOperationalAnalysisRealizations.valuePart = s.ownedOperationalAnalysisRealizations.getEReference();
		t.body.add(ownedOperationalAnalysisRealizations);
	}
	//SystemAnalysis -> EReference : allocatedOperationalAnalysisRealizations
	if (s.allocatedOperationalAnalysisRealizations.getEReference() != null){
		var allocatedOperationalAnalysisRealizations = new SysMLine!ItemUsage;
		allocatedOperationalAnalysisRealizations.isReference = true;
		allocatedOperationalAnalysisRealizations.featureNote.add(":>");
		allocatedOperationalAnalysisRealizations.featureSpecialization.add("allocatedOperationalAnalysisRealizations");
		allocatedOperationalAnalysisRealizations.valuePart = s.allocatedOperationalAnalysisRealizations.getEReference();
		t.body.add(allocatedOperationalAnalysisRealizations);
	}
	//SystemAnalysis -> EReference : allocatedOperationalAnalyses
	if (s.allocatedOperationalAnalyses.getEReference() != null){
		var allocatedOperationalAnalyses = new SysMLine!ItemUsage;
		allocatedOperationalAnalyses.isReference = true;
		allocatedOperationalAnalyses.featureNote.add(":>");
		allocatedOperationalAnalyses.featureSpecialization.add("allocatedOperationalAnalyses");
		allocatedOperationalAnalyses.valuePart = s.allocatedOperationalAnalyses.getEReference();
		t.body.add(allocatedOperationalAnalyses);
	}
	//SystemAnalysis -> EReference : allocatingLogicalArchitectures
	if (s.allocatingLogicalArchitectures.getEReference() != null){
		var allocatingLogicalArchitectures = new SysMLine!ItemUsage;
		allocatingLogicalArchitectures.isReference = true;
		allocatingLogicalArchitectures.featureNote.add(":>");
		allocatingLogicalArchitectures.featureSpecialization.add("allocatingLogicalArchitectures");
		allocatingLogicalArchitectures.valuePart = s.allocatingLogicalArchitectures.getEReference();
		t.body.add(allocatingLogicalArchitectures);
	}
}

@lazy
rule SystemFunction
	transform s : DSL!SystemFunction
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemFunction -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//SystemFunction -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//SystemFunction -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//SystemFunction -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//SystemFunction -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//SystemFunction -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//SystemFunction -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//SystemFunction -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//SystemFunction -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//SystemFunction -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null){
		var isStatic = new SysMLine!AttributeUsage;
		isStatic.featureNote.add(":>>");
		isStatic.featureSpecialization.add("isStatic");
		isStatic.valuePart = s.isStatic.getEAttribute();
		t.body.add(isStatic);
	}
	//SystemFunction -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null){
		var visibility = new SysMLine!AttributeUsage;
		visibility.featureNote.add(":>>");
		visibility.featureSpecialization.add("visibility");
		visibility.valuePart = s.visibility.getEAttribute();
		t.body.add(visibility);
	}
	//SystemFunction -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null){
		var ordered = new SysMLine!AttributeUsage;
		ordered.featureNote.add(":>>");
		ordered.featureSpecialization.add("ordered");
		ordered.valuePart = s.ordered.getEAttribute();
		t.body.add(ordered);
	}
	//SystemFunction -> EAttribute : unique
	if (s.unique.getEAttribute() != null){
		var unique = new SysMLine!AttributeUsage;
		unique.featureNote.add(":>>");
		unique.featureSpecialization.add("unique");
		unique.valuePart = s.unique.getEAttribute();
		t.body.add(unique);
	}
	//SystemFunction -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null){
		var minInclusive = new SysMLine!AttributeUsage;
		minInclusive.featureNote.add(":>>");
		minInclusive.featureSpecialization.add("minInclusive");
		minInclusive.valuePart = s.minInclusive.getEAttribute();
		t.body.add(minInclusive);
	}
	//SystemFunction -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null){
		var maxInclusive = new SysMLine!AttributeUsage;
		maxInclusive.featureNote.add(":>>");
		maxInclusive.featureSpecialization.add("maxInclusive");
		maxInclusive.valuePart = s.maxInclusive.getEAttribute();
		t.body.add(maxInclusive);
	}
	//SystemFunction -> EAttribute : final
	if (s.final.getEAttribute() != null){
		var final = new SysMLine!AttributeUsage;
		final.featureNote.add(":>>");
		final.featureSpecialization.add("final");
		final.valuePart = s.final.getEAttribute();
		t.body.add(final);
	}
	//SystemFunction -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null){
		var aggregationKind = new SysMLine!AttributeUsage;
		aggregationKind.featureNote.add(":>>");
		aggregationKind.featureSpecialization.add("aggregationKind");
		aggregationKind.valuePart = s.aggregationKind.getEAttribute();
		t.body.add(aggregationKind);
	}
	//SystemFunction -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null){
		var isDerived = new SysMLine!AttributeUsage;
		isDerived.featureNote.add(":>>");
		isDerived.featureSpecialization.add("isDerived");
		isDerived.valuePart = s.isDerived.getEAttribute();
		t.body.add(isDerived);
	}
	//SystemFunction -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null){
		var isReadOnly = new SysMLine!AttributeUsage;
		isReadOnly.featureNote.add(":>>");
		isReadOnly.featureSpecialization.add("isReadOnly");
		isReadOnly.valuePart = s.isReadOnly.getEAttribute();
		t.body.add(isReadOnly);
	}
	//SystemFunction -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null){
		var isPartOfKey = new SysMLine!AttributeUsage;
		isPartOfKey.featureNote.add(":>>");
		isPartOfKey.featureSpecialization.add("isPartOfKey");
		isPartOfKey.valuePart = s.isPartOfKey.getEAttribute();
		t.body.add(isPartOfKey);
	}
	//SystemFunction -> EAttribute : kind
	if (s.kind.getEAttribute() != null){
		var kind = new SysMLine!AttributeUsage;
		kind.featureNote.add(":>>");
		kind.featureSpecialization.add("kind");
		kind.valuePart = s.kind.getEAttribute();
		t.body.add(kind);
	}
	//SystemFunction -> EAttribute : condition
	if (s.condition.getEAttribute() != null){
		var condition = new SysMLine!AttributeUsage;
		condition.featureNote.add(":>>");
		condition.featureSpecialization.add("condition");
		condition.valuePart = s.condition.getEAttribute();
		t.body.add(condition);
	}
	//SystemFunction -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//SystemFunction -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//SystemFunction -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//SystemFunction -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//SystemFunction -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//SystemFunction -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//SystemFunction -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//SystemFunction -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//SystemFunction -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//SystemFunction -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//SystemFunction -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//SystemFunction -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//SystemFunction -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//SystemFunction -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//SystemFunction -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//SystemFunction -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//SystemFunction -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null){
		var involvingInvolvements = new SysMLine!ItemUsage;
		involvingInvolvements.isReference = true;
		involvingInvolvements.featureNote.add(":>");
		involvingInvolvements.featureSpecialization.add("involvingInvolvements");
		involvingInvolvements.valuePart = s.involvingInvolvements.getEReference();
		t.body.add(involvingInvolvements);
	}
	//SystemFunction -> EReference : abstractType
	if (s.abstractType.getEReference() != null){
		var abstractType = new SysMLine!ItemUsage;
		abstractType.isReference = true;
		abstractType.featureNote.add(":>");
		abstractType.featureSpecialization.add("abstractType");
		abstractType.valuePart = s.abstractType.getEReference();
		t.body.add(abstractType);
	}
	//SystemFunction -> EReference : type
	if (s.type.getEReference() != null){
		var type = new SysMLine!ItemUsage;
		type.isReference = true;
		type.featureNote.add(":>");
		type.featureSpecialization.add("type");
		type.valuePart = s.type.getEReference();
		t.body.add(type);
	}
	//SystemFunction -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null){
		var ownedDefaultValue = new SysMLine!ItemUsage;
		ownedDefaultValue.isReference = true;
		ownedDefaultValue.featureNote.add(":>");
		ownedDefaultValue.featureSpecialization.add("ownedDefaultValue");
		ownedDefaultValue.valuePart = s.ownedDefaultValue.getEReference();
		t.body.add(ownedDefaultValue);
	}
	//SystemFunction -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null){
		var ownedMinValue = new SysMLine!ItemUsage;
		ownedMinValue.isReference = true;
		ownedMinValue.featureNote.add(":>");
		ownedMinValue.featureSpecialization.add("ownedMinValue");
		ownedMinValue.valuePart = s.ownedMinValue.getEReference();
		t.body.add(ownedMinValue);
	}
	//SystemFunction -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null){
		var ownedMaxValue = new SysMLine!ItemUsage;
		ownedMaxValue.isReference = true;
		ownedMaxValue.featureNote.add(":>");
		ownedMaxValue.featureSpecialization.add("ownedMaxValue");
		ownedMaxValue.valuePart = s.ownedMaxValue.getEReference();
		t.body.add(ownedMaxValue);
	}
	//SystemFunction -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null){
		var ownedNullValue = new SysMLine!ItemUsage;
		ownedNullValue.isReference = true;
		ownedNullValue.featureNote.add(":>");
		ownedNullValue.featureSpecialization.add("ownedNullValue");
		ownedNullValue.valuePart = s.ownedNullValue.getEReference();
		t.body.add(ownedNullValue);
	}
	//SystemFunction -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null){
		var ownedMinCard = new SysMLine!ItemUsage;
		ownedMinCard.isReference = true;
		ownedMinCard.featureNote.add(":>");
		ownedMinCard.featureSpecialization.add("ownedMinCard");
		ownedMinCard.valuePart = s.ownedMinCard.getEReference();
		t.body.add(ownedMinCard);
	}
	//SystemFunction -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null){
		var ownedMinLength = new SysMLine!ItemUsage;
		ownedMinLength.isReference = true;
		ownedMinLength.featureNote.add(":>");
		ownedMinLength.featureSpecialization.add("ownedMinLength");
		ownedMinLength.valuePart = s.ownedMinLength.getEReference();
		t.body.add(ownedMinLength);
	}
	//SystemFunction -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null){
		var ownedMaxCard = new SysMLine!ItemUsage;
		ownedMaxCard.isReference = true;
		ownedMaxCard.featureNote.add(":>");
		ownedMaxCard.featureSpecialization.add("ownedMaxCard");
		ownedMaxCard.valuePart = s.ownedMaxCard.getEReference();
		t.body.add(ownedMaxCard);
	}
	//SystemFunction -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null){
		var ownedMaxLength = new SysMLine!ItemUsage;
		ownedMaxLength.isReference = true;
		ownedMaxLength.featureNote.add(":>");
		ownedMaxLength.featureSpecialization.add("ownedMaxLength");
		ownedMaxLength.valuePart = s.ownedMaxLength.getEReference();
		t.body.add(ownedMaxLength);
	}
	//SystemFunction -> EReference : association
	if (s.association.getEReference() != null){
		var association = new SysMLine!ItemUsage;
		association.isReference = true;
		association.featureNote.add(":>");
		association.featureSpecialization.add("association");
		association.valuePart = s.association.getEReference();
		t.body.add(association);
	}
	//SystemFunction -> EReference : representingInstanceRoles
	if (s.representingInstanceRoles.getEReference() != null){
		var representingInstanceRoles = new SysMLine!ItemUsage;
		representingInstanceRoles.isReference = true;
		representingInstanceRoles.featureNote.add(":>");
		representingInstanceRoles.featureSpecialization.add("representingInstanceRoles");
		representingInstanceRoles.valuePart = s.representingInstanceRoles.getEReference();
		t.body.add(representingInstanceRoles);
	}
	//SystemFunction -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null){
		var ownedFunctionalChains = new SysMLine!ItemUsage;
		ownedFunctionalChains.isReference = true;
		ownedFunctionalChains.featureNote.add(":>");
		ownedFunctionalChains.featureSpecialization.add("ownedFunctionalChains");
		ownedFunctionalChains.valuePart = s.ownedFunctionalChains.getEReference();
		t.body.add(ownedFunctionalChains);
	}
	//SystemFunction -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null){
		var inActivityPartition = new SysMLine!ItemUsage;
		inActivityPartition.isReference = true;
		inActivityPartition.featureNote.add(":>");
		inActivityPartition.featureSpecialization.add("inActivityPartition");
		inActivityPartition.valuePart = s.inActivityPartition.getEReference();
		t.body.add(inActivityPartition);
	}
	//SystemFunction -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null){
		var inInterruptibleRegion = new SysMLine!ItemUsage;
		inInterruptibleRegion.isReference = true;
		inInterruptibleRegion.featureNote.add(":>");
		inInterruptibleRegion.featureSpecialization.add("inInterruptibleRegion");
		inInterruptibleRegion.valuePart = s.inInterruptibleRegion.getEReference();
		t.body.add(inInterruptibleRegion);
	}
	//SystemFunction -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null){
		var inStructuredNode = new SysMLine!ItemUsage;
		inStructuredNode.isReference = true;
		inStructuredNode.featureNote.add(":>");
		inStructuredNode.featureSpecialization.add("inStructuredNode");
		inStructuredNode.valuePart = s.inStructuredNode.getEReference();
		t.body.add(inStructuredNode);
	}
	//SystemFunction -> EReference : outgoing
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMLine!ItemUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	//SystemFunction -> EReference : incoming
	if (s.incoming.getEReference() != null){
		var incoming = new SysMLine!ItemUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	//SystemFunction -> EReference : ownedHandlers
	if (s.ownedHandlers.getEReference() != null){
		var ownedHandlers = new SysMLine!ItemUsage;
		ownedHandlers.isReference = true;
		ownedHandlers.featureNote.add(":>");
		ownedHandlers.featureSpecialization.add("ownedHandlers");
		ownedHandlers.valuePart = s.ownedHandlers.getEReference();
		t.body.add(ownedHandlers);
	}
	//SystemFunction -> EReference : localPrecondition
	if (s.localPrecondition.getEReference() != null){
		var localPrecondition = new SysMLine!ItemUsage;
		localPrecondition.isReference = true;
		localPrecondition.featureNote.add(":>");
		localPrecondition.featureSpecialization.add("localPrecondition");
		localPrecondition.valuePart = s.localPrecondition.getEReference();
		t.body.add(localPrecondition);
	}
	//SystemFunction -> EReference : localPostcondition
	if (s.localPostcondition.getEReference() != null){
		var localPostcondition = new SysMLine!ItemUsage;
		localPostcondition.isReference = true;
		localPostcondition.featureNote.add(":>");
		localPostcondition.featureSpecialization.add("localPostcondition");
		localPostcondition.valuePart = s.localPostcondition.getEReference();
		t.body.add(localPostcondition);
	}
	//SystemFunction -> EReference : context
	if (s.context.getEReference() != null){
		var context = new SysMLine!ItemUsage;
		context.isReference = true;
		context.featureNote.add(":>");
		context.featureSpecialization.add("context");
		context.valuePart = s.context.getEReference();
		t.body.add(context);
	}
	//SystemFunction -> EReference : inputs
	if (s.inputs.getEReference() != null){
		var inputs = new SysMLine!ItemUsage;
		inputs.isReference = true;
		inputs.featureNote.add(":>");
		inputs.featureSpecialization.add("inputs");
		inputs.valuePart = s.inputs.getEReference();
		t.body.add(inputs);
	}
	//SystemFunction -> EReference : outputs
	if (s.outputs.getEReference() != null){
		var outputs = new SysMLine!ItemUsage;
		outputs.isReference = true;
		outputs.featureNote.add(":>");
		outputs.featureSpecialization.add("outputs");
		outputs.valuePart = s.outputs.getEReference();
		t.body.add(outputs);
	}
	//SystemFunction -> EReference : arguments
	if (s.arguments.getEReference() != null){
		var arguments = new SysMLine!ItemUsage;
		arguments.isReference = true;
		arguments.featureNote.add(":>");
		arguments.featureSpecialization.add("arguments");
		arguments.valuePart = s.arguments.getEReference();
		t.body.add(arguments);
	}
	//SystemFunction -> EReference : results
	if (s.results.getEReference() != null){
		var results = new SysMLine!ItemUsage;
		results.isReference = true;
		results.featureNote.add(":>");
		results.featureSpecialization.add("results");
		results.valuePart = s.results.getEReference();
		t.body.add(results);
	}
	//SystemFunction -> EReference : behavior
	if (s.behavior.getEReference() != null){
		var behavior = new SysMLine!ItemUsage;
		behavior.isReference = true;
		behavior.featureNote.add(":>");
		behavior.featureSpecialization.add("behavior");
		behavior.valuePart = s.behavior.getEReference();
		t.body.add(behavior);
	}
	//SystemFunction -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null){
		var abstractTypedElements = new SysMLine!ItemUsage;
		abstractTypedElements.isReference = true;
		abstractTypedElements.featureNote.add(":>");
		abstractTypedElements.featureSpecialization.add("abstractTypedElements");
		abstractTypedElements.valuePart = s.abstractTypedElements.getEReference();
		t.body.add(abstractTypedElements);
	}
	//SystemFunction -> EReference : ownedFunctions
	if (s.ownedFunctions.getEReference() != null){
		var ownedFunctions = new SysMLine!ItemUsage;
		ownedFunctions.isReference = true;
		ownedFunctions.featureNote.add(":>");
		ownedFunctions.featureSpecialization.add("ownedFunctions");
		ownedFunctions.valuePart = s.ownedFunctions.getEReference();
		t.body.add(ownedFunctions);
	}
	//SystemFunction -> EReference : ownedFunctionRealizations
	if (s.ownedFunctionRealizations.getEReference() != null){
		var ownedFunctionRealizations = new SysMLine!ItemUsage;
		ownedFunctionRealizations.isReference = true;
		ownedFunctionRealizations.featureNote.add(":>");
		ownedFunctionRealizations.featureSpecialization.add("ownedFunctionRealizations");
		ownedFunctionRealizations.valuePart = s.ownedFunctionRealizations.getEReference();
		t.body.add(ownedFunctionRealizations);
	}
	//SystemFunction -> EReference : ownedFunctionalExchanges
	if (s.ownedFunctionalExchanges.getEReference() != null){
		var ownedFunctionalExchanges = new SysMLine!ItemUsage;
		ownedFunctionalExchanges.isReference = true;
		ownedFunctionalExchanges.featureNote.add(":>");
		ownedFunctionalExchanges.featureSpecialization.add("ownedFunctionalExchanges");
		ownedFunctionalExchanges.valuePart = s.ownedFunctionalExchanges.getEReference();
		t.body.add(ownedFunctionalExchanges);
	}
	//SystemFunction -> EReference : subFunctions
	if (s.subFunctions.getEReference() != null){
		var subFunctions = new SysMLine!ItemUsage;
		subFunctions.isReference = true;
		subFunctions.featureNote.add(":>");
		subFunctions.featureSpecialization.add("subFunctions");
		subFunctions.valuePart = s.subFunctions.getEReference();
		t.body.add(subFunctions);
	}
	//SystemFunction -> EReference : outFunctionRealizations
	if (s.outFunctionRealizations.getEReference() != null){
		var outFunctionRealizations = new SysMLine!ItemUsage;
		outFunctionRealizations.isReference = true;
		outFunctionRealizations.featureNote.add(":>");
		outFunctionRealizations.featureSpecialization.add("outFunctionRealizations");
		outFunctionRealizations.valuePart = s.outFunctionRealizations.getEReference();
		t.body.add(outFunctionRealizations);
	}
	//SystemFunction -> EReference : inFunctionRealizations
	if (s.inFunctionRealizations.getEReference() != null){
		var inFunctionRealizations = new SysMLine!ItemUsage;
		inFunctionRealizations.isReference = true;
		inFunctionRealizations.featureNote.add(":>");
		inFunctionRealizations.featureSpecialization.add("inFunctionRealizations");
		inFunctionRealizations.valuePart = s.inFunctionRealizations.getEReference();
		t.body.add(inFunctionRealizations);
	}
	//SystemFunction -> EReference : componentFunctionalAllocations
	if (s.componentFunctionalAllocations.getEReference() != null){
		var componentFunctionalAllocations = new SysMLine!ItemUsage;
		componentFunctionalAllocations.isReference = true;
		componentFunctionalAllocations.featureNote.add(":>");
		componentFunctionalAllocations.featureSpecialization.add("componentFunctionalAllocations");
		componentFunctionalAllocations.valuePart = s.componentFunctionalAllocations.getEReference();
		t.body.add(componentFunctionalAllocations);
	}
	//SystemFunction -> EReference : allocationBlocks
	if (s.allocationBlocks.getEReference() != null){
		var allocationBlocks = new SysMLine!ItemUsage;
		allocationBlocks.isReference = true;
		allocationBlocks.featureNote.add(":>");
		allocationBlocks.featureSpecialization.add("allocationBlocks");
		allocationBlocks.valuePart = s.allocationBlocks.getEReference();
		t.body.add(allocationBlocks);
	}
	//SystemFunction -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null){
		var availableInStates = new SysMLine!ItemUsage;
		availableInStates.isReference = true;
		availableInStates.featureNote.add(":>");
		availableInStates.featureSpecialization.add("availableInStates");
		availableInStates.valuePart = s.availableInStates.getEReference();
		t.body.add(availableInStates);
	}
	//SystemFunction -> EReference : involvingCapabilities
	if (s.involvingCapabilities.getEReference() != null){
		var involvingCapabilities = new SysMLine!ItemUsage;
		involvingCapabilities.isReference = true;
		involvingCapabilities.featureNote.add(":>");
		involvingCapabilities.featureSpecialization.add("involvingCapabilities");
		involvingCapabilities.valuePart = s.involvingCapabilities.getEReference();
		t.body.add(involvingCapabilities);
	}
	//SystemFunction -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null){
		var involvingCapabilityRealizations = new SysMLine!ItemUsage;
		involvingCapabilityRealizations.isReference = true;
		involvingCapabilityRealizations.featureNote.add(":>");
		involvingCapabilityRealizations.featureSpecialization.add("involvingCapabilityRealizations");
		involvingCapabilityRealizations.valuePart = s.involvingCapabilityRealizations.getEReference();
		t.body.add(involvingCapabilityRealizations);
	}
	//SystemFunction -> EReference : involvingFunctionalChains
	if (s.involvingFunctionalChains.getEReference() != null){
		var involvingFunctionalChains = new SysMLine!ItemUsage;
		involvingFunctionalChains.isReference = true;
		involvingFunctionalChains.featureNote.add(":>");
		involvingFunctionalChains.featureSpecialization.add("involvingFunctionalChains");
		involvingFunctionalChains.valuePart = s.involvingFunctionalChains.getEReference();
		t.body.add(involvingFunctionalChains);
	}
	//SystemFunction -> EReference : linkedStateMachine
	if (s.linkedStateMachine.getEReference() != null){
		var linkedStateMachine = new SysMLine!ItemUsage;
		linkedStateMachine.isReference = true;
		linkedStateMachine.featureNote.add(":>");
		linkedStateMachine.featureSpecialization.add("linkedStateMachine");
		linkedStateMachine.valuePart = s.linkedStateMachine.getEReference();
		t.body.add(linkedStateMachine);
	}
	//SystemFunction -> EReference : linkedFunctionSpecification
	if (s.linkedFunctionSpecification.getEReference() != null){
		var linkedFunctionSpecification = new SysMLine!ItemUsage;
		linkedFunctionSpecification.isReference = true;
		linkedFunctionSpecification.featureNote.add(":>");
		linkedFunctionSpecification.featureSpecialization.add("linkedFunctionSpecification");
		linkedFunctionSpecification.valuePart = s.linkedFunctionSpecification.getEReference();
		t.body.add(linkedFunctionSpecification);
	}
	//SystemFunction -> EReference : ownedSystemFunctionPkgs
	if (s.ownedSystemFunctionPkgs.getEReference() != null){
		var ownedSystemFunctionPkgs = new SysMLine!ItemUsage;
		ownedSystemFunctionPkgs.isReference = true;
		ownedSystemFunctionPkgs.featureNote.add(":>");
		ownedSystemFunctionPkgs.featureSpecialization.add("ownedSystemFunctionPkgs");
		ownedSystemFunctionPkgs.valuePart = s.ownedSystemFunctionPkgs.getEReference();
		t.body.add(ownedSystemFunctionPkgs);
	}
	//SystemFunction -> EReference : allocatingSystemComponents
	if (s.allocatingSystemComponents.getEReference() != null){
		var allocatingSystemComponents = new SysMLine!ItemUsage;
		allocatingSystemComponents.isReference = true;
		allocatingSystemComponents.featureNote.add(":>");
		allocatingSystemComponents.featureSpecialization.add("allocatingSystemComponents");
		allocatingSystemComponents.valuePart = s.allocatingSystemComponents.getEReference();
		t.body.add(allocatingSystemComponents);
	}
	//SystemFunction -> EReference : realizedOperationalActivities
	if (s.realizedOperationalActivities.getEReference() != null){
		var realizedOperationalActivities = new SysMLine!ItemUsage;
		realizedOperationalActivities.isReference = true;
		realizedOperationalActivities.featureNote.add(":>");
		realizedOperationalActivities.featureSpecialization.add("realizedOperationalActivities");
		realizedOperationalActivities.valuePart = s.realizedOperationalActivities.getEReference();
		t.body.add(realizedOperationalActivities);
	}
	//SystemFunction -> EReference : realizingLogicalFunctions
	if (s.realizingLogicalFunctions.getEReference() != null){
		var realizingLogicalFunctions = new SysMLine!ItemUsage;
		realizingLogicalFunctions.isReference = true;
		realizingLogicalFunctions.featureNote.add(":>");
		realizingLogicalFunctions.featureSpecialization.add("realizingLogicalFunctions");
		realizingLogicalFunctions.valuePart = s.realizingLogicalFunctions.getEReference();
		t.body.add(realizingLogicalFunctions);
	}
	//SystemFunction -> EReference : containedSystemFunctions
	if (s.containedSystemFunctions.getEReference() != null){
		var containedSystemFunctions = new SysMLine!ItemUsage;
		containedSystemFunctions.isReference = true;
		containedSystemFunctions.featureNote.add(":>");
		containedSystemFunctions.featureSpecialization.add("containedSystemFunctions");
		containedSystemFunctions.valuePart = s.containedSystemFunctions.getEReference();
		t.body.add(containedSystemFunctions);
	}
	//SystemFunction -> EReference : childrenSystemFunctions
	if (s.childrenSystemFunctions.getEReference() != null){
		var childrenSystemFunctions = new SysMLine!ItemUsage;
		childrenSystemFunctions.isReference = true;
		childrenSystemFunctions.featureNote.add(":>");
		childrenSystemFunctions.featureSpecialization.add("childrenSystemFunctions");
		childrenSystemFunctions.valuePart = s.childrenSystemFunctions.getEReference();
		t.body.add(childrenSystemFunctions);
	}
}

@lazy
rule SystemFunctionPkg
	transform s : DSL!SystemFunctionPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemFunctionPkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//SystemFunctionPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//SystemFunctionPkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//SystemFunctionPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//SystemFunctionPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//SystemFunctionPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//SystemFunctionPkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//SystemFunctionPkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//SystemFunctionPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//SystemFunctionPkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//SystemFunctionPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//SystemFunctionPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//SystemFunctionPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//SystemFunctionPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//SystemFunctionPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//SystemFunctionPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//SystemFunctionPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//SystemFunctionPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//SystemFunctionPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//SystemFunctionPkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//SystemFunctionPkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//SystemFunctionPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//SystemFunctionPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//SystemFunctionPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//SystemFunctionPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//SystemFunctionPkg -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null){
		var ownedFunctionalLinks = new SysMLine!ItemUsage;
		ownedFunctionalLinks.isReference = true;
		ownedFunctionalLinks.featureNote.add(":>");
		ownedFunctionalLinks.featureSpecialization.add("ownedFunctionalLinks");
		ownedFunctionalLinks.valuePart = s.ownedFunctionalLinks.getEReference();
		t.body.add(ownedFunctionalLinks);
	}
	//SystemFunctionPkg -> EReference : ownedExchanges
	if (s.ownedExchanges.getEReference() != null){
		var ownedExchanges = new SysMLine!ItemUsage;
		ownedExchanges.isReference = true;
		ownedExchanges.featureNote.add(":>");
		ownedExchanges.featureSpecialization.add("ownedExchanges");
		ownedExchanges.valuePart = s.ownedExchanges.getEReference();
		t.body.add(ownedExchanges);
	}
	//SystemFunctionPkg -> EReference : ownedExchangeSpecificationRealizations
	if (s.ownedExchangeSpecificationRealizations.getEReference() != null){
		var ownedExchangeSpecificationRealizations = new SysMLine!ItemUsage;
		ownedExchangeSpecificationRealizations.isReference = true;
		ownedExchangeSpecificationRealizations.featureNote.add(":>");
		ownedExchangeSpecificationRealizations.featureSpecialization.add("ownedExchangeSpecificationRealizations");
		ownedExchangeSpecificationRealizations.valuePart = s.ownedExchangeSpecificationRealizations.getEReference();
		t.body.add(ownedExchangeSpecificationRealizations);
	}
	//SystemFunctionPkg -> EReference : ownedCategories
	if (s.ownedCategories.getEReference() != null){
		var ownedCategories = new SysMLine!ItemUsage;
		ownedCategories.isReference = true;
		ownedCategories.featureNote.add(":>");
		ownedCategories.featureSpecialization.add("ownedCategories");
		ownedCategories.valuePart = s.ownedCategories.getEReference();
		t.body.add(ownedCategories);
	}
	//SystemFunctionPkg -> EReference : ownedFunctionSpecifications
	if (s.ownedFunctionSpecifications.getEReference() != null){
		var ownedFunctionSpecifications = new SysMLine!ItemUsage;
		ownedFunctionSpecifications.isReference = true;
		ownedFunctionSpecifications.featureNote.add(":>");
		ownedFunctionSpecifications.featureSpecialization.add("ownedFunctionSpecifications");
		ownedFunctionSpecifications.valuePart = s.ownedFunctionSpecifications.getEReference();
		t.body.add(ownedFunctionSpecifications);
	}
	//SystemFunctionPkg -> EReference : ownedSystemFunctions
	if (s.ownedSystemFunctions.getEReference() != null){
		var ownedSystemFunctions = new SysMLine!ItemUsage;
		ownedSystemFunctions.isReference = true;
		ownedSystemFunctions.featureNote.add(":>");
		ownedSystemFunctions.featureSpecialization.add("ownedSystemFunctions");
		ownedSystemFunctions.valuePart = s.ownedSystemFunctions.getEReference();
		t.body.add(ownedSystemFunctions);
	}
	//SystemFunctionPkg -> EReference : ownedSystemFunctionPkgs
	if (s.ownedSystemFunctionPkgs.getEReference() != null){
		var ownedSystemFunctionPkgs = new SysMLine!ItemUsage;
		ownedSystemFunctionPkgs.isReference = true;
		ownedSystemFunctionPkgs.featureNote.add(":>");
		ownedSystemFunctionPkgs.featureSpecialization.add("ownedSystemFunctionPkgs");
		ownedSystemFunctionPkgs.valuePart = s.ownedSystemFunctionPkgs.getEReference();
		t.body.add(ownedSystemFunctionPkgs);
	}
}

@lazy
rule SystemCommunicationHook
	transform s : DSL!SystemCommunicationHook
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemCommunicationHook -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//SystemCommunicationHook -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//SystemCommunicationHook -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//SystemCommunicationHook -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//SystemCommunicationHook -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//SystemCommunicationHook -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//SystemCommunicationHook -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//SystemCommunicationHook -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//SystemCommunicationHook -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//SystemCommunicationHook -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//SystemCommunicationHook -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//SystemCommunicationHook -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//SystemCommunicationHook -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//SystemCommunicationHook -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//SystemCommunicationHook -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//SystemCommunicationHook -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//SystemCommunicationHook -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//SystemCommunicationHook -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//SystemCommunicationHook -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//SystemCommunicationHook -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//SystemCommunicationHook -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//SystemCommunicationHook -> EReference : communication
	if (s.communication.getEReference() != null){
		var communication = new SysMLine!ItemUsage;
		communication.isReference = true;
		communication.featureNote.add(":>");
		communication.featureSpecialization.add("communication");
		communication.valuePart = s.communication.getEReference();
		t.body.add(communication);
	}
	//SystemCommunicationHook -> EReference : type
	if (s.type.getEReference() != null){
		var type = new SysMLine!ItemUsage;
		type.isReference = true;
		type.featureNote.add(":>");
		type.featureSpecialization.add("type");
		type.valuePart = s.type.getEReference();
		t.body.add(type);
	}
}

@lazy
rule SystemCommunication
	transform s : DSL!SystemCommunication
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemCommunication -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//SystemCommunication -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//SystemCommunication -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//SystemCommunication -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//SystemCommunication -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//SystemCommunication -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//SystemCommunication -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//SystemCommunication -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//SystemCommunication -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//SystemCommunication -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//SystemCommunication -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//SystemCommunication -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//SystemCommunication -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//SystemCommunication -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//SystemCommunication -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//SystemCommunication -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//SystemCommunication -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//SystemCommunication -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//SystemCommunication -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//SystemCommunication -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//SystemCommunication -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//SystemCommunication -> EReference : ends
	if (s.ends.getEReference() != null){
		var ends = new SysMLine!ItemUsage;
		ends.isReference = true;
		ends.featureNote.add(":>");
		ends.featureSpecialization.add("ends");
		ends.valuePart = s.ends.getEReference();
		t.body.add(ends);
	}
}

@lazy
rule CapabilityInvolvement
	transform s : DSL!CapabilityInvolvement
	to t : SysMLine!ItemUsage
	extends Base{
	//CapabilityInvolvement -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//CapabilityInvolvement -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//CapabilityInvolvement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//CapabilityInvolvement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//CapabilityInvolvement -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//CapabilityInvolvement -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//CapabilityInvolvement -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//CapabilityInvolvement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//CapabilityInvolvement -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//CapabilityInvolvement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//CapabilityInvolvement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//CapabilityInvolvement -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//CapabilityInvolvement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//CapabilityInvolvement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//CapabilityInvolvement -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//CapabilityInvolvement -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//CapabilityInvolvement -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//CapabilityInvolvement -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//CapabilityInvolvement -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//CapabilityInvolvement -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//CapabilityInvolvement -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//CapabilityInvolvement -> EReference : involver
	if (s.involver.getEReference() != null){
		var involver = new SysMLine!ItemUsage;
		involver.isReference = true;
		involver.featureNote.add(":>");
		involver.featureSpecialization.add("involver");
		involver.valuePart = s.involver.getEReference();
		t.body.add(involver);
	}
	//CapabilityInvolvement -> EReference : involved
	if (s.involved.getEReference() != null){
		var involved = new SysMLine!ItemUsage;
		involved.isReference = true;
		involved.featureNote.add(":>");
		involved.featureSpecialization.add("involved");
		involved.valuePart = s.involved.getEReference();
		t.body.add(involved);
	}
	//CapabilityInvolvement -> EReference : systemComponent
	if (s.systemComponent.getEReference() != null){
		var systemComponent = new SysMLine!ItemUsage;
		systemComponent.isReference = true;
		systemComponent.featureNote.add(":>");
		systemComponent.featureSpecialization.add("systemComponent");
		systemComponent.valuePart = s.systemComponent.getEReference();
		t.body.add(systemComponent);
	}
	//CapabilityInvolvement -> EReference : capability
	if (s.capability.getEReference() != null){
		var capability = new SysMLine!ItemUsage;
		capability.isReference = true;
		capability.featureNote.add(":>");
		capability.featureSpecialization.add("capability");
		capability.valuePart = s.capability.getEReference();
		t.body.add(capability);
	}
}

@lazy
rule MissionInvolvement
	transform s : DSL!MissionInvolvement
	to t : SysMLine!ItemUsage
	extends Base{
	//MissionInvolvement -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//MissionInvolvement -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//MissionInvolvement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//MissionInvolvement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//MissionInvolvement -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//MissionInvolvement -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//MissionInvolvement -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//MissionInvolvement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//MissionInvolvement -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//MissionInvolvement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//MissionInvolvement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//MissionInvolvement -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//MissionInvolvement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//MissionInvolvement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//MissionInvolvement -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//MissionInvolvement -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//MissionInvolvement -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//MissionInvolvement -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//MissionInvolvement -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//MissionInvolvement -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//MissionInvolvement -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//MissionInvolvement -> EReference : involver
	if (s.involver.getEReference() != null){
		var involver = new SysMLine!ItemUsage;
		involver.isReference = true;
		involver.featureNote.add(":>");
		involver.featureSpecialization.add("involver");
		involver.valuePart = s.involver.getEReference();
		t.body.add(involver);
	}
	//MissionInvolvement -> EReference : involved
	if (s.involved.getEReference() != null){
		var involved = new SysMLine!ItemUsage;
		involved.isReference = true;
		involved.featureNote.add(":>");
		involved.featureSpecialization.add("involved");
		involved.valuePart = s.involved.getEReference();
		t.body.add(involved);
	}
	//MissionInvolvement -> EReference : systemComponent
	if (s.systemComponent.getEReference() != null){
		var systemComponent = new SysMLine!ItemUsage;
		systemComponent.isReference = true;
		systemComponent.featureNote.add(":>");
		systemComponent.featureSpecialization.add("systemComponent");
		systemComponent.valuePart = s.systemComponent.getEReference();
		t.body.add(systemComponent);
	}
	//MissionInvolvement -> EReference : mission
	if (s.mission.getEReference() != null){
		var mission = new SysMLine!ItemUsage;
		mission.isReference = true;
		mission.featureNote.add(":>");
		mission.featureSpecialization.add("mission");
		mission.valuePart = s.mission.getEReference();
		t.body.add(mission);
	}
}

@lazy
rule Mission
	transform s : DSL!Mission
	to t : SysMLine!ItemUsage
	extends Base{
	//Mission -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//Mission -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//Mission -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//Mission -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//Mission -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//Mission -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//Mission -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//Mission -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//Mission -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//Mission -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//Mission -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//Mission -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//Mission -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//Mission -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//Mission -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//Mission -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//Mission -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//Mission -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//Mission -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//Mission -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//Mission -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//Mission -> EReference : involvedInvolvements
	if (s.involvedInvolvements.getEReference() != null){
		var involvedInvolvements = new SysMLine!ItemUsage;
		involvedInvolvements.isReference = true;
		involvedInvolvements.featureNote.add(":>");
		involvedInvolvements.featureSpecialization.add("involvedInvolvements");
		involvedInvolvements.valuePart = s.involvedInvolvements.getEReference();
		t.body.add(involvedInvolvements);
	}
	//Mission -> EReference : ownedMissionInvolvements
	if (s.ownedMissionInvolvements.getEReference() != null){
		var ownedMissionInvolvements = new SysMLine!ItemUsage;
		ownedMissionInvolvements.isReference = true;
		ownedMissionInvolvements.featureNote.add(":>");
		ownedMissionInvolvements.featureSpecialization.add("ownedMissionInvolvements");
		ownedMissionInvolvements.valuePart = s.ownedMissionInvolvements.getEReference();
		t.body.add(ownedMissionInvolvements);
	}
	//Mission -> EReference : involvedSystemComponents
	if (s.involvedSystemComponents.getEReference() != null){
		var involvedSystemComponents = new SysMLine!ItemUsage;
		involvedSystemComponents.isReference = true;
		involvedSystemComponents.featureNote.add(":>");
		involvedSystemComponents.featureSpecialization.add("involvedSystemComponents");
		involvedSystemComponents.valuePart = s.involvedSystemComponents.getEReference();
		t.body.add(involvedSystemComponents);
	}
	//Mission -> EReference : ownedCapabilityExploitations
	if (s.ownedCapabilityExploitations.getEReference() != null){
		var ownedCapabilityExploitations = new SysMLine!ItemUsage;
		ownedCapabilityExploitations.isReference = true;
		ownedCapabilityExploitations.featureNote.add(":>");
		ownedCapabilityExploitations.featureSpecialization.add("ownedCapabilityExploitations");
		ownedCapabilityExploitations.valuePart = s.ownedCapabilityExploitations.getEReference();
		t.body.add(ownedCapabilityExploitations);
	}
	//Mission -> EReference : exploitedCapabilities
	if (s.exploitedCapabilities.getEReference() != null){
		var exploitedCapabilities = new SysMLine!ItemUsage;
		exploitedCapabilities.isReference = true;
		exploitedCapabilities.featureNote.add(":>");
		exploitedCapabilities.featureSpecialization.add("exploitedCapabilities");
		exploitedCapabilities.valuePart = s.exploitedCapabilities.getEReference();
		t.body.add(exploitedCapabilities);
	}
}

@lazy
rule MissionPkg
	transform s : DSL!MissionPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//MissionPkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//MissionPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//MissionPkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//MissionPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//MissionPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//MissionPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//MissionPkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//MissionPkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//MissionPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//MissionPkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//MissionPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//MissionPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//MissionPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//MissionPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//MissionPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//MissionPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//MissionPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//MissionPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//MissionPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//MissionPkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//MissionPkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//MissionPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//MissionPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//MissionPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//MissionPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//MissionPkg -> EReference : ownedMissionPkgs
	if (s.ownedMissionPkgs.getEReference() != null){
		var ownedMissionPkgs = new SysMLine!ItemUsage;
		ownedMissionPkgs.isReference = true;
		ownedMissionPkgs.featureNote.add(":>");
		ownedMissionPkgs.featureSpecialization.add("ownedMissionPkgs");
		ownedMissionPkgs.valuePart = s.ownedMissionPkgs.getEReference();
		t.body.add(ownedMissionPkgs);
	}
	//MissionPkg -> EReference : ownedMissions
	if (s.ownedMissions.getEReference() != null){
		var ownedMissions = new SysMLine!ItemUsage;
		ownedMissions.isReference = true;
		ownedMissions.featureNote.add(":>");
		ownedMissions.featureSpecialization.add("ownedMissions");
		ownedMissions.valuePart = s.ownedMissions.getEReference();
		t.body.add(ownedMissions);
	}
}

@lazy
rule Capability
	transform s : DSL!Capability
	to t : SysMLine!ItemUsage
	extends Base{
	//Capability -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//Capability -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//Capability -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//Capability -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//Capability -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//Capability -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//Capability -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//Capability -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//Capability -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//Capability -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//Capability -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//Capability -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//Capability -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//Capability -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//Capability -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//Capability -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//Capability -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//Capability -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//Capability -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//Capability -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//Capability -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//Capability -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//Capability -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//Capability -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//Capability -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//Capability -> EReference : involvedInvolvements
	if (s.involvedInvolvements.getEReference() != null){
		var involvedInvolvements = new SysMLine!ItemUsage;
		involvedInvolvements.isReference = true;
		involvedInvolvements.featureNote.add(":>");
		involvedInvolvements.featureSpecialization.add("involvedInvolvements");
		involvedInvolvements.valuePart = s.involvedInvolvements.getEReference();
		t.body.add(involvedInvolvements);
	}
	//Capability -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null){
		var ownedFunctionalChains = new SysMLine!ItemUsage;
		ownedFunctionalChains.isReference = true;
		ownedFunctionalChains.featureNote.add(":>");
		ownedFunctionalChains.featureSpecialization.add("ownedFunctionalChains");
		ownedFunctionalChains.valuePart = s.ownedFunctionalChains.getEReference();
		t.body.add(ownedFunctionalChains);
	}
	//Capability -> EReference : preCondition
	if (s.preCondition.getEReference() != null){
		var preCondition = new SysMLine!ItemUsage;
		preCondition.isReference = true;
		preCondition.featureNote.add(":>");
		preCondition.featureSpecialization.add("preCondition");
		preCondition.valuePart = s.preCondition.getEReference();
		t.body.add(preCondition);
	}
	//Capability -> EReference : postCondition
	if (s.postCondition.getEReference() != null){
		var postCondition = new SysMLine!ItemUsage;
		postCondition.isReference = true;
		postCondition.featureNote.add(":>");
		postCondition.featureSpecialization.add("postCondition");
		postCondition.valuePart = s.postCondition.getEReference();
		t.body.add(postCondition);
	}
	//Capability -> EReference : ownedScenarios
	if (s.ownedScenarios.getEReference() != null){
		var ownedScenarios = new SysMLine!ItemUsage;
		ownedScenarios.isReference = true;
		ownedScenarios.featureNote.add(":>");
		ownedScenarios.featureSpecialization.add("ownedScenarios");
		ownedScenarios.valuePart = s.ownedScenarios.getEReference();
		t.body.add(ownedScenarios);
	}
	//Capability -> EReference : incomingCapabilityAllocation
	if (s.incomingCapabilityAllocation.getEReference() != null){
		var incomingCapabilityAllocation = new SysMLine!ItemUsage;
		incomingCapabilityAllocation.isReference = true;
		incomingCapabilityAllocation.featureNote.add(":>");
		incomingCapabilityAllocation.featureSpecialization.add("incomingCapabilityAllocation");
		incomingCapabilityAllocation.valuePart = s.incomingCapabilityAllocation.getEReference();
		t.body.add(incomingCapabilityAllocation);
	}
	//Capability -> EReference : outgoingCapabilityAllocation
	if (s.outgoingCapabilityAllocation.getEReference() != null){
		var outgoingCapabilityAllocation = new SysMLine!ItemUsage;
		outgoingCapabilityAllocation.isReference = true;
		outgoingCapabilityAllocation.featureNote.add(":>");
		outgoingCapabilityAllocation.featureSpecialization.add("outgoingCapabilityAllocation");
		outgoingCapabilityAllocation.valuePart = s.outgoingCapabilityAllocation.getEReference();
		t.body.add(outgoingCapabilityAllocation);
	}
	//Capability -> EReference : extends
	if (s.extends.getEReference() != null){
		var extends = new SysMLine!ItemUsage;
		extends.isReference = true;
		extends.featureNote.add(":>");
		extends.featureSpecialization.add("extends");
		extends.valuePart = s.extends.getEReference();
		t.body.add(extends);
	}
	//Capability -> EReference : extending
	if (s.extending.getEReference() != null){
		var extending = new SysMLine!ItemUsage;
		extending.isReference = true;
		extending.featureNote.add(":>");
		extending.featureSpecialization.add("extending");
		extending.valuePart = s.extending.getEReference();
		t.body.add(extending);
	}
	//Capability -> EReference : abstractCapabilityExtensionPoints
	if (s.abstractCapabilityExtensionPoints.getEReference() != null){
		var abstractCapabilityExtensionPoints = new SysMLine!ItemUsage;
		abstractCapabilityExtensionPoints.isReference = true;
		abstractCapabilityExtensionPoints.featureNote.add(":>");
		abstractCapabilityExtensionPoints.featureSpecialization.add("abstractCapabilityExtensionPoints");
		abstractCapabilityExtensionPoints.valuePart = s.abstractCapabilityExtensionPoints.getEReference();
		t.body.add(abstractCapabilityExtensionPoints);
	}
	//Capability -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null){
		var superGeneralizations = new SysMLine!ItemUsage;
		superGeneralizations.isReference = true;
		superGeneralizations.featureNote.add(":>");
		superGeneralizations.featureSpecialization.add("superGeneralizations");
		superGeneralizations.valuePart = s.superGeneralizations.getEReference();
		t.body.add(superGeneralizations);
	}
	//Capability -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null){
		var subGeneralizations = new SysMLine!ItemUsage;
		subGeneralizations.isReference = true;
		subGeneralizations.featureNote.add(":>");
		subGeneralizations.featureSpecialization.add("subGeneralizations");
		subGeneralizations.valuePart = s.subGeneralizations.getEReference();
		t.body.add(subGeneralizations);
	}
	//Capability -> EReference : includes
	if (s.includes.getEReference() != null){
		var includes = new SysMLine!ItemUsage;
		includes.isReference = true;
		includes.featureNote.add(":>");
		includes.featureSpecialization.add("includes");
		includes.valuePart = s.includes.getEReference();
		t.body.add(includes);
	}
	//Capability -> EReference : including
	if (s.including.getEReference() != null){
		var including = new SysMLine!ItemUsage;
		including.isReference = true;
		including.featureNote.add(":>");
		including.featureSpecialization.add("including");
		including.valuePart = s.including.getEReference();
		t.body.add(including);
	}
	//Capability -> EReference : super
	if (s.super.getEReference() != null){
		var super = new SysMLine!ItemUsage;
		super.isReference = true;
		super.featureNote.add(":>");
		super.featureSpecialization.add("super");
		super.valuePart = s.super.getEReference();
		t.body.add(super);
	}
	//Capability -> EReference : sub
	if (s.sub.getEReference() != null){
		var sub = new SysMLine!ItemUsage;
		sub.isReference = true;
		sub.featureNote.add(":>");
		sub.featureSpecialization.add("sub");
		sub.valuePart = s.sub.getEReference();
		t.body.add(sub);
	}
	//Capability -> EReference : includedAbstractCapabilities
	if (s.includedAbstractCapabilities.getEReference() != null){
		var includedAbstractCapabilities = new SysMLine!ItemUsage;
		includedAbstractCapabilities.isReference = true;
		includedAbstractCapabilities.featureNote.add(":>");
		includedAbstractCapabilities.featureSpecialization.add("includedAbstractCapabilities");
		includedAbstractCapabilities.valuePart = s.includedAbstractCapabilities.getEReference();
		t.body.add(includedAbstractCapabilities);
	}
	//Capability -> EReference : includingAbstractCapabilities
	if (s.includingAbstractCapabilities.getEReference() != null){
		var includingAbstractCapabilities = new SysMLine!ItemUsage;
		includingAbstractCapabilities.isReference = true;
		includingAbstractCapabilities.featureNote.add(":>");
		includingAbstractCapabilities.featureSpecialization.add("includingAbstractCapabilities");
		includingAbstractCapabilities.valuePart = s.includingAbstractCapabilities.getEReference();
		t.body.add(includingAbstractCapabilities);
	}
	//Capability -> EReference : extendedAbstractCapabilities
	if (s.extendedAbstractCapabilities.getEReference() != null){
		var extendedAbstractCapabilities = new SysMLine!ItemUsage;
		extendedAbstractCapabilities.isReference = true;
		extendedAbstractCapabilities.featureNote.add(":>");
		extendedAbstractCapabilities.featureSpecialization.add("extendedAbstractCapabilities");
		extendedAbstractCapabilities.valuePart = s.extendedAbstractCapabilities.getEReference();
		t.body.add(extendedAbstractCapabilities);
	}
	//Capability -> EReference : extendingAbstractCapabilities
	if (s.extendingAbstractCapabilities.getEReference() != null){
		var extendingAbstractCapabilities = new SysMLine!ItemUsage;
		extendingAbstractCapabilities.isReference = true;
		extendingAbstractCapabilities.featureNote.add(":>");
		extendingAbstractCapabilities.featureSpecialization.add("extendingAbstractCapabilities");
		extendingAbstractCapabilities.valuePart = s.extendingAbstractCapabilities.getEReference();
		t.body.add(extendingAbstractCapabilities);
	}
	//Capability -> EReference : ownedFunctionalChainAbstractCapabilityInvolvements
	if (s.ownedFunctionalChainAbstractCapabilityInvolvements.getEReference() != null){
		var ownedFunctionalChainAbstractCapabilityInvolvements = new SysMLine!ItemUsage;
		ownedFunctionalChainAbstractCapabilityInvolvements.isReference = true;
		ownedFunctionalChainAbstractCapabilityInvolvements.featureNote.add(":>");
		ownedFunctionalChainAbstractCapabilityInvolvements.featureSpecialization.add("ownedFunctionalChainAbstractCapabilityInvolvements");
		ownedFunctionalChainAbstractCapabilityInvolvements.valuePart = s.ownedFunctionalChainAbstractCapabilityInvolvements.getEReference();
		t.body.add(ownedFunctionalChainAbstractCapabilityInvolvements);
	}
	//Capability -> EReference : ownedAbstractFunctionAbstractCapabilityInvolvements
	if (s.ownedAbstractFunctionAbstractCapabilityInvolvements.getEReference() != null){
		var ownedAbstractFunctionAbstractCapabilityInvolvements = new SysMLine!ItemUsage;
		ownedAbstractFunctionAbstractCapabilityInvolvements.isReference = true;
		ownedAbstractFunctionAbstractCapabilityInvolvements.featureNote.add(":>");
		ownedAbstractFunctionAbstractCapabilityInvolvements.featureSpecialization.add("ownedAbstractFunctionAbstractCapabilityInvolvements");
		ownedAbstractFunctionAbstractCapabilityInvolvements.valuePart = s.ownedAbstractFunctionAbstractCapabilityInvolvements.getEReference();
		t.body.add(ownedAbstractFunctionAbstractCapabilityInvolvements);
	}
	//Capability -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null){
		var availableInStates = new SysMLine!ItemUsage;
		availableInStates.isReference = true;
		availableInStates.featureNote.add(":>");
		availableInStates.featureSpecialization.add("availableInStates");
		availableInStates.valuePart = s.availableInStates.getEReference();
		t.body.add(availableInStates);
	}
	//Capability -> EReference : ownedAbstractCapabilityRealizations
	if (s.ownedAbstractCapabilityRealizations.getEReference() != null){
		var ownedAbstractCapabilityRealizations = new SysMLine!ItemUsage;
		ownedAbstractCapabilityRealizations.isReference = true;
		ownedAbstractCapabilityRealizations.featureNote.add(":>");
		ownedAbstractCapabilityRealizations.featureSpecialization.add("ownedAbstractCapabilityRealizations");
		ownedAbstractCapabilityRealizations.valuePart = s.ownedAbstractCapabilityRealizations.getEReference();
		t.body.add(ownedAbstractCapabilityRealizations);
	}
	//Capability -> EReference : involvedAbstractFunctions
	if (s.involvedAbstractFunctions.getEReference() != null){
		var involvedAbstractFunctions = new SysMLine!ItemUsage;
		involvedAbstractFunctions.isReference = true;
		involvedAbstractFunctions.featureNote.add(":>");
		involvedAbstractFunctions.featureSpecialization.add("involvedAbstractFunctions");
		involvedAbstractFunctions.valuePart = s.involvedAbstractFunctions.getEReference();
		t.body.add(involvedAbstractFunctions);
	}
	//Capability -> EReference : involvedFunctionalChains
	if (s.involvedFunctionalChains.getEReference() != null){
		var involvedFunctionalChains = new SysMLine!ItemUsage;
		involvedFunctionalChains.isReference = true;
		involvedFunctionalChains.featureNote.add(":>");
		involvedFunctionalChains.featureSpecialization.add("involvedFunctionalChains");
		involvedFunctionalChains.valuePart = s.involvedFunctionalChains.getEReference();
		t.body.add(involvedFunctionalChains);
	}
	//Capability -> EReference : ownedCapabilityInvolvements
	if (s.ownedCapabilityInvolvements.getEReference() != null){
		var ownedCapabilityInvolvements = new SysMLine!ItemUsage;
		ownedCapabilityInvolvements.isReference = true;
		ownedCapabilityInvolvements.featureNote.add(":>");
		ownedCapabilityInvolvements.featureSpecialization.add("ownedCapabilityInvolvements");
		ownedCapabilityInvolvements.valuePart = s.ownedCapabilityInvolvements.getEReference();
		t.body.add(ownedCapabilityInvolvements);
	}
	//Capability -> EReference : involvedSystemComponents
	if (s.involvedSystemComponents.getEReference() != null){
		var involvedSystemComponents = new SysMLine!ItemUsage;
		involvedSystemComponents.isReference = true;
		involvedSystemComponents.featureNote.add(":>");
		involvedSystemComponents.featureSpecialization.add("involvedSystemComponents");
		involvedSystemComponents.valuePart = s.involvedSystemComponents.getEReference();
		t.body.add(involvedSystemComponents);
	}
	//Capability -> EReference : purposes
	if (s.purposes.getEReference() != null){
		var purposes = new SysMLine!ItemUsage;
		purposes.isReference = true;
		purposes.featureNote.add(":>");
		purposes.featureSpecialization.add("purposes");
		purposes.valuePart = s.purposes.getEReference();
		t.body.add(purposes);
	}
	//Capability -> EReference : purposeMissions
	if (s.purposeMissions.getEReference() != null){
		var purposeMissions = new SysMLine!ItemUsage;
		purposeMissions.isReference = true;
		purposeMissions.featureNote.add(":>");
		purposeMissions.featureSpecialization.add("purposeMissions");
		purposeMissions.valuePart = s.purposeMissions.getEReference();
		t.body.add(purposeMissions);
	}
	//Capability -> EReference : realizedOperationalCapabilities
	if (s.realizedOperationalCapabilities.getEReference() != null){
		var realizedOperationalCapabilities = new SysMLine!ItemUsage;
		realizedOperationalCapabilities.isReference = true;
		realizedOperationalCapabilities.featureNote.add(":>");
		realizedOperationalCapabilities.featureSpecialization.add("realizedOperationalCapabilities");
		realizedOperationalCapabilities.valuePart = s.realizedOperationalCapabilities.getEReference();
		t.body.add(realizedOperationalCapabilities);
	}
	//Capability -> EReference : realizingCapabilityRealizations
	if (s.realizingCapabilityRealizations.getEReference() != null){
		var realizingCapabilityRealizations = new SysMLine!ItemUsage;
		realizingCapabilityRealizations.isReference = true;
		realizingCapabilityRealizations.featureNote.add(":>");
		realizingCapabilityRealizations.featureSpecialization.add("realizingCapabilityRealizations");
		realizingCapabilityRealizations.valuePart = s.realizingCapabilityRealizations.getEReference();
		t.body.add(realizingCapabilityRealizations);
	}
}

@lazy
rule CapabilityExploitation
	transform s : DSL!CapabilityExploitation
	to t : SysMLine!ItemUsage
	extends Base{
	//CapabilityExploitation -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//CapabilityExploitation -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//CapabilityExploitation -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//CapabilityExploitation -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//CapabilityExploitation -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//CapabilityExploitation -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//CapabilityExploitation -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//CapabilityExploitation -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//CapabilityExploitation -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//CapabilityExploitation -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//CapabilityExploitation -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//CapabilityExploitation -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//CapabilityExploitation -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//CapabilityExploitation -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//CapabilityExploitation -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//CapabilityExploitation -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//CapabilityExploitation -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//CapabilityExploitation -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//CapabilityExploitation -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//CapabilityExploitation -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//CapabilityExploitation -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//CapabilityExploitation -> EReference : mission
	if (s.mission.getEReference() != null){
		var mission = new SysMLine!ItemUsage;
		mission.isReference = true;
		mission.featureNote.add(":>");
		mission.featureSpecialization.add("mission");
		mission.valuePart = s.mission.getEReference();
		t.body.add(mission);
	}
	//CapabilityExploitation -> EReference : capability
	if (s.capability.getEReference() != null){
		var capability = new SysMLine!ItemUsage;
		capability.isReference = true;
		capability.featureNote.add(":>");
		capability.featureSpecialization.add("capability");
		capability.valuePart = s.capability.getEReference();
		t.body.add(capability);
	}
}

@lazy
rule CapabilityPkg
	transform s : DSL!CapabilityPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//CapabilityPkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//CapabilityPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//CapabilityPkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//CapabilityPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//CapabilityPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//CapabilityPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//CapabilityPkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//CapabilityPkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//CapabilityPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//CapabilityPkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//CapabilityPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//CapabilityPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//CapabilityPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//CapabilityPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//CapabilityPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//CapabilityPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//CapabilityPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//CapabilityPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//CapabilityPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//CapabilityPkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//CapabilityPkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//CapabilityPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//CapabilityPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//CapabilityPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//CapabilityPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//CapabilityPkg -> EReference : ownedCapabilities
	if (s.ownedCapabilities.getEReference() != null){
		var ownedCapabilities = new SysMLine!ItemUsage;
		ownedCapabilities.isReference = true;
		ownedCapabilities.featureNote.add(":>");
		ownedCapabilities.featureSpecialization.add("ownedCapabilities");
		ownedCapabilities.valuePart = s.ownedCapabilities.getEReference();
		t.body.add(ownedCapabilities);
	}
	//CapabilityPkg -> EReference : ownedCapabilityPkgs
	if (s.ownedCapabilityPkgs.getEReference() != null){
		var ownedCapabilityPkgs = new SysMLine!ItemUsage;
		ownedCapabilityPkgs.isReference = true;
		ownedCapabilityPkgs.featureNote.add(":>");
		ownedCapabilityPkgs.featureSpecialization.add("ownedCapabilityPkgs");
		ownedCapabilityPkgs.valuePart = s.ownedCapabilityPkgs.getEReference();
		t.body.add(ownedCapabilityPkgs);
	}
}

@lazy
rule OperationalAnalysisRealization
	transform s : DSL!OperationalAnalysisRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalAnalysisRealization -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//OperationalAnalysisRealization -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//OperationalAnalysisRealization -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//OperationalAnalysisRealization -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//OperationalAnalysisRealization -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//OperationalAnalysisRealization -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//OperationalAnalysisRealization -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//OperationalAnalysisRealization -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//OperationalAnalysisRealization -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//OperationalAnalysisRealization -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//OperationalAnalysisRealization -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//OperationalAnalysisRealization -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//OperationalAnalysisRealization -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//OperationalAnalysisRealization -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//OperationalAnalysisRealization -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//OperationalAnalysisRealization -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//OperationalAnalysisRealization -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//OperationalAnalysisRealization -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//OperationalAnalysisRealization -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//OperationalAnalysisRealization -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//OperationalAnalysisRealization -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//OperationalAnalysisRealization -> EReference : targetElement
	if (s.targetElement.getEReference() != null){
		var targetElement = new SysMLine!ItemUsage;
		targetElement.isReference = true;
		targetElement.featureNote.add(":>");
		targetElement.featureSpecialization.add("targetElement");
		targetElement.valuePart = s.targetElement.getEReference();
		t.body.add(targetElement);
	}
	//OperationalAnalysisRealization -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null){
		var sourceElement = new SysMLine!ItemUsage;
		sourceElement.isReference = true;
		sourceElement.featureNote.add(":>");
		sourceElement.featureSpecialization.add("sourceElement");
		sourceElement.valuePart = s.sourceElement.getEReference();
		t.body.add(sourceElement);
	}
	//OperationalAnalysisRealization -> EReference : allocatedArchitecture
	if (s.allocatedArchitecture.getEReference() != null){
		var allocatedArchitecture = new SysMLine!ItemUsage;
		allocatedArchitecture.isReference = true;
		allocatedArchitecture.featureNote.add(":>");
		allocatedArchitecture.featureSpecialization.add("allocatedArchitecture");
		allocatedArchitecture.valuePart = s.allocatedArchitecture.getEReference();
		t.body.add(allocatedArchitecture);
	}
	//OperationalAnalysisRealization -> EReference : allocatingArchitecture
	if (s.allocatingArchitecture.getEReference() != null){
		var allocatingArchitecture = new SysMLine!ItemUsage;
		allocatingArchitecture.isReference = true;
		allocatingArchitecture.featureNote.add(":>");
		allocatingArchitecture.featureSpecialization.add("allocatingArchitecture");
		allocatingArchitecture.valuePart = s.allocatingArchitecture.getEReference();
		t.body.add(allocatingArchitecture);
	}
}

@lazy
rule SystemComponentPkg
	transform s : DSL!SystemComponentPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemComponentPkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//SystemComponentPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//SystemComponentPkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//SystemComponentPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//SystemComponentPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//SystemComponentPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//SystemComponentPkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//SystemComponentPkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//SystemComponentPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//SystemComponentPkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//SystemComponentPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//SystemComponentPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//SystemComponentPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//SystemComponentPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//SystemComponentPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//SystemComponentPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//SystemComponentPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//SystemComponentPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//SystemComponentPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//SystemComponentPkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//SystemComponentPkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//SystemComponentPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//SystemComponentPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//SystemComponentPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//SystemComponentPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//SystemComponentPkg -> EReference : ownedParts
	if (s.ownedParts.getEReference() != null){
		var ownedParts = new SysMLine!ItemUsage;
		ownedParts.isReference = true;
		ownedParts.featureNote.add(":>");
		ownedParts.featureSpecialization.add("ownedParts");
		ownedParts.valuePart = s.ownedParts.getEReference();
		t.body.add(ownedParts);
	}
	//SystemComponentPkg -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null){
		var ownedComponentExchanges = new SysMLine!ItemUsage;
		ownedComponentExchanges.isReference = true;
		ownedComponentExchanges.featureNote.add(":>");
		ownedComponentExchanges.featureSpecialization.add("ownedComponentExchanges");
		ownedComponentExchanges.valuePart = s.ownedComponentExchanges.getEReference();
		t.body.add(ownedComponentExchanges);
	}
	//SystemComponentPkg -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null){
		var ownedComponentExchangeCategories = new SysMLine!ItemUsage;
		ownedComponentExchangeCategories.isReference = true;
		ownedComponentExchangeCategories.featureNote.add(":>");
		ownedComponentExchangeCategories.featureSpecialization.add("ownedComponentExchangeCategories");
		ownedComponentExchangeCategories.valuePart = s.ownedComponentExchangeCategories.getEReference();
		t.body.add(ownedComponentExchangeCategories);
	}
	//SystemComponentPkg -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null){
		var ownedFunctionalLinks = new SysMLine!ItemUsage;
		ownedFunctionalLinks.isReference = true;
		ownedFunctionalLinks.featureNote.add(":>");
		ownedFunctionalLinks.featureSpecialization.add("ownedFunctionalLinks");
		ownedFunctionalLinks.valuePart = s.ownedFunctionalLinks.getEReference();
		t.body.add(ownedFunctionalLinks);
	}
	//SystemComponentPkg -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null){
		var ownedFunctionalAllocations = new SysMLine!ItemUsage;
		ownedFunctionalAllocations.isReference = true;
		ownedFunctionalAllocations.featureNote.add(":>");
		ownedFunctionalAllocations.featureSpecialization.add("ownedFunctionalAllocations");
		ownedFunctionalAllocations.valuePart = s.ownedFunctionalAllocations.getEReference();
		t.body.add(ownedFunctionalAllocations);
	}
	//SystemComponentPkg -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null){
		var ownedComponentExchangeRealizations = new SysMLine!ItemUsage;
		ownedComponentExchangeRealizations.isReference = true;
		ownedComponentExchangeRealizations.featureNote.add(":>");
		ownedComponentExchangeRealizations.featureSpecialization.add("ownedComponentExchangeRealizations");
		ownedComponentExchangeRealizations.valuePart = s.ownedComponentExchangeRealizations.getEReference();
		t.body.add(ownedComponentExchangeRealizations);
	}
	//SystemComponentPkg -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null){
		var ownedPhysicalLinks = new SysMLine!ItemUsage;
		ownedPhysicalLinks.isReference = true;
		ownedPhysicalLinks.featureNote.add(":>");
		ownedPhysicalLinks.featureSpecialization.add("ownedPhysicalLinks");
		ownedPhysicalLinks.valuePart = s.ownedPhysicalLinks.getEReference();
		t.body.add(ownedPhysicalLinks);
	}
	//SystemComponentPkg -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null){
		var ownedPhysicalLinkCategories = new SysMLine!ItemUsage;
		ownedPhysicalLinkCategories.isReference = true;
		ownedPhysicalLinkCategories.featureNote.add(":>");
		ownedPhysicalLinkCategories.featureSpecialization.add("ownedPhysicalLinkCategories");
		ownedPhysicalLinkCategories.valuePart = s.ownedPhysicalLinkCategories.getEReference();
		t.body.add(ownedPhysicalLinkCategories);
	}
	//SystemComponentPkg -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null){
		var ownedStateMachines = new SysMLine!ItemUsage;
		ownedStateMachines.isReference = true;
		ownedStateMachines.featureNote.add(":>");
		ownedStateMachines.featureSpecialization.add("ownedStateMachines");
		ownedStateMachines.valuePart = s.ownedStateMachines.getEReference();
		t.body.add(ownedStateMachines);
	}
	//SystemComponentPkg -> EReference : ownedSystemComponents
	if (s.ownedSystemComponents.getEReference() != null){
		var ownedSystemComponents = new SysMLine!ItemUsage;
		ownedSystemComponents.isReference = true;
		ownedSystemComponents.featureNote.add(":>");
		ownedSystemComponents.featureSpecialization.add("ownedSystemComponents");
		ownedSystemComponents.valuePart = s.ownedSystemComponents.getEReference();
		t.body.add(ownedSystemComponents);
	}
	//SystemComponentPkg -> EReference : ownedSystemComponentPkgs
	if (s.ownedSystemComponentPkgs.getEReference() != null){
		var ownedSystemComponentPkgs = new SysMLine!ItemUsage;
		ownedSystemComponentPkgs.isReference = true;
		ownedSystemComponentPkgs.featureNote.add(":>");
		ownedSystemComponentPkgs.featureSpecialization.add("ownedSystemComponentPkgs");
		ownedSystemComponentPkgs.valuePart = s.ownedSystemComponentPkgs.getEReference();
		t.body.add(ownedSystemComponentPkgs);
	}
}

@lazy
rule SystemComponent
	transform s : DSL!SystemComponent
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemComponent -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//SystemComponent -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//SystemComponent -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//SystemComponent -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//SystemComponent -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//SystemComponent -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//SystemComponent -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//SystemComponent -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//SystemComponent -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null){
		var abstract = new SysMLine!AttributeUsage;
		abstract.featureNote.add(":>>");
		abstract.featureSpecialization.add("abstract");
		abstract.valuePart = s.abstract.getEAttribute();
		t.body.add(abstract);
	}
	//SystemComponent -> EAttribute : actor
	if (s.actor.getEAttribute() != null){
		var actor = new SysMLine!AttributeUsage;
		actor.featureNote.add(":>>");
		actor.featureSpecialization.add("actor");
		actor.valuePart = s.actor.getEAttribute();
		t.body.add(actor);
	}
	//SystemComponent -> EAttribute : human
	if (s.human.getEAttribute() != null){
		var human = new SysMLine!AttributeUsage;
		human.featureNote.add(":>>");
		human.featureSpecialization.add("human");
		human.valuePart = s.human.getEAttribute();
		t.body.add(human);
	}
	//SystemComponent -> EAttribute : dataComponent
	if (s.dataComponent.getEAttribute() != null){
		var dataComponent = new SysMLine!AttributeUsage;
		dataComponent.featureNote.add(":>>");
		dataComponent.featureSpecialization.add("dataComponent");
		dataComponent.valuePart = s.dataComponent.getEAttribute();
		t.body.add(dataComponent);
	}
	//SystemComponent -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//SystemComponent -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//SystemComponent -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//SystemComponent -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//SystemComponent -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null){
		var abstractTypedElements = new SysMLine!ItemUsage;
		abstractTypedElements.isReference = true;
		abstractTypedElements.featureNote.add(":>");
		abstractTypedElements.featureSpecialization.add("abstractTypedElements");
		abstractTypedElements.valuePart = s.abstractTypedElements.getEReference();
		t.body.add(abstractTypedElements);
	}
	//SystemComponent -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//SystemComponent -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//SystemComponent -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//SystemComponent -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//SystemComponent -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//SystemComponent -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//SystemComponent -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//SystemComponent -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//SystemComponent -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//SystemComponent -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//SystemComponent -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//SystemComponent -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//SystemComponent -> EReference : typedElements
	if (s.typedElements.getEReference() != null){
		var typedElements = new SysMLine!ItemUsage;
		typedElements.isReference = true;
		typedElements.featureNote.add(":>");
		typedElements.featureSpecialization.add("typedElements");
		typedElements.valuePart = s.typedElements.getEReference();
		t.body.add(typedElements);
	}
	//SystemComponent -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null){
		var ownedFunctionalAllocation = new SysMLine!ItemUsage;
		ownedFunctionalAllocation.isReference = true;
		ownedFunctionalAllocation.featureNote.add(":>");
		ownedFunctionalAllocation.featureSpecialization.add("ownedFunctionalAllocation");
		ownedFunctionalAllocation.valuePart = s.ownedFunctionalAllocation.getEReference();
		t.body.add(ownedFunctionalAllocation);
	}
	//SystemComponent -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null){
		var ownedComponentExchanges = new SysMLine!ItemUsage;
		ownedComponentExchanges.isReference = true;
		ownedComponentExchanges.featureNote.add(":>");
		ownedComponentExchanges.featureSpecialization.add("ownedComponentExchanges");
		ownedComponentExchanges.valuePart = s.ownedComponentExchanges.getEReference();
		t.body.add(ownedComponentExchanges);
	}
	//SystemComponent -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null){
		var ownedComponentExchangeCategories = new SysMLine!ItemUsage;
		ownedComponentExchangeCategories.isReference = true;
		ownedComponentExchangeCategories.featureNote.add(":>");
		ownedComponentExchangeCategories.featureSpecialization.add("ownedComponentExchangeCategories");
		ownedComponentExchangeCategories.valuePart = s.ownedComponentExchangeCategories.getEReference();
		t.body.add(ownedComponentExchangeCategories);
	}
	//SystemComponent -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null){
		var functionalAllocations = new SysMLine!ItemUsage;
		functionalAllocations.isReference = true;
		functionalAllocations.featureNote.add(":>");
		functionalAllocations.featureSpecialization.add("functionalAllocations");
		functionalAllocations.valuePart = s.functionalAllocations.getEReference();
		t.body.add(functionalAllocations);
	}
	//SystemComponent -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null){
		var allocatedFunctions = new SysMLine!ItemUsage;
		allocatedFunctions.isReference = true;
		allocatedFunctions.featureNote.add(":>");
		allocatedFunctions.featureSpecialization.add("allocatedFunctions");
		allocatedFunctions.valuePart = s.allocatedFunctions.getEReference();
		t.body.add(allocatedFunctions);
	}
	//SystemComponent -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null){
		var inExchangeLinks = new SysMLine!ItemUsage;
		inExchangeLinks.isReference = true;
		inExchangeLinks.featureNote.add(":>");
		inExchangeLinks.featureSpecialization.add("inExchangeLinks");
		inExchangeLinks.valuePart = s.inExchangeLinks.getEReference();
		t.body.add(inExchangeLinks);
	}
	//SystemComponent -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null){
		var outExchangeLinks = new SysMLine!ItemUsage;
		outExchangeLinks.isReference = true;
		outExchangeLinks.featureNote.add(":>");
		outExchangeLinks.featureSpecialization.add("outExchangeLinks");
		outExchangeLinks.valuePart = s.outExchangeLinks.getEReference();
		t.body.add(outExchangeLinks);
	}
	//SystemComponent -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null){
		var ownedAbstractCapabilityPkg = new SysMLine!ItemUsage;
		ownedAbstractCapabilityPkg.isReference = true;
		ownedAbstractCapabilityPkg.featureNote.add(":>");
		ownedAbstractCapabilityPkg.featureSpecialization.add("ownedAbstractCapabilityPkg");
		ownedAbstractCapabilityPkg.valuePart = s.ownedAbstractCapabilityPkg.getEReference();
		t.body.add(ownedAbstractCapabilityPkg);
	}
	//SystemComponent -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null){
		var ownedInterfacePkg = new SysMLine!ItemUsage;
		ownedInterfacePkg.isReference = true;
		ownedInterfacePkg.featureNote.add(":>");
		ownedInterfacePkg.featureSpecialization.add("ownedInterfacePkg");
		ownedInterfacePkg.valuePart = s.ownedInterfacePkg.getEReference();
		t.body.add(ownedInterfacePkg);
	}
	//SystemComponent -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null){
		var ownedDataPkg = new SysMLine!ItemUsage;
		ownedDataPkg.isReference = true;
		ownedDataPkg.featureNote.add(":>");
		ownedDataPkg.featureSpecialization.add("ownedDataPkg");
		ownedDataPkg.valuePart = s.ownedDataPkg.getEReference();
		t.body.add(ownedDataPkg);
	}
	//SystemComponent -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null){
		var ownedStateMachines = new SysMLine!ItemUsage;
		ownedStateMachines.isReference = true;
		ownedStateMachines.featureNote.add(":>");
		ownedStateMachines.featureSpecialization.add("ownedStateMachines");
		ownedStateMachines.valuePart = s.ownedStateMachines.getEReference();
		t.body.add(ownedStateMachines);
	}
	//SystemComponent -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null){
		var ownedGeneralizations = new SysMLine!ItemUsage;
		ownedGeneralizations.isReference = true;
		ownedGeneralizations.featureNote.add(":>");
		ownedGeneralizations.featureSpecialization.add("ownedGeneralizations");
		ownedGeneralizations.valuePart = s.ownedGeneralizations.getEReference();
		t.body.add(ownedGeneralizations);
	}
	//SystemComponent -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null){
		var superGeneralizations = new SysMLine!ItemUsage;
		superGeneralizations.isReference = true;
		superGeneralizations.featureNote.add(":>");
		superGeneralizations.featureSpecialization.add("superGeneralizations");
		superGeneralizations.valuePart = s.superGeneralizations.getEReference();
		t.body.add(superGeneralizations);
	}
	//SystemComponent -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null){
		var subGeneralizations = new SysMLine!ItemUsage;
		subGeneralizations.isReference = true;
		subGeneralizations.featureNote.add(":>");
		subGeneralizations.featureSpecialization.add("subGeneralizations");
		subGeneralizations.valuePart = s.subGeneralizations.getEReference();
		t.body.add(subGeneralizations);
	}
	//SystemComponent -> EReference : super
	if (s.super.getEReference() != null){
		var super = new SysMLine!ItemUsage;
		super.isReference = true;
		super.featureNote.add(":>");
		super.featureSpecialization.add("super");
		super.valuePart = s.super.getEReference();
		t.body.add(super);
	}
	//SystemComponent -> EReference : sub
	if (s.sub.getEReference() != null){
		var sub = new SysMLine!ItemUsage;
		sub.isReference = true;
		sub.featureNote.add(":>");
		sub.featureSpecialization.add("sub");
		sub.valuePart = s.sub.getEReference();
		t.body.add(sub);
	}
	//SystemComponent -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null){
		var ownedFeatures = new SysMLine!ItemUsage;
		ownedFeatures.isReference = true;
		ownedFeatures.featureNote.add(":>");
		ownedFeatures.featureSpecialization.add("ownedFeatures");
		ownedFeatures.valuePart = s.ownedFeatures.getEReference();
		t.body.add(ownedFeatures);
	}
	//SystemComponent -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null){
		var containedProperties = new SysMLine!ItemUsage;
		containedProperties.isReference = true;
		containedProperties.featureNote.add(":>");
		containedProperties.featureSpecialization.add("containedProperties");
		containedProperties.valuePart = s.containedProperties.getEReference();
		t.body.add(containedProperties);
	}
	//SystemComponent -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null){
		var ownedInterfaceAllocations = new SysMLine!ItemUsage;
		ownedInterfaceAllocations.isReference = true;
		ownedInterfaceAllocations.featureNote.add(":>");
		ownedInterfaceAllocations.featureSpecialization.add("ownedInterfaceAllocations");
		ownedInterfaceAllocations.valuePart = s.ownedInterfaceAllocations.getEReference();
		t.body.add(ownedInterfaceAllocations);
	}
	//SystemComponent -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null){
		var provisionedInterfaceAllocations = new SysMLine!ItemUsage;
		provisionedInterfaceAllocations.isReference = true;
		provisionedInterfaceAllocations.featureNote.add(":>");
		provisionedInterfaceAllocations.featureSpecialization.add("provisionedInterfaceAllocations");
		provisionedInterfaceAllocations.valuePart = s.provisionedInterfaceAllocations.getEReference();
		t.body.add(provisionedInterfaceAllocations);
	}
	//SystemComponent -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null){
		var allocatedInterfaces = new SysMLine!ItemUsage;
		allocatedInterfaces.isReference = true;
		allocatedInterfaces.featureNote.add(":>");
		allocatedInterfaces.featureSpecialization.add("allocatedInterfaces");
		allocatedInterfaces.valuePart = s.allocatedInterfaces.getEReference();
		t.body.add(allocatedInterfaces);
	}
	//SystemComponent -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null){
		var ownedCommunicationLinks = new SysMLine!ItemUsage;
		ownedCommunicationLinks.isReference = true;
		ownedCommunicationLinks.featureNote.add(":>");
		ownedCommunicationLinks.featureSpecialization.add("ownedCommunicationLinks");
		ownedCommunicationLinks.valuePart = s.ownedCommunicationLinks.getEReference();
		t.body.add(ownedCommunicationLinks);
	}
	//SystemComponent -> EReference : produce
	if (s.produce.getEReference() != null){
		var produce = new SysMLine!ItemUsage;
		produce.isReference = true;
		produce.featureNote.add(":>");
		produce.featureSpecialization.add("produce");
		produce.valuePart = s.produce.getEReference();
		t.body.add(produce);
	}
	//SystemComponent -> EReference : consume
	if (s.consume.getEReference() != null){
		var consume = new SysMLine!ItemUsage;
		consume.isReference = true;
		consume.featureNote.add(":>");
		consume.featureSpecialization.add("consume");
		consume.valuePart = s.consume.getEReference();
		t.body.add(consume);
	}
	//SystemComponent -> EReference : send
	if (s.send.getEReference() != null){
		var send = new SysMLine!ItemUsage;
		send.isReference = true;
		send.featureNote.add(":>");
		send.featureSpecialization.add("send");
		send.valuePart = s.send.getEReference();
		t.body.add(send);
	}
	//SystemComponent -> EReference : receive
	if (s.receive.getEReference() != null){
		var receive = new SysMLine!ItemUsage;
		receive.isReference = true;
		receive.featureNote.add(":>");
		receive.featureSpecialization.add("receive");
		receive.valuePart = s.receive.getEReference();
		t.body.add(receive);
	}
	//SystemComponent -> EReference : call
	if (s.call.getEReference() != null){
		var call = new SysMLine!ItemUsage;
		call.isReference = true;
		call.featureNote.add(":>");
		call.featureSpecialization.add("call");
		call.valuePart = s.call.getEReference();
		t.body.add(call);
	}
	//SystemComponent -> EReference : execute
	if (s.execute.getEReference() != null){
		var execute = new SysMLine!ItemUsage;
		execute.isReference = true;
		execute.featureNote.add(":>");
		execute.featureSpecialization.add("execute");
		execute.valuePart = s.execute.getEReference();
		t.body.add(execute);
	}
	//SystemComponent -> EReference : write
	if (s.write.getEReference() != null){
		var write = new SysMLine!ItemUsage;
		write.isReference = true;
		write.featureNote.add(":>");
		write.featureSpecialization.add("write");
		write.valuePart = s.write.getEReference();
		t.body.add(write);
	}
	//SystemComponent -> EReference : access
	if (s.access.getEReference() != null){
		var access = new SysMLine!ItemUsage;
		access.isReference = true;
		access.featureNote.add(":>");
		access.featureSpecialization.add("access");
		access.valuePart = s.access.getEReference();
		t.body.add(access);
	}
	//SystemComponent -> EReference : acquire
	if (s.acquire.getEReference() != null){
		var acquire = new SysMLine!ItemUsage;
		acquire.isReference = true;
		acquire.featureNote.add(":>");
		acquire.featureSpecialization.add("acquire");
		acquire.valuePart = s.acquire.getEReference();
		t.body.add(acquire);
	}
	//SystemComponent -> EReference : transmit
	if (s.transmit.getEReference() != null){
		var transmit = new SysMLine!ItemUsage;
		transmit.isReference = true;
		transmit.featureNote.add(":>");
		transmit.featureSpecialization.add("transmit");
		transmit.valuePart = s.transmit.getEReference();
		t.body.add(transmit);
	}
	//SystemComponent -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null){
		var ownedInterfaceUses = new SysMLine!ItemUsage;
		ownedInterfaceUses.isReference = true;
		ownedInterfaceUses.featureNote.add(":>");
		ownedInterfaceUses.featureSpecialization.add("ownedInterfaceUses");
		ownedInterfaceUses.valuePart = s.ownedInterfaceUses.getEReference();
		t.body.add(ownedInterfaceUses);
	}
	//SystemComponent -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null){
		var usedInterfaceLinks = new SysMLine!ItemUsage;
		usedInterfaceLinks.isReference = true;
		usedInterfaceLinks.featureNote.add(":>");
		usedInterfaceLinks.featureSpecialization.add("usedInterfaceLinks");
		usedInterfaceLinks.valuePart = s.usedInterfaceLinks.getEReference();
		t.body.add(usedInterfaceLinks);
	}
	//SystemComponent -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null){
		var usedInterfaces = new SysMLine!ItemUsage;
		usedInterfaces.isReference = true;
		usedInterfaces.featureNote.add(":>");
		usedInterfaces.featureSpecialization.add("usedInterfaces");
		usedInterfaces.valuePart = s.usedInterfaces.getEReference();
		t.body.add(usedInterfaces);
	}
	//SystemComponent -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null){
		var ownedInterfaceImplementations = new SysMLine!ItemUsage;
		ownedInterfaceImplementations.isReference = true;
		ownedInterfaceImplementations.featureNote.add(":>");
		ownedInterfaceImplementations.featureSpecialization.add("ownedInterfaceImplementations");
		ownedInterfaceImplementations.valuePart = s.ownedInterfaceImplementations.getEReference();
		t.body.add(ownedInterfaceImplementations);
	}
	//SystemComponent -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null){
		var implementedInterfaceLinks = new SysMLine!ItemUsage;
		implementedInterfaceLinks.isReference = true;
		implementedInterfaceLinks.featureNote.add(":>");
		implementedInterfaceLinks.featureSpecialization.add("implementedInterfaceLinks");
		implementedInterfaceLinks.valuePart = s.implementedInterfaceLinks.getEReference();
		t.body.add(implementedInterfaceLinks);
	}
	//SystemComponent -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null){
		var implementedInterfaces = new SysMLine!ItemUsage;
		implementedInterfaces.isReference = true;
		implementedInterfaces.featureNote.add(":>");
		implementedInterfaces.featureSpecialization.add("implementedInterfaces");
		implementedInterfaces.valuePart = s.implementedInterfaces.getEReference();
		t.body.add(implementedInterfaces);
	}
	//SystemComponent -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null){
		var ownedComponentRealizations = new SysMLine!ItemUsage;
		ownedComponentRealizations.isReference = true;
		ownedComponentRealizations.featureNote.add(":>");
		ownedComponentRealizations.featureSpecialization.add("ownedComponentRealizations");
		ownedComponentRealizations.valuePart = s.ownedComponentRealizations.getEReference();
		t.body.add(ownedComponentRealizations);
	}
	//SystemComponent -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null){
		var realizedComponents = new SysMLine!ItemUsage;
		realizedComponents.isReference = true;
		realizedComponents.featureNote.add(":>");
		realizedComponents.featureSpecialization.add("realizedComponents");
		realizedComponents.valuePart = s.realizedComponents.getEReference();
		t.body.add(realizedComponents);
	}
	//SystemComponent -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null){
		var realizingComponents = new SysMLine!ItemUsage;
		realizingComponents.isReference = true;
		realizingComponents.featureNote.add(":>");
		realizingComponents.featureSpecialization.add("realizingComponents");
		realizingComponents.valuePart = s.realizingComponents.getEReference();
		t.body.add(realizingComponents);
	}
	//SystemComponent -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null){
		var providedInterfaces = new SysMLine!ItemUsage;
		providedInterfaces.isReference = true;
		providedInterfaces.featureNote.add(":>");
		providedInterfaces.featureSpecialization.add("providedInterfaces");
		providedInterfaces.valuePart = s.providedInterfaces.getEReference();
		t.body.add(providedInterfaces);
	}
	//SystemComponent -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null){
		var requiredInterfaces = new SysMLine!ItemUsage;
		requiredInterfaces.isReference = true;
		requiredInterfaces.featureNote.add(":>");
		requiredInterfaces.featureSpecialization.add("requiredInterfaces");
		requiredInterfaces.valuePart = s.requiredInterfaces.getEReference();
		t.body.add(requiredInterfaces);
	}
	//SystemComponent -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null){
		var containedComponentPorts = new SysMLine!ItemUsage;
		containedComponentPorts.isReference = true;
		containedComponentPorts.featureNote.add(":>");
		containedComponentPorts.featureSpecialization.add("containedComponentPorts");
		containedComponentPorts.valuePart = s.containedComponentPorts.getEReference();
		t.body.add(containedComponentPorts);
	}
	//SystemComponent -> EReference : containedParts
	if (s.containedParts.getEReference() != null){
		var containedParts = new SysMLine!ItemUsage;
		containedParts.isReference = true;
		containedParts.featureNote.add(":>");
		containedParts.featureSpecialization.add("containedParts");
		containedParts.valuePart = s.containedParts.getEReference();
		t.body.add(containedParts);
	}
	//SystemComponent -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null){
		var containedPhysicalPorts = new SysMLine!ItemUsage;
		containedPhysicalPorts.isReference = true;
		containedPhysicalPorts.featureNote.add(":>");
		containedPhysicalPorts.featureSpecialization.add("containedPhysicalPorts");
		containedPhysicalPorts.valuePart = s.containedPhysicalPorts.getEReference();
		t.body.add(containedPhysicalPorts);
	}
	//SystemComponent -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null){
		var ownedPhysicalPath = new SysMLine!ItemUsage;
		ownedPhysicalPath.isReference = true;
		ownedPhysicalPath.featureNote.add(":>");
		ownedPhysicalPath.featureSpecialization.add("ownedPhysicalPath");
		ownedPhysicalPath.valuePart = s.ownedPhysicalPath.getEReference();
		t.body.add(ownedPhysicalPath);
	}
	//SystemComponent -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null){
		var ownedPhysicalLinks = new SysMLine!ItemUsage;
		ownedPhysicalLinks.isReference = true;
		ownedPhysicalLinks.featureNote.add(":>");
		ownedPhysicalLinks.featureSpecialization.add("ownedPhysicalLinks");
		ownedPhysicalLinks.valuePart = s.ownedPhysicalLinks.getEReference();
		t.body.add(ownedPhysicalLinks);
	}
	//SystemComponent -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null){
		var ownedPhysicalLinkCategories = new SysMLine!ItemUsage;
		ownedPhysicalLinkCategories.isReference = true;
		ownedPhysicalLinkCategories.featureNote.add(":>");
		ownedPhysicalLinkCategories.featureSpecialization.add("ownedPhysicalLinkCategories");
		ownedPhysicalLinkCategories.valuePart = s.ownedPhysicalLinkCategories.getEReference();
		t.body.add(ownedPhysicalLinkCategories);
	}
	//SystemComponent -> EReference : representingParts
	if (s.representingParts.getEReference() != null){
		var representingParts = new SysMLine!ItemUsage;
		representingParts.isReference = true;
		representingParts.featureNote.add(":>");
		representingParts.featureSpecialization.add("representingParts");
		representingParts.valuePart = s.representingParts.getEReference();
		t.body.add(representingParts);
	}
	//SystemComponent -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null){
		var involvingInvolvements = new SysMLine!ItemUsage;
		involvingInvolvements.isReference = true;
		involvingInvolvements.featureNote.add(":>");
		involvingInvolvements.featureSpecialization.add("involvingInvolvements");
		involvingInvolvements.valuePart = s.involvingInvolvements.getEReference();
		t.body.add(involvingInvolvements);
	}
	//SystemComponent -> EReference : ownedSystemComponents
	if (s.ownedSystemComponents.getEReference() != null){
		var ownedSystemComponents = new SysMLine!ItemUsage;
		ownedSystemComponents.isReference = true;
		ownedSystemComponents.featureNote.add(":>");
		ownedSystemComponents.featureSpecialization.add("ownedSystemComponents");
		ownedSystemComponents.valuePart = s.ownedSystemComponents.getEReference();
		t.body.add(ownedSystemComponents);
	}
	//SystemComponent -> EReference : ownedSystemComponentPkgs
	if (s.ownedSystemComponentPkgs.getEReference() != null){
		var ownedSystemComponentPkgs = new SysMLine!ItemUsage;
		ownedSystemComponentPkgs.isReference = true;
		ownedSystemComponentPkgs.featureNote.add(":>");
		ownedSystemComponentPkgs.featureSpecialization.add("ownedSystemComponentPkgs");
		ownedSystemComponentPkgs.valuePart = s.ownedSystemComponentPkgs.getEReference();
		t.body.add(ownedSystemComponentPkgs);
	}
	//SystemComponent -> EReference : dataType
	if (s.dataType.getEReference() != null){
		var dataType = new SysMLine!ItemUsage;
		dataType.isReference = true;
		dataType.featureNote.add(":>");
		dataType.featureSpecialization.add("dataType");
		dataType.valuePart = s.dataType.getEReference();
		t.body.add(dataType);
	}
	//SystemComponent -> EReference : involvingCapabilities
	if (s.involvingCapabilities.getEReference() != null){
		var involvingCapabilities = new SysMLine!ItemUsage;
		involvingCapabilities.isReference = true;
		involvingCapabilities.featureNote.add(":>");
		involvingCapabilities.featureSpecialization.add("involvingCapabilities");
		involvingCapabilities.valuePart = s.involvingCapabilities.getEReference();
		t.body.add(involvingCapabilities);
	}
	//SystemComponent -> EReference : capabilityInvolvements
	if (s.capabilityInvolvements.getEReference() != null){
		var capabilityInvolvements = new SysMLine!ItemUsage;
		capabilityInvolvements.isReference = true;
		capabilityInvolvements.featureNote.add(":>");
		capabilityInvolvements.featureSpecialization.add("capabilityInvolvements");
		capabilityInvolvements.valuePart = s.capabilityInvolvements.getEReference();
		t.body.add(capabilityInvolvements);
	}
	//SystemComponent -> EReference : involvingMissions
	if (s.involvingMissions.getEReference() != null){
		var involvingMissions = new SysMLine!ItemUsage;
		involvingMissions.isReference = true;
		involvingMissions.featureNote.add(":>");
		involvingMissions.featureSpecialization.add("involvingMissions");
		involvingMissions.valuePart = s.involvingMissions.getEReference();
		t.body.add(involvingMissions);
	}
	//SystemComponent -> EReference : missionInvolvements
	if (s.missionInvolvements.getEReference() != null){
		var missionInvolvements = new SysMLine!ItemUsage;
		missionInvolvements.isReference = true;
		missionInvolvements.featureNote.add(":>");
		missionInvolvements.featureSpecialization.add("missionInvolvements");
		missionInvolvements.valuePart = s.missionInvolvements.getEReference();
		t.body.add(missionInvolvements);
	}
	//SystemComponent -> EReference : realizedEntities
	if (s.realizedEntities.getEReference() != null){
		var realizedEntities = new SysMLine!ItemUsage;
		realizedEntities.isReference = true;
		realizedEntities.featureNote.add(":>");
		realizedEntities.featureSpecialization.add("realizedEntities");
		realizedEntities.valuePart = s.realizedEntities.getEReference();
		t.body.add(realizedEntities);
	}
	//SystemComponent -> EReference : realizingLogicalComponents
	if (s.realizingLogicalComponents.getEReference() != null){
		var realizingLogicalComponents = new SysMLine!ItemUsage;
		realizingLogicalComponents.isReference = true;
		realizingLogicalComponents.featureNote.add(":>");
		realizingLogicalComponents.featureSpecialization.add("realizingLogicalComponents");
		realizingLogicalComponents.valuePart = s.realizingLogicalComponents.getEReference();
		t.body.add(realizingLogicalComponents);
	}
	//SystemComponent -> EReference : allocatedSystemFunctions
	if (s.allocatedSystemFunctions.getEReference() != null){
		var allocatedSystemFunctions = new SysMLine!ItemUsage;
		allocatedSystemFunctions.isReference = true;
		allocatedSystemFunctions.featureNote.add(":>");
		allocatedSystemFunctions.featureSpecialization.add("allocatedSystemFunctions");
		allocatedSystemFunctions.valuePart = s.allocatedSystemFunctions.getEReference();
		t.body.add(allocatedSystemFunctions);
	}
}


// la.ecore
@lazy
rule LogicalArchitecturePkg
	transform s : DSL!LogicalArchitecturePkg
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalArchitecturePkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//LogicalArchitecturePkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//LogicalArchitecturePkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//LogicalArchitecturePkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//LogicalArchitecturePkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//LogicalArchitecturePkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//LogicalArchitecturePkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//LogicalArchitecturePkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//LogicalArchitecturePkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//LogicalArchitecturePkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//LogicalArchitecturePkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//LogicalArchitecturePkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//LogicalArchitecturePkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//LogicalArchitecturePkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//LogicalArchitecturePkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//LogicalArchitecturePkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//LogicalArchitecturePkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//LogicalArchitecturePkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//LogicalArchitecturePkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//LogicalArchitecturePkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//LogicalArchitecturePkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//LogicalArchitecturePkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//LogicalArchitecturePkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//LogicalArchitecturePkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//LogicalArchitecturePkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//LogicalArchitecturePkg -> EReference : ownedLogicalArchitectures
	if (s.ownedLogicalArchitectures.getEReference() != null){
		var ownedLogicalArchitectures = new SysMLine!ItemUsage;
		ownedLogicalArchitectures.isReference = true;
		ownedLogicalArchitectures.featureNote.add(":>");
		ownedLogicalArchitectures.featureSpecialization.add("ownedLogicalArchitectures");
		ownedLogicalArchitectures.valuePart = s.ownedLogicalArchitectures.getEReference();
		t.body.add(ownedLogicalArchitectures);
	}
}

@lazy
rule LogicalArchitecture
	transform s : DSL!LogicalArchitecture
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalArchitecture -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//LogicalArchitecture -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//LogicalArchitecture -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//LogicalArchitecture -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//LogicalArchitecture -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//LogicalArchitecture -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//LogicalArchitecture -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//LogicalArchitecture -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//LogicalArchitecture -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//LogicalArchitecture -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//LogicalArchitecture -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//LogicalArchitecture -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//LogicalArchitecture -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//LogicalArchitecture -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//LogicalArchitecture -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//LogicalArchitecture -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//LogicalArchitecture -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//LogicalArchitecture -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//LogicalArchitecture -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//LogicalArchitecture -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//LogicalArchitecture -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//LogicalArchitecture -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//LogicalArchitecture -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//LogicalArchitecture -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//LogicalArchitecture -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//LogicalArchitecture -> EReference : ownedFunctionPkg
	if (s.ownedFunctionPkg.getEReference() != null){
		var ownedFunctionPkg = new SysMLine!ItemUsage;
		ownedFunctionPkg.isReference = true;
		ownedFunctionPkg.featureNote.add(":>");
		ownedFunctionPkg.featureSpecialization.add("ownedFunctionPkg");
		ownedFunctionPkg.valuePart = s.ownedFunctionPkg.getEReference();
		t.body.add(ownedFunctionPkg);
	}
	//LogicalArchitecture -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null){
		var ownedComponentExchanges = new SysMLine!ItemUsage;
		ownedComponentExchanges.isReference = true;
		ownedComponentExchanges.featureNote.add(":>");
		ownedComponentExchanges.featureSpecialization.add("ownedComponentExchanges");
		ownedComponentExchanges.valuePart = s.ownedComponentExchanges.getEReference();
		t.body.add(ownedComponentExchanges);
	}
	//LogicalArchitecture -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null){
		var ownedComponentExchangeCategories = new SysMLine!ItemUsage;
		ownedComponentExchangeCategories.isReference = true;
		ownedComponentExchangeCategories.featureNote.add(":>");
		ownedComponentExchangeCategories.featureSpecialization.add("ownedComponentExchangeCategories");
		ownedComponentExchangeCategories.valuePart = s.ownedComponentExchangeCategories.getEReference();
		t.body.add(ownedComponentExchangeCategories);
	}
	//LogicalArchitecture -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null){
		var ownedFunctionalLinks = new SysMLine!ItemUsage;
		ownedFunctionalLinks.isReference = true;
		ownedFunctionalLinks.featureNote.add(":>");
		ownedFunctionalLinks.featureSpecialization.add("ownedFunctionalLinks");
		ownedFunctionalLinks.valuePart = s.ownedFunctionalLinks.getEReference();
		t.body.add(ownedFunctionalLinks);
	}
	//LogicalArchitecture -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null){
		var ownedFunctionalAllocations = new SysMLine!ItemUsage;
		ownedFunctionalAllocations.isReference = true;
		ownedFunctionalAllocations.featureNote.add(":>");
		ownedFunctionalAllocations.featureSpecialization.add("ownedFunctionalAllocations");
		ownedFunctionalAllocations.valuePart = s.ownedFunctionalAllocations.getEReference();
		t.body.add(ownedFunctionalAllocations);
	}
	//LogicalArchitecture -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null){
		var ownedComponentExchangeRealizations = new SysMLine!ItemUsage;
		ownedComponentExchangeRealizations.isReference = true;
		ownedComponentExchangeRealizations.featureNote.add(":>");
		ownedComponentExchangeRealizations.featureSpecialization.add("ownedComponentExchangeRealizations");
		ownedComponentExchangeRealizations.valuePart = s.ownedComponentExchangeRealizations.getEReference();
		t.body.add(ownedComponentExchangeRealizations);
	}
	//LogicalArchitecture -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null){
		var ownedAbstractCapabilityPkg = new SysMLine!ItemUsage;
		ownedAbstractCapabilityPkg.isReference = true;
		ownedAbstractCapabilityPkg.featureNote.add(":>");
		ownedAbstractCapabilityPkg.featureSpecialization.add("ownedAbstractCapabilityPkg");
		ownedAbstractCapabilityPkg.valuePart = s.ownedAbstractCapabilityPkg.getEReference();
		t.body.add(ownedAbstractCapabilityPkg);
	}
	//LogicalArchitecture -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null){
		var ownedInterfacePkg = new SysMLine!ItemUsage;
		ownedInterfacePkg.isReference = true;
		ownedInterfacePkg.featureNote.add(":>");
		ownedInterfacePkg.featureSpecialization.add("ownedInterfacePkg");
		ownedInterfacePkg.valuePart = s.ownedInterfacePkg.getEReference();
		t.body.add(ownedInterfacePkg);
	}
	//LogicalArchitecture -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null){
		var ownedDataPkg = new SysMLine!ItemUsage;
		ownedDataPkg.isReference = true;
		ownedDataPkg.featureNote.add(":>");
		ownedDataPkg.featureSpecialization.add("ownedDataPkg");
		ownedDataPkg.valuePart = s.ownedDataPkg.getEReference();
		t.body.add(ownedDataPkg);
	}
	//LogicalArchitecture -> EReference : provisionedArchitectureAllocations
	if (s.provisionedArchitectureAllocations.getEReference() != null){
		var provisionedArchitectureAllocations = new SysMLine!ItemUsage;
		provisionedArchitectureAllocations.isReference = true;
		provisionedArchitectureAllocations.featureNote.add(":>");
		provisionedArchitectureAllocations.featureSpecialization.add("provisionedArchitectureAllocations");
		provisionedArchitectureAllocations.valuePart = s.provisionedArchitectureAllocations.getEReference();
		t.body.add(provisionedArchitectureAllocations);
	}
	//LogicalArchitecture -> EReference : provisioningArchitectureAllocations
	if (s.provisioningArchitectureAllocations.getEReference() != null){
		var provisioningArchitectureAllocations = new SysMLine!ItemUsage;
		provisioningArchitectureAllocations.isReference = true;
		provisioningArchitectureAllocations.featureNote.add(":>");
		provisioningArchitectureAllocations.featureSpecialization.add("provisioningArchitectureAllocations");
		provisioningArchitectureAllocations.valuePart = s.provisioningArchitectureAllocations.getEReference();
		t.body.add(provisioningArchitectureAllocations);
	}
	//LogicalArchitecture -> EReference : allocatedArchitectures
	if (s.allocatedArchitectures.getEReference() != null){
		var allocatedArchitectures = new SysMLine!ItemUsage;
		allocatedArchitectures.isReference = true;
		allocatedArchitectures.featureNote.add(":>");
		allocatedArchitectures.featureSpecialization.add("allocatedArchitectures");
		allocatedArchitectures.valuePart = s.allocatedArchitectures.getEReference();
		t.body.add(allocatedArchitectures);
	}
	//LogicalArchitecture -> EReference : allocatingArchitectures
	if (s.allocatingArchitectures.getEReference() != null){
		var allocatingArchitectures = new SysMLine!ItemUsage;
		allocatingArchitectures.isReference = true;
		allocatingArchitectures.featureNote.add(":>");
		allocatingArchitectures.featureSpecialization.add("allocatingArchitectures");
		allocatingArchitectures.valuePart = s.allocatingArchitectures.getEReference();
		t.body.add(allocatingArchitectures);
	}
	//LogicalArchitecture -> EReference : system
	if (s.system.getEReference() != null){
		var system = new SysMLine!ItemUsage;
		system.isReference = true;
		system.featureNote.add(":>");
		system.featureSpecialization.add("system");
		system.valuePart = s.system.getEReference();
		t.body.add(system);
	}
	//LogicalArchitecture -> EReference : ownedLogicalComponentPkg
	if (s.ownedLogicalComponentPkg.getEReference() != null){
		var ownedLogicalComponentPkg = new SysMLine!ItemUsage;
		ownedLogicalComponentPkg.isReference = true;
		ownedLogicalComponentPkg.featureNote.add(":>");
		ownedLogicalComponentPkg.featureSpecialization.add("ownedLogicalComponentPkg");
		ownedLogicalComponentPkg.valuePart = s.ownedLogicalComponentPkg.getEReference();
		t.body.add(ownedLogicalComponentPkg);
	}
	//LogicalArchitecture -> EReference : containedCapabilityRealizationPkg
	if (s.containedCapabilityRealizationPkg.getEReference() != null){
		var containedCapabilityRealizationPkg = new SysMLine!ItemUsage;
		containedCapabilityRealizationPkg.isReference = true;
		containedCapabilityRealizationPkg.featureNote.add(":>");
		containedCapabilityRealizationPkg.featureSpecialization.add("containedCapabilityRealizationPkg");
		containedCapabilityRealizationPkg.valuePart = s.containedCapabilityRealizationPkg.getEReference();
		t.body.add(containedCapabilityRealizationPkg);
	}
	//LogicalArchitecture -> EReference : containedLogicalFunctionPkg
	if (s.containedLogicalFunctionPkg.getEReference() != null){
		var containedLogicalFunctionPkg = new SysMLine!ItemUsage;
		containedLogicalFunctionPkg.isReference = true;
		containedLogicalFunctionPkg.featureNote.add(":>");
		containedLogicalFunctionPkg.featureSpecialization.add("containedLogicalFunctionPkg");
		containedLogicalFunctionPkg.valuePart = s.containedLogicalFunctionPkg.getEReference();
		t.body.add(containedLogicalFunctionPkg);
	}
	//LogicalArchitecture -> EReference : ownedSystemAnalysisRealizations
	if (s.ownedSystemAnalysisRealizations.getEReference() != null){
		var ownedSystemAnalysisRealizations = new SysMLine!ItemUsage;
		ownedSystemAnalysisRealizations.isReference = true;
		ownedSystemAnalysisRealizations.featureNote.add(":>");
		ownedSystemAnalysisRealizations.featureSpecialization.add("ownedSystemAnalysisRealizations");
		ownedSystemAnalysisRealizations.valuePart = s.ownedSystemAnalysisRealizations.getEReference();
		t.body.add(ownedSystemAnalysisRealizations);
	}
	//LogicalArchitecture -> EReference : allocatedSystemAnalysisRealizations
	if (s.allocatedSystemAnalysisRealizations.getEReference() != null){
		var allocatedSystemAnalysisRealizations = new SysMLine!ItemUsage;
		allocatedSystemAnalysisRealizations.isReference = true;
		allocatedSystemAnalysisRealizations.featureNote.add(":>");
		allocatedSystemAnalysisRealizations.featureSpecialization.add("allocatedSystemAnalysisRealizations");
		allocatedSystemAnalysisRealizations.valuePart = s.allocatedSystemAnalysisRealizations.getEReference();
		t.body.add(allocatedSystemAnalysisRealizations);
	}
	//LogicalArchitecture -> EReference : allocatedSystemAnalyses
	if (s.allocatedSystemAnalyses.getEReference() != null){
		var allocatedSystemAnalyses = new SysMLine!ItemUsage;
		allocatedSystemAnalyses.isReference = true;
		allocatedSystemAnalyses.featureNote.add(":>");
		allocatedSystemAnalyses.featureSpecialization.add("allocatedSystemAnalyses");
		allocatedSystemAnalyses.valuePart = s.allocatedSystemAnalyses.getEReference();
		t.body.add(allocatedSystemAnalyses);
	}
	//LogicalArchitecture -> EReference : allocatingPhysicalArchitectures
	if (s.allocatingPhysicalArchitectures.getEReference() != null){
		var allocatingPhysicalArchitectures = new SysMLine!ItemUsage;
		allocatingPhysicalArchitectures.isReference = true;
		allocatingPhysicalArchitectures.featureNote.add(":>");
		allocatingPhysicalArchitectures.featureSpecialization.add("allocatingPhysicalArchitectures");
		allocatingPhysicalArchitectures.valuePart = s.allocatingPhysicalArchitectures.getEReference();
		t.body.add(allocatingPhysicalArchitectures);
	}
}

@lazy
rule LogicalFunction
	transform s : DSL!LogicalFunction
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalFunction -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//LogicalFunction -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//LogicalFunction -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//LogicalFunction -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//LogicalFunction -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//LogicalFunction -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//LogicalFunction -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//LogicalFunction -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//LogicalFunction -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//LogicalFunction -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null){
		var isStatic = new SysMLine!AttributeUsage;
		isStatic.featureNote.add(":>>");
		isStatic.featureSpecialization.add("isStatic");
		isStatic.valuePart = s.isStatic.getEAttribute();
		t.body.add(isStatic);
	}
	//LogicalFunction -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null){
		var visibility = new SysMLine!AttributeUsage;
		visibility.featureNote.add(":>>");
		visibility.featureSpecialization.add("visibility");
		visibility.valuePart = s.visibility.getEAttribute();
		t.body.add(visibility);
	}
	//LogicalFunction -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null){
		var ordered = new SysMLine!AttributeUsage;
		ordered.featureNote.add(":>>");
		ordered.featureSpecialization.add("ordered");
		ordered.valuePart = s.ordered.getEAttribute();
		t.body.add(ordered);
	}
	//LogicalFunction -> EAttribute : unique
	if (s.unique.getEAttribute() != null){
		var unique = new SysMLine!AttributeUsage;
		unique.featureNote.add(":>>");
		unique.featureSpecialization.add("unique");
		unique.valuePart = s.unique.getEAttribute();
		t.body.add(unique);
	}
	//LogicalFunction -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null){
		var minInclusive = new SysMLine!AttributeUsage;
		minInclusive.featureNote.add(":>>");
		minInclusive.featureSpecialization.add("minInclusive");
		minInclusive.valuePart = s.minInclusive.getEAttribute();
		t.body.add(minInclusive);
	}
	//LogicalFunction -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null){
		var maxInclusive = new SysMLine!AttributeUsage;
		maxInclusive.featureNote.add(":>>");
		maxInclusive.featureSpecialization.add("maxInclusive");
		maxInclusive.valuePart = s.maxInclusive.getEAttribute();
		t.body.add(maxInclusive);
	}
	//LogicalFunction -> EAttribute : final
	if (s.final.getEAttribute() != null){
		var final = new SysMLine!AttributeUsage;
		final.featureNote.add(":>>");
		final.featureSpecialization.add("final");
		final.valuePart = s.final.getEAttribute();
		t.body.add(final);
	}
	//LogicalFunction -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null){
		var aggregationKind = new SysMLine!AttributeUsage;
		aggregationKind.featureNote.add(":>>");
		aggregationKind.featureSpecialization.add("aggregationKind");
		aggregationKind.valuePart = s.aggregationKind.getEAttribute();
		t.body.add(aggregationKind);
	}
	//LogicalFunction -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null){
		var isDerived = new SysMLine!AttributeUsage;
		isDerived.featureNote.add(":>>");
		isDerived.featureSpecialization.add("isDerived");
		isDerived.valuePart = s.isDerived.getEAttribute();
		t.body.add(isDerived);
	}
	//LogicalFunction -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null){
		var isReadOnly = new SysMLine!AttributeUsage;
		isReadOnly.featureNote.add(":>>");
		isReadOnly.featureSpecialization.add("isReadOnly");
		isReadOnly.valuePart = s.isReadOnly.getEAttribute();
		t.body.add(isReadOnly);
	}
	//LogicalFunction -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null){
		var isPartOfKey = new SysMLine!AttributeUsage;
		isPartOfKey.featureNote.add(":>>");
		isPartOfKey.featureSpecialization.add("isPartOfKey");
		isPartOfKey.valuePart = s.isPartOfKey.getEAttribute();
		t.body.add(isPartOfKey);
	}
	//LogicalFunction -> EAttribute : kind
	if (s.kind.getEAttribute() != null){
		var kind = new SysMLine!AttributeUsage;
		kind.featureNote.add(":>>");
		kind.featureSpecialization.add("kind");
		kind.valuePart = s.kind.getEAttribute();
		t.body.add(kind);
	}
	//LogicalFunction -> EAttribute : condition
	if (s.condition.getEAttribute() != null){
		var condition = new SysMLine!AttributeUsage;
		condition.featureNote.add(":>>");
		condition.featureSpecialization.add("condition");
		condition.valuePart = s.condition.getEAttribute();
		t.body.add(condition);
	}
	//LogicalFunction -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//LogicalFunction -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//LogicalFunction -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//LogicalFunction -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//LogicalFunction -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//LogicalFunction -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//LogicalFunction -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//LogicalFunction -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//LogicalFunction -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//LogicalFunction -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//LogicalFunction -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//LogicalFunction -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//LogicalFunction -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//LogicalFunction -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//LogicalFunction -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//LogicalFunction -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//LogicalFunction -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null){
		var involvingInvolvements = new SysMLine!ItemUsage;
		involvingInvolvements.isReference = true;
		involvingInvolvements.featureNote.add(":>");
		involvingInvolvements.featureSpecialization.add("involvingInvolvements");
		involvingInvolvements.valuePart = s.involvingInvolvements.getEReference();
		t.body.add(involvingInvolvements);
	}
	//LogicalFunction -> EReference : abstractType
	if (s.abstractType.getEReference() != null){
		var abstractType = new SysMLine!ItemUsage;
		abstractType.isReference = true;
		abstractType.featureNote.add(":>");
		abstractType.featureSpecialization.add("abstractType");
		abstractType.valuePart = s.abstractType.getEReference();
		t.body.add(abstractType);
	}
	//LogicalFunction -> EReference : type
	if (s.type.getEReference() != null){
		var type = new SysMLine!ItemUsage;
		type.isReference = true;
		type.featureNote.add(":>");
		type.featureSpecialization.add("type");
		type.valuePart = s.type.getEReference();
		t.body.add(type);
	}
	//LogicalFunction -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null){
		var ownedDefaultValue = new SysMLine!ItemUsage;
		ownedDefaultValue.isReference = true;
		ownedDefaultValue.featureNote.add(":>");
		ownedDefaultValue.featureSpecialization.add("ownedDefaultValue");
		ownedDefaultValue.valuePart = s.ownedDefaultValue.getEReference();
		t.body.add(ownedDefaultValue);
	}
	//LogicalFunction -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null){
		var ownedMinValue = new SysMLine!ItemUsage;
		ownedMinValue.isReference = true;
		ownedMinValue.featureNote.add(":>");
		ownedMinValue.featureSpecialization.add("ownedMinValue");
		ownedMinValue.valuePart = s.ownedMinValue.getEReference();
		t.body.add(ownedMinValue);
	}
	//LogicalFunction -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null){
		var ownedMaxValue = new SysMLine!ItemUsage;
		ownedMaxValue.isReference = true;
		ownedMaxValue.featureNote.add(":>");
		ownedMaxValue.featureSpecialization.add("ownedMaxValue");
		ownedMaxValue.valuePart = s.ownedMaxValue.getEReference();
		t.body.add(ownedMaxValue);
	}
	//LogicalFunction -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null){
		var ownedNullValue = new SysMLine!ItemUsage;
		ownedNullValue.isReference = true;
		ownedNullValue.featureNote.add(":>");
		ownedNullValue.featureSpecialization.add("ownedNullValue");
		ownedNullValue.valuePart = s.ownedNullValue.getEReference();
		t.body.add(ownedNullValue);
	}
	//LogicalFunction -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null){
		var ownedMinCard = new SysMLine!ItemUsage;
		ownedMinCard.isReference = true;
		ownedMinCard.featureNote.add(":>");
		ownedMinCard.featureSpecialization.add("ownedMinCard");
		ownedMinCard.valuePart = s.ownedMinCard.getEReference();
		t.body.add(ownedMinCard);
	}
	//LogicalFunction -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null){
		var ownedMinLength = new SysMLine!ItemUsage;
		ownedMinLength.isReference = true;
		ownedMinLength.featureNote.add(":>");
		ownedMinLength.featureSpecialization.add("ownedMinLength");
		ownedMinLength.valuePart = s.ownedMinLength.getEReference();
		t.body.add(ownedMinLength);
	}
	//LogicalFunction -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null){
		var ownedMaxCard = new SysMLine!ItemUsage;
		ownedMaxCard.isReference = true;
		ownedMaxCard.featureNote.add(":>");
		ownedMaxCard.featureSpecialization.add("ownedMaxCard");
		ownedMaxCard.valuePart = s.ownedMaxCard.getEReference();
		t.body.add(ownedMaxCard);
	}
	//LogicalFunction -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null){
		var ownedMaxLength = new SysMLine!ItemUsage;
		ownedMaxLength.isReference = true;
		ownedMaxLength.featureNote.add(":>");
		ownedMaxLength.featureSpecialization.add("ownedMaxLength");
		ownedMaxLength.valuePart = s.ownedMaxLength.getEReference();
		t.body.add(ownedMaxLength);
	}
	//LogicalFunction -> EReference : association
	if (s.association.getEReference() != null){
		var association = new SysMLine!ItemUsage;
		association.isReference = true;
		association.featureNote.add(":>");
		association.featureSpecialization.add("association");
		association.valuePart = s.association.getEReference();
		t.body.add(association);
	}
	//LogicalFunction -> EReference : representingInstanceRoles
	if (s.representingInstanceRoles.getEReference() != null){
		var representingInstanceRoles = new SysMLine!ItemUsage;
		representingInstanceRoles.isReference = true;
		representingInstanceRoles.featureNote.add(":>");
		representingInstanceRoles.featureSpecialization.add("representingInstanceRoles");
		representingInstanceRoles.valuePart = s.representingInstanceRoles.getEReference();
		t.body.add(representingInstanceRoles);
	}
	//LogicalFunction -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null){
		var ownedFunctionalChains = new SysMLine!ItemUsage;
		ownedFunctionalChains.isReference = true;
		ownedFunctionalChains.featureNote.add(":>");
		ownedFunctionalChains.featureSpecialization.add("ownedFunctionalChains");
		ownedFunctionalChains.valuePart = s.ownedFunctionalChains.getEReference();
		t.body.add(ownedFunctionalChains);
	}
	//LogicalFunction -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null){
		var inActivityPartition = new SysMLine!ItemUsage;
		inActivityPartition.isReference = true;
		inActivityPartition.featureNote.add(":>");
		inActivityPartition.featureSpecialization.add("inActivityPartition");
		inActivityPartition.valuePart = s.inActivityPartition.getEReference();
		t.body.add(inActivityPartition);
	}
	//LogicalFunction -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null){
		var inInterruptibleRegion = new SysMLine!ItemUsage;
		inInterruptibleRegion.isReference = true;
		inInterruptibleRegion.featureNote.add(":>");
		inInterruptibleRegion.featureSpecialization.add("inInterruptibleRegion");
		inInterruptibleRegion.valuePart = s.inInterruptibleRegion.getEReference();
		t.body.add(inInterruptibleRegion);
	}
	//LogicalFunction -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null){
		var inStructuredNode = new SysMLine!ItemUsage;
		inStructuredNode.isReference = true;
		inStructuredNode.featureNote.add(":>");
		inStructuredNode.featureSpecialization.add("inStructuredNode");
		inStructuredNode.valuePart = s.inStructuredNode.getEReference();
		t.body.add(inStructuredNode);
	}
	//LogicalFunction -> EReference : outgoing
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMLine!ItemUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	//LogicalFunction -> EReference : incoming
	if (s.incoming.getEReference() != null){
		var incoming = new SysMLine!ItemUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	//LogicalFunction -> EReference : ownedHandlers
	if (s.ownedHandlers.getEReference() != null){
		var ownedHandlers = new SysMLine!ItemUsage;
		ownedHandlers.isReference = true;
		ownedHandlers.featureNote.add(":>");
		ownedHandlers.featureSpecialization.add("ownedHandlers");
		ownedHandlers.valuePart = s.ownedHandlers.getEReference();
		t.body.add(ownedHandlers);
	}
	//LogicalFunction -> EReference : localPrecondition
	if (s.localPrecondition.getEReference() != null){
		var localPrecondition = new SysMLine!ItemUsage;
		localPrecondition.isReference = true;
		localPrecondition.featureNote.add(":>");
		localPrecondition.featureSpecialization.add("localPrecondition");
		localPrecondition.valuePart = s.localPrecondition.getEReference();
		t.body.add(localPrecondition);
	}
	//LogicalFunction -> EReference : localPostcondition
	if (s.localPostcondition.getEReference() != null){
		var localPostcondition = new SysMLine!ItemUsage;
		localPostcondition.isReference = true;
		localPostcondition.featureNote.add(":>");
		localPostcondition.featureSpecialization.add("localPostcondition");
		localPostcondition.valuePart = s.localPostcondition.getEReference();
		t.body.add(localPostcondition);
	}
	//LogicalFunction -> EReference : context
	if (s.context.getEReference() != null){
		var context = new SysMLine!ItemUsage;
		context.isReference = true;
		context.featureNote.add(":>");
		context.featureSpecialization.add("context");
		context.valuePart = s.context.getEReference();
		t.body.add(context);
	}
	//LogicalFunction -> EReference : inputs
	if (s.inputs.getEReference() != null){
		var inputs = new SysMLine!ItemUsage;
		inputs.isReference = true;
		inputs.featureNote.add(":>");
		inputs.featureSpecialization.add("inputs");
		inputs.valuePart = s.inputs.getEReference();
		t.body.add(inputs);
	}
	//LogicalFunction -> EReference : outputs
	if (s.outputs.getEReference() != null){
		var outputs = new SysMLine!ItemUsage;
		outputs.isReference = true;
		outputs.featureNote.add(":>");
		outputs.featureSpecialization.add("outputs");
		outputs.valuePart = s.outputs.getEReference();
		t.body.add(outputs);
	}
	//LogicalFunction -> EReference : arguments
	if (s.arguments.getEReference() != null){
		var arguments = new SysMLine!ItemUsage;
		arguments.isReference = true;
		arguments.featureNote.add(":>");
		arguments.featureSpecialization.add("arguments");
		arguments.valuePart = s.arguments.getEReference();
		t.body.add(arguments);
	}
	//LogicalFunction -> EReference : results
	if (s.results.getEReference() != null){
		var results = new SysMLine!ItemUsage;
		results.isReference = true;
		results.featureNote.add(":>");
		results.featureSpecialization.add("results");
		results.valuePart = s.results.getEReference();
		t.body.add(results);
	}
	//LogicalFunction -> EReference : behavior
	if (s.behavior.getEReference() != null){
		var behavior = new SysMLine!ItemUsage;
		behavior.isReference = true;
		behavior.featureNote.add(":>");
		behavior.featureSpecialization.add("behavior");
		behavior.valuePart = s.behavior.getEReference();
		t.body.add(behavior);
	}
	//LogicalFunction -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null){
		var abstractTypedElements = new SysMLine!ItemUsage;
		abstractTypedElements.isReference = true;
		abstractTypedElements.featureNote.add(":>");
		abstractTypedElements.featureSpecialization.add("abstractTypedElements");
		abstractTypedElements.valuePart = s.abstractTypedElements.getEReference();
		t.body.add(abstractTypedElements);
	}
	//LogicalFunction -> EReference : ownedFunctions
	if (s.ownedFunctions.getEReference() != null){
		var ownedFunctions = new SysMLine!ItemUsage;
		ownedFunctions.isReference = true;
		ownedFunctions.featureNote.add(":>");
		ownedFunctions.featureSpecialization.add("ownedFunctions");
		ownedFunctions.valuePart = s.ownedFunctions.getEReference();
		t.body.add(ownedFunctions);
	}
	//LogicalFunction -> EReference : ownedFunctionRealizations
	if (s.ownedFunctionRealizations.getEReference() != null){
		var ownedFunctionRealizations = new SysMLine!ItemUsage;
		ownedFunctionRealizations.isReference = true;
		ownedFunctionRealizations.featureNote.add(":>");
		ownedFunctionRealizations.featureSpecialization.add("ownedFunctionRealizations");
		ownedFunctionRealizations.valuePart = s.ownedFunctionRealizations.getEReference();
		t.body.add(ownedFunctionRealizations);
	}
	//LogicalFunction -> EReference : ownedFunctionalExchanges
	if (s.ownedFunctionalExchanges.getEReference() != null){
		var ownedFunctionalExchanges = new SysMLine!ItemUsage;
		ownedFunctionalExchanges.isReference = true;
		ownedFunctionalExchanges.featureNote.add(":>");
		ownedFunctionalExchanges.featureSpecialization.add("ownedFunctionalExchanges");
		ownedFunctionalExchanges.valuePart = s.ownedFunctionalExchanges.getEReference();
		t.body.add(ownedFunctionalExchanges);
	}
	//LogicalFunction -> EReference : subFunctions
	if (s.subFunctions.getEReference() != null){
		var subFunctions = new SysMLine!ItemUsage;
		subFunctions.isReference = true;
		subFunctions.featureNote.add(":>");
		subFunctions.featureSpecialization.add("subFunctions");
		subFunctions.valuePart = s.subFunctions.getEReference();
		t.body.add(subFunctions);
	}
	//LogicalFunction -> EReference : outFunctionRealizations
	if (s.outFunctionRealizations.getEReference() != null){
		var outFunctionRealizations = new SysMLine!ItemUsage;
		outFunctionRealizations.isReference = true;
		outFunctionRealizations.featureNote.add(":>");
		outFunctionRealizations.featureSpecialization.add("outFunctionRealizations");
		outFunctionRealizations.valuePart = s.outFunctionRealizations.getEReference();
		t.body.add(outFunctionRealizations);
	}
	//LogicalFunction -> EReference : inFunctionRealizations
	if (s.inFunctionRealizations.getEReference() != null){
		var inFunctionRealizations = new SysMLine!ItemUsage;
		inFunctionRealizations.isReference = true;
		inFunctionRealizations.featureNote.add(":>");
		inFunctionRealizations.featureSpecialization.add("inFunctionRealizations");
		inFunctionRealizations.valuePart = s.inFunctionRealizations.getEReference();
		t.body.add(inFunctionRealizations);
	}
	//LogicalFunction -> EReference : componentFunctionalAllocations
	if (s.componentFunctionalAllocations.getEReference() != null){
		var componentFunctionalAllocations = new SysMLine!ItemUsage;
		componentFunctionalAllocations.isReference = true;
		componentFunctionalAllocations.featureNote.add(":>");
		componentFunctionalAllocations.featureSpecialization.add("componentFunctionalAllocations");
		componentFunctionalAllocations.valuePart = s.componentFunctionalAllocations.getEReference();
		t.body.add(componentFunctionalAllocations);
	}
	//LogicalFunction -> EReference : allocationBlocks
	if (s.allocationBlocks.getEReference() != null){
		var allocationBlocks = new SysMLine!ItemUsage;
		allocationBlocks.isReference = true;
		allocationBlocks.featureNote.add(":>");
		allocationBlocks.featureSpecialization.add("allocationBlocks");
		allocationBlocks.valuePart = s.allocationBlocks.getEReference();
		t.body.add(allocationBlocks);
	}
	//LogicalFunction -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null){
		var availableInStates = new SysMLine!ItemUsage;
		availableInStates.isReference = true;
		availableInStates.featureNote.add(":>");
		availableInStates.featureSpecialization.add("availableInStates");
		availableInStates.valuePart = s.availableInStates.getEReference();
		t.body.add(availableInStates);
	}
	//LogicalFunction -> EReference : involvingCapabilities
	if (s.involvingCapabilities.getEReference() != null){
		var involvingCapabilities = new SysMLine!ItemUsage;
		involvingCapabilities.isReference = true;
		involvingCapabilities.featureNote.add(":>");
		involvingCapabilities.featureSpecialization.add("involvingCapabilities");
		involvingCapabilities.valuePart = s.involvingCapabilities.getEReference();
		t.body.add(involvingCapabilities);
	}
	//LogicalFunction -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null){
		var involvingCapabilityRealizations = new SysMLine!ItemUsage;
		involvingCapabilityRealizations.isReference = true;
		involvingCapabilityRealizations.featureNote.add(":>");
		involvingCapabilityRealizations.featureSpecialization.add("involvingCapabilityRealizations");
		involvingCapabilityRealizations.valuePart = s.involvingCapabilityRealizations.getEReference();
		t.body.add(involvingCapabilityRealizations);
	}
	//LogicalFunction -> EReference : involvingFunctionalChains
	if (s.involvingFunctionalChains.getEReference() != null){
		var involvingFunctionalChains = new SysMLine!ItemUsage;
		involvingFunctionalChains.isReference = true;
		involvingFunctionalChains.featureNote.add(":>");
		involvingFunctionalChains.featureSpecialization.add("involvingFunctionalChains");
		involvingFunctionalChains.valuePart = s.involvingFunctionalChains.getEReference();
		t.body.add(involvingFunctionalChains);
	}
	//LogicalFunction -> EReference : linkedStateMachine
	if (s.linkedStateMachine.getEReference() != null){
		var linkedStateMachine = new SysMLine!ItemUsage;
		linkedStateMachine.isReference = true;
		linkedStateMachine.featureNote.add(":>");
		linkedStateMachine.featureSpecialization.add("linkedStateMachine");
		linkedStateMachine.valuePart = s.linkedStateMachine.getEReference();
		t.body.add(linkedStateMachine);
	}
	//LogicalFunction -> EReference : linkedFunctionSpecification
	if (s.linkedFunctionSpecification.getEReference() != null){
		var linkedFunctionSpecification = new SysMLine!ItemUsage;
		linkedFunctionSpecification.isReference = true;
		linkedFunctionSpecification.featureNote.add(":>");
		linkedFunctionSpecification.featureSpecialization.add("linkedFunctionSpecification");
		linkedFunctionSpecification.valuePart = s.linkedFunctionSpecification.getEReference();
		t.body.add(linkedFunctionSpecification);
	}
	//LogicalFunction -> EReference : ownedLogicalFunctionPkgs
	if (s.ownedLogicalFunctionPkgs.getEReference() != null){
		var ownedLogicalFunctionPkgs = new SysMLine!ItemUsage;
		ownedLogicalFunctionPkgs.isReference = true;
		ownedLogicalFunctionPkgs.featureNote.add(":>");
		ownedLogicalFunctionPkgs.featureSpecialization.add("ownedLogicalFunctionPkgs");
		ownedLogicalFunctionPkgs.valuePart = s.ownedLogicalFunctionPkgs.getEReference();
		t.body.add(ownedLogicalFunctionPkgs);
	}
	//LogicalFunction -> EReference : allocatingLogicalComponents
	if (s.allocatingLogicalComponents.getEReference() != null){
		var allocatingLogicalComponents = new SysMLine!ItemUsage;
		allocatingLogicalComponents.isReference = true;
		allocatingLogicalComponents.featureNote.add(":>");
		allocatingLogicalComponents.featureSpecialization.add("allocatingLogicalComponents");
		allocatingLogicalComponents.valuePart = s.allocatingLogicalComponents.getEReference();
		t.body.add(allocatingLogicalComponents);
	}
	//LogicalFunction -> EReference : realizedSystemFunctions
	if (s.realizedSystemFunctions.getEReference() != null){
		var realizedSystemFunctions = new SysMLine!ItemUsage;
		realizedSystemFunctions.isReference = true;
		realizedSystemFunctions.featureNote.add(":>");
		realizedSystemFunctions.featureSpecialization.add("realizedSystemFunctions");
		realizedSystemFunctions.valuePart = s.realizedSystemFunctions.getEReference();
		t.body.add(realizedSystemFunctions);
	}
	//LogicalFunction -> EReference : realizingPhysicalFunctions
	if (s.realizingPhysicalFunctions.getEReference() != null){
		var realizingPhysicalFunctions = new SysMLine!ItemUsage;
		realizingPhysicalFunctions.isReference = true;
		realizingPhysicalFunctions.featureNote.add(":>");
		realizingPhysicalFunctions.featureSpecialization.add("realizingPhysicalFunctions");
		realizingPhysicalFunctions.valuePart = s.realizingPhysicalFunctions.getEReference();
		t.body.add(realizingPhysicalFunctions);
	}
	//LogicalFunction -> EReference : containedLogicalFunctions
	if (s.containedLogicalFunctions.getEReference() != null){
		var containedLogicalFunctions = new SysMLine!ItemUsage;
		containedLogicalFunctions.isReference = true;
		containedLogicalFunctions.featureNote.add(":>");
		containedLogicalFunctions.featureSpecialization.add("containedLogicalFunctions");
		containedLogicalFunctions.valuePart = s.containedLogicalFunctions.getEReference();
		t.body.add(containedLogicalFunctions);
	}
	//LogicalFunction -> EReference : childrenLogicalFunctions
	if (s.childrenLogicalFunctions.getEReference() != null){
		var childrenLogicalFunctions = new SysMLine!ItemUsage;
		childrenLogicalFunctions.isReference = true;
		childrenLogicalFunctions.featureNote.add(":>");
		childrenLogicalFunctions.featureSpecialization.add("childrenLogicalFunctions");
		childrenLogicalFunctions.valuePart = s.childrenLogicalFunctions.getEReference();
		t.body.add(childrenLogicalFunctions);
	}
}

@lazy
rule LogicalFunctionPkg
	transform s : DSL!LogicalFunctionPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalFunctionPkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//LogicalFunctionPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//LogicalFunctionPkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//LogicalFunctionPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//LogicalFunctionPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//LogicalFunctionPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//LogicalFunctionPkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//LogicalFunctionPkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//LogicalFunctionPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//LogicalFunctionPkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//LogicalFunctionPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//LogicalFunctionPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//LogicalFunctionPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//LogicalFunctionPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//LogicalFunctionPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//LogicalFunctionPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//LogicalFunctionPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//LogicalFunctionPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//LogicalFunctionPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//LogicalFunctionPkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//LogicalFunctionPkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//LogicalFunctionPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//LogicalFunctionPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//LogicalFunctionPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//LogicalFunctionPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//LogicalFunctionPkg -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null){
		var ownedFunctionalLinks = new SysMLine!ItemUsage;
		ownedFunctionalLinks.isReference = true;
		ownedFunctionalLinks.featureNote.add(":>");
		ownedFunctionalLinks.featureSpecialization.add("ownedFunctionalLinks");
		ownedFunctionalLinks.valuePart = s.ownedFunctionalLinks.getEReference();
		t.body.add(ownedFunctionalLinks);
	}
	//LogicalFunctionPkg -> EReference : ownedExchanges
	if (s.ownedExchanges.getEReference() != null){
		var ownedExchanges = new SysMLine!ItemUsage;
		ownedExchanges.isReference = true;
		ownedExchanges.featureNote.add(":>");
		ownedExchanges.featureSpecialization.add("ownedExchanges");
		ownedExchanges.valuePart = s.ownedExchanges.getEReference();
		t.body.add(ownedExchanges);
	}
	//LogicalFunctionPkg -> EReference : ownedExchangeSpecificationRealizations
	if (s.ownedExchangeSpecificationRealizations.getEReference() != null){
		var ownedExchangeSpecificationRealizations = new SysMLine!ItemUsage;
		ownedExchangeSpecificationRealizations.isReference = true;
		ownedExchangeSpecificationRealizations.featureNote.add(":>");
		ownedExchangeSpecificationRealizations.featureSpecialization.add("ownedExchangeSpecificationRealizations");
		ownedExchangeSpecificationRealizations.valuePart = s.ownedExchangeSpecificationRealizations.getEReference();
		t.body.add(ownedExchangeSpecificationRealizations);
	}
	//LogicalFunctionPkg -> EReference : ownedCategories
	if (s.ownedCategories.getEReference() != null){
		var ownedCategories = new SysMLine!ItemUsage;
		ownedCategories.isReference = true;
		ownedCategories.featureNote.add(":>");
		ownedCategories.featureSpecialization.add("ownedCategories");
		ownedCategories.valuePart = s.ownedCategories.getEReference();
		t.body.add(ownedCategories);
	}
	//LogicalFunctionPkg -> EReference : ownedFunctionSpecifications
	if (s.ownedFunctionSpecifications.getEReference() != null){
		var ownedFunctionSpecifications = new SysMLine!ItemUsage;
		ownedFunctionSpecifications.isReference = true;
		ownedFunctionSpecifications.featureNote.add(":>");
		ownedFunctionSpecifications.featureSpecialization.add("ownedFunctionSpecifications");
		ownedFunctionSpecifications.valuePart = s.ownedFunctionSpecifications.getEReference();
		t.body.add(ownedFunctionSpecifications);
	}
	//LogicalFunctionPkg -> EReference : ownedLogicalFunctions
	if (s.ownedLogicalFunctions.getEReference() != null){
		var ownedLogicalFunctions = new SysMLine!ItemUsage;
		ownedLogicalFunctions.isReference = true;
		ownedLogicalFunctions.featureNote.add(":>");
		ownedLogicalFunctions.featureSpecialization.add("ownedLogicalFunctions");
		ownedLogicalFunctions.valuePart = s.ownedLogicalFunctions.getEReference();
		t.body.add(ownedLogicalFunctions);
	}
	//LogicalFunctionPkg -> EReference : ownedLogicalFunctionPkgs
	if (s.ownedLogicalFunctionPkgs.getEReference() != null){
		var ownedLogicalFunctionPkgs = new SysMLine!ItemUsage;
		ownedLogicalFunctionPkgs.isReference = true;
		ownedLogicalFunctionPkgs.featureNote.add(":>");
		ownedLogicalFunctionPkgs.featureSpecialization.add("ownedLogicalFunctionPkgs");
		ownedLogicalFunctionPkgs.valuePart = s.ownedLogicalFunctionPkgs.getEReference();
		t.body.add(ownedLogicalFunctionPkgs);
	}
}

@lazy
rule LogicalComponent
	transform s : DSL!LogicalComponent
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalComponent -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//LogicalComponent -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//LogicalComponent -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//LogicalComponent -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//LogicalComponent -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//LogicalComponent -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//LogicalComponent -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//LogicalComponent -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//LogicalComponent -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null){
		var abstract = new SysMLine!AttributeUsage;
		abstract.featureNote.add(":>>");
		abstract.featureSpecialization.add("abstract");
		abstract.valuePart = s.abstract.getEAttribute();
		t.body.add(abstract);
	}
	//LogicalComponent -> EAttribute : actor
	if (s.actor.getEAttribute() != null){
		var actor = new SysMLine!AttributeUsage;
		actor.featureNote.add(":>>");
		actor.featureSpecialization.add("actor");
		actor.valuePart = s.actor.getEAttribute();
		t.body.add(actor);
	}
	//LogicalComponent -> EAttribute : human
	if (s.human.getEAttribute() != null){
		var human = new SysMLine!AttributeUsage;
		human.featureNote.add(":>>");
		human.featureSpecialization.add("human");
		human.valuePart = s.human.getEAttribute();
		t.body.add(human);
	}
	//LogicalComponent -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//LogicalComponent -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//LogicalComponent -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//LogicalComponent -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//LogicalComponent -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null){
		var abstractTypedElements = new SysMLine!ItemUsage;
		abstractTypedElements.isReference = true;
		abstractTypedElements.featureNote.add(":>");
		abstractTypedElements.featureSpecialization.add("abstractTypedElements");
		abstractTypedElements.valuePart = s.abstractTypedElements.getEReference();
		t.body.add(abstractTypedElements);
	}
	//LogicalComponent -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//LogicalComponent -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//LogicalComponent -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//LogicalComponent -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//LogicalComponent -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//LogicalComponent -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//LogicalComponent -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//LogicalComponent -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//LogicalComponent -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//LogicalComponent -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//LogicalComponent -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//LogicalComponent -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//LogicalComponent -> EReference : typedElements
	if (s.typedElements.getEReference() != null){
		var typedElements = new SysMLine!ItemUsage;
		typedElements.isReference = true;
		typedElements.featureNote.add(":>");
		typedElements.featureSpecialization.add("typedElements");
		typedElements.valuePart = s.typedElements.getEReference();
		t.body.add(typedElements);
	}
	//LogicalComponent -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null){
		var ownedFunctionalAllocation = new SysMLine!ItemUsage;
		ownedFunctionalAllocation.isReference = true;
		ownedFunctionalAllocation.featureNote.add(":>");
		ownedFunctionalAllocation.featureSpecialization.add("ownedFunctionalAllocation");
		ownedFunctionalAllocation.valuePart = s.ownedFunctionalAllocation.getEReference();
		t.body.add(ownedFunctionalAllocation);
	}
	//LogicalComponent -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null){
		var ownedComponentExchanges = new SysMLine!ItemUsage;
		ownedComponentExchanges.isReference = true;
		ownedComponentExchanges.featureNote.add(":>");
		ownedComponentExchanges.featureSpecialization.add("ownedComponentExchanges");
		ownedComponentExchanges.valuePart = s.ownedComponentExchanges.getEReference();
		t.body.add(ownedComponentExchanges);
	}
	//LogicalComponent -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null){
		var ownedComponentExchangeCategories = new SysMLine!ItemUsage;
		ownedComponentExchangeCategories.isReference = true;
		ownedComponentExchangeCategories.featureNote.add(":>");
		ownedComponentExchangeCategories.featureSpecialization.add("ownedComponentExchangeCategories");
		ownedComponentExchangeCategories.valuePart = s.ownedComponentExchangeCategories.getEReference();
		t.body.add(ownedComponentExchangeCategories);
	}
	//LogicalComponent -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null){
		var functionalAllocations = new SysMLine!ItemUsage;
		functionalAllocations.isReference = true;
		functionalAllocations.featureNote.add(":>");
		functionalAllocations.featureSpecialization.add("functionalAllocations");
		functionalAllocations.valuePart = s.functionalAllocations.getEReference();
		t.body.add(functionalAllocations);
	}
	//LogicalComponent -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null){
		var allocatedFunctions = new SysMLine!ItemUsage;
		allocatedFunctions.isReference = true;
		allocatedFunctions.featureNote.add(":>");
		allocatedFunctions.featureSpecialization.add("allocatedFunctions");
		allocatedFunctions.valuePart = s.allocatedFunctions.getEReference();
		t.body.add(allocatedFunctions);
	}
	//LogicalComponent -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null){
		var inExchangeLinks = new SysMLine!ItemUsage;
		inExchangeLinks.isReference = true;
		inExchangeLinks.featureNote.add(":>");
		inExchangeLinks.featureSpecialization.add("inExchangeLinks");
		inExchangeLinks.valuePart = s.inExchangeLinks.getEReference();
		t.body.add(inExchangeLinks);
	}
	//LogicalComponent -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null){
		var outExchangeLinks = new SysMLine!ItemUsage;
		outExchangeLinks.isReference = true;
		outExchangeLinks.featureNote.add(":>");
		outExchangeLinks.featureSpecialization.add("outExchangeLinks");
		outExchangeLinks.valuePart = s.outExchangeLinks.getEReference();
		t.body.add(outExchangeLinks);
	}
	//LogicalComponent -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null){
		var ownedAbstractCapabilityPkg = new SysMLine!ItemUsage;
		ownedAbstractCapabilityPkg.isReference = true;
		ownedAbstractCapabilityPkg.featureNote.add(":>");
		ownedAbstractCapabilityPkg.featureSpecialization.add("ownedAbstractCapabilityPkg");
		ownedAbstractCapabilityPkg.valuePart = s.ownedAbstractCapabilityPkg.getEReference();
		t.body.add(ownedAbstractCapabilityPkg);
	}
	//LogicalComponent -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null){
		var ownedInterfacePkg = new SysMLine!ItemUsage;
		ownedInterfacePkg.isReference = true;
		ownedInterfacePkg.featureNote.add(":>");
		ownedInterfacePkg.featureSpecialization.add("ownedInterfacePkg");
		ownedInterfacePkg.valuePart = s.ownedInterfacePkg.getEReference();
		t.body.add(ownedInterfacePkg);
	}
	//LogicalComponent -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null){
		var ownedDataPkg = new SysMLine!ItemUsage;
		ownedDataPkg.isReference = true;
		ownedDataPkg.featureNote.add(":>");
		ownedDataPkg.featureSpecialization.add("ownedDataPkg");
		ownedDataPkg.valuePart = s.ownedDataPkg.getEReference();
		t.body.add(ownedDataPkg);
	}
	//LogicalComponent -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null){
		var ownedStateMachines = new SysMLine!ItemUsage;
		ownedStateMachines.isReference = true;
		ownedStateMachines.featureNote.add(":>");
		ownedStateMachines.featureSpecialization.add("ownedStateMachines");
		ownedStateMachines.valuePart = s.ownedStateMachines.getEReference();
		t.body.add(ownedStateMachines);
	}
	//LogicalComponent -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null){
		var ownedGeneralizations = new SysMLine!ItemUsage;
		ownedGeneralizations.isReference = true;
		ownedGeneralizations.featureNote.add(":>");
		ownedGeneralizations.featureSpecialization.add("ownedGeneralizations");
		ownedGeneralizations.valuePart = s.ownedGeneralizations.getEReference();
		t.body.add(ownedGeneralizations);
	}
	//LogicalComponent -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null){
		var superGeneralizations = new SysMLine!ItemUsage;
		superGeneralizations.isReference = true;
		superGeneralizations.featureNote.add(":>");
		superGeneralizations.featureSpecialization.add("superGeneralizations");
		superGeneralizations.valuePart = s.superGeneralizations.getEReference();
		t.body.add(superGeneralizations);
	}
	//LogicalComponent -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null){
		var subGeneralizations = new SysMLine!ItemUsage;
		subGeneralizations.isReference = true;
		subGeneralizations.featureNote.add(":>");
		subGeneralizations.featureSpecialization.add("subGeneralizations");
		subGeneralizations.valuePart = s.subGeneralizations.getEReference();
		t.body.add(subGeneralizations);
	}
	//LogicalComponent -> EReference : super
	if (s.super.getEReference() != null){
		var super = new SysMLine!ItemUsage;
		super.isReference = true;
		super.featureNote.add(":>");
		super.featureSpecialization.add("super");
		super.valuePart = s.super.getEReference();
		t.body.add(super);
	}
	//LogicalComponent -> EReference : sub
	if (s.sub.getEReference() != null){
		var sub = new SysMLine!ItemUsage;
		sub.isReference = true;
		sub.featureNote.add(":>");
		sub.featureSpecialization.add("sub");
		sub.valuePart = s.sub.getEReference();
		t.body.add(sub);
	}
	//LogicalComponent -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null){
		var ownedFeatures = new SysMLine!ItemUsage;
		ownedFeatures.isReference = true;
		ownedFeatures.featureNote.add(":>");
		ownedFeatures.featureSpecialization.add("ownedFeatures");
		ownedFeatures.valuePart = s.ownedFeatures.getEReference();
		t.body.add(ownedFeatures);
	}
	//LogicalComponent -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null){
		var containedProperties = new SysMLine!ItemUsage;
		containedProperties.isReference = true;
		containedProperties.featureNote.add(":>");
		containedProperties.featureSpecialization.add("containedProperties");
		containedProperties.valuePart = s.containedProperties.getEReference();
		t.body.add(containedProperties);
	}
	//LogicalComponent -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null){
		var ownedInterfaceAllocations = new SysMLine!ItemUsage;
		ownedInterfaceAllocations.isReference = true;
		ownedInterfaceAllocations.featureNote.add(":>");
		ownedInterfaceAllocations.featureSpecialization.add("ownedInterfaceAllocations");
		ownedInterfaceAllocations.valuePart = s.ownedInterfaceAllocations.getEReference();
		t.body.add(ownedInterfaceAllocations);
	}
	//LogicalComponent -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null){
		var provisionedInterfaceAllocations = new SysMLine!ItemUsage;
		provisionedInterfaceAllocations.isReference = true;
		provisionedInterfaceAllocations.featureNote.add(":>");
		provisionedInterfaceAllocations.featureSpecialization.add("provisionedInterfaceAllocations");
		provisionedInterfaceAllocations.valuePart = s.provisionedInterfaceAllocations.getEReference();
		t.body.add(provisionedInterfaceAllocations);
	}
	//LogicalComponent -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null){
		var allocatedInterfaces = new SysMLine!ItemUsage;
		allocatedInterfaces.isReference = true;
		allocatedInterfaces.featureNote.add(":>");
		allocatedInterfaces.featureSpecialization.add("allocatedInterfaces");
		allocatedInterfaces.valuePart = s.allocatedInterfaces.getEReference();
		t.body.add(allocatedInterfaces);
	}
	//LogicalComponent -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null){
		var ownedCommunicationLinks = new SysMLine!ItemUsage;
		ownedCommunicationLinks.isReference = true;
		ownedCommunicationLinks.featureNote.add(":>");
		ownedCommunicationLinks.featureSpecialization.add("ownedCommunicationLinks");
		ownedCommunicationLinks.valuePart = s.ownedCommunicationLinks.getEReference();
		t.body.add(ownedCommunicationLinks);
	}
	//LogicalComponent -> EReference : produce
	if (s.produce.getEReference() != null){
		var produce = new SysMLine!ItemUsage;
		produce.isReference = true;
		produce.featureNote.add(":>");
		produce.featureSpecialization.add("produce");
		produce.valuePart = s.produce.getEReference();
		t.body.add(produce);
	}
	//LogicalComponent -> EReference : consume
	if (s.consume.getEReference() != null){
		var consume = new SysMLine!ItemUsage;
		consume.isReference = true;
		consume.featureNote.add(":>");
		consume.featureSpecialization.add("consume");
		consume.valuePart = s.consume.getEReference();
		t.body.add(consume);
	}
	//LogicalComponent -> EReference : send
	if (s.send.getEReference() != null){
		var send = new SysMLine!ItemUsage;
		send.isReference = true;
		send.featureNote.add(":>");
		send.featureSpecialization.add("send");
		send.valuePart = s.send.getEReference();
		t.body.add(send);
	}
	//LogicalComponent -> EReference : receive
	if (s.receive.getEReference() != null){
		var receive = new SysMLine!ItemUsage;
		receive.isReference = true;
		receive.featureNote.add(":>");
		receive.featureSpecialization.add("receive");
		receive.valuePart = s.receive.getEReference();
		t.body.add(receive);
	}
	//LogicalComponent -> EReference : call
	if (s.call.getEReference() != null){
		var call = new SysMLine!ItemUsage;
		call.isReference = true;
		call.featureNote.add(":>");
		call.featureSpecialization.add("call");
		call.valuePart = s.call.getEReference();
		t.body.add(call);
	}
	//LogicalComponent -> EReference : execute
	if (s.execute.getEReference() != null){
		var execute = new SysMLine!ItemUsage;
		execute.isReference = true;
		execute.featureNote.add(":>");
		execute.featureSpecialization.add("execute");
		execute.valuePart = s.execute.getEReference();
		t.body.add(execute);
	}
	//LogicalComponent -> EReference : write
	if (s.write.getEReference() != null){
		var write = new SysMLine!ItemUsage;
		write.isReference = true;
		write.featureNote.add(":>");
		write.featureSpecialization.add("write");
		write.valuePart = s.write.getEReference();
		t.body.add(write);
	}
	//LogicalComponent -> EReference : access
	if (s.access.getEReference() != null){
		var access = new SysMLine!ItemUsage;
		access.isReference = true;
		access.featureNote.add(":>");
		access.featureSpecialization.add("access");
		access.valuePart = s.access.getEReference();
		t.body.add(access);
	}
	//LogicalComponent -> EReference : acquire
	if (s.acquire.getEReference() != null){
		var acquire = new SysMLine!ItemUsage;
		acquire.isReference = true;
		acquire.featureNote.add(":>");
		acquire.featureSpecialization.add("acquire");
		acquire.valuePart = s.acquire.getEReference();
		t.body.add(acquire);
	}
	//LogicalComponent -> EReference : transmit
	if (s.transmit.getEReference() != null){
		var transmit = new SysMLine!ItemUsage;
		transmit.isReference = true;
		transmit.featureNote.add(":>");
		transmit.featureSpecialization.add("transmit");
		transmit.valuePart = s.transmit.getEReference();
		t.body.add(transmit);
	}
	//LogicalComponent -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null){
		var ownedInterfaceUses = new SysMLine!ItemUsage;
		ownedInterfaceUses.isReference = true;
		ownedInterfaceUses.featureNote.add(":>");
		ownedInterfaceUses.featureSpecialization.add("ownedInterfaceUses");
		ownedInterfaceUses.valuePart = s.ownedInterfaceUses.getEReference();
		t.body.add(ownedInterfaceUses);
	}
	//LogicalComponent -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null){
		var usedInterfaceLinks = new SysMLine!ItemUsage;
		usedInterfaceLinks.isReference = true;
		usedInterfaceLinks.featureNote.add(":>");
		usedInterfaceLinks.featureSpecialization.add("usedInterfaceLinks");
		usedInterfaceLinks.valuePart = s.usedInterfaceLinks.getEReference();
		t.body.add(usedInterfaceLinks);
	}
	//LogicalComponent -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null){
		var usedInterfaces = new SysMLine!ItemUsage;
		usedInterfaces.isReference = true;
		usedInterfaces.featureNote.add(":>");
		usedInterfaces.featureSpecialization.add("usedInterfaces");
		usedInterfaces.valuePart = s.usedInterfaces.getEReference();
		t.body.add(usedInterfaces);
	}
	//LogicalComponent -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null){
		var ownedInterfaceImplementations = new SysMLine!ItemUsage;
		ownedInterfaceImplementations.isReference = true;
		ownedInterfaceImplementations.featureNote.add(":>");
		ownedInterfaceImplementations.featureSpecialization.add("ownedInterfaceImplementations");
		ownedInterfaceImplementations.valuePart = s.ownedInterfaceImplementations.getEReference();
		t.body.add(ownedInterfaceImplementations);
	}
	//LogicalComponent -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null){
		var implementedInterfaceLinks = new SysMLine!ItemUsage;
		implementedInterfaceLinks.isReference = true;
		implementedInterfaceLinks.featureNote.add(":>");
		implementedInterfaceLinks.featureSpecialization.add("implementedInterfaceLinks");
		implementedInterfaceLinks.valuePart = s.implementedInterfaceLinks.getEReference();
		t.body.add(implementedInterfaceLinks);
	}
	//LogicalComponent -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null){
		var implementedInterfaces = new SysMLine!ItemUsage;
		implementedInterfaces.isReference = true;
		implementedInterfaces.featureNote.add(":>");
		implementedInterfaces.featureSpecialization.add("implementedInterfaces");
		implementedInterfaces.valuePart = s.implementedInterfaces.getEReference();
		t.body.add(implementedInterfaces);
	}
	//LogicalComponent -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null){
		var ownedComponentRealizations = new SysMLine!ItemUsage;
		ownedComponentRealizations.isReference = true;
		ownedComponentRealizations.featureNote.add(":>");
		ownedComponentRealizations.featureSpecialization.add("ownedComponentRealizations");
		ownedComponentRealizations.valuePart = s.ownedComponentRealizations.getEReference();
		t.body.add(ownedComponentRealizations);
	}
	//LogicalComponent -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null){
		var realizedComponents = new SysMLine!ItemUsage;
		realizedComponents.isReference = true;
		realizedComponents.featureNote.add(":>");
		realizedComponents.featureSpecialization.add("realizedComponents");
		realizedComponents.valuePart = s.realizedComponents.getEReference();
		t.body.add(realizedComponents);
	}
	//LogicalComponent -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null){
		var realizingComponents = new SysMLine!ItemUsage;
		realizingComponents.isReference = true;
		realizingComponents.featureNote.add(":>");
		realizingComponents.featureSpecialization.add("realizingComponents");
		realizingComponents.valuePart = s.realizingComponents.getEReference();
		t.body.add(realizingComponents);
	}
	//LogicalComponent -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null){
		var providedInterfaces = new SysMLine!ItemUsage;
		providedInterfaces.isReference = true;
		providedInterfaces.featureNote.add(":>");
		providedInterfaces.featureSpecialization.add("providedInterfaces");
		providedInterfaces.valuePart = s.providedInterfaces.getEReference();
		t.body.add(providedInterfaces);
	}
	//LogicalComponent -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null){
		var requiredInterfaces = new SysMLine!ItemUsage;
		requiredInterfaces.isReference = true;
		requiredInterfaces.featureNote.add(":>");
		requiredInterfaces.featureSpecialization.add("requiredInterfaces");
		requiredInterfaces.valuePart = s.requiredInterfaces.getEReference();
		t.body.add(requiredInterfaces);
	}
	//LogicalComponent -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null){
		var containedComponentPorts = new SysMLine!ItemUsage;
		containedComponentPorts.isReference = true;
		containedComponentPorts.featureNote.add(":>");
		containedComponentPorts.featureSpecialization.add("containedComponentPorts");
		containedComponentPorts.valuePart = s.containedComponentPorts.getEReference();
		t.body.add(containedComponentPorts);
	}
	//LogicalComponent -> EReference : containedParts
	if (s.containedParts.getEReference() != null){
		var containedParts = new SysMLine!ItemUsage;
		containedParts.isReference = true;
		containedParts.featureNote.add(":>");
		containedParts.featureSpecialization.add("containedParts");
		containedParts.valuePart = s.containedParts.getEReference();
		t.body.add(containedParts);
	}
	//LogicalComponent -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null){
		var containedPhysicalPorts = new SysMLine!ItemUsage;
		containedPhysicalPorts.isReference = true;
		containedPhysicalPorts.featureNote.add(":>");
		containedPhysicalPorts.featureSpecialization.add("containedPhysicalPorts");
		containedPhysicalPorts.valuePart = s.containedPhysicalPorts.getEReference();
		t.body.add(containedPhysicalPorts);
	}
	//LogicalComponent -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null){
		var ownedPhysicalPath = new SysMLine!ItemUsage;
		ownedPhysicalPath.isReference = true;
		ownedPhysicalPath.featureNote.add(":>");
		ownedPhysicalPath.featureSpecialization.add("ownedPhysicalPath");
		ownedPhysicalPath.valuePart = s.ownedPhysicalPath.getEReference();
		t.body.add(ownedPhysicalPath);
	}
	//LogicalComponent -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null){
		var ownedPhysicalLinks = new SysMLine!ItemUsage;
		ownedPhysicalLinks.isReference = true;
		ownedPhysicalLinks.featureNote.add(":>");
		ownedPhysicalLinks.featureSpecialization.add("ownedPhysicalLinks");
		ownedPhysicalLinks.valuePart = s.ownedPhysicalLinks.getEReference();
		t.body.add(ownedPhysicalLinks);
	}
	//LogicalComponent -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null){
		var ownedPhysicalLinkCategories = new SysMLine!ItemUsage;
		ownedPhysicalLinkCategories.isReference = true;
		ownedPhysicalLinkCategories.featureNote.add(":>");
		ownedPhysicalLinkCategories.featureSpecialization.add("ownedPhysicalLinkCategories");
		ownedPhysicalLinkCategories.valuePart = s.ownedPhysicalLinkCategories.getEReference();
		t.body.add(ownedPhysicalLinkCategories);
	}
	//LogicalComponent -> EReference : representingParts
	if (s.representingParts.getEReference() != null){
		var representingParts = new SysMLine!ItemUsage;
		representingParts.isReference = true;
		representingParts.featureNote.add(":>");
		representingParts.featureSpecialization.add("representingParts");
		representingParts.valuePart = s.representingParts.getEReference();
		t.body.add(representingParts);
	}
	//LogicalComponent -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null){
		var involvingInvolvements = new SysMLine!ItemUsage;
		involvingInvolvements.isReference = true;
		involvingInvolvements.featureNote.add(":>");
		involvingInvolvements.featureSpecialization.add("involvingInvolvements");
		involvingInvolvements.valuePart = s.involvingInvolvements.getEReference();
		t.body.add(involvingInvolvements);
	}
	//LogicalComponent -> EReference : capabilityRealizationInvolvements
	if (s.capabilityRealizationInvolvements.getEReference() != null){
		var capabilityRealizationInvolvements = new SysMLine!ItemUsage;
		capabilityRealizationInvolvements.isReference = true;
		capabilityRealizationInvolvements.featureNote.add(":>");
		capabilityRealizationInvolvements.featureSpecialization.add("capabilityRealizationInvolvements");
		capabilityRealizationInvolvements.valuePart = s.capabilityRealizationInvolvements.getEReference();
		t.body.add(capabilityRealizationInvolvements);
	}
	//LogicalComponent -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null){
		var involvingCapabilityRealizations = new SysMLine!ItemUsage;
		involvingCapabilityRealizations.isReference = true;
		involvingCapabilityRealizations.featureNote.add(":>");
		involvingCapabilityRealizations.featureSpecialization.add("involvingCapabilityRealizations");
		involvingCapabilityRealizations.valuePart = s.involvingCapabilityRealizations.getEReference();
		t.body.add(involvingCapabilityRealizations);
	}
	//LogicalComponent -> EReference : ownedLogicalComponents
	if (s.ownedLogicalComponents.getEReference() != null){
		var ownedLogicalComponents = new SysMLine!ItemUsage;
		ownedLogicalComponents.isReference = true;
		ownedLogicalComponents.featureNote.add(":>");
		ownedLogicalComponents.featureSpecialization.add("ownedLogicalComponents");
		ownedLogicalComponents.valuePart = s.ownedLogicalComponents.getEReference();
		t.body.add(ownedLogicalComponents);
	}
	//LogicalComponent -> EReference : ownedLogicalArchitectures
	if (s.ownedLogicalArchitectures.getEReference() != null){
		var ownedLogicalArchitectures = new SysMLine!ItemUsage;
		ownedLogicalArchitectures.isReference = true;
		ownedLogicalArchitectures.featureNote.add(":>");
		ownedLogicalArchitectures.featureSpecialization.add("ownedLogicalArchitectures");
		ownedLogicalArchitectures.valuePart = s.ownedLogicalArchitectures.getEReference();
		t.body.add(ownedLogicalArchitectures);
	}
	//LogicalComponent -> EReference : ownedLogicalComponentPkgs
	if (s.ownedLogicalComponentPkgs.getEReference() != null){
		var ownedLogicalComponentPkgs = new SysMLine!ItemUsage;
		ownedLogicalComponentPkgs.isReference = true;
		ownedLogicalComponentPkgs.featureNote.add(":>");
		ownedLogicalComponentPkgs.featureSpecialization.add("ownedLogicalComponentPkgs");
		ownedLogicalComponentPkgs.valuePart = s.ownedLogicalComponentPkgs.getEReference();
		t.body.add(ownedLogicalComponentPkgs);
	}
	//LogicalComponent -> EReference : subLogicalComponents
	if (s.subLogicalComponents.getEReference() != null){
		var subLogicalComponents = new SysMLine!ItemUsage;
		subLogicalComponents.isReference = true;
		subLogicalComponents.featureNote.add(":>");
		subLogicalComponents.featureSpecialization.add("subLogicalComponents");
		subLogicalComponents.valuePart = s.subLogicalComponents.getEReference();
		t.body.add(subLogicalComponents);
	}
	//LogicalComponent -> EReference : allocatedLogicalFunctions
	if (s.allocatedLogicalFunctions.getEReference() != null){
		var allocatedLogicalFunctions = new SysMLine!ItemUsage;
		allocatedLogicalFunctions.isReference = true;
		allocatedLogicalFunctions.featureNote.add(":>");
		allocatedLogicalFunctions.featureSpecialization.add("allocatedLogicalFunctions");
		allocatedLogicalFunctions.valuePart = s.allocatedLogicalFunctions.getEReference();
		t.body.add(allocatedLogicalFunctions);
	}
	//LogicalComponent -> EReference : realizedSystemComponents
	if (s.realizedSystemComponents.getEReference() != null){
		var realizedSystemComponents = new SysMLine!ItemUsage;
		realizedSystemComponents.isReference = true;
		realizedSystemComponents.featureNote.add(":>");
		realizedSystemComponents.featureSpecialization.add("realizedSystemComponents");
		realizedSystemComponents.valuePart = s.realizedSystemComponents.getEReference();
		t.body.add(realizedSystemComponents);
	}
	//LogicalComponent -> EReference : realizingPhysicalComponents
	if (s.realizingPhysicalComponents.getEReference() != null){
		var realizingPhysicalComponents = new SysMLine!ItemUsage;
		realizingPhysicalComponents.isReference = true;
		realizingPhysicalComponents.featureNote.add(":>");
		realizingPhysicalComponents.featureSpecialization.add("realizingPhysicalComponents");
		realizingPhysicalComponents.valuePart = s.realizingPhysicalComponents.getEReference();
		t.body.add(realizingPhysicalComponents);
	}
}

@lazy
rule LogicalComponentPkg
	transform s : DSL!LogicalComponentPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalComponentPkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//LogicalComponentPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//LogicalComponentPkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//LogicalComponentPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//LogicalComponentPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//LogicalComponentPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//LogicalComponentPkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//LogicalComponentPkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//LogicalComponentPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//LogicalComponentPkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//LogicalComponentPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//LogicalComponentPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//LogicalComponentPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//LogicalComponentPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//LogicalComponentPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//LogicalComponentPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//LogicalComponentPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//LogicalComponentPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//LogicalComponentPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//LogicalComponentPkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//LogicalComponentPkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//LogicalComponentPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//LogicalComponentPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//LogicalComponentPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//LogicalComponentPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//LogicalComponentPkg -> EReference : ownedParts
	if (s.ownedParts.getEReference() != null){
		var ownedParts = new SysMLine!ItemUsage;
		ownedParts.isReference = true;
		ownedParts.featureNote.add(":>");
		ownedParts.featureSpecialization.add("ownedParts");
		ownedParts.valuePart = s.ownedParts.getEReference();
		t.body.add(ownedParts);
	}
	//LogicalComponentPkg -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null){
		var ownedComponentExchanges = new SysMLine!ItemUsage;
		ownedComponentExchanges.isReference = true;
		ownedComponentExchanges.featureNote.add(":>");
		ownedComponentExchanges.featureSpecialization.add("ownedComponentExchanges");
		ownedComponentExchanges.valuePart = s.ownedComponentExchanges.getEReference();
		t.body.add(ownedComponentExchanges);
	}
	//LogicalComponentPkg -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null){
		var ownedComponentExchangeCategories = new SysMLine!ItemUsage;
		ownedComponentExchangeCategories.isReference = true;
		ownedComponentExchangeCategories.featureNote.add(":>");
		ownedComponentExchangeCategories.featureSpecialization.add("ownedComponentExchangeCategories");
		ownedComponentExchangeCategories.valuePart = s.ownedComponentExchangeCategories.getEReference();
		t.body.add(ownedComponentExchangeCategories);
	}
	//LogicalComponentPkg -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null){
		var ownedFunctionalLinks = new SysMLine!ItemUsage;
		ownedFunctionalLinks.isReference = true;
		ownedFunctionalLinks.featureNote.add(":>");
		ownedFunctionalLinks.featureSpecialization.add("ownedFunctionalLinks");
		ownedFunctionalLinks.valuePart = s.ownedFunctionalLinks.getEReference();
		t.body.add(ownedFunctionalLinks);
	}
	//LogicalComponentPkg -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null){
		var ownedFunctionalAllocations = new SysMLine!ItemUsage;
		ownedFunctionalAllocations.isReference = true;
		ownedFunctionalAllocations.featureNote.add(":>");
		ownedFunctionalAllocations.featureSpecialization.add("ownedFunctionalAllocations");
		ownedFunctionalAllocations.valuePart = s.ownedFunctionalAllocations.getEReference();
		t.body.add(ownedFunctionalAllocations);
	}
	//LogicalComponentPkg -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null){
		var ownedComponentExchangeRealizations = new SysMLine!ItemUsage;
		ownedComponentExchangeRealizations.isReference = true;
		ownedComponentExchangeRealizations.featureNote.add(":>");
		ownedComponentExchangeRealizations.featureSpecialization.add("ownedComponentExchangeRealizations");
		ownedComponentExchangeRealizations.valuePart = s.ownedComponentExchangeRealizations.getEReference();
		t.body.add(ownedComponentExchangeRealizations);
	}
	//LogicalComponentPkg -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null){
		var ownedPhysicalLinks = new SysMLine!ItemUsage;
		ownedPhysicalLinks.isReference = true;
		ownedPhysicalLinks.featureNote.add(":>");
		ownedPhysicalLinks.featureSpecialization.add("ownedPhysicalLinks");
		ownedPhysicalLinks.valuePart = s.ownedPhysicalLinks.getEReference();
		t.body.add(ownedPhysicalLinks);
	}
	//LogicalComponentPkg -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null){
		var ownedPhysicalLinkCategories = new SysMLine!ItemUsage;
		ownedPhysicalLinkCategories.isReference = true;
		ownedPhysicalLinkCategories.featureNote.add(":>");
		ownedPhysicalLinkCategories.featureSpecialization.add("ownedPhysicalLinkCategories");
		ownedPhysicalLinkCategories.valuePart = s.ownedPhysicalLinkCategories.getEReference();
		t.body.add(ownedPhysicalLinkCategories);
	}
	//LogicalComponentPkg -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null){
		var ownedStateMachines = new SysMLine!ItemUsage;
		ownedStateMachines.isReference = true;
		ownedStateMachines.featureNote.add(":>");
		ownedStateMachines.featureSpecialization.add("ownedStateMachines");
		ownedStateMachines.valuePart = s.ownedStateMachines.getEReference();
		t.body.add(ownedStateMachines);
	}
	//LogicalComponentPkg -> EReference : ownedLogicalComponents
	if (s.ownedLogicalComponents.getEReference() != null){
		var ownedLogicalComponents = new SysMLine!ItemUsage;
		ownedLogicalComponents.isReference = true;
		ownedLogicalComponents.featureNote.add(":>");
		ownedLogicalComponents.featureSpecialization.add("ownedLogicalComponents");
		ownedLogicalComponents.valuePart = s.ownedLogicalComponents.getEReference();
		t.body.add(ownedLogicalComponents);
	}
	//LogicalComponentPkg -> EReference : ownedLogicalComponentPkgs
	if (s.ownedLogicalComponentPkgs.getEReference() != null){
		var ownedLogicalComponentPkgs = new SysMLine!ItemUsage;
		ownedLogicalComponentPkgs.isReference = true;
		ownedLogicalComponentPkgs.featureNote.add(":>");
		ownedLogicalComponentPkgs.featureSpecialization.add("ownedLogicalComponentPkgs");
		ownedLogicalComponentPkgs.valuePart = s.ownedLogicalComponentPkgs.getEReference();
		t.body.add(ownedLogicalComponentPkgs);
	}
}

@lazy
rule CapabilityRealization
	transform s : DSL!CapabilityRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//CapabilityRealization -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//CapabilityRealization -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//CapabilityRealization -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//CapabilityRealization -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//CapabilityRealization -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//CapabilityRealization -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//CapabilityRealization -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//CapabilityRealization -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//CapabilityRealization -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//CapabilityRealization -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//CapabilityRealization -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//CapabilityRealization -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//CapabilityRealization -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//CapabilityRealization -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//CapabilityRealization -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//CapabilityRealization -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//CapabilityRealization -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//CapabilityRealization -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//CapabilityRealization -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//CapabilityRealization -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//CapabilityRealization -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//CapabilityRealization -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//CapabilityRealization -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//CapabilityRealization -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//CapabilityRealization -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//CapabilityRealization -> EReference : involvedInvolvements
	if (s.involvedInvolvements.getEReference() != null){
		var involvedInvolvements = new SysMLine!ItemUsage;
		involvedInvolvements.isReference = true;
		involvedInvolvements.featureNote.add(":>");
		involvedInvolvements.featureSpecialization.add("involvedInvolvements");
		involvedInvolvements.valuePart = s.involvedInvolvements.getEReference();
		t.body.add(involvedInvolvements);
	}
	//CapabilityRealization -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null){
		var ownedFunctionalChains = new SysMLine!ItemUsage;
		ownedFunctionalChains.isReference = true;
		ownedFunctionalChains.featureNote.add(":>");
		ownedFunctionalChains.featureSpecialization.add("ownedFunctionalChains");
		ownedFunctionalChains.valuePart = s.ownedFunctionalChains.getEReference();
		t.body.add(ownedFunctionalChains);
	}
	//CapabilityRealization -> EReference : preCondition
	if (s.preCondition.getEReference() != null){
		var preCondition = new SysMLine!ItemUsage;
		preCondition.isReference = true;
		preCondition.featureNote.add(":>");
		preCondition.featureSpecialization.add("preCondition");
		preCondition.valuePart = s.preCondition.getEReference();
		t.body.add(preCondition);
	}
	//CapabilityRealization -> EReference : postCondition
	if (s.postCondition.getEReference() != null){
		var postCondition = new SysMLine!ItemUsage;
		postCondition.isReference = true;
		postCondition.featureNote.add(":>");
		postCondition.featureSpecialization.add("postCondition");
		postCondition.valuePart = s.postCondition.getEReference();
		t.body.add(postCondition);
	}
	//CapabilityRealization -> EReference : ownedScenarios
	if (s.ownedScenarios.getEReference() != null){
		var ownedScenarios = new SysMLine!ItemUsage;
		ownedScenarios.isReference = true;
		ownedScenarios.featureNote.add(":>");
		ownedScenarios.featureSpecialization.add("ownedScenarios");
		ownedScenarios.valuePart = s.ownedScenarios.getEReference();
		t.body.add(ownedScenarios);
	}
	//CapabilityRealization -> EReference : incomingCapabilityAllocation
	if (s.incomingCapabilityAllocation.getEReference() != null){
		var incomingCapabilityAllocation = new SysMLine!ItemUsage;
		incomingCapabilityAllocation.isReference = true;
		incomingCapabilityAllocation.featureNote.add(":>");
		incomingCapabilityAllocation.featureSpecialization.add("incomingCapabilityAllocation");
		incomingCapabilityAllocation.valuePart = s.incomingCapabilityAllocation.getEReference();
		t.body.add(incomingCapabilityAllocation);
	}
	//CapabilityRealization -> EReference : outgoingCapabilityAllocation
	if (s.outgoingCapabilityAllocation.getEReference() != null){
		var outgoingCapabilityAllocation = new SysMLine!ItemUsage;
		outgoingCapabilityAllocation.isReference = true;
		outgoingCapabilityAllocation.featureNote.add(":>");
		outgoingCapabilityAllocation.featureSpecialization.add("outgoingCapabilityAllocation");
		outgoingCapabilityAllocation.valuePart = s.outgoingCapabilityAllocation.getEReference();
		t.body.add(outgoingCapabilityAllocation);
	}
	//CapabilityRealization -> EReference : extends
	if (s.extends.getEReference() != null){
		var extends = new SysMLine!ItemUsage;
		extends.isReference = true;
		extends.featureNote.add(":>");
		extends.featureSpecialization.add("extends");
		extends.valuePart = s.extends.getEReference();
		t.body.add(extends);
	}
	//CapabilityRealization -> EReference : extending
	if (s.extending.getEReference() != null){
		var extending = new SysMLine!ItemUsage;
		extending.isReference = true;
		extending.featureNote.add(":>");
		extending.featureSpecialization.add("extending");
		extending.valuePart = s.extending.getEReference();
		t.body.add(extending);
	}
	//CapabilityRealization -> EReference : abstractCapabilityExtensionPoints
	if (s.abstractCapabilityExtensionPoints.getEReference() != null){
		var abstractCapabilityExtensionPoints = new SysMLine!ItemUsage;
		abstractCapabilityExtensionPoints.isReference = true;
		abstractCapabilityExtensionPoints.featureNote.add(":>");
		abstractCapabilityExtensionPoints.featureSpecialization.add("abstractCapabilityExtensionPoints");
		abstractCapabilityExtensionPoints.valuePart = s.abstractCapabilityExtensionPoints.getEReference();
		t.body.add(abstractCapabilityExtensionPoints);
	}
	//CapabilityRealization -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null){
		var superGeneralizations = new SysMLine!ItemUsage;
		superGeneralizations.isReference = true;
		superGeneralizations.featureNote.add(":>");
		superGeneralizations.featureSpecialization.add("superGeneralizations");
		superGeneralizations.valuePart = s.superGeneralizations.getEReference();
		t.body.add(superGeneralizations);
	}
	//CapabilityRealization -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null){
		var subGeneralizations = new SysMLine!ItemUsage;
		subGeneralizations.isReference = true;
		subGeneralizations.featureNote.add(":>");
		subGeneralizations.featureSpecialization.add("subGeneralizations");
		subGeneralizations.valuePart = s.subGeneralizations.getEReference();
		t.body.add(subGeneralizations);
	}
	//CapabilityRealization -> EReference : includes
	if (s.includes.getEReference() != null){
		var includes = new SysMLine!ItemUsage;
		includes.isReference = true;
		includes.featureNote.add(":>");
		includes.featureSpecialization.add("includes");
		includes.valuePart = s.includes.getEReference();
		t.body.add(includes);
	}
	//CapabilityRealization -> EReference : including
	if (s.including.getEReference() != null){
		var including = new SysMLine!ItemUsage;
		including.isReference = true;
		including.featureNote.add(":>");
		including.featureSpecialization.add("including");
		including.valuePart = s.including.getEReference();
		t.body.add(including);
	}
	//CapabilityRealization -> EReference : super
	if (s.super.getEReference() != null){
		var super = new SysMLine!ItemUsage;
		super.isReference = true;
		super.featureNote.add(":>");
		super.featureSpecialization.add("super");
		super.valuePart = s.super.getEReference();
		t.body.add(super);
	}
	//CapabilityRealization -> EReference : sub
	if (s.sub.getEReference() != null){
		var sub = new SysMLine!ItemUsage;
		sub.isReference = true;
		sub.featureNote.add(":>");
		sub.featureSpecialization.add("sub");
		sub.valuePart = s.sub.getEReference();
		t.body.add(sub);
	}
	//CapabilityRealization -> EReference : includedAbstractCapabilities
	if (s.includedAbstractCapabilities.getEReference() != null){
		var includedAbstractCapabilities = new SysMLine!ItemUsage;
		includedAbstractCapabilities.isReference = true;
		includedAbstractCapabilities.featureNote.add(":>");
		includedAbstractCapabilities.featureSpecialization.add("includedAbstractCapabilities");
		includedAbstractCapabilities.valuePart = s.includedAbstractCapabilities.getEReference();
		t.body.add(includedAbstractCapabilities);
	}
	//CapabilityRealization -> EReference : includingAbstractCapabilities
	if (s.includingAbstractCapabilities.getEReference() != null){
		var includingAbstractCapabilities = new SysMLine!ItemUsage;
		includingAbstractCapabilities.isReference = true;
		includingAbstractCapabilities.featureNote.add(":>");
		includingAbstractCapabilities.featureSpecialization.add("includingAbstractCapabilities");
		includingAbstractCapabilities.valuePart = s.includingAbstractCapabilities.getEReference();
		t.body.add(includingAbstractCapabilities);
	}
	//CapabilityRealization -> EReference : extendedAbstractCapabilities
	if (s.extendedAbstractCapabilities.getEReference() != null){
		var extendedAbstractCapabilities = new SysMLine!ItemUsage;
		extendedAbstractCapabilities.isReference = true;
		extendedAbstractCapabilities.featureNote.add(":>");
		extendedAbstractCapabilities.featureSpecialization.add("extendedAbstractCapabilities");
		extendedAbstractCapabilities.valuePart = s.extendedAbstractCapabilities.getEReference();
		t.body.add(extendedAbstractCapabilities);
	}
	//CapabilityRealization -> EReference : extendingAbstractCapabilities
	if (s.extendingAbstractCapabilities.getEReference() != null){
		var extendingAbstractCapabilities = new SysMLine!ItemUsage;
		extendingAbstractCapabilities.isReference = true;
		extendingAbstractCapabilities.featureNote.add(":>");
		extendingAbstractCapabilities.featureSpecialization.add("extendingAbstractCapabilities");
		extendingAbstractCapabilities.valuePart = s.extendingAbstractCapabilities.getEReference();
		t.body.add(extendingAbstractCapabilities);
	}
	//CapabilityRealization -> EReference : ownedFunctionalChainAbstractCapabilityInvolvements
	if (s.ownedFunctionalChainAbstractCapabilityInvolvements.getEReference() != null){
		var ownedFunctionalChainAbstractCapabilityInvolvements = new SysMLine!ItemUsage;
		ownedFunctionalChainAbstractCapabilityInvolvements.isReference = true;
		ownedFunctionalChainAbstractCapabilityInvolvements.featureNote.add(":>");
		ownedFunctionalChainAbstractCapabilityInvolvements.featureSpecialization.add("ownedFunctionalChainAbstractCapabilityInvolvements");
		ownedFunctionalChainAbstractCapabilityInvolvements.valuePart = s.ownedFunctionalChainAbstractCapabilityInvolvements.getEReference();
		t.body.add(ownedFunctionalChainAbstractCapabilityInvolvements);
	}
	//CapabilityRealization -> EReference : ownedAbstractFunctionAbstractCapabilityInvolvements
	if (s.ownedAbstractFunctionAbstractCapabilityInvolvements.getEReference() != null){
		var ownedAbstractFunctionAbstractCapabilityInvolvements = new SysMLine!ItemUsage;
		ownedAbstractFunctionAbstractCapabilityInvolvements.isReference = true;
		ownedAbstractFunctionAbstractCapabilityInvolvements.featureNote.add(":>");
		ownedAbstractFunctionAbstractCapabilityInvolvements.featureSpecialization.add("ownedAbstractFunctionAbstractCapabilityInvolvements");
		ownedAbstractFunctionAbstractCapabilityInvolvements.valuePart = s.ownedAbstractFunctionAbstractCapabilityInvolvements.getEReference();
		t.body.add(ownedAbstractFunctionAbstractCapabilityInvolvements);
	}
	//CapabilityRealization -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null){
		var availableInStates = new SysMLine!ItemUsage;
		availableInStates.isReference = true;
		availableInStates.featureNote.add(":>");
		availableInStates.featureSpecialization.add("availableInStates");
		availableInStates.valuePart = s.availableInStates.getEReference();
		t.body.add(availableInStates);
	}
	//CapabilityRealization -> EReference : ownedAbstractCapabilityRealizations
	if (s.ownedAbstractCapabilityRealizations.getEReference() != null){
		var ownedAbstractCapabilityRealizations = new SysMLine!ItemUsage;
		ownedAbstractCapabilityRealizations.isReference = true;
		ownedAbstractCapabilityRealizations.featureNote.add(":>");
		ownedAbstractCapabilityRealizations.featureSpecialization.add("ownedAbstractCapabilityRealizations");
		ownedAbstractCapabilityRealizations.valuePart = s.ownedAbstractCapabilityRealizations.getEReference();
		t.body.add(ownedAbstractCapabilityRealizations);
	}
	//CapabilityRealization -> EReference : involvedAbstractFunctions
	if (s.involvedAbstractFunctions.getEReference() != null){
		var involvedAbstractFunctions = new SysMLine!ItemUsage;
		involvedAbstractFunctions.isReference = true;
		involvedAbstractFunctions.featureNote.add(":>");
		involvedAbstractFunctions.featureSpecialization.add("involvedAbstractFunctions");
		involvedAbstractFunctions.valuePart = s.involvedAbstractFunctions.getEReference();
		t.body.add(involvedAbstractFunctions);
	}
	//CapabilityRealization -> EReference : involvedFunctionalChains
	if (s.involvedFunctionalChains.getEReference() != null){
		var involvedFunctionalChains = new SysMLine!ItemUsage;
		involvedFunctionalChains.isReference = true;
		involvedFunctionalChains.featureNote.add(":>");
		involvedFunctionalChains.featureSpecialization.add("involvedFunctionalChains");
		involvedFunctionalChains.valuePart = s.involvedFunctionalChains.getEReference();
		t.body.add(involvedFunctionalChains);
	}
	//CapabilityRealization -> EReference : ownedCapabilityRealizationInvolvements
	if (s.ownedCapabilityRealizationInvolvements.getEReference() != null){
		var ownedCapabilityRealizationInvolvements = new SysMLine!ItemUsage;
		ownedCapabilityRealizationInvolvements.isReference = true;
		ownedCapabilityRealizationInvolvements.featureNote.add(":>");
		ownedCapabilityRealizationInvolvements.featureSpecialization.add("ownedCapabilityRealizationInvolvements");
		ownedCapabilityRealizationInvolvements.valuePart = s.ownedCapabilityRealizationInvolvements.getEReference();
		t.body.add(ownedCapabilityRealizationInvolvements);
	}
	//CapabilityRealization -> EReference : involvedComponents
	if (s.involvedComponents.getEReference() != null){
		var involvedComponents = new SysMLine!ItemUsage;
		involvedComponents.isReference = true;
		involvedComponents.featureNote.add(":>");
		involvedComponents.featureSpecialization.add("involvedComponents");
		involvedComponents.valuePart = s.involvedComponents.getEReference();
		t.body.add(involvedComponents);
	}
	//CapabilityRealization -> EReference : realizedCapabilities
	if (s.realizedCapabilities.getEReference() != null){
		var realizedCapabilities = new SysMLine!ItemUsage;
		realizedCapabilities.isReference = true;
		realizedCapabilities.featureNote.add(":>");
		realizedCapabilities.featureSpecialization.add("realizedCapabilities");
		realizedCapabilities.valuePart = s.realizedCapabilities.getEReference();
		t.body.add(realizedCapabilities);
	}
	//CapabilityRealization -> EReference : realizedCapabilityRealizations
	if (s.realizedCapabilityRealizations.getEReference() != null){
		var realizedCapabilityRealizations = new SysMLine!ItemUsage;
		realizedCapabilityRealizations.isReference = true;
		realizedCapabilityRealizations.featureNote.add(":>");
		realizedCapabilityRealizations.featureSpecialization.add("realizedCapabilityRealizations");
		realizedCapabilityRealizations.valuePart = s.realizedCapabilityRealizations.getEReference();
		t.body.add(realizedCapabilityRealizations);
	}
	//CapabilityRealization -> EReference : realizingCapabilityRealizations
	if (s.realizingCapabilityRealizations.getEReference() != null){
		var realizingCapabilityRealizations = new SysMLine!ItemUsage;
		realizingCapabilityRealizations.isReference = true;
		realizingCapabilityRealizations.featureNote.add(":>");
		realizingCapabilityRealizations.featureSpecialization.add("realizingCapabilityRealizations");
		realizingCapabilityRealizations.valuePart = s.realizingCapabilityRealizations.getEReference();
		t.body.add(realizingCapabilityRealizations);
	}
}

@lazy
rule CapabilityRealizationPkg
	transform s : DSL!CapabilityRealizationPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//CapabilityRealizationPkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//CapabilityRealizationPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//CapabilityRealizationPkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//CapabilityRealizationPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//CapabilityRealizationPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//CapabilityRealizationPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//CapabilityRealizationPkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//CapabilityRealizationPkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//CapabilityRealizationPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//CapabilityRealizationPkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//CapabilityRealizationPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//CapabilityRealizationPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//CapabilityRealizationPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//CapabilityRealizationPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//CapabilityRealizationPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//CapabilityRealizationPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//CapabilityRealizationPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//CapabilityRealizationPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//CapabilityRealizationPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//CapabilityRealizationPkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//CapabilityRealizationPkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//CapabilityRealizationPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//CapabilityRealizationPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//CapabilityRealizationPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//CapabilityRealizationPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//CapabilityRealizationPkg -> EReference : ownedCapabilityRealizations
	if (s.ownedCapabilityRealizations.getEReference() != null){
		var ownedCapabilityRealizations = new SysMLine!ItemUsage;
		ownedCapabilityRealizations.isReference = true;
		ownedCapabilityRealizations.featureNote.add(":>");
		ownedCapabilityRealizations.featureSpecialization.add("ownedCapabilityRealizations");
		ownedCapabilityRealizations.valuePart = s.ownedCapabilityRealizations.getEReference();
		t.body.add(ownedCapabilityRealizations);
	}
	//CapabilityRealizationPkg -> EReference : ownedCapabilityRealizationPkgs
	if (s.ownedCapabilityRealizationPkgs.getEReference() != null){
		var ownedCapabilityRealizationPkgs = new SysMLine!ItemUsage;
		ownedCapabilityRealizationPkgs.isReference = true;
		ownedCapabilityRealizationPkgs.featureNote.add(":>");
		ownedCapabilityRealizationPkgs.featureSpecialization.add("ownedCapabilityRealizationPkgs");
		ownedCapabilityRealizationPkgs.valuePart = s.ownedCapabilityRealizationPkgs.getEReference();
		t.body.add(ownedCapabilityRealizationPkgs);
	}
}

@lazy
rule SystemAnalysisRealization
	transform s : DSL!SystemAnalysisRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemAnalysisRealization -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//SystemAnalysisRealization -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//SystemAnalysisRealization -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//SystemAnalysisRealization -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//SystemAnalysisRealization -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//SystemAnalysisRealization -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//SystemAnalysisRealization -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//SystemAnalysisRealization -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//SystemAnalysisRealization -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//SystemAnalysisRealization -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//SystemAnalysisRealization -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//SystemAnalysisRealization -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//SystemAnalysisRealization -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//SystemAnalysisRealization -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//SystemAnalysisRealization -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//SystemAnalysisRealization -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//SystemAnalysisRealization -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//SystemAnalysisRealization -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//SystemAnalysisRealization -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//SystemAnalysisRealization -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//SystemAnalysisRealization -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//SystemAnalysisRealization -> EReference : targetElement
	if (s.targetElement.getEReference() != null){
		var targetElement = new SysMLine!ItemUsage;
		targetElement.isReference = true;
		targetElement.featureNote.add(":>");
		targetElement.featureSpecialization.add("targetElement");
		targetElement.valuePart = s.targetElement.getEReference();
		t.body.add(targetElement);
	}
	//SystemAnalysisRealization -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null){
		var sourceElement = new SysMLine!ItemUsage;
		sourceElement.isReference = true;
		sourceElement.featureNote.add(":>");
		sourceElement.featureSpecialization.add("sourceElement");
		sourceElement.valuePart = s.sourceElement.getEReference();
		t.body.add(sourceElement);
	}
	//SystemAnalysisRealization -> EReference : allocatedArchitecture
	if (s.allocatedArchitecture.getEReference() != null){
		var allocatedArchitecture = new SysMLine!ItemUsage;
		allocatedArchitecture.isReference = true;
		allocatedArchitecture.featureNote.add(":>");
		allocatedArchitecture.featureSpecialization.add("allocatedArchitecture");
		allocatedArchitecture.valuePart = s.allocatedArchitecture.getEReference();
		t.body.add(allocatedArchitecture);
	}
	//SystemAnalysisRealization -> EReference : allocatingArchitecture
	if (s.allocatingArchitecture.getEReference() != null){
		var allocatingArchitecture = new SysMLine!ItemUsage;
		allocatingArchitecture.isReference = true;
		allocatingArchitecture.featureNote.add(":>");
		allocatingArchitecture.featureSpecialization.add("allocatingArchitecture");
		allocatingArchitecture.valuePart = s.allocatingArchitecture.getEReference();
		t.body.add(allocatingArchitecture);
	}
}

@lazy
rule ContextInterfaceRealization
	transform s : DSL!ContextInterfaceRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//ContextInterfaceRealization -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//ContextInterfaceRealization -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//ContextInterfaceRealization -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//ContextInterfaceRealization -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//ContextInterfaceRealization -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//ContextInterfaceRealization -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//ContextInterfaceRealization -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//ContextInterfaceRealization -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//ContextInterfaceRealization -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//ContextInterfaceRealization -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//ContextInterfaceRealization -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//ContextInterfaceRealization -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//ContextInterfaceRealization -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//ContextInterfaceRealization -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//ContextInterfaceRealization -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//ContextInterfaceRealization -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//ContextInterfaceRealization -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//ContextInterfaceRealization -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//ContextInterfaceRealization -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//ContextInterfaceRealization -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//ContextInterfaceRealization -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//ContextInterfaceRealization -> EReference : targetElement
	if (s.targetElement.getEReference() != null){
		var targetElement = new SysMLine!ItemUsage;
		targetElement.isReference = true;
		targetElement.featureNote.add(":>");
		targetElement.featureSpecialization.add("targetElement");
		targetElement.valuePart = s.targetElement.getEReference();
		t.body.add(targetElement);
	}
	//ContextInterfaceRealization -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null){
		var sourceElement = new SysMLine!ItemUsage;
		sourceElement.isReference = true;
		sourceElement.featureNote.add(":>");
		sourceElement.featureSpecialization.add("sourceElement");
		sourceElement.valuePart = s.sourceElement.getEReference();
		t.body.add(sourceElement);
	}
	//ContextInterfaceRealization -> EReference : allocatedInterface
	if (s.allocatedInterface.getEReference() != null){
		var allocatedInterface = new SysMLine!ItemUsage;
		allocatedInterface.isReference = true;
		allocatedInterface.featureNote.add(":>");
		allocatedInterface.featureSpecialization.add("allocatedInterface");
		allocatedInterface.valuePart = s.allocatedInterface.getEReference();
		t.body.add(allocatedInterface);
	}
	//ContextInterfaceRealization -> EReference : allocatingInterfaceAllocator
	if (s.allocatingInterfaceAllocator.getEReference() != null){
		var allocatingInterfaceAllocator = new SysMLine!ItemUsage;
		allocatingInterfaceAllocator.isReference = true;
		allocatingInterfaceAllocator.featureNote.add(":>");
		allocatingInterfaceAllocator.featureSpecialization.add("allocatingInterfaceAllocator");
		allocatingInterfaceAllocator.valuePart = s.allocatingInterfaceAllocator.getEReference();
		t.body.add(allocatingInterfaceAllocator);
	}
}


// pa.ecore
@lazy
rule PhysicalArchitecturePkg
	transform s : DSL!PhysicalArchitecturePkg
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalArchitecturePkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//PhysicalArchitecturePkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//PhysicalArchitecturePkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//PhysicalArchitecturePkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//PhysicalArchitecturePkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//PhysicalArchitecturePkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//PhysicalArchitecturePkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//PhysicalArchitecturePkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//PhysicalArchitecturePkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//PhysicalArchitecturePkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//PhysicalArchitecturePkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//PhysicalArchitecturePkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//PhysicalArchitecturePkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//PhysicalArchitecturePkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//PhysicalArchitecturePkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//PhysicalArchitecturePkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//PhysicalArchitecturePkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//PhysicalArchitecturePkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//PhysicalArchitecturePkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//PhysicalArchitecturePkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//PhysicalArchitecturePkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//PhysicalArchitecturePkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//PhysicalArchitecturePkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//PhysicalArchitecturePkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//PhysicalArchitecturePkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//PhysicalArchitecturePkg -> EReference : ownedPhysicalArchitecturePkgs
	if (s.ownedPhysicalArchitecturePkgs.getEReference() != null){
		var ownedPhysicalArchitecturePkgs = new SysMLine!ItemUsage;
		ownedPhysicalArchitecturePkgs.isReference = true;
		ownedPhysicalArchitecturePkgs.featureNote.add(":>");
		ownedPhysicalArchitecturePkgs.featureSpecialization.add("ownedPhysicalArchitecturePkgs");
		ownedPhysicalArchitecturePkgs.valuePart = s.ownedPhysicalArchitecturePkgs.getEReference();
		t.body.add(ownedPhysicalArchitecturePkgs);
	}
	//PhysicalArchitecturePkg -> EReference : ownedPhysicalArchitectures
	if (s.ownedPhysicalArchitectures.getEReference() != null){
		var ownedPhysicalArchitectures = new SysMLine!ItemUsage;
		ownedPhysicalArchitectures.isReference = true;
		ownedPhysicalArchitectures.featureNote.add(":>");
		ownedPhysicalArchitectures.featureSpecialization.add("ownedPhysicalArchitectures");
		ownedPhysicalArchitectures.valuePart = s.ownedPhysicalArchitectures.getEReference();
		t.body.add(ownedPhysicalArchitectures);
	}
}

@lazy
rule PhysicalArchitecture
	transform s : DSL!PhysicalArchitecture
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalArchitecture -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//PhysicalArchitecture -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//PhysicalArchitecture -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//PhysicalArchitecture -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//PhysicalArchitecture -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//PhysicalArchitecture -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//PhysicalArchitecture -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//PhysicalArchitecture -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//PhysicalArchitecture -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//PhysicalArchitecture -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//PhysicalArchitecture -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//PhysicalArchitecture -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//PhysicalArchitecture -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//PhysicalArchitecture -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//PhysicalArchitecture -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//PhysicalArchitecture -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//PhysicalArchitecture -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//PhysicalArchitecture -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//PhysicalArchitecture -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//PhysicalArchitecture -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//PhysicalArchitecture -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//PhysicalArchitecture -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//PhysicalArchitecture -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//PhysicalArchitecture -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//PhysicalArchitecture -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//PhysicalArchitecture -> EReference : ownedFunctionPkg
	if (s.ownedFunctionPkg.getEReference() != null){
		var ownedFunctionPkg = new SysMLine!ItemUsage;
		ownedFunctionPkg.isReference = true;
		ownedFunctionPkg.featureNote.add(":>");
		ownedFunctionPkg.featureSpecialization.add("ownedFunctionPkg");
		ownedFunctionPkg.valuePart = s.ownedFunctionPkg.getEReference();
		t.body.add(ownedFunctionPkg);
	}
	//PhysicalArchitecture -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null){
		var ownedComponentExchanges = new SysMLine!ItemUsage;
		ownedComponentExchanges.isReference = true;
		ownedComponentExchanges.featureNote.add(":>");
		ownedComponentExchanges.featureSpecialization.add("ownedComponentExchanges");
		ownedComponentExchanges.valuePart = s.ownedComponentExchanges.getEReference();
		t.body.add(ownedComponentExchanges);
	}
	//PhysicalArchitecture -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null){
		var ownedComponentExchangeCategories = new SysMLine!ItemUsage;
		ownedComponentExchangeCategories.isReference = true;
		ownedComponentExchangeCategories.featureNote.add(":>");
		ownedComponentExchangeCategories.featureSpecialization.add("ownedComponentExchangeCategories");
		ownedComponentExchangeCategories.valuePart = s.ownedComponentExchangeCategories.getEReference();
		t.body.add(ownedComponentExchangeCategories);
	}
	//PhysicalArchitecture -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null){
		var ownedFunctionalLinks = new SysMLine!ItemUsage;
		ownedFunctionalLinks.isReference = true;
		ownedFunctionalLinks.featureNote.add(":>");
		ownedFunctionalLinks.featureSpecialization.add("ownedFunctionalLinks");
		ownedFunctionalLinks.valuePart = s.ownedFunctionalLinks.getEReference();
		t.body.add(ownedFunctionalLinks);
	}
	//PhysicalArchitecture -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null){
		var ownedFunctionalAllocations = new SysMLine!ItemUsage;
		ownedFunctionalAllocations.isReference = true;
		ownedFunctionalAllocations.featureNote.add(":>");
		ownedFunctionalAllocations.featureSpecialization.add("ownedFunctionalAllocations");
		ownedFunctionalAllocations.valuePart = s.ownedFunctionalAllocations.getEReference();
		t.body.add(ownedFunctionalAllocations);
	}
	//PhysicalArchitecture -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null){
		var ownedComponentExchangeRealizations = new SysMLine!ItemUsage;
		ownedComponentExchangeRealizations.isReference = true;
		ownedComponentExchangeRealizations.featureNote.add(":>");
		ownedComponentExchangeRealizations.featureSpecialization.add("ownedComponentExchangeRealizations");
		ownedComponentExchangeRealizations.valuePart = s.ownedComponentExchangeRealizations.getEReference();
		t.body.add(ownedComponentExchangeRealizations);
	}
	//PhysicalArchitecture -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null){
		var ownedAbstractCapabilityPkg = new SysMLine!ItemUsage;
		ownedAbstractCapabilityPkg.isReference = true;
		ownedAbstractCapabilityPkg.featureNote.add(":>");
		ownedAbstractCapabilityPkg.featureSpecialization.add("ownedAbstractCapabilityPkg");
		ownedAbstractCapabilityPkg.valuePart = s.ownedAbstractCapabilityPkg.getEReference();
		t.body.add(ownedAbstractCapabilityPkg);
	}
	//PhysicalArchitecture -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null){
		var ownedInterfacePkg = new SysMLine!ItemUsage;
		ownedInterfacePkg.isReference = true;
		ownedInterfacePkg.featureNote.add(":>");
		ownedInterfacePkg.featureSpecialization.add("ownedInterfacePkg");
		ownedInterfacePkg.valuePart = s.ownedInterfacePkg.getEReference();
		t.body.add(ownedInterfacePkg);
	}
	//PhysicalArchitecture -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null){
		var ownedDataPkg = new SysMLine!ItemUsage;
		ownedDataPkg.isReference = true;
		ownedDataPkg.featureNote.add(":>");
		ownedDataPkg.featureSpecialization.add("ownedDataPkg");
		ownedDataPkg.valuePart = s.ownedDataPkg.getEReference();
		t.body.add(ownedDataPkg);
	}
	//PhysicalArchitecture -> EReference : provisionedArchitectureAllocations
	if (s.provisionedArchitectureAllocations.getEReference() != null){
		var provisionedArchitectureAllocations = new SysMLine!ItemUsage;
		provisionedArchitectureAllocations.isReference = true;
		provisionedArchitectureAllocations.featureNote.add(":>");
		provisionedArchitectureAllocations.featureSpecialization.add("provisionedArchitectureAllocations");
		provisionedArchitectureAllocations.valuePart = s.provisionedArchitectureAllocations.getEReference();
		t.body.add(provisionedArchitectureAllocations);
	}
	//PhysicalArchitecture -> EReference : provisioningArchitectureAllocations
	if (s.provisioningArchitectureAllocations.getEReference() != null){
		var provisioningArchitectureAllocations = new SysMLine!ItemUsage;
		provisioningArchitectureAllocations.isReference = true;
		provisioningArchitectureAllocations.featureNote.add(":>");
		provisioningArchitectureAllocations.featureSpecialization.add("provisioningArchitectureAllocations");
		provisioningArchitectureAllocations.valuePart = s.provisioningArchitectureAllocations.getEReference();
		t.body.add(provisioningArchitectureAllocations);
	}
	//PhysicalArchitecture -> EReference : allocatedArchitectures
	if (s.allocatedArchitectures.getEReference() != null){
		var allocatedArchitectures = new SysMLine!ItemUsage;
		allocatedArchitectures.isReference = true;
		allocatedArchitectures.featureNote.add(":>");
		allocatedArchitectures.featureSpecialization.add("allocatedArchitectures");
		allocatedArchitectures.valuePart = s.allocatedArchitectures.getEReference();
		t.body.add(allocatedArchitectures);
	}
	//PhysicalArchitecture -> EReference : allocatingArchitectures
	if (s.allocatingArchitectures.getEReference() != null){
		var allocatingArchitectures = new SysMLine!ItemUsage;
		allocatingArchitectures.isReference = true;
		allocatingArchitectures.featureNote.add(":>");
		allocatingArchitectures.featureSpecialization.add("allocatingArchitectures");
		allocatingArchitectures.valuePart = s.allocatingArchitectures.getEReference();
		t.body.add(allocatingArchitectures);
	}
	//PhysicalArchitecture -> EReference : system
	if (s.system.getEReference() != null){
		var system = new SysMLine!ItemUsage;
		system.isReference = true;
		system.featureNote.add(":>");
		system.featureSpecialization.add("system");
		system.valuePart = s.system.getEReference();
		t.body.add(system);
	}
	//PhysicalArchitecture -> EReference : ownedPhysicalComponentPkg
	if (s.ownedPhysicalComponentPkg.getEReference() != null){
		var ownedPhysicalComponentPkg = new SysMLine!ItemUsage;
		ownedPhysicalComponentPkg.isReference = true;
		ownedPhysicalComponentPkg.featureNote.add(":>");
		ownedPhysicalComponentPkg.featureSpecialization.add("ownedPhysicalComponentPkg");
		ownedPhysicalComponentPkg.valuePart = s.ownedPhysicalComponentPkg.getEReference();
		t.body.add(ownedPhysicalComponentPkg);
	}
	//PhysicalArchitecture -> EReference : containedCapabilityRealizationPkg
	if (s.containedCapabilityRealizationPkg.getEReference() != null){
		var containedCapabilityRealizationPkg = new SysMLine!ItemUsage;
		containedCapabilityRealizationPkg.isReference = true;
		containedCapabilityRealizationPkg.featureNote.add(":>");
		containedCapabilityRealizationPkg.featureSpecialization.add("containedCapabilityRealizationPkg");
		containedCapabilityRealizationPkg.valuePart = s.containedCapabilityRealizationPkg.getEReference();
		t.body.add(containedCapabilityRealizationPkg);
	}
	//PhysicalArchitecture -> EReference : containedPhysicalFunctionPkg
	if (s.containedPhysicalFunctionPkg.getEReference() != null){
		var containedPhysicalFunctionPkg = new SysMLine!ItemUsage;
		containedPhysicalFunctionPkg.isReference = true;
		containedPhysicalFunctionPkg.featureNote.add(":>");
		containedPhysicalFunctionPkg.featureSpecialization.add("containedPhysicalFunctionPkg");
		containedPhysicalFunctionPkg.valuePart = s.containedPhysicalFunctionPkg.getEReference();
		t.body.add(containedPhysicalFunctionPkg);
	}
	//PhysicalArchitecture -> EReference : ownedDeployments
	if (s.ownedDeployments.getEReference() != null){
		var ownedDeployments = new SysMLine!ItemUsage;
		ownedDeployments.isReference = true;
		ownedDeployments.featureNote.add(":>");
		ownedDeployments.featureSpecialization.add("ownedDeployments");
		ownedDeployments.valuePart = s.ownedDeployments.getEReference();
		t.body.add(ownedDeployments);
	}
	//PhysicalArchitecture -> EReference : ownedLogicalArchitectureRealizations
	if (s.ownedLogicalArchitectureRealizations.getEReference() != null){
		var ownedLogicalArchitectureRealizations = new SysMLine!ItemUsage;
		ownedLogicalArchitectureRealizations.isReference = true;
		ownedLogicalArchitectureRealizations.featureNote.add(":>");
		ownedLogicalArchitectureRealizations.featureSpecialization.add("ownedLogicalArchitectureRealizations");
		ownedLogicalArchitectureRealizations.valuePart = s.ownedLogicalArchitectureRealizations.getEReference();
		t.body.add(ownedLogicalArchitectureRealizations);
	}
	//PhysicalArchitecture -> EReference : allocatedLogicalArchitectureRealizations
	if (s.allocatedLogicalArchitectureRealizations.getEReference() != null){
		var allocatedLogicalArchitectureRealizations = new SysMLine!ItemUsage;
		allocatedLogicalArchitectureRealizations.isReference = true;
		allocatedLogicalArchitectureRealizations.featureNote.add(":>");
		allocatedLogicalArchitectureRealizations.featureSpecialization.add("allocatedLogicalArchitectureRealizations");
		allocatedLogicalArchitectureRealizations.valuePart = s.allocatedLogicalArchitectureRealizations.getEReference();
		t.body.add(allocatedLogicalArchitectureRealizations);
	}
	//PhysicalArchitecture -> EReference : allocatedLogicalArchitectures
	if (s.allocatedLogicalArchitectures.getEReference() != null){
		var allocatedLogicalArchitectures = new SysMLine!ItemUsage;
		allocatedLogicalArchitectures.isReference = true;
		allocatedLogicalArchitectures.featureNote.add(":>");
		allocatedLogicalArchitectures.featureSpecialization.add("allocatedLogicalArchitectures");
		allocatedLogicalArchitectures.valuePart = s.allocatedLogicalArchitectures.getEReference();
		t.body.add(allocatedLogicalArchitectures);
	}
	//PhysicalArchitecture -> EReference : allocatingEpbsArchitectures
	if (s.allocatingEpbsArchitectures.getEReference() != null){
		var allocatingEpbsArchitectures = new SysMLine!ItemUsage;
		allocatingEpbsArchitectures.isReference = true;
		allocatingEpbsArchitectures.featureNote.add(":>");
		allocatingEpbsArchitectures.featureSpecialization.add("allocatingEpbsArchitectures");
		allocatingEpbsArchitectures.valuePart = s.allocatingEpbsArchitectures.getEReference();
		t.body.add(allocatingEpbsArchitectures);
	}
}

@lazy
rule PhysicalFunction
	transform s : DSL!PhysicalFunction
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalFunction -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//PhysicalFunction -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//PhysicalFunction -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//PhysicalFunction -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//PhysicalFunction -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//PhysicalFunction -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//PhysicalFunction -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//PhysicalFunction -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//PhysicalFunction -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null){
		var isAbstract = new SysMLine!AttributeUsage;
		isAbstract.featureNote.add(":>>");
		isAbstract.featureSpecialization.add("isAbstract");
		isAbstract.valuePart = s.isAbstract.getEAttribute();
		t.body.add(isAbstract);
	}
	//PhysicalFunction -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null){
		var isStatic = new SysMLine!AttributeUsage;
		isStatic.featureNote.add(":>>");
		isStatic.featureSpecialization.add("isStatic");
		isStatic.valuePart = s.isStatic.getEAttribute();
		t.body.add(isStatic);
	}
	//PhysicalFunction -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null){
		var visibility = new SysMLine!AttributeUsage;
		visibility.featureNote.add(":>>");
		visibility.featureSpecialization.add("visibility");
		visibility.valuePart = s.visibility.getEAttribute();
		t.body.add(visibility);
	}
	//PhysicalFunction -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null){
		var ordered = new SysMLine!AttributeUsage;
		ordered.featureNote.add(":>>");
		ordered.featureSpecialization.add("ordered");
		ordered.valuePart = s.ordered.getEAttribute();
		t.body.add(ordered);
	}
	//PhysicalFunction -> EAttribute : unique
	if (s.unique.getEAttribute() != null){
		var unique = new SysMLine!AttributeUsage;
		unique.featureNote.add(":>>");
		unique.featureSpecialization.add("unique");
		unique.valuePart = s.unique.getEAttribute();
		t.body.add(unique);
	}
	//PhysicalFunction -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null){
		var minInclusive = new SysMLine!AttributeUsage;
		minInclusive.featureNote.add(":>>");
		minInclusive.featureSpecialization.add("minInclusive");
		minInclusive.valuePart = s.minInclusive.getEAttribute();
		t.body.add(minInclusive);
	}
	//PhysicalFunction -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null){
		var maxInclusive = new SysMLine!AttributeUsage;
		maxInclusive.featureNote.add(":>>");
		maxInclusive.featureSpecialization.add("maxInclusive");
		maxInclusive.valuePart = s.maxInclusive.getEAttribute();
		t.body.add(maxInclusive);
	}
	//PhysicalFunction -> EAttribute : final
	if (s.final.getEAttribute() != null){
		var final = new SysMLine!AttributeUsage;
		final.featureNote.add(":>>");
		final.featureSpecialization.add("final");
		final.valuePart = s.final.getEAttribute();
		t.body.add(final);
	}
	//PhysicalFunction -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null){
		var aggregationKind = new SysMLine!AttributeUsage;
		aggregationKind.featureNote.add(":>>");
		aggregationKind.featureSpecialization.add("aggregationKind");
		aggregationKind.valuePart = s.aggregationKind.getEAttribute();
		t.body.add(aggregationKind);
	}
	//PhysicalFunction -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null){
		var isDerived = new SysMLine!AttributeUsage;
		isDerived.featureNote.add(":>>");
		isDerived.featureSpecialization.add("isDerived");
		isDerived.valuePart = s.isDerived.getEAttribute();
		t.body.add(isDerived);
	}
	//PhysicalFunction -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null){
		var isReadOnly = new SysMLine!AttributeUsage;
		isReadOnly.featureNote.add(":>>");
		isReadOnly.featureSpecialization.add("isReadOnly");
		isReadOnly.valuePart = s.isReadOnly.getEAttribute();
		t.body.add(isReadOnly);
	}
	//PhysicalFunction -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null){
		var isPartOfKey = new SysMLine!AttributeUsage;
		isPartOfKey.featureNote.add(":>>");
		isPartOfKey.featureSpecialization.add("isPartOfKey");
		isPartOfKey.valuePart = s.isPartOfKey.getEAttribute();
		t.body.add(isPartOfKey);
	}
	//PhysicalFunction -> EAttribute : kind
	if (s.kind.getEAttribute() != null){
		var kind = new SysMLine!AttributeUsage;
		kind.featureNote.add(":>>");
		kind.featureSpecialization.add("kind");
		kind.valuePart = s.kind.getEAttribute();
		t.body.add(kind);
	}
	//PhysicalFunction -> EAttribute : condition
	if (s.condition.getEAttribute() != null){
		var condition = new SysMLine!AttributeUsage;
		condition.featureNote.add(":>>");
		condition.featureSpecialization.add("condition");
		condition.valuePart = s.condition.getEAttribute();
		t.body.add(condition);
	}
	//PhysicalFunction -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//PhysicalFunction -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//PhysicalFunction -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//PhysicalFunction -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//PhysicalFunction -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//PhysicalFunction -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//PhysicalFunction -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//PhysicalFunction -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//PhysicalFunction -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//PhysicalFunction -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//PhysicalFunction -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//PhysicalFunction -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//PhysicalFunction -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//PhysicalFunction -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//PhysicalFunction -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//PhysicalFunction -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//PhysicalFunction -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null){
		var involvingInvolvements = new SysMLine!ItemUsage;
		involvingInvolvements.isReference = true;
		involvingInvolvements.featureNote.add(":>");
		involvingInvolvements.featureSpecialization.add("involvingInvolvements");
		involvingInvolvements.valuePart = s.involvingInvolvements.getEReference();
		t.body.add(involvingInvolvements);
	}
	//PhysicalFunction -> EReference : abstractType
	if (s.abstractType.getEReference() != null){
		var abstractType = new SysMLine!ItemUsage;
		abstractType.isReference = true;
		abstractType.featureNote.add(":>");
		abstractType.featureSpecialization.add("abstractType");
		abstractType.valuePart = s.abstractType.getEReference();
		t.body.add(abstractType);
	}
	//PhysicalFunction -> EReference : type
	if (s.type.getEReference() != null){
		var type = new SysMLine!ItemUsage;
		type.isReference = true;
		type.featureNote.add(":>");
		type.featureSpecialization.add("type");
		type.valuePart = s.type.getEReference();
		t.body.add(type);
	}
	//PhysicalFunction -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null){
		var ownedDefaultValue = new SysMLine!ItemUsage;
		ownedDefaultValue.isReference = true;
		ownedDefaultValue.featureNote.add(":>");
		ownedDefaultValue.featureSpecialization.add("ownedDefaultValue");
		ownedDefaultValue.valuePart = s.ownedDefaultValue.getEReference();
		t.body.add(ownedDefaultValue);
	}
	//PhysicalFunction -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null){
		var ownedMinValue = new SysMLine!ItemUsage;
		ownedMinValue.isReference = true;
		ownedMinValue.featureNote.add(":>");
		ownedMinValue.featureSpecialization.add("ownedMinValue");
		ownedMinValue.valuePart = s.ownedMinValue.getEReference();
		t.body.add(ownedMinValue);
	}
	//PhysicalFunction -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null){
		var ownedMaxValue = new SysMLine!ItemUsage;
		ownedMaxValue.isReference = true;
		ownedMaxValue.featureNote.add(":>");
		ownedMaxValue.featureSpecialization.add("ownedMaxValue");
		ownedMaxValue.valuePart = s.ownedMaxValue.getEReference();
		t.body.add(ownedMaxValue);
	}
	//PhysicalFunction -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null){
		var ownedNullValue = new SysMLine!ItemUsage;
		ownedNullValue.isReference = true;
		ownedNullValue.featureNote.add(":>");
		ownedNullValue.featureSpecialization.add("ownedNullValue");
		ownedNullValue.valuePart = s.ownedNullValue.getEReference();
		t.body.add(ownedNullValue);
	}
	//PhysicalFunction -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null){
		var ownedMinCard = new SysMLine!ItemUsage;
		ownedMinCard.isReference = true;
		ownedMinCard.featureNote.add(":>");
		ownedMinCard.featureSpecialization.add("ownedMinCard");
		ownedMinCard.valuePart = s.ownedMinCard.getEReference();
		t.body.add(ownedMinCard);
	}
	//PhysicalFunction -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null){
		var ownedMinLength = new SysMLine!ItemUsage;
		ownedMinLength.isReference = true;
		ownedMinLength.featureNote.add(":>");
		ownedMinLength.featureSpecialization.add("ownedMinLength");
		ownedMinLength.valuePart = s.ownedMinLength.getEReference();
		t.body.add(ownedMinLength);
	}
	//PhysicalFunction -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null){
		var ownedMaxCard = new SysMLine!ItemUsage;
		ownedMaxCard.isReference = true;
		ownedMaxCard.featureNote.add(":>");
		ownedMaxCard.featureSpecialization.add("ownedMaxCard");
		ownedMaxCard.valuePart = s.ownedMaxCard.getEReference();
		t.body.add(ownedMaxCard);
	}
	//PhysicalFunction -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null){
		var ownedMaxLength = new SysMLine!ItemUsage;
		ownedMaxLength.isReference = true;
		ownedMaxLength.featureNote.add(":>");
		ownedMaxLength.featureSpecialization.add("ownedMaxLength");
		ownedMaxLength.valuePart = s.ownedMaxLength.getEReference();
		t.body.add(ownedMaxLength);
	}
	//PhysicalFunction -> EReference : association
	if (s.association.getEReference() != null){
		var association = new SysMLine!ItemUsage;
		association.isReference = true;
		association.featureNote.add(":>");
		association.featureSpecialization.add("association");
		association.valuePart = s.association.getEReference();
		t.body.add(association);
	}
	//PhysicalFunction -> EReference : representingInstanceRoles
	if (s.representingInstanceRoles.getEReference() != null){
		var representingInstanceRoles = new SysMLine!ItemUsage;
		representingInstanceRoles.isReference = true;
		representingInstanceRoles.featureNote.add(":>");
		representingInstanceRoles.featureSpecialization.add("representingInstanceRoles");
		representingInstanceRoles.valuePart = s.representingInstanceRoles.getEReference();
		t.body.add(representingInstanceRoles);
	}
	//PhysicalFunction -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null){
		var ownedFunctionalChains = new SysMLine!ItemUsage;
		ownedFunctionalChains.isReference = true;
		ownedFunctionalChains.featureNote.add(":>");
		ownedFunctionalChains.featureSpecialization.add("ownedFunctionalChains");
		ownedFunctionalChains.valuePart = s.ownedFunctionalChains.getEReference();
		t.body.add(ownedFunctionalChains);
	}
	//PhysicalFunction -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null){
		var inActivityPartition = new SysMLine!ItemUsage;
		inActivityPartition.isReference = true;
		inActivityPartition.featureNote.add(":>");
		inActivityPartition.featureSpecialization.add("inActivityPartition");
		inActivityPartition.valuePart = s.inActivityPartition.getEReference();
		t.body.add(inActivityPartition);
	}
	//PhysicalFunction -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null){
		var inInterruptibleRegion = new SysMLine!ItemUsage;
		inInterruptibleRegion.isReference = true;
		inInterruptibleRegion.featureNote.add(":>");
		inInterruptibleRegion.featureSpecialization.add("inInterruptibleRegion");
		inInterruptibleRegion.valuePart = s.inInterruptibleRegion.getEReference();
		t.body.add(inInterruptibleRegion);
	}
	//PhysicalFunction -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null){
		var inStructuredNode = new SysMLine!ItemUsage;
		inStructuredNode.isReference = true;
		inStructuredNode.featureNote.add(":>");
		inStructuredNode.featureSpecialization.add("inStructuredNode");
		inStructuredNode.valuePart = s.inStructuredNode.getEReference();
		t.body.add(inStructuredNode);
	}
	//PhysicalFunction -> EReference : outgoing
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMLine!ItemUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	//PhysicalFunction -> EReference : incoming
	if (s.incoming.getEReference() != null){
		var incoming = new SysMLine!ItemUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	//PhysicalFunction -> EReference : ownedHandlers
	if (s.ownedHandlers.getEReference() != null){
		var ownedHandlers = new SysMLine!ItemUsage;
		ownedHandlers.isReference = true;
		ownedHandlers.featureNote.add(":>");
		ownedHandlers.featureSpecialization.add("ownedHandlers");
		ownedHandlers.valuePart = s.ownedHandlers.getEReference();
		t.body.add(ownedHandlers);
	}
	//PhysicalFunction -> EReference : localPrecondition
	if (s.localPrecondition.getEReference() != null){
		var localPrecondition = new SysMLine!ItemUsage;
		localPrecondition.isReference = true;
		localPrecondition.featureNote.add(":>");
		localPrecondition.featureSpecialization.add("localPrecondition");
		localPrecondition.valuePart = s.localPrecondition.getEReference();
		t.body.add(localPrecondition);
	}
	//PhysicalFunction -> EReference : localPostcondition
	if (s.localPostcondition.getEReference() != null){
		var localPostcondition = new SysMLine!ItemUsage;
		localPostcondition.isReference = true;
		localPostcondition.featureNote.add(":>");
		localPostcondition.featureSpecialization.add("localPostcondition");
		localPostcondition.valuePart = s.localPostcondition.getEReference();
		t.body.add(localPostcondition);
	}
	//PhysicalFunction -> EReference : context
	if (s.context.getEReference() != null){
		var context = new SysMLine!ItemUsage;
		context.isReference = true;
		context.featureNote.add(":>");
		context.featureSpecialization.add("context");
		context.valuePart = s.context.getEReference();
		t.body.add(context);
	}
	//PhysicalFunction -> EReference : inputs
	if (s.inputs.getEReference() != null){
		var inputs = new SysMLine!ItemUsage;
		inputs.isReference = true;
		inputs.featureNote.add(":>");
		inputs.featureSpecialization.add("inputs");
		inputs.valuePart = s.inputs.getEReference();
		t.body.add(inputs);
	}
	//PhysicalFunction -> EReference : outputs
	if (s.outputs.getEReference() != null){
		var outputs = new SysMLine!ItemUsage;
		outputs.isReference = true;
		outputs.featureNote.add(":>");
		outputs.featureSpecialization.add("outputs");
		outputs.valuePart = s.outputs.getEReference();
		t.body.add(outputs);
	}
	//PhysicalFunction -> EReference : arguments
	if (s.arguments.getEReference() != null){
		var arguments = new SysMLine!ItemUsage;
		arguments.isReference = true;
		arguments.featureNote.add(":>");
		arguments.featureSpecialization.add("arguments");
		arguments.valuePart = s.arguments.getEReference();
		t.body.add(arguments);
	}
	//PhysicalFunction -> EReference : results
	if (s.results.getEReference() != null){
		var results = new SysMLine!ItemUsage;
		results.isReference = true;
		results.featureNote.add(":>");
		results.featureSpecialization.add("results");
		results.valuePart = s.results.getEReference();
		t.body.add(results);
	}
	//PhysicalFunction -> EReference : behavior
	if (s.behavior.getEReference() != null){
		var behavior = new SysMLine!ItemUsage;
		behavior.isReference = true;
		behavior.featureNote.add(":>");
		behavior.featureSpecialization.add("behavior");
		behavior.valuePart = s.behavior.getEReference();
		t.body.add(behavior);
	}
	//PhysicalFunction -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null){
		var abstractTypedElements = new SysMLine!ItemUsage;
		abstractTypedElements.isReference = true;
		abstractTypedElements.featureNote.add(":>");
		abstractTypedElements.featureSpecialization.add("abstractTypedElements");
		abstractTypedElements.valuePart = s.abstractTypedElements.getEReference();
		t.body.add(abstractTypedElements);
	}
	//PhysicalFunction -> EReference : ownedFunctions
	if (s.ownedFunctions.getEReference() != null){
		var ownedFunctions = new SysMLine!ItemUsage;
		ownedFunctions.isReference = true;
		ownedFunctions.featureNote.add(":>");
		ownedFunctions.featureSpecialization.add("ownedFunctions");
		ownedFunctions.valuePart = s.ownedFunctions.getEReference();
		t.body.add(ownedFunctions);
	}
	//PhysicalFunction -> EReference : ownedFunctionRealizations
	if (s.ownedFunctionRealizations.getEReference() != null){
		var ownedFunctionRealizations = new SysMLine!ItemUsage;
		ownedFunctionRealizations.isReference = true;
		ownedFunctionRealizations.featureNote.add(":>");
		ownedFunctionRealizations.featureSpecialization.add("ownedFunctionRealizations");
		ownedFunctionRealizations.valuePart = s.ownedFunctionRealizations.getEReference();
		t.body.add(ownedFunctionRealizations);
	}
	//PhysicalFunction -> EReference : ownedFunctionalExchanges
	if (s.ownedFunctionalExchanges.getEReference() != null){
		var ownedFunctionalExchanges = new SysMLine!ItemUsage;
		ownedFunctionalExchanges.isReference = true;
		ownedFunctionalExchanges.featureNote.add(":>");
		ownedFunctionalExchanges.featureSpecialization.add("ownedFunctionalExchanges");
		ownedFunctionalExchanges.valuePart = s.ownedFunctionalExchanges.getEReference();
		t.body.add(ownedFunctionalExchanges);
	}
	//PhysicalFunction -> EReference : subFunctions
	if (s.subFunctions.getEReference() != null){
		var subFunctions = new SysMLine!ItemUsage;
		subFunctions.isReference = true;
		subFunctions.featureNote.add(":>");
		subFunctions.featureSpecialization.add("subFunctions");
		subFunctions.valuePart = s.subFunctions.getEReference();
		t.body.add(subFunctions);
	}
	//PhysicalFunction -> EReference : outFunctionRealizations
	if (s.outFunctionRealizations.getEReference() != null){
		var outFunctionRealizations = new SysMLine!ItemUsage;
		outFunctionRealizations.isReference = true;
		outFunctionRealizations.featureNote.add(":>");
		outFunctionRealizations.featureSpecialization.add("outFunctionRealizations");
		outFunctionRealizations.valuePart = s.outFunctionRealizations.getEReference();
		t.body.add(outFunctionRealizations);
	}
	//PhysicalFunction -> EReference : inFunctionRealizations
	if (s.inFunctionRealizations.getEReference() != null){
		var inFunctionRealizations = new SysMLine!ItemUsage;
		inFunctionRealizations.isReference = true;
		inFunctionRealizations.featureNote.add(":>");
		inFunctionRealizations.featureSpecialization.add("inFunctionRealizations");
		inFunctionRealizations.valuePart = s.inFunctionRealizations.getEReference();
		t.body.add(inFunctionRealizations);
	}
	//PhysicalFunction -> EReference : componentFunctionalAllocations
	if (s.componentFunctionalAllocations.getEReference() != null){
		var componentFunctionalAllocations = new SysMLine!ItemUsage;
		componentFunctionalAllocations.isReference = true;
		componentFunctionalAllocations.featureNote.add(":>");
		componentFunctionalAllocations.featureSpecialization.add("componentFunctionalAllocations");
		componentFunctionalAllocations.valuePart = s.componentFunctionalAllocations.getEReference();
		t.body.add(componentFunctionalAllocations);
	}
	//PhysicalFunction -> EReference : allocationBlocks
	if (s.allocationBlocks.getEReference() != null){
		var allocationBlocks = new SysMLine!ItemUsage;
		allocationBlocks.isReference = true;
		allocationBlocks.featureNote.add(":>");
		allocationBlocks.featureSpecialization.add("allocationBlocks");
		allocationBlocks.valuePart = s.allocationBlocks.getEReference();
		t.body.add(allocationBlocks);
	}
	//PhysicalFunction -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null){
		var availableInStates = new SysMLine!ItemUsage;
		availableInStates.isReference = true;
		availableInStates.featureNote.add(":>");
		availableInStates.featureSpecialization.add("availableInStates");
		availableInStates.valuePart = s.availableInStates.getEReference();
		t.body.add(availableInStates);
	}
	//PhysicalFunction -> EReference : involvingCapabilities
	if (s.involvingCapabilities.getEReference() != null){
		var involvingCapabilities = new SysMLine!ItemUsage;
		involvingCapabilities.isReference = true;
		involvingCapabilities.featureNote.add(":>");
		involvingCapabilities.featureSpecialization.add("involvingCapabilities");
		involvingCapabilities.valuePart = s.involvingCapabilities.getEReference();
		t.body.add(involvingCapabilities);
	}
	//PhysicalFunction -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null){
		var involvingCapabilityRealizations = new SysMLine!ItemUsage;
		involvingCapabilityRealizations.isReference = true;
		involvingCapabilityRealizations.featureNote.add(":>");
		involvingCapabilityRealizations.featureSpecialization.add("involvingCapabilityRealizations");
		involvingCapabilityRealizations.valuePart = s.involvingCapabilityRealizations.getEReference();
		t.body.add(involvingCapabilityRealizations);
	}
	//PhysicalFunction -> EReference : involvingFunctionalChains
	if (s.involvingFunctionalChains.getEReference() != null){
		var involvingFunctionalChains = new SysMLine!ItemUsage;
		involvingFunctionalChains.isReference = true;
		involvingFunctionalChains.featureNote.add(":>");
		involvingFunctionalChains.featureSpecialization.add("involvingFunctionalChains");
		involvingFunctionalChains.valuePart = s.involvingFunctionalChains.getEReference();
		t.body.add(involvingFunctionalChains);
	}
	//PhysicalFunction -> EReference : linkedStateMachine
	if (s.linkedStateMachine.getEReference() != null){
		var linkedStateMachine = new SysMLine!ItemUsage;
		linkedStateMachine.isReference = true;
		linkedStateMachine.featureNote.add(":>");
		linkedStateMachine.featureSpecialization.add("linkedStateMachine");
		linkedStateMachine.valuePart = s.linkedStateMachine.getEReference();
		t.body.add(linkedStateMachine);
	}
	//PhysicalFunction -> EReference : linkedFunctionSpecification
	if (s.linkedFunctionSpecification.getEReference() != null){
		var linkedFunctionSpecification = new SysMLine!ItemUsage;
		linkedFunctionSpecification.isReference = true;
		linkedFunctionSpecification.featureNote.add(":>");
		linkedFunctionSpecification.featureSpecialization.add("linkedFunctionSpecification");
		linkedFunctionSpecification.valuePart = s.linkedFunctionSpecification.getEReference();
		t.body.add(linkedFunctionSpecification);
	}
	//PhysicalFunction -> EReference : ownedPhysicalFunctionPkgs
	if (s.ownedPhysicalFunctionPkgs.getEReference() != null){
		var ownedPhysicalFunctionPkgs = new SysMLine!ItemUsage;
		ownedPhysicalFunctionPkgs.isReference = true;
		ownedPhysicalFunctionPkgs.featureNote.add(":>");
		ownedPhysicalFunctionPkgs.featureSpecialization.add("ownedPhysicalFunctionPkgs");
		ownedPhysicalFunctionPkgs.valuePart = s.ownedPhysicalFunctionPkgs.getEReference();
		t.body.add(ownedPhysicalFunctionPkgs);
	}
	//PhysicalFunction -> EReference : allocatingPhysicalComponents
	if (s.allocatingPhysicalComponents.getEReference() != null){
		var allocatingPhysicalComponents = new SysMLine!ItemUsage;
		allocatingPhysicalComponents.isReference = true;
		allocatingPhysicalComponents.featureNote.add(":>");
		allocatingPhysicalComponents.featureSpecialization.add("allocatingPhysicalComponents");
		allocatingPhysicalComponents.valuePart = s.allocatingPhysicalComponents.getEReference();
		t.body.add(allocatingPhysicalComponents);
	}
	//PhysicalFunction -> EReference : realizedLogicalFunctions
	if (s.realizedLogicalFunctions.getEReference() != null){
		var realizedLogicalFunctions = new SysMLine!ItemUsage;
		realizedLogicalFunctions.isReference = true;
		realizedLogicalFunctions.featureNote.add(":>");
		realizedLogicalFunctions.featureSpecialization.add("realizedLogicalFunctions");
		realizedLogicalFunctions.valuePart = s.realizedLogicalFunctions.getEReference();
		t.body.add(realizedLogicalFunctions);
	}
	//PhysicalFunction -> EReference : containedPhysicalFunctions
	if (s.containedPhysicalFunctions.getEReference() != null){
		var containedPhysicalFunctions = new SysMLine!ItemUsage;
		containedPhysicalFunctions.isReference = true;
		containedPhysicalFunctions.featureNote.add(":>");
		containedPhysicalFunctions.featureSpecialization.add("containedPhysicalFunctions");
		containedPhysicalFunctions.valuePart = s.containedPhysicalFunctions.getEReference();
		t.body.add(containedPhysicalFunctions);
	}
	//PhysicalFunction -> EReference : childrenPhysicalFunctions
	if (s.childrenPhysicalFunctions.getEReference() != null){
		var childrenPhysicalFunctions = new SysMLine!ItemUsage;
		childrenPhysicalFunctions.isReference = true;
		childrenPhysicalFunctions.featureNote.add(":>");
		childrenPhysicalFunctions.featureSpecialization.add("childrenPhysicalFunctions");
		childrenPhysicalFunctions.valuePart = s.childrenPhysicalFunctions.getEReference();
		t.body.add(childrenPhysicalFunctions);
	}
}

@lazy
rule PhysicalFunctionPkg
	transform s : DSL!PhysicalFunctionPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalFunctionPkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//PhysicalFunctionPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//PhysicalFunctionPkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//PhysicalFunctionPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//PhysicalFunctionPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//PhysicalFunctionPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//PhysicalFunctionPkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//PhysicalFunctionPkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//PhysicalFunctionPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//PhysicalFunctionPkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//PhysicalFunctionPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//PhysicalFunctionPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//PhysicalFunctionPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//PhysicalFunctionPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//PhysicalFunctionPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//PhysicalFunctionPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//PhysicalFunctionPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//PhysicalFunctionPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//PhysicalFunctionPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//PhysicalFunctionPkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//PhysicalFunctionPkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//PhysicalFunctionPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//PhysicalFunctionPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//PhysicalFunctionPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//PhysicalFunctionPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//PhysicalFunctionPkg -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null){
		var ownedFunctionalLinks = new SysMLine!ItemUsage;
		ownedFunctionalLinks.isReference = true;
		ownedFunctionalLinks.featureNote.add(":>");
		ownedFunctionalLinks.featureSpecialization.add("ownedFunctionalLinks");
		ownedFunctionalLinks.valuePart = s.ownedFunctionalLinks.getEReference();
		t.body.add(ownedFunctionalLinks);
	}
	//PhysicalFunctionPkg -> EReference : ownedExchanges
	if (s.ownedExchanges.getEReference() != null){
		var ownedExchanges = new SysMLine!ItemUsage;
		ownedExchanges.isReference = true;
		ownedExchanges.featureNote.add(":>");
		ownedExchanges.featureSpecialization.add("ownedExchanges");
		ownedExchanges.valuePart = s.ownedExchanges.getEReference();
		t.body.add(ownedExchanges);
	}
	//PhysicalFunctionPkg -> EReference : ownedExchangeSpecificationRealizations
	if (s.ownedExchangeSpecificationRealizations.getEReference() != null){
		var ownedExchangeSpecificationRealizations = new SysMLine!ItemUsage;
		ownedExchangeSpecificationRealizations.isReference = true;
		ownedExchangeSpecificationRealizations.featureNote.add(":>");
		ownedExchangeSpecificationRealizations.featureSpecialization.add("ownedExchangeSpecificationRealizations");
		ownedExchangeSpecificationRealizations.valuePart = s.ownedExchangeSpecificationRealizations.getEReference();
		t.body.add(ownedExchangeSpecificationRealizations);
	}
	//PhysicalFunctionPkg -> EReference : ownedCategories
	if (s.ownedCategories.getEReference() != null){
		var ownedCategories = new SysMLine!ItemUsage;
		ownedCategories.isReference = true;
		ownedCategories.featureNote.add(":>");
		ownedCategories.featureSpecialization.add("ownedCategories");
		ownedCategories.valuePart = s.ownedCategories.getEReference();
		t.body.add(ownedCategories);
	}
	//PhysicalFunctionPkg -> EReference : ownedFunctionSpecifications
	if (s.ownedFunctionSpecifications.getEReference() != null){
		var ownedFunctionSpecifications = new SysMLine!ItemUsage;
		ownedFunctionSpecifications.isReference = true;
		ownedFunctionSpecifications.featureNote.add(":>");
		ownedFunctionSpecifications.featureSpecialization.add("ownedFunctionSpecifications");
		ownedFunctionSpecifications.valuePart = s.ownedFunctionSpecifications.getEReference();
		t.body.add(ownedFunctionSpecifications);
	}
	//PhysicalFunctionPkg -> EReference : ownedPhysicalFunctions
	if (s.ownedPhysicalFunctions.getEReference() != null){
		var ownedPhysicalFunctions = new SysMLine!ItemUsage;
		ownedPhysicalFunctions.isReference = true;
		ownedPhysicalFunctions.featureNote.add(":>");
		ownedPhysicalFunctions.featureSpecialization.add("ownedPhysicalFunctions");
		ownedPhysicalFunctions.valuePart = s.ownedPhysicalFunctions.getEReference();
		t.body.add(ownedPhysicalFunctions);
	}
	//PhysicalFunctionPkg -> EReference : ownedPhysicalFunctionPkgs
	if (s.ownedPhysicalFunctionPkgs.getEReference() != null){
		var ownedPhysicalFunctionPkgs = new SysMLine!ItemUsage;
		ownedPhysicalFunctionPkgs.isReference = true;
		ownedPhysicalFunctionPkgs.featureNote.add(":>");
		ownedPhysicalFunctionPkgs.featureSpecialization.add("ownedPhysicalFunctionPkgs");
		ownedPhysicalFunctionPkgs.valuePart = s.ownedPhysicalFunctionPkgs.getEReference();
		t.body.add(ownedPhysicalFunctionPkgs);
	}
}

@lazy
rule PhysicalComponent
	transform s : DSL!PhysicalComponent
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalComponent -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//PhysicalComponent -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//PhysicalComponent -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//PhysicalComponent -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//PhysicalComponent -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//PhysicalComponent -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//PhysicalComponent -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//PhysicalComponent -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//PhysicalComponent -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null){
		var abstract = new SysMLine!AttributeUsage;
		abstract.featureNote.add(":>>");
		abstract.featureSpecialization.add("abstract");
		abstract.valuePart = s.abstract.getEAttribute();
		t.body.add(abstract);
	}
	//PhysicalComponent -> EAttribute : actor
	if (s.actor.getEAttribute() != null){
		var actor = new SysMLine!AttributeUsage;
		actor.featureNote.add(":>>");
		actor.featureSpecialization.add("actor");
		actor.valuePart = s.actor.getEAttribute();
		t.body.add(actor);
	}
	//PhysicalComponent -> EAttribute : human
	if (s.human.getEAttribute() != null){
		var human = new SysMLine!AttributeUsage;
		human.featureNote.add(":>>");
		human.featureSpecialization.add("human");
		human.valuePart = s.human.getEAttribute();
		t.body.add(human);
	}
	//PhysicalComponent -> EAttribute : kind
	if (s.kind.getEAttribute() != null){
		var kind = new SysMLine!AttributeUsage;
		kind.featureNote.add(":>>");
		kind.featureSpecialization.add("kind");
		kind.valuePart = s.kind.getEAttribute();
		t.body.add(kind);
	}
	//PhysicalComponent -> EAttribute : nature
	if (s.nature.getEAttribute() != null){
		var nature = new SysMLine!AttributeUsage;
		nature.featureNote.add(":>>");
		nature.featureSpecialization.add("nature");
		nature.valuePart = s.nature.getEAttribute();
		t.body.add(nature);
	}
	//PhysicalComponent -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//PhysicalComponent -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//PhysicalComponent -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//PhysicalComponent -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//PhysicalComponent -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//PhysicalComponent -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//PhysicalComponent -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//PhysicalComponent -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//PhysicalComponent -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//PhysicalComponent -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//PhysicalComponent -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//PhysicalComponent -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//PhysicalComponent -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//PhysicalComponent -> EReference : allocatorConfigurationItems
	if (s.allocatorConfigurationItems.getEReference() != null){
		var allocatorConfigurationItems = new SysMLine!ItemUsage;
		allocatorConfigurationItems.isReference = true;
		allocatorConfigurationItems.featureNote.add(":>");
		allocatorConfigurationItems.featureSpecialization.add("allocatorConfigurationItems");
		allocatorConfigurationItems.valuePart = s.allocatorConfigurationItems.getEReference();
		t.body.add(allocatorConfigurationItems);
	}
	//PhysicalComponent -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null){
		var abstractTypedElements = new SysMLine!ItemUsage;
		abstractTypedElements.isReference = true;
		abstractTypedElements.featureNote.add(":>");
		abstractTypedElements.featureSpecialization.add("abstractTypedElements");
		abstractTypedElements.valuePart = s.abstractTypedElements.getEReference();
		t.body.add(abstractTypedElements);
	}
	//PhysicalComponent -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//PhysicalComponent -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//PhysicalComponent -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//PhysicalComponent -> EReference : typedElements
	if (s.typedElements.getEReference() != null){
		var typedElements = new SysMLine!ItemUsage;
		typedElements.isReference = true;
		typedElements.featureNote.add(":>");
		typedElements.featureSpecialization.add("typedElements");
		typedElements.valuePart = s.typedElements.getEReference();
		t.body.add(typedElements);
	}
	//PhysicalComponent -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null){
		var ownedFunctionalAllocation = new SysMLine!ItemUsage;
		ownedFunctionalAllocation.isReference = true;
		ownedFunctionalAllocation.featureNote.add(":>");
		ownedFunctionalAllocation.featureSpecialization.add("ownedFunctionalAllocation");
		ownedFunctionalAllocation.valuePart = s.ownedFunctionalAllocation.getEReference();
		t.body.add(ownedFunctionalAllocation);
	}
	//PhysicalComponent -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null){
		var ownedComponentExchanges = new SysMLine!ItemUsage;
		ownedComponentExchanges.isReference = true;
		ownedComponentExchanges.featureNote.add(":>");
		ownedComponentExchanges.featureSpecialization.add("ownedComponentExchanges");
		ownedComponentExchanges.valuePart = s.ownedComponentExchanges.getEReference();
		t.body.add(ownedComponentExchanges);
	}
	//PhysicalComponent -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null){
		var ownedComponentExchangeCategories = new SysMLine!ItemUsage;
		ownedComponentExchangeCategories.isReference = true;
		ownedComponentExchangeCategories.featureNote.add(":>");
		ownedComponentExchangeCategories.featureSpecialization.add("ownedComponentExchangeCategories");
		ownedComponentExchangeCategories.valuePart = s.ownedComponentExchangeCategories.getEReference();
		t.body.add(ownedComponentExchangeCategories);
	}
	//PhysicalComponent -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null){
		var functionalAllocations = new SysMLine!ItemUsage;
		functionalAllocations.isReference = true;
		functionalAllocations.featureNote.add(":>");
		functionalAllocations.featureSpecialization.add("functionalAllocations");
		functionalAllocations.valuePart = s.functionalAllocations.getEReference();
		t.body.add(functionalAllocations);
	}
	//PhysicalComponent -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null){
		var allocatedFunctions = new SysMLine!ItemUsage;
		allocatedFunctions.isReference = true;
		allocatedFunctions.featureNote.add(":>");
		allocatedFunctions.featureSpecialization.add("allocatedFunctions");
		allocatedFunctions.valuePart = s.allocatedFunctions.getEReference();
		t.body.add(allocatedFunctions);
	}
	//PhysicalComponent -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null){
		var inExchangeLinks = new SysMLine!ItemUsage;
		inExchangeLinks.isReference = true;
		inExchangeLinks.featureNote.add(":>");
		inExchangeLinks.featureSpecialization.add("inExchangeLinks");
		inExchangeLinks.valuePart = s.inExchangeLinks.getEReference();
		t.body.add(inExchangeLinks);
	}
	//PhysicalComponent -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null){
		var outExchangeLinks = new SysMLine!ItemUsage;
		outExchangeLinks.isReference = true;
		outExchangeLinks.featureNote.add(":>");
		outExchangeLinks.featureSpecialization.add("outExchangeLinks");
		outExchangeLinks.valuePart = s.outExchangeLinks.getEReference();
		t.body.add(outExchangeLinks);
	}
	//PhysicalComponent -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null){
		var ownedAbstractCapabilityPkg = new SysMLine!ItemUsage;
		ownedAbstractCapabilityPkg.isReference = true;
		ownedAbstractCapabilityPkg.featureNote.add(":>");
		ownedAbstractCapabilityPkg.featureSpecialization.add("ownedAbstractCapabilityPkg");
		ownedAbstractCapabilityPkg.valuePart = s.ownedAbstractCapabilityPkg.getEReference();
		t.body.add(ownedAbstractCapabilityPkg);
	}
	//PhysicalComponent -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null){
		var ownedInterfacePkg = new SysMLine!ItemUsage;
		ownedInterfacePkg.isReference = true;
		ownedInterfacePkg.featureNote.add(":>");
		ownedInterfacePkg.featureSpecialization.add("ownedInterfacePkg");
		ownedInterfacePkg.valuePart = s.ownedInterfacePkg.getEReference();
		t.body.add(ownedInterfacePkg);
	}
	//PhysicalComponent -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null){
		var ownedDataPkg = new SysMLine!ItemUsage;
		ownedDataPkg.isReference = true;
		ownedDataPkg.featureNote.add(":>");
		ownedDataPkg.featureSpecialization.add("ownedDataPkg");
		ownedDataPkg.valuePart = s.ownedDataPkg.getEReference();
		t.body.add(ownedDataPkg);
	}
	//PhysicalComponent -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null){
		var ownedStateMachines = new SysMLine!ItemUsage;
		ownedStateMachines.isReference = true;
		ownedStateMachines.featureNote.add(":>");
		ownedStateMachines.featureSpecialization.add("ownedStateMachines");
		ownedStateMachines.valuePart = s.ownedStateMachines.getEReference();
		t.body.add(ownedStateMachines);
	}
	//PhysicalComponent -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null){
		var ownedGeneralizations = new SysMLine!ItemUsage;
		ownedGeneralizations.isReference = true;
		ownedGeneralizations.featureNote.add(":>");
		ownedGeneralizations.featureSpecialization.add("ownedGeneralizations");
		ownedGeneralizations.valuePart = s.ownedGeneralizations.getEReference();
		t.body.add(ownedGeneralizations);
	}
	//PhysicalComponent -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null){
		var superGeneralizations = new SysMLine!ItemUsage;
		superGeneralizations.isReference = true;
		superGeneralizations.featureNote.add(":>");
		superGeneralizations.featureSpecialization.add("superGeneralizations");
		superGeneralizations.valuePart = s.superGeneralizations.getEReference();
		t.body.add(superGeneralizations);
	}
	//PhysicalComponent -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null){
		var subGeneralizations = new SysMLine!ItemUsage;
		subGeneralizations.isReference = true;
		subGeneralizations.featureNote.add(":>");
		subGeneralizations.featureSpecialization.add("subGeneralizations");
		subGeneralizations.valuePart = s.subGeneralizations.getEReference();
		t.body.add(subGeneralizations);
	}
	//PhysicalComponent -> EReference : super
	if (s.super.getEReference() != null){
		var super = new SysMLine!ItemUsage;
		super.isReference = true;
		super.featureNote.add(":>");
		super.featureSpecialization.add("super");
		super.valuePart = s.super.getEReference();
		t.body.add(super);
	}
	//PhysicalComponent -> EReference : sub
	if (s.sub.getEReference() != null){
		var sub = new SysMLine!ItemUsage;
		sub.isReference = true;
		sub.featureNote.add(":>");
		sub.featureSpecialization.add("sub");
		sub.valuePart = s.sub.getEReference();
		t.body.add(sub);
	}
	//PhysicalComponent -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null){
		var ownedFeatures = new SysMLine!ItemUsage;
		ownedFeatures.isReference = true;
		ownedFeatures.featureNote.add(":>");
		ownedFeatures.featureSpecialization.add("ownedFeatures");
		ownedFeatures.valuePart = s.ownedFeatures.getEReference();
		t.body.add(ownedFeatures);
	}
	//PhysicalComponent -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null){
		var containedProperties = new SysMLine!ItemUsage;
		containedProperties.isReference = true;
		containedProperties.featureNote.add(":>");
		containedProperties.featureSpecialization.add("containedProperties");
		containedProperties.valuePart = s.containedProperties.getEReference();
		t.body.add(containedProperties);
	}
	//PhysicalComponent -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null){
		var ownedInterfaceAllocations = new SysMLine!ItemUsage;
		ownedInterfaceAllocations.isReference = true;
		ownedInterfaceAllocations.featureNote.add(":>");
		ownedInterfaceAllocations.featureSpecialization.add("ownedInterfaceAllocations");
		ownedInterfaceAllocations.valuePart = s.ownedInterfaceAllocations.getEReference();
		t.body.add(ownedInterfaceAllocations);
	}
	//PhysicalComponent -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null){
		var provisionedInterfaceAllocations = new SysMLine!ItemUsage;
		provisionedInterfaceAllocations.isReference = true;
		provisionedInterfaceAllocations.featureNote.add(":>");
		provisionedInterfaceAllocations.featureSpecialization.add("provisionedInterfaceAllocations");
		provisionedInterfaceAllocations.valuePart = s.provisionedInterfaceAllocations.getEReference();
		t.body.add(provisionedInterfaceAllocations);
	}
	//PhysicalComponent -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null){
		var allocatedInterfaces = new SysMLine!ItemUsage;
		allocatedInterfaces.isReference = true;
		allocatedInterfaces.featureNote.add(":>");
		allocatedInterfaces.featureSpecialization.add("allocatedInterfaces");
		allocatedInterfaces.valuePart = s.allocatedInterfaces.getEReference();
		t.body.add(allocatedInterfaces);
	}
	//PhysicalComponent -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null){
		var ownedCommunicationLinks = new SysMLine!ItemUsage;
		ownedCommunicationLinks.isReference = true;
		ownedCommunicationLinks.featureNote.add(":>");
		ownedCommunicationLinks.featureSpecialization.add("ownedCommunicationLinks");
		ownedCommunicationLinks.valuePart = s.ownedCommunicationLinks.getEReference();
		t.body.add(ownedCommunicationLinks);
	}
	//PhysicalComponent -> EReference : produce
	if (s.produce.getEReference() != null){
		var produce = new SysMLine!ItemUsage;
		produce.isReference = true;
		produce.featureNote.add(":>");
		produce.featureSpecialization.add("produce");
		produce.valuePart = s.produce.getEReference();
		t.body.add(produce);
	}
	//PhysicalComponent -> EReference : consume
	if (s.consume.getEReference() != null){
		var consume = new SysMLine!ItemUsage;
		consume.isReference = true;
		consume.featureNote.add(":>");
		consume.featureSpecialization.add("consume");
		consume.valuePart = s.consume.getEReference();
		t.body.add(consume);
	}
	//PhysicalComponent -> EReference : send
	if (s.send.getEReference() != null){
		var send = new SysMLine!ItemUsage;
		send.isReference = true;
		send.featureNote.add(":>");
		send.featureSpecialization.add("send");
		send.valuePart = s.send.getEReference();
		t.body.add(send);
	}
	//PhysicalComponent -> EReference : receive
	if (s.receive.getEReference() != null){
		var receive = new SysMLine!ItemUsage;
		receive.isReference = true;
		receive.featureNote.add(":>");
		receive.featureSpecialization.add("receive");
		receive.valuePart = s.receive.getEReference();
		t.body.add(receive);
	}
	//PhysicalComponent -> EReference : call
	if (s.call.getEReference() != null){
		var call = new SysMLine!ItemUsage;
		call.isReference = true;
		call.featureNote.add(":>");
		call.featureSpecialization.add("call");
		call.valuePart = s.call.getEReference();
		t.body.add(call);
	}
	//PhysicalComponent -> EReference : execute
	if (s.execute.getEReference() != null){
		var execute = new SysMLine!ItemUsage;
		execute.isReference = true;
		execute.featureNote.add(":>");
		execute.featureSpecialization.add("execute");
		execute.valuePart = s.execute.getEReference();
		t.body.add(execute);
	}
	//PhysicalComponent -> EReference : write
	if (s.write.getEReference() != null){
		var write = new SysMLine!ItemUsage;
		write.isReference = true;
		write.featureNote.add(":>");
		write.featureSpecialization.add("write");
		write.valuePart = s.write.getEReference();
		t.body.add(write);
	}
	//PhysicalComponent -> EReference : access
	if (s.access.getEReference() != null){
		var access = new SysMLine!ItemUsage;
		access.isReference = true;
		access.featureNote.add(":>");
		access.featureSpecialization.add("access");
		access.valuePart = s.access.getEReference();
		t.body.add(access);
	}
	//PhysicalComponent -> EReference : acquire
	if (s.acquire.getEReference() != null){
		var acquire = new SysMLine!ItemUsage;
		acquire.isReference = true;
		acquire.featureNote.add(":>");
		acquire.featureSpecialization.add("acquire");
		acquire.valuePart = s.acquire.getEReference();
		t.body.add(acquire);
	}
	//PhysicalComponent -> EReference : transmit
	if (s.transmit.getEReference() != null){
		var transmit = new SysMLine!ItemUsage;
		transmit.isReference = true;
		transmit.featureNote.add(":>");
		transmit.featureSpecialization.add("transmit");
		transmit.valuePart = s.transmit.getEReference();
		t.body.add(transmit);
	}
	//PhysicalComponent -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null){
		var ownedInterfaceUses = new SysMLine!ItemUsage;
		ownedInterfaceUses.isReference = true;
		ownedInterfaceUses.featureNote.add(":>");
		ownedInterfaceUses.featureSpecialization.add("ownedInterfaceUses");
		ownedInterfaceUses.valuePart = s.ownedInterfaceUses.getEReference();
		t.body.add(ownedInterfaceUses);
	}
	//PhysicalComponent -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null){
		var usedInterfaceLinks = new SysMLine!ItemUsage;
		usedInterfaceLinks.isReference = true;
		usedInterfaceLinks.featureNote.add(":>");
		usedInterfaceLinks.featureSpecialization.add("usedInterfaceLinks");
		usedInterfaceLinks.valuePart = s.usedInterfaceLinks.getEReference();
		t.body.add(usedInterfaceLinks);
	}
	//PhysicalComponent -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null){
		var usedInterfaces = new SysMLine!ItemUsage;
		usedInterfaces.isReference = true;
		usedInterfaces.featureNote.add(":>");
		usedInterfaces.featureSpecialization.add("usedInterfaces");
		usedInterfaces.valuePart = s.usedInterfaces.getEReference();
		t.body.add(usedInterfaces);
	}
	//PhysicalComponent -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null){
		var ownedInterfaceImplementations = new SysMLine!ItemUsage;
		ownedInterfaceImplementations.isReference = true;
		ownedInterfaceImplementations.featureNote.add(":>");
		ownedInterfaceImplementations.featureSpecialization.add("ownedInterfaceImplementations");
		ownedInterfaceImplementations.valuePart = s.ownedInterfaceImplementations.getEReference();
		t.body.add(ownedInterfaceImplementations);
	}
	//PhysicalComponent -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null){
		var implementedInterfaceLinks = new SysMLine!ItemUsage;
		implementedInterfaceLinks.isReference = true;
		implementedInterfaceLinks.featureNote.add(":>");
		implementedInterfaceLinks.featureSpecialization.add("implementedInterfaceLinks");
		implementedInterfaceLinks.valuePart = s.implementedInterfaceLinks.getEReference();
		t.body.add(implementedInterfaceLinks);
	}
	//PhysicalComponent -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null){
		var implementedInterfaces = new SysMLine!ItemUsage;
		implementedInterfaces.isReference = true;
		implementedInterfaces.featureNote.add(":>");
		implementedInterfaces.featureSpecialization.add("implementedInterfaces");
		implementedInterfaces.valuePart = s.implementedInterfaces.getEReference();
		t.body.add(implementedInterfaces);
	}
	//PhysicalComponent -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null){
		var ownedComponentRealizations = new SysMLine!ItemUsage;
		ownedComponentRealizations.isReference = true;
		ownedComponentRealizations.featureNote.add(":>");
		ownedComponentRealizations.featureSpecialization.add("ownedComponentRealizations");
		ownedComponentRealizations.valuePart = s.ownedComponentRealizations.getEReference();
		t.body.add(ownedComponentRealizations);
	}
	//PhysicalComponent -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null){
		var realizedComponents = new SysMLine!ItemUsage;
		realizedComponents.isReference = true;
		realizedComponents.featureNote.add(":>");
		realizedComponents.featureSpecialization.add("realizedComponents");
		realizedComponents.valuePart = s.realizedComponents.getEReference();
		t.body.add(realizedComponents);
	}
	//PhysicalComponent -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null){
		var realizingComponents = new SysMLine!ItemUsage;
		realizingComponents.isReference = true;
		realizingComponents.featureNote.add(":>");
		realizingComponents.featureSpecialization.add("realizingComponents");
		realizingComponents.valuePart = s.realizingComponents.getEReference();
		t.body.add(realizingComponents);
	}
	//PhysicalComponent -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null){
		var providedInterfaces = new SysMLine!ItemUsage;
		providedInterfaces.isReference = true;
		providedInterfaces.featureNote.add(":>");
		providedInterfaces.featureSpecialization.add("providedInterfaces");
		providedInterfaces.valuePart = s.providedInterfaces.getEReference();
		t.body.add(providedInterfaces);
	}
	//PhysicalComponent -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null){
		var requiredInterfaces = new SysMLine!ItemUsage;
		requiredInterfaces.isReference = true;
		requiredInterfaces.featureNote.add(":>");
		requiredInterfaces.featureSpecialization.add("requiredInterfaces");
		requiredInterfaces.valuePart = s.requiredInterfaces.getEReference();
		t.body.add(requiredInterfaces);
	}
	//PhysicalComponent -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null){
		var containedComponentPorts = new SysMLine!ItemUsage;
		containedComponentPorts.isReference = true;
		containedComponentPorts.featureNote.add(":>");
		containedComponentPorts.featureSpecialization.add("containedComponentPorts");
		containedComponentPorts.valuePart = s.containedComponentPorts.getEReference();
		t.body.add(containedComponentPorts);
	}
	//PhysicalComponent -> EReference : containedParts
	if (s.containedParts.getEReference() != null){
		var containedParts = new SysMLine!ItemUsage;
		containedParts.isReference = true;
		containedParts.featureNote.add(":>");
		containedParts.featureSpecialization.add("containedParts");
		containedParts.valuePart = s.containedParts.getEReference();
		t.body.add(containedParts);
	}
	//PhysicalComponent -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null){
		var containedPhysicalPorts = new SysMLine!ItemUsage;
		containedPhysicalPorts.isReference = true;
		containedPhysicalPorts.featureNote.add(":>");
		containedPhysicalPorts.featureSpecialization.add("containedPhysicalPorts");
		containedPhysicalPorts.valuePart = s.containedPhysicalPorts.getEReference();
		t.body.add(containedPhysicalPorts);
	}
	//PhysicalComponent -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null){
		var ownedPhysicalPath = new SysMLine!ItemUsage;
		ownedPhysicalPath.isReference = true;
		ownedPhysicalPath.featureNote.add(":>");
		ownedPhysicalPath.featureSpecialization.add("ownedPhysicalPath");
		ownedPhysicalPath.valuePart = s.ownedPhysicalPath.getEReference();
		t.body.add(ownedPhysicalPath);
	}
	//PhysicalComponent -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null){
		var ownedPhysicalLinks = new SysMLine!ItemUsage;
		ownedPhysicalLinks.isReference = true;
		ownedPhysicalLinks.featureNote.add(":>");
		ownedPhysicalLinks.featureSpecialization.add("ownedPhysicalLinks");
		ownedPhysicalLinks.valuePart = s.ownedPhysicalLinks.getEReference();
		t.body.add(ownedPhysicalLinks);
	}
	//PhysicalComponent -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null){
		var ownedPhysicalLinkCategories = new SysMLine!ItemUsage;
		ownedPhysicalLinkCategories.isReference = true;
		ownedPhysicalLinkCategories.featureNote.add(":>");
		ownedPhysicalLinkCategories.featureSpecialization.add("ownedPhysicalLinkCategories");
		ownedPhysicalLinkCategories.valuePart = s.ownedPhysicalLinkCategories.getEReference();
		t.body.add(ownedPhysicalLinkCategories);
	}
	//PhysicalComponent -> EReference : representingParts
	if (s.representingParts.getEReference() != null){
		var representingParts = new SysMLine!ItemUsage;
		representingParts.isReference = true;
		representingParts.featureNote.add(":>");
		representingParts.featureSpecialization.add("representingParts");
		representingParts.valuePart = s.representingParts.getEReference();
		t.body.add(representingParts);
	}
	//PhysicalComponent -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null){
		var involvingInvolvements = new SysMLine!ItemUsage;
		involvingInvolvements.isReference = true;
		involvingInvolvements.featureNote.add(":>");
		involvingInvolvements.featureSpecialization.add("involvingInvolvements");
		involvingInvolvements.valuePart = s.involvingInvolvements.getEReference();
		t.body.add(involvingInvolvements);
	}
	//PhysicalComponent -> EReference : capabilityRealizationInvolvements
	if (s.capabilityRealizationInvolvements.getEReference() != null){
		var capabilityRealizationInvolvements = new SysMLine!ItemUsage;
		capabilityRealizationInvolvements.isReference = true;
		capabilityRealizationInvolvements.featureNote.add(":>");
		capabilityRealizationInvolvements.featureSpecialization.add("capabilityRealizationInvolvements");
		capabilityRealizationInvolvements.valuePart = s.capabilityRealizationInvolvements.getEReference();
		t.body.add(capabilityRealizationInvolvements);
	}
	//PhysicalComponent -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null){
		var involvingCapabilityRealizations = new SysMLine!ItemUsage;
		involvingCapabilityRealizations.isReference = true;
		involvingCapabilityRealizations.featureNote.add(":>");
		involvingCapabilityRealizations.featureSpecialization.add("involvingCapabilityRealizations");
		involvingCapabilityRealizations.valuePart = s.involvingCapabilityRealizations.getEReference();
		t.body.add(involvingCapabilityRealizations);
	}
	//PhysicalComponent -> EReference : deployingLinks
	if (s.deployingLinks.getEReference() != null){
		var deployingLinks = new SysMLine!ItemUsage;
		deployingLinks.isReference = true;
		deployingLinks.featureNote.add(":>");
		deployingLinks.featureSpecialization.add("deployingLinks");
		deployingLinks.valuePart = s.deployingLinks.getEReference();
		t.body.add(deployingLinks);
	}
	//PhysicalComponent -> EReference : deploymentLinks
	if (s.deploymentLinks.getEReference() != null){
		var deploymentLinks = new SysMLine!ItemUsage;
		deploymentLinks.isReference = true;
		deploymentLinks.featureNote.add(":>");
		deploymentLinks.featureSpecialization.add("deploymentLinks");
		deploymentLinks.valuePart = s.deploymentLinks.getEReference();
		t.body.add(deploymentLinks);
	}
	//PhysicalComponent -> EReference : ownedDeploymentLinks
	if (s.ownedDeploymentLinks.getEReference() != null){
		var ownedDeploymentLinks = new SysMLine!ItemUsage;
		ownedDeploymentLinks.isReference = true;
		ownedDeploymentLinks.featureNote.add(":>");
		ownedDeploymentLinks.featureSpecialization.add("ownedDeploymentLinks");
		ownedDeploymentLinks.valuePart = s.ownedDeploymentLinks.getEReference();
		t.body.add(ownedDeploymentLinks);
	}
	//PhysicalComponent -> EReference : ownedPhysicalComponents
	if (s.ownedPhysicalComponents.getEReference() != null){
		var ownedPhysicalComponents = new SysMLine!ItemUsage;
		ownedPhysicalComponents.isReference = true;
		ownedPhysicalComponents.featureNote.add(":>");
		ownedPhysicalComponents.featureSpecialization.add("ownedPhysicalComponents");
		ownedPhysicalComponents.valuePart = s.ownedPhysicalComponents.getEReference();
		t.body.add(ownedPhysicalComponents);
	}
	//PhysicalComponent -> EReference : ownedPhysicalComponentPkgs
	if (s.ownedPhysicalComponentPkgs.getEReference() != null){
		var ownedPhysicalComponentPkgs = new SysMLine!ItemUsage;
		ownedPhysicalComponentPkgs.isReference = true;
		ownedPhysicalComponentPkgs.featureNote.add(":>");
		ownedPhysicalComponentPkgs.featureSpecialization.add("ownedPhysicalComponentPkgs");
		ownedPhysicalComponentPkgs.valuePart = s.ownedPhysicalComponentPkgs.getEReference();
		t.body.add(ownedPhysicalComponentPkgs);
	}
	//PhysicalComponent -> EReference : logicalInterfaceRealizations
	if (s.logicalInterfaceRealizations.getEReference() != null){
		var logicalInterfaceRealizations = new SysMLine!ItemUsage;
		logicalInterfaceRealizations.isReference = true;
		logicalInterfaceRealizations.featureNote.add(":>");
		logicalInterfaceRealizations.featureSpecialization.add("logicalInterfaceRealizations");
		logicalInterfaceRealizations.valuePart = s.logicalInterfaceRealizations.getEReference();
		t.body.add(logicalInterfaceRealizations);
	}
	//PhysicalComponent -> EReference : subPhysicalComponents
	if (s.subPhysicalComponents.getEReference() != null){
		var subPhysicalComponents = new SysMLine!ItemUsage;
		subPhysicalComponents.isReference = true;
		subPhysicalComponents.featureNote.add(":>");
		subPhysicalComponents.featureSpecialization.add("subPhysicalComponents");
		subPhysicalComponents.valuePart = s.subPhysicalComponents.getEReference();
		t.body.add(subPhysicalComponents);
	}
	//PhysicalComponent -> EReference : realizedLogicalComponents
	if (s.realizedLogicalComponents.getEReference() != null){
		var realizedLogicalComponents = new SysMLine!ItemUsage;
		realizedLogicalComponents.isReference = true;
		realizedLogicalComponents.featureNote.add(":>");
		realizedLogicalComponents.featureSpecialization.add("realizedLogicalComponents");
		realizedLogicalComponents.valuePart = s.realizedLogicalComponents.getEReference();
		t.body.add(realizedLogicalComponents);
	}
	//PhysicalComponent -> EReference : allocatedPhysicalFunctions
	if (s.allocatedPhysicalFunctions.getEReference() != null){
		var allocatedPhysicalFunctions = new SysMLine!ItemUsage;
		allocatedPhysicalFunctions.isReference = true;
		allocatedPhysicalFunctions.featureNote.add(":>");
		allocatedPhysicalFunctions.featureSpecialization.add("allocatedPhysicalFunctions");
		allocatedPhysicalFunctions.valuePart = s.allocatedPhysicalFunctions.getEReference();
		t.body.add(allocatedPhysicalFunctions);
	}
	//PhysicalComponent -> EReference : deployedPhysicalComponents
	if (s.deployedPhysicalComponents.getEReference() != null){
		var deployedPhysicalComponents = new SysMLine!ItemUsage;
		deployedPhysicalComponents.isReference = true;
		deployedPhysicalComponents.featureNote.add(":>");
		deployedPhysicalComponents.featureSpecialization.add("deployedPhysicalComponents");
		deployedPhysicalComponents.valuePart = s.deployedPhysicalComponents.getEReference();
		t.body.add(deployedPhysicalComponents);
	}
	//PhysicalComponent -> EReference : deployingPhysicalComponents
	if (s.deployingPhysicalComponents.getEReference() != null){
		var deployingPhysicalComponents = new SysMLine!ItemUsage;
		deployingPhysicalComponents.isReference = true;
		deployingPhysicalComponents.featureNote.add(":>");
		deployingPhysicalComponents.featureSpecialization.add("deployingPhysicalComponents");
		deployingPhysicalComponents.valuePart = s.deployingPhysicalComponents.getEReference();
		t.body.add(deployingPhysicalComponents);
	}
}

@lazy
rule PhysicalComponentPkg
	transform s : DSL!PhysicalComponentPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalComponentPkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//PhysicalComponentPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//PhysicalComponentPkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//PhysicalComponentPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//PhysicalComponentPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//PhysicalComponentPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//PhysicalComponentPkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//PhysicalComponentPkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//PhysicalComponentPkg -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null){
		var visibility = new SysMLine!AttributeUsage;
		visibility.featureNote.add(":>>");
		visibility.featureSpecialization.add("visibility");
		visibility.valuePart = s.visibility.getEAttribute();
		t.body.add(visibility);
	}
	//PhysicalComponentPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//PhysicalComponentPkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//PhysicalComponentPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//PhysicalComponentPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//PhysicalComponentPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//PhysicalComponentPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//PhysicalComponentPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//PhysicalComponentPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//PhysicalComponentPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//PhysicalComponentPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//PhysicalComponentPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//PhysicalComponentPkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//PhysicalComponentPkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//PhysicalComponentPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//PhysicalComponentPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//PhysicalComponentPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//PhysicalComponentPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//PhysicalComponentPkg -> EReference : ownedParts
	if (s.ownedParts.getEReference() != null){
		var ownedParts = new SysMLine!ItemUsage;
		ownedParts.isReference = true;
		ownedParts.featureNote.add(":>");
		ownedParts.featureSpecialization.add("ownedParts");
		ownedParts.valuePart = s.ownedParts.getEReference();
		t.body.add(ownedParts);
	}
	//PhysicalComponentPkg -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null){
		var ownedComponentExchanges = new SysMLine!ItemUsage;
		ownedComponentExchanges.isReference = true;
		ownedComponentExchanges.featureNote.add(":>");
		ownedComponentExchanges.featureSpecialization.add("ownedComponentExchanges");
		ownedComponentExchanges.valuePart = s.ownedComponentExchanges.getEReference();
		t.body.add(ownedComponentExchanges);
	}
	//PhysicalComponentPkg -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null){
		var ownedComponentExchangeCategories = new SysMLine!ItemUsage;
		ownedComponentExchangeCategories.isReference = true;
		ownedComponentExchangeCategories.featureNote.add(":>");
		ownedComponentExchangeCategories.featureSpecialization.add("ownedComponentExchangeCategories");
		ownedComponentExchangeCategories.valuePart = s.ownedComponentExchangeCategories.getEReference();
		t.body.add(ownedComponentExchangeCategories);
	}
	//PhysicalComponentPkg -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null){
		var ownedFunctionalLinks = new SysMLine!ItemUsage;
		ownedFunctionalLinks.isReference = true;
		ownedFunctionalLinks.featureNote.add(":>");
		ownedFunctionalLinks.featureSpecialization.add("ownedFunctionalLinks");
		ownedFunctionalLinks.valuePart = s.ownedFunctionalLinks.getEReference();
		t.body.add(ownedFunctionalLinks);
	}
	//PhysicalComponentPkg -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null){
		var ownedFunctionalAllocations = new SysMLine!ItemUsage;
		ownedFunctionalAllocations.isReference = true;
		ownedFunctionalAllocations.featureNote.add(":>");
		ownedFunctionalAllocations.featureSpecialization.add("ownedFunctionalAllocations");
		ownedFunctionalAllocations.valuePart = s.ownedFunctionalAllocations.getEReference();
		t.body.add(ownedFunctionalAllocations);
	}
	//PhysicalComponentPkg -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null){
		var ownedComponentExchangeRealizations = new SysMLine!ItemUsage;
		ownedComponentExchangeRealizations.isReference = true;
		ownedComponentExchangeRealizations.featureNote.add(":>");
		ownedComponentExchangeRealizations.featureSpecialization.add("ownedComponentExchangeRealizations");
		ownedComponentExchangeRealizations.valuePart = s.ownedComponentExchangeRealizations.getEReference();
		t.body.add(ownedComponentExchangeRealizations);
	}
	//PhysicalComponentPkg -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null){
		var ownedPhysicalLinks = new SysMLine!ItemUsage;
		ownedPhysicalLinks.isReference = true;
		ownedPhysicalLinks.featureNote.add(":>");
		ownedPhysicalLinks.featureSpecialization.add("ownedPhysicalLinks");
		ownedPhysicalLinks.valuePart = s.ownedPhysicalLinks.getEReference();
		t.body.add(ownedPhysicalLinks);
	}
	//PhysicalComponentPkg -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null){
		var ownedPhysicalLinkCategories = new SysMLine!ItemUsage;
		ownedPhysicalLinkCategories.isReference = true;
		ownedPhysicalLinkCategories.featureNote.add(":>");
		ownedPhysicalLinkCategories.featureSpecialization.add("ownedPhysicalLinkCategories");
		ownedPhysicalLinkCategories.valuePart = s.ownedPhysicalLinkCategories.getEReference();
		t.body.add(ownedPhysicalLinkCategories);
	}
	//PhysicalComponentPkg -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null){
		var ownedStateMachines = new SysMLine!ItemUsage;
		ownedStateMachines.isReference = true;
		ownedStateMachines.featureNote.add(":>");
		ownedStateMachines.featureSpecialization.add("ownedStateMachines");
		ownedStateMachines.valuePart = s.ownedStateMachines.getEReference();
		t.body.add(ownedStateMachines);
	}
	//PhysicalComponentPkg -> EReference : ownedAssociations
	if (s.ownedAssociations.getEReference() != null){
		var ownedAssociations = new SysMLine!ItemUsage;
		ownedAssociations.isReference = true;
		ownedAssociations.featureNote.add(":>");
		ownedAssociations.featureSpecialization.add("ownedAssociations");
		ownedAssociations.valuePart = s.ownedAssociations.getEReference();
		t.body.add(ownedAssociations);
	}
	//PhysicalComponentPkg -> EReference : ownedPhysicalComponents
	if (s.ownedPhysicalComponents.getEReference() != null){
		var ownedPhysicalComponents = new SysMLine!ItemUsage;
		ownedPhysicalComponents.isReference = true;
		ownedPhysicalComponents.featureNote.add(":>");
		ownedPhysicalComponents.featureSpecialization.add("ownedPhysicalComponents");
		ownedPhysicalComponents.valuePart = s.ownedPhysicalComponents.getEReference();
		t.body.add(ownedPhysicalComponents);
	}
	//PhysicalComponentPkg -> EReference : ownedPhysicalComponentPkgs
	if (s.ownedPhysicalComponentPkgs.getEReference() != null){
		var ownedPhysicalComponentPkgs = new SysMLine!ItemUsage;
		ownedPhysicalComponentPkgs.isReference = true;
		ownedPhysicalComponentPkgs.featureNote.add(":>");
		ownedPhysicalComponentPkgs.featureSpecialization.add("ownedPhysicalComponentPkgs");
		ownedPhysicalComponentPkgs.valuePart = s.ownedPhysicalComponentPkgs.getEReference();
		t.body.add(ownedPhysicalComponentPkgs);
	}
	//PhysicalComponentPkg -> EReference : ownedKeyParts
	if (s.ownedKeyParts.getEReference() != null){
		var ownedKeyParts = new SysMLine!ItemUsage;
		ownedKeyParts.isReference = true;
		ownedKeyParts.featureNote.add(":>");
		ownedKeyParts.featureSpecialization.add("ownedKeyParts");
		ownedKeyParts.valuePart = s.ownedKeyParts.getEReference();
		t.body.add(ownedKeyParts);
	}
	//PhysicalComponentPkg -> EReference : ownedDeployments
	if (s.ownedDeployments.getEReference() != null){
		var ownedDeployments = new SysMLine!ItemUsage;
		ownedDeployments.isReference = true;
		ownedDeployments.featureNote.add(":>");
		ownedDeployments.featureSpecialization.add("ownedDeployments");
		ownedDeployments.valuePart = s.ownedDeployments.getEReference();
		t.body.add(ownedDeployments);
	}
}

@lazy
rule PhysicalNode
	transform s : DSL!PhysicalNode
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalNode -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//PhysicalNode -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//PhysicalNode -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//PhysicalNode -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//PhysicalNode -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//PhysicalNode -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//PhysicalNode -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//PhysicalNode -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//PhysicalNode -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null){
		var abstract = new SysMLine!AttributeUsage;
		abstract.featureNote.add(":>>");
		abstract.featureSpecialization.add("abstract");
		abstract.valuePart = s.abstract.getEAttribute();
		t.body.add(abstract);
	}
	//PhysicalNode -> EAttribute : actor
	if (s.actor.getEAttribute() != null){
		var actor = new SysMLine!AttributeUsage;
		actor.featureNote.add(":>>");
		actor.featureSpecialization.add("actor");
		actor.valuePart = s.actor.getEAttribute();
		t.body.add(actor);
	}
	//PhysicalNode -> EAttribute : human
	if (s.human.getEAttribute() != null){
		var human = new SysMLine!AttributeUsage;
		human.featureNote.add(":>>");
		human.featureSpecialization.add("human");
		human.valuePart = s.human.getEAttribute();
		t.body.add(human);
	}
	//PhysicalNode -> EAttribute : kind
	if (s.kind.getEAttribute() != null){
		var kind = new SysMLine!AttributeUsage;
		kind.featureNote.add(":>>");
		kind.featureSpecialization.add("kind");
		kind.valuePart = s.kind.getEAttribute();
		t.body.add(kind);
	}
	//PhysicalNode -> EAttribute : nature
	if (s.nature.getEAttribute() != null){
		var nature = new SysMLine!AttributeUsage;
		nature.featureNote.add(":>>");
		nature.featureSpecialization.add("nature");
		nature.valuePart = s.nature.getEAttribute();
		t.body.add(nature);
	}
	//PhysicalNode -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//PhysicalNode -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//PhysicalNode -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//PhysicalNode -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//PhysicalNode -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//PhysicalNode -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//PhysicalNode -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//PhysicalNode -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//PhysicalNode -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//PhysicalNode -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//PhysicalNode -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//PhysicalNode -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//PhysicalNode -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//PhysicalNode -> EReference : allocatorConfigurationItems
	if (s.allocatorConfigurationItems.getEReference() != null){
		var allocatorConfigurationItems = new SysMLine!ItemUsage;
		allocatorConfigurationItems.isReference = true;
		allocatorConfigurationItems.featureNote.add(":>");
		allocatorConfigurationItems.featureSpecialization.add("allocatorConfigurationItems");
		allocatorConfigurationItems.valuePart = s.allocatorConfigurationItems.getEReference();
		t.body.add(allocatorConfigurationItems);
	}
	//PhysicalNode -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null){
		var abstractTypedElements = new SysMLine!ItemUsage;
		abstractTypedElements.isReference = true;
		abstractTypedElements.featureNote.add(":>");
		abstractTypedElements.featureSpecialization.add("abstractTypedElements");
		abstractTypedElements.valuePart = s.abstractTypedElements.getEReference();
		t.body.add(abstractTypedElements);
	}
	//PhysicalNode -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//PhysicalNode -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//PhysicalNode -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//PhysicalNode -> EReference : typedElements
	if (s.typedElements.getEReference() != null){
		var typedElements = new SysMLine!ItemUsage;
		typedElements.isReference = true;
		typedElements.featureNote.add(":>");
		typedElements.featureSpecialization.add("typedElements");
		typedElements.valuePart = s.typedElements.getEReference();
		t.body.add(typedElements);
	}
	//PhysicalNode -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null){
		var ownedFunctionalAllocation = new SysMLine!ItemUsage;
		ownedFunctionalAllocation.isReference = true;
		ownedFunctionalAllocation.featureNote.add(":>");
		ownedFunctionalAllocation.featureSpecialization.add("ownedFunctionalAllocation");
		ownedFunctionalAllocation.valuePart = s.ownedFunctionalAllocation.getEReference();
		t.body.add(ownedFunctionalAllocation);
	}
	//PhysicalNode -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null){
		var ownedComponentExchanges = new SysMLine!ItemUsage;
		ownedComponentExchanges.isReference = true;
		ownedComponentExchanges.featureNote.add(":>");
		ownedComponentExchanges.featureSpecialization.add("ownedComponentExchanges");
		ownedComponentExchanges.valuePart = s.ownedComponentExchanges.getEReference();
		t.body.add(ownedComponentExchanges);
	}
	//PhysicalNode -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null){
		var ownedComponentExchangeCategories = new SysMLine!ItemUsage;
		ownedComponentExchangeCategories.isReference = true;
		ownedComponentExchangeCategories.featureNote.add(":>");
		ownedComponentExchangeCategories.featureSpecialization.add("ownedComponentExchangeCategories");
		ownedComponentExchangeCategories.valuePart = s.ownedComponentExchangeCategories.getEReference();
		t.body.add(ownedComponentExchangeCategories);
	}
	//PhysicalNode -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null){
		var functionalAllocations = new SysMLine!ItemUsage;
		functionalAllocations.isReference = true;
		functionalAllocations.featureNote.add(":>");
		functionalAllocations.featureSpecialization.add("functionalAllocations");
		functionalAllocations.valuePart = s.functionalAllocations.getEReference();
		t.body.add(functionalAllocations);
	}
	//PhysicalNode -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null){
		var allocatedFunctions = new SysMLine!ItemUsage;
		allocatedFunctions.isReference = true;
		allocatedFunctions.featureNote.add(":>");
		allocatedFunctions.featureSpecialization.add("allocatedFunctions");
		allocatedFunctions.valuePart = s.allocatedFunctions.getEReference();
		t.body.add(allocatedFunctions);
	}
	//PhysicalNode -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null){
		var inExchangeLinks = new SysMLine!ItemUsage;
		inExchangeLinks.isReference = true;
		inExchangeLinks.featureNote.add(":>");
		inExchangeLinks.featureSpecialization.add("inExchangeLinks");
		inExchangeLinks.valuePart = s.inExchangeLinks.getEReference();
		t.body.add(inExchangeLinks);
	}
	//PhysicalNode -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null){
		var outExchangeLinks = new SysMLine!ItemUsage;
		outExchangeLinks.isReference = true;
		outExchangeLinks.featureNote.add(":>");
		outExchangeLinks.featureSpecialization.add("outExchangeLinks");
		outExchangeLinks.valuePart = s.outExchangeLinks.getEReference();
		t.body.add(outExchangeLinks);
	}
	//PhysicalNode -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null){
		var ownedAbstractCapabilityPkg = new SysMLine!ItemUsage;
		ownedAbstractCapabilityPkg.isReference = true;
		ownedAbstractCapabilityPkg.featureNote.add(":>");
		ownedAbstractCapabilityPkg.featureSpecialization.add("ownedAbstractCapabilityPkg");
		ownedAbstractCapabilityPkg.valuePart = s.ownedAbstractCapabilityPkg.getEReference();
		t.body.add(ownedAbstractCapabilityPkg);
	}
	//PhysicalNode -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null){
		var ownedInterfacePkg = new SysMLine!ItemUsage;
		ownedInterfacePkg.isReference = true;
		ownedInterfacePkg.featureNote.add(":>");
		ownedInterfacePkg.featureSpecialization.add("ownedInterfacePkg");
		ownedInterfacePkg.valuePart = s.ownedInterfacePkg.getEReference();
		t.body.add(ownedInterfacePkg);
	}
	//PhysicalNode -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null){
		var ownedDataPkg = new SysMLine!ItemUsage;
		ownedDataPkg.isReference = true;
		ownedDataPkg.featureNote.add(":>");
		ownedDataPkg.featureSpecialization.add("ownedDataPkg");
		ownedDataPkg.valuePart = s.ownedDataPkg.getEReference();
		t.body.add(ownedDataPkg);
	}
	//PhysicalNode -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null){
		var ownedStateMachines = new SysMLine!ItemUsage;
		ownedStateMachines.isReference = true;
		ownedStateMachines.featureNote.add(":>");
		ownedStateMachines.featureSpecialization.add("ownedStateMachines");
		ownedStateMachines.valuePart = s.ownedStateMachines.getEReference();
		t.body.add(ownedStateMachines);
	}
	//PhysicalNode -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null){
		var ownedGeneralizations = new SysMLine!ItemUsage;
		ownedGeneralizations.isReference = true;
		ownedGeneralizations.featureNote.add(":>");
		ownedGeneralizations.featureSpecialization.add("ownedGeneralizations");
		ownedGeneralizations.valuePart = s.ownedGeneralizations.getEReference();
		t.body.add(ownedGeneralizations);
	}
	//PhysicalNode -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null){
		var superGeneralizations = new SysMLine!ItemUsage;
		superGeneralizations.isReference = true;
		superGeneralizations.featureNote.add(":>");
		superGeneralizations.featureSpecialization.add("superGeneralizations");
		superGeneralizations.valuePart = s.superGeneralizations.getEReference();
		t.body.add(superGeneralizations);
	}
	//PhysicalNode -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null){
		var subGeneralizations = new SysMLine!ItemUsage;
		subGeneralizations.isReference = true;
		subGeneralizations.featureNote.add(":>");
		subGeneralizations.featureSpecialization.add("subGeneralizations");
		subGeneralizations.valuePart = s.subGeneralizations.getEReference();
		t.body.add(subGeneralizations);
	}
	//PhysicalNode -> EReference : super
	if (s.super.getEReference() != null){
		var super = new SysMLine!ItemUsage;
		super.isReference = true;
		super.featureNote.add(":>");
		super.featureSpecialization.add("super");
		super.valuePart = s.super.getEReference();
		t.body.add(super);
	}
	//PhysicalNode -> EReference : sub
	if (s.sub.getEReference() != null){
		var sub = new SysMLine!ItemUsage;
		sub.isReference = true;
		sub.featureNote.add(":>");
		sub.featureSpecialization.add("sub");
		sub.valuePart = s.sub.getEReference();
		t.body.add(sub);
	}
	//PhysicalNode -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null){
		var ownedFeatures = new SysMLine!ItemUsage;
		ownedFeatures.isReference = true;
		ownedFeatures.featureNote.add(":>");
		ownedFeatures.featureSpecialization.add("ownedFeatures");
		ownedFeatures.valuePart = s.ownedFeatures.getEReference();
		t.body.add(ownedFeatures);
	}
	//PhysicalNode -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null){
		var containedProperties = new SysMLine!ItemUsage;
		containedProperties.isReference = true;
		containedProperties.featureNote.add(":>");
		containedProperties.featureSpecialization.add("containedProperties");
		containedProperties.valuePart = s.containedProperties.getEReference();
		t.body.add(containedProperties);
	}
	//PhysicalNode -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null){
		var ownedInterfaceAllocations = new SysMLine!ItemUsage;
		ownedInterfaceAllocations.isReference = true;
		ownedInterfaceAllocations.featureNote.add(":>");
		ownedInterfaceAllocations.featureSpecialization.add("ownedInterfaceAllocations");
		ownedInterfaceAllocations.valuePart = s.ownedInterfaceAllocations.getEReference();
		t.body.add(ownedInterfaceAllocations);
	}
	//PhysicalNode -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null){
		var provisionedInterfaceAllocations = new SysMLine!ItemUsage;
		provisionedInterfaceAllocations.isReference = true;
		provisionedInterfaceAllocations.featureNote.add(":>");
		provisionedInterfaceAllocations.featureSpecialization.add("provisionedInterfaceAllocations");
		provisionedInterfaceAllocations.valuePart = s.provisionedInterfaceAllocations.getEReference();
		t.body.add(provisionedInterfaceAllocations);
	}
	//PhysicalNode -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null){
		var allocatedInterfaces = new SysMLine!ItemUsage;
		allocatedInterfaces.isReference = true;
		allocatedInterfaces.featureNote.add(":>");
		allocatedInterfaces.featureSpecialization.add("allocatedInterfaces");
		allocatedInterfaces.valuePart = s.allocatedInterfaces.getEReference();
		t.body.add(allocatedInterfaces);
	}
	//PhysicalNode -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null){
		var ownedCommunicationLinks = new SysMLine!ItemUsage;
		ownedCommunicationLinks.isReference = true;
		ownedCommunicationLinks.featureNote.add(":>");
		ownedCommunicationLinks.featureSpecialization.add("ownedCommunicationLinks");
		ownedCommunicationLinks.valuePart = s.ownedCommunicationLinks.getEReference();
		t.body.add(ownedCommunicationLinks);
	}
	//PhysicalNode -> EReference : produce
	if (s.produce.getEReference() != null){
		var produce = new SysMLine!ItemUsage;
		produce.isReference = true;
		produce.featureNote.add(":>");
		produce.featureSpecialization.add("produce");
		produce.valuePart = s.produce.getEReference();
		t.body.add(produce);
	}
	//PhysicalNode -> EReference : consume
	if (s.consume.getEReference() != null){
		var consume = new SysMLine!ItemUsage;
		consume.isReference = true;
		consume.featureNote.add(":>");
		consume.featureSpecialization.add("consume");
		consume.valuePart = s.consume.getEReference();
		t.body.add(consume);
	}
	//PhysicalNode -> EReference : send
	if (s.send.getEReference() != null){
		var send = new SysMLine!ItemUsage;
		send.isReference = true;
		send.featureNote.add(":>");
		send.featureSpecialization.add("send");
		send.valuePart = s.send.getEReference();
		t.body.add(send);
	}
	//PhysicalNode -> EReference : receive
	if (s.receive.getEReference() != null){
		var receive = new SysMLine!ItemUsage;
		receive.isReference = true;
		receive.featureNote.add(":>");
		receive.featureSpecialization.add("receive");
		receive.valuePart = s.receive.getEReference();
		t.body.add(receive);
	}
	//PhysicalNode -> EReference : call
	if (s.call.getEReference() != null){
		var call = new SysMLine!ItemUsage;
		call.isReference = true;
		call.featureNote.add(":>");
		call.featureSpecialization.add("call");
		call.valuePart = s.call.getEReference();
		t.body.add(call);
	}
	//PhysicalNode -> EReference : execute
	if (s.execute.getEReference() != null){
		var execute = new SysMLine!ItemUsage;
		execute.isReference = true;
		execute.featureNote.add(":>");
		execute.featureSpecialization.add("execute");
		execute.valuePart = s.execute.getEReference();
		t.body.add(execute);
	}
	//PhysicalNode -> EReference : write
	if (s.write.getEReference() != null){
		var write = new SysMLine!ItemUsage;
		write.isReference = true;
		write.featureNote.add(":>");
		write.featureSpecialization.add("write");
		write.valuePart = s.write.getEReference();
		t.body.add(write);
	}
	//PhysicalNode -> EReference : access
	if (s.access.getEReference() != null){
		var access = new SysMLine!ItemUsage;
		access.isReference = true;
		access.featureNote.add(":>");
		access.featureSpecialization.add("access");
		access.valuePart = s.access.getEReference();
		t.body.add(access);
	}
	//PhysicalNode -> EReference : acquire
	if (s.acquire.getEReference() != null){
		var acquire = new SysMLine!ItemUsage;
		acquire.isReference = true;
		acquire.featureNote.add(":>");
		acquire.featureSpecialization.add("acquire");
		acquire.valuePart = s.acquire.getEReference();
		t.body.add(acquire);
	}
	//PhysicalNode -> EReference : transmit
	if (s.transmit.getEReference() != null){
		var transmit = new SysMLine!ItemUsage;
		transmit.isReference = true;
		transmit.featureNote.add(":>");
		transmit.featureSpecialization.add("transmit");
		transmit.valuePart = s.transmit.getEReference();
		t.body.add(transmit);
	}
	//PhysicalNode -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null){
		var ownedInterfaceUses = new SysMLine!ItemUsage;
		ownedInterfaceUses.isReference = true;
		ownedInterfaceUses.featureNote.add(":>");
		ownedInterfaceUses.featureSpecialization.add("ownedInterfaceUses");
		ownedInterfaceUses.valuePart = s.ownedInterfaceUses.getEReference();
		t.body.add(ownedInterfaceUses);
	}
	//PhysicalNode -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null){
		var usedInterfaceLinks = new SysMLine!ItemUsage;
		usedInterfaceLinks.isReference = true;
		usedInterfaceLinks.featureNote.add(":>");
		usedInterfaceLinks.featureSpecialization.add("usedInterfaceLinks");
		usedInterfaceLinks.valuePart = s.usedInterfaceLinks.getEReference();
		t.body.add(usedInterfaceLinks);
	}
	//PhysicalNode -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null){
		var usedInterfaces = new SysMLine!ItemUsage;
		usedInterfaces.isReference = true;
		usedInterfaces.featureNote.add(":>");
		usedInterfaces.featureSpecialization.add("usedInterfaces");
		usedInterfaces.valuePart = s.usedInterfaces.getEReference();
		t.body.add(usedInterfaces);
	}
	//PhysicalNode -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null){
		var ownedInterfaceImplementations = new SysMLine!ItemUsage;
		ownedInterfaceImplementations.isReference = true;
		ownedInterfaceImplementations.featureNote.add(":>");
		ownedInterfaceImplementations.featureSpecialization.add("ownedInterfaceImplementations");
		ownedInterfaceImplementations.valuePart = s.ownedInterfaceImplementations.getEReference();
		t.body.add(ownedInterfaceImplementations);
	}
	//PhysicalNode -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null){
		var implementedInterfaceLinks = new SysMLine!ItemUsage;
		implementedInterfaceLinks.isReference = true;
		implementedInterfaceLinks.featureNote.add(":>");
		implementedInterfaceLinks.featureSpecialization.add("implementedInterfaceLinks");
		implementedInterfaceLinks.valuePart = s.implementedInterfaceLinks.getEReference();
		t.body.add(implementedInterfaceLinks);
	}
	//PhysicalNode -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null){
		var implementedInterfaces = new SysMLine!ItemUsage;
		implementedInterfaces.isReference = true;
		implementedInterfaces.featureNote.add(":>");
		implementedInterfaces.featureSpecialization.add("implementedInterfaces");
		implementedInterfaces.valuePart = s.implementedInterfaces.getEReference();
		t.body.add(implementedInterfaces);
	}
	//PhysicalNode -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null){
		var ownedComponentRealizations = new SysMLine!ItemUsage;
		ownedComponentRealizations.isReference = true;
		ownedComponentRealizations.featureNote.add(":>");
		ownedComponentRealizations.featureSpecialization.add("ownedComponentRealizations");
		ownedComponentRealizations.valuePart = s.ownedComponentRealizations.getEReference();
		t.body.add(ownedComponentRealizations);
	}
	//PhysicalNode -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null){
		var realizedComponents = new SysMLine!ItemUsage;
		realizedComponents.isReference = true;
		realizedComponents.featureNote.add(":>");
		realizedComponents.featureSpecialization.add("realizedComponents");
		realizedComponents.valuePart = s.realizedComponents.getEReference();
		t.body.add(realizedComponents);
	}
	//PhysicalNode -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null){
		var realizingComponents = new SysMLine!ItemUsage;
		realizingComponents.isReference = true;
		realizingComponents.featureNote.add(":>");
		realizingComponents.featureSpecialization.add("realizingComponents");
		realizingComponents.valuePart = s.realizingComponents.getEReference();
		t.body.add(realizingComponents);
	}
	//PhysicalNode -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null){
		var providedInterfaces = new SysMLine!ItemUsage;
		providedInterfaces.isReference = true;
		providedInterfaces.featureNote.add(":>");
		providedInterfaces.featureSpecialization.add("providedInterfaces");
		providedInterfaces.valuePart = s.providedInterfaces.getEReference();
		t.body.add(providedInterfaces);
	}
	//PhysicalNode -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null){
		var requiredInterfaces = new SysMLine!ItemUsage;
		requiredInterfaces.isReference = true;
		requiredInterfaces.featureNote.add(":>");
		requiredInterfaces.featureSpecialization.add("requiredInterfaces");
		requiredInterfaces.valuePart = s.requiredInterfaces.getEReference();
		t.body.add(requiredInterfaces);
	}
	//PhysicalNode -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null){
		var containedComponentPorts = new SysMLine!ItemUsage;
		containedComponentPorts.isReference = true;
		containedComponentPorts.featureNote.add(":>");
		containedComponentPorts.featureSpecialization.add("containedComponentPorts");
		containedComponentPorts.valuePart = s.containedComponentPorts.getEReference();
		t.body.add(containedComponentPorts);
	}
	//PhysicalNode -> EReference : containedParts
	if (s.containedParts.getEReference() != null){
		var containedParts = new SysMLine!ItemUsage;
		containedParts.isReference = true;
		containedParts.featureNote.add(":>");
		containedParts.featureSpecialization.add("containedParts");
		containedParts.valuePart = s.containedParts.getEReference();
		t.body.add(containedParts);
	}
	//PhysicalNode -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null){
		var containedPhysicalPorts = new SysMLine!ItemUsage;
		containedPhysicalPorts.isReference = true;
		containedPhysicalPorts.featureNote.add(":>");
		containedPhysicalPorts.featureSpecialization.add("containedPhysicalPorts");
		containedPhysicalPorts.valuePart = s.containedPhysicalPorts.getEReference();
		t.body.add(containedPhysicalPorts);
	}
	//PhysicalNode -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null){
		var ownedPhysicalPath = new SysMLine!ItemUsage;
		ownedPhysicalPath.isReference = true;
		ownedPhysicalPath.featureNote.add(":>");
		ownedPhysicalPath.featureSpecialization.add("ownedPhysicalPath");
		ownedPhysicalPath.valuePart = s.ownedPhysicalPath.getEReference();
		t.body.add(ownedPhysicalPath);
	}
	//PhysicalNode -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null){
		var ownedPhysicalLinks = new SysMLine!ItemUsage;
		ownedPhysicalLinks.isReference = true;
		ownedPhysicalLinks.featureNote.add(":>");
		ownedPhysicalLinks.featureSpecialization.add("ownedPhysicalLinks");
		ownedPhysicalLinks.valuePart = s.ownedPhysicalLinks.getEReference();
		t.body.add(ownedPhysicalLinks);
	}
	//PhysicalNode -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null){
		var ownedPhysicalLinkCategories = new SysMLine!ItemUsage;
		ownedPhysicalLinkCategories.isReference = true;
		ownedPhysicalLinkCategories.featureNote.add(":>");
		ownedPhysicalLinkCategories.featureSpecialization.add("ownedPhysicalLinkCategories");
		ownedPhysicalLinkCategories.valuePart = s.ownedPhysicalLinkCategories.getEReference();
		t.body.add(ownedPhysicalLinkCategories);
	}
	//PhysicalNode -> EReference : representingParts
	if (s.representingParts.getEReference() != null){
		var representingParts = new SysMLine!ItemUsage;
		representingParts.isReference = true;
		representingParts.featureNote.add(":>");
		representingParts.featureSpecialization.add("representingParts");
		representingParts.valuePart = s.representingParts.getEReference();
		t.body.add(representingParts);
	}
	//PhysicalNode -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null){
		var involvingInvolvements = new SysMLine!ItemUsage;
		involvingInvolvements.isReference = true;
		involvingInvolvements.featureNote.add(":>");
		involvingInvolvements.featureSpecialization.add("involvingInvolvements");
		involvingInvolvements.valuePart = s.involvingInvolvements.getEReference();
		t.body.add(involvingInvolvements);
	}
	//PhysicalNode -> EReference : capabilityRealizationInvolvements
	if (s.capabilityRealizationInvolvements.getEReference() != null){
		var capabilityRealizationInvolvements = new SysMLine!ItemUsage;
		capabilityRealizationInvolvements.isReference = true;
		capabilityRealizationInvolvements.featureNote.add(":>");
		capabilityRealizationInvolvements.featureSpecialization.add("capabilityRealizationInvolvements");
		capabilityRealizationInvolvements.valuePart = s.capabilityRealizationInvolvements.getEReference();
		t.body.add(capabilityRealizationInvolvements);
	}
	//PhysicalNode -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null){
		var involvingCapabilityRealizations = new SysMLine!ItemUsage;
		involvingCapabilityRealizations.isReference = true;
		involvingCapabilityRealizations.featureNote.add(":>");
		involvingCapabilityRealizations.featureSpecialization.add("involvingCapabilityRealizations");
		involvingCapabilityRealizations.valuePart = s.involvingCapabilityRealizations.getEReference();
		t.body.add(involvingCapabilityRealizations);
	}
	//PhysicalNode -> EReference : deployingLinks
	if (s.deployingLinks.getEReference() != null){
		var deployingLinks = new SysMLine!ItemUsage;
		deployingLinks.isReference = true;
		deployingLinks.featureNote.add(":>");
		deployingLinks.featureSpecialization.add("deployingLinks");
		deployingLinks.valuePart = s.deployingLinks.getEReference();
		t.body.add(deployingLinks);
	}
	//PhysicalNode -> EReference : deploymentLinks
	if (s.deploymentLinks.getEReference() != null){
		var deploymentLinks = new SysMLine!ItemUsage;
		deploymentLinks.isReference = true;
		deploymentLinks.featureNote.add(":>");
		deploymentLinks.featureSpecialization.add("deploymentLinks");
		deploymentLinks.valuePart = s.deploymentLinks.getEReference();
		t.body.add(deploymentLinks);
	}
	//PhysicalNode -> EReference : ownedDeploymentLinks
	if (s.ownedDeploymentLinks.getEReference() != null){
		var ownedDeploymentLinks = new SysMLine!ItemUsage;
		ownedDeploymentLinks.isReference = true;
		ownedDeploymentLinks.featureNote.add(":>");
		ownedDeploymentLinks.featureSpecialization.add("ownedDeploymentLinks");
		ownedDeploymentLinks.valuePart = s.ownedDeploymentLinks.getEReference();
		t.body.add(ownedDeploymentLinks);
	}
	//PhysicalNode -> EReference : ownedPhysicalComponents
	if (s.ownedPhysicalComponents.getEReference() != null){
		var ownedPhysicalComponents = new SysMLine!ItemUsage;
		ownedPhysicalComponents.isReference = true;
		ownedPhysicalComponents.featureNote.add(":>");
		ownedPhysicalComponents.featureSpecialization.add("ownedPhysicalComponents");
		ownedPhysicalComponents.valuePart = s.ownedPhysicalComponents.getEReference();
		t.body.add(ownedPhysicalComponents);
	}
	//PhysicalNode -> EReference : ownedPhysicalComponentPkgs
	if (s.ownedPhysicalComponentPkgs.getEReference() != null){
		var ownedPhysicalComponentPkgs = new SysMLine!ItemUsage;
		ownedPhysicalComponentPkgs.isReference = true;
		ownedPhysicalComponentPkgs.featureNote.add(":>");
		ownedPhysicalComponentPkgs.featureSpecialization.add("ownedPhysicalComponentPkgs");
		ownedPhysicalComponentPkgs.valuePart = s.ownedPhysicalComponentPkgs.getEReference();
		t.body.add(ownedPhysicalComponentPkgs);
	}
	//PhysicalNode -> EReference : logicalInterfaceRealizations
	if (s.logicalInterfaceRealizations.getEReference() != null){
		var logicalInterfaceRealizations = new SysMLine!ItemUsage;
		logicalInterfaceRealizations.isReference = true;
		logicalInterfaceRealizations.featureNote.add(":>");
		logicalInterfaceRealizations.featureSpecialization.add("logicalInterfaceRealizations");
		logicalInterfaceRealizations.valuePart = s.logicalInterfaceRealizations.getEReference();
		t.body.add(logicalInterfaceRealizations);
	}
	//PhysicalNode -> EReference : subPhysicalComponents
	if (s.subPhysicalComponents.getEReference() != null){
		var subPhysicalComponents = new SysMLine!ItemUsage;
		subPhysicalComponents.isReference = true;
		subPhysicalComponents.featureNote.add(":>");
		subPhysicalComponents.featureSpecialization.add("subPhysicalComponents");
		subPhysicalComponents.valuePart = s.subPhysicalComponents.getEReference();
		t.body.add(subPhysicalComponents);
	}
	//PhysicalNode -> EReference : realizedLogicalComponents
	if (s.realizedLogicalComponents.getEReference() != null){
		var realizedLogicalComponents = new SysMLine!ItemUsage;
		realizedLogicalComponents.isReference = true;
		realizedLogicalComponents.featureNote.add(":>");
		realizedLogicalComponents.featureSpecialization.add("realizedLogicalComponents");
		realizedLogicalComponents.valuePart = s.realizedLogicalComponents.getEReference();
		t.body.add(realizedLogicalComponents);
	}
	//PhysicalNode -> EReference : allocatedPhysicalFunctions
	if (s.allocatedPhysicalFunctions.getEReference() != null){
		var allocatedPhysicalFunctions = new SysMLine!ItemUsage;
		allocatedPhysicalFunctions.isReference = true;
		allocatedPhysicalFunctions.featureNote.add(":>");
		allocatedPhysicalFunctions.featureSpecialization.add("allocatedPhysicalFunctions");
		allocatedPhysicalFunctions.valuePart = s.allocatedPhysicalFunctions.getEReference();
		t.body.add(allocatedPhysicalFunctions);
	}
	//PhysicalNode -> EReference : deployedPhysicalComponents
	if (s.deployedPhysicalComponents.getEReference() != null){
		var deployedPhysicalComponents = new SysMLine!ItemUsage;
		deployedPhysicalComponents.isReference = true;
		deployedPhysicalComponents.featureNote.add(":>");
		deployedPhysicalComponents.featureSpecialization.add("deployedPhysicalComponents");
		deployedPhysicalComponents.valuePart = s.deployedPhysicalComponents.getEReference();
		t.body.add(deployedPhysicalComponents);
	}
	//PhysicalNode -> EReference : deployingPhysicalComponents
	if (s.deployingPhysicalComponents.getEReference() != null){
		var deployingPhysicalComponents = new SysMLine!ItemUsage;
		deployingPhysicalComponents.isReference = true;
		deployingPhysicalComponents.featureNote.add(":>");
		deployingPhysicalComponents.featureSpecialization.add("deployingPhysicalComponents");
		deployingPhysicalComponents.valuePart = s.deployingPhysicalComponents.getEReference();
		t.body.add(deployingPhysicalComponents);
	}
	//PhysicalNode -> EReference : subPhysicalNodes
	if (s.subPhysicalNodes.getEReference() != null){
		var subPhysicalNodes = new SysMLine!ItemUsage;
		subPhysicalNodes.isReference = true;
		subPhysicalNodes.featureNote.add(":>");
		subPhysicalNodes.featureSpecialization.add("subPhysicalNodes");
		subPhysicalNodes.valuePart = s.subPhysicalNodes.getEReference();
		t.body.add(subPhysicalNodes);
	}
}

@lazy
rule LogicalArchitectureRealization
	transform s : DSL!LogicalArchitectureRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalArchitectureRealization -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//LogicalArchitectureRealization -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//LogicalArchitectureRealization -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//LogicalArchitectureRealization -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//LogicalArchitectureRealization -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//LogicalArchitectureRealization -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//LogicalArchitectureRealization -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//LogicalArchitectureRealization -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//LogicalArchitectureRealization -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//LogicalArchitectureRealization -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//LogicalArchitectureRealization -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//LogicalArchitectureRealization -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//LogicalArchitectureRealization -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//LogicalArchitectureRealization -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//LogicalArchitectureRealization -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//LogicalArchitectureRealization -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//LogicalArchitectureRealization -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//LogicalArchitectureRealization -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//LogicalArchitectureRealization -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//LogicalArchitectureRealization -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//LogicalArchitectureRealization -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//LogicalArchitectureRealization -> EReference : targetElement
	if (s.targetElement.getEReference() != null){
		var targetElement = new SysMLine!ItemUsage;
		targetElement.isReference = true;
		targetElement.featureNote.add(":>");
		targetElement.featureSpecialization.add("targetElement");
		targetElement.valuePart = s.targetElement.getEReference();
		t.body.add(targetElement);
	}
	//LogicalArchitectureRealization -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null){
		var sourceElement = new SysMLine!ItemUsage;
		sourceElement.isReference = true;
		sourceElement.featureNote.add(":>");
		sourceElement.featureSpecialization.add("sourceElement");
		sourceElement.valuePart = s.sourceElement.getEReference();
		t.body.add(sourceElement);
	}
	//LogicalArchitectureRealization -> EReference : allocatedArchitecture
	if (s.allocatedArchitecture.getEReference() != null){
		var allocatedArchitecture = new SysMLine!ItemUsage;
		allocatedArchitecture.isReference = true;
		allocatedArchitecture.featureNote.add(":>");
		allocatedArchitecture.featureSpecialization.add("allocatedArchitecture");
		allocatedArchitecture.valuePart = s.allocatedArchitecture.getEReference();
		t.body.add(allocatedArchitecture);
	}
	//LogicalArchitectureRealization -> EReference : allocatingArchitecture
	if (s.allocatingArchitecture.getEReference() != null){
		var allocatingArchitecture = new SysMLine!ItemUsage;
		allocatingArchitecture.isReference = true;
		allocatingArchitecture.featureNote.add(":>");
		allocatingArchitecture.featureSpecialization.add("allocatingArchitecture");
		allocatingArchitecture.valuePart = s.allocatingArchitecture.getEReference();
		t.body.add(allocatingArchitecture);
	}
}

@lazy
rule LogicalInterfaceRealization
	transform s : DSL!LogicalInterfaceRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalInterfaceRealization -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//LogicalInterfaceRealization -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//LogicalInterfaceRealization -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//LogicalInterfaceRealization -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//LogicalInterfaceRealization -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//LogicalInterfaceRealization -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//LogicalInterfaceRealization -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//LogicalInterfaceRealization -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//LogicalInterfaceRealization -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//LogicalInterfaceRealization -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//LogicalInterfaceRealization -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//LogicalInterfaceRealization -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//LogicalInterfaceRealization -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//LogicalInterfaceRealization -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//LogicalInterfaceRealization -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//LogicalInterfaceRealization -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//LogicalInterfaceRealization -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//LogicalInterfaceRealization -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//LogicalInterfaceRealization -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//LogicalInterfaceRealization -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//LogicalInterfaceRealization -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//LogicalInterfaceRealization -> EReference : targetElement
	if (s.targetElement.getEReference() != null){
		var targetElement = new SysMLine!ItemUsage;
		targetElement.isReference = true;
		targetElement.featureNote.add(":>");
		targetElement.featureSpecialization.add("targetElement");
		targetElement.valuePart = s.targetElement.getEReference();
		t.body.add(targetElement);
	}
	//LogicalInterfaceRealization -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null){
		var sourceElement = new SysMLine!ItemUsage;
		sourceElement.isReference = true;
		sourceElement.featureNote.add(":>");
		sourceElement.featureSpecialization.add("sourceElement");
		sourceElement.valuePart = s.sourceElement.getEReference();
		t.body.add(sourceElement);
	}
	//LogicalInterfaceRealization -> EReference : allocatedInterface
	if (s.allocatedInterface.getEReference() != null){
		var allocatedInterface = new SysMLine!ItemUsage;
		allocatedInterface.isReference = true;
		allocatedInterface.featureNote.add(":>");
		allocatedInterface.featureSpecialization.add("allocatedInterface");
		allocatedInterface.valuePart = s.allocatedInterface.getEReference();
		t.body.add(allocatedInterface);
	}
	//LogicalInterfaceRealization -> EReference : allocatingInterfaceAllocator
	if (s.allocatingInterfaceAllocator.getEReference() != null){
		var allocatingInterfaceAllocator = new SysMLine!ItemUsage;
		allocatingInterfaceAllocator.isReference = true;
		allocatingInterfaceAllocator.featureNote.add(":>");
		allocatingInterfaceAllocator.featureSpecialization.add("allocatingInterfaceAllocator");
		allocatingInterfaceAllocator.valuePart = s.allocatingInterfaceAllocator.getEReference();
		t.body.add(allocatingInterfaceAllocator);
	}
}


// deployment.ecore
@lazy
rule ComponentInstance
	transform s : DSL!ComponentInstance
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentInstance -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//ComponentInstance -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//ComponentInstance -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//ComponentInstance -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//ComponentInstance -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//ComponentInstance -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//ComponentInstance -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//ComponentInstance -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//ComponentInstance -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//ComponentInstance -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//ComponentInstance -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//ComponentInstance -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//ComponentInstance -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//ComponentInstance -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//ComponentInstance -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//ComponentInstance -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//ComponentInstance -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//ComponentInstance -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//ComponentInstance -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//ComponentInstance -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//ComponentInstance -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//ComponentInstance -> EReference : deployingLinks
	if (s.deployingLinks.getEReference() != null){
		var deployingLinks = new SysMLine!ItemUsage;
		deployingLinks.isReference = true;
		deployingLinks.featureNote.add(":>");
		deployingLinks.featureSpecialization.add("deployingLinks");
		deployingLinks.valuePart = s.deployingLinks.getEReference();
		t.body.add(deployingLinks);
	}
	//ComponentInstance -> EReference : deploymentLinks
	if (s.deploymentLinks.getEReference() != null){
		var deploymentLinks = new SysMLine!ItemUsage;
		deploymentLinks.isReference = true;
		deploymentLinks.featureNote.add(":>");
		deploymentLinks.featureSpecialization.add("deploymentLinks");
		deploymentLinks.valuePart = s.deploymentLinks.getEReference();
		t.body.add(deploymentLinks);
	}
	//ComponentInstance -> EReference : portInstances
	if (s.portInstances.getEReference() != null){
		var portInstances = new SysMLine!ItemUsage;
		portInstances.isReference = true;
		portInstances.featureNote.add(":>");
		portInstances.featureSpecialization.add("portInstances");
		portInstances.valuePart = s.portInstances.getEReference();
		t.body.add(portInstances);
	}
	//ComponentInstance -> EReference : ownedAbstractPhysicalInstances
	if (s.ownedAbstractPhysicalInstances.getEReference() != null){
		var ownedAbstractPhysicalInstances = new SysMLine!ItemUsage;
		ownedAbstractPhysicalInstances.isReference = true;
		ownedAbstractPhysicalInstances.featureNote.add(":>");
		ownedAbstractPhysicalInstances.featureSpecialization.add("ownedAbstractPhysicalInstances");
		ownedAbstractPhysicalInstances.valuePart = s.ownedAbstractPhysicalInstances.getEReference();
		t.body.add(ownedAbstractPhysicalInstances);
	}
	//ComponentInstance -> EReference : ownedInstanceDeploymentLinks
	if (s.ownedInstanceDeploymentLinks.getEReference() != null){
		var ownedInstanceDeploymentLinks = new SysMLine!ItemUsage;
		ownedInstanceDeploymentLinks.isReference = true;
		ownedInstanceDeploymentLinks.featureNote.add(":>");
		ownedInstanceDeploymentLinks.featureSpecialization.add("ownedInstanceDeploymentLinks");
		ownedInstanceDeploymentLinks.valuePart = s.ownedInstanceDeploymentLinks.getEReference();
		t.body.add(ownedInstanceDeploymentLinks);
	}
	//ComponentInstance -> EReference : type
	if (s.type.getEReference() != null){
		var type = new SysMLine!ItemUsage;
		type.isReference = true;
		type.featureNote.add(":>");
		type.featureSpecialization.add("type");
		type.valuePart = s.type.getEReference();
		t.body.add(type);
	}
}

@lazy
rule ConnectionInstance
	transform s : DSL!ConnectionInstance
	to t : SysMLine!ItemUsage
	extends Base{
	//ConnectionInstance -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//ConnectionInstance -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//ConnectionInstance -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//ConnectionInstance -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//ConnectionInstance -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//ConnectionInstance -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//ConnectionInstance -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//ConnectionInstance -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//ConnectionInstance -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//ConnectionInstance -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//ConnectionInstance -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//ConnectionInstance -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//ConnectionInstance -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//ConnectionInstance -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//ConnectionInstance -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//ConnectionInstance -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//ConnectionInstance -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//ConnectionInstance -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//ConnectionInstance -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//ConnectionInstance -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//ConnectionInstance -> EReference : connectionEnds
	if (s.connectionEnds.getEReference() != null){
		var connectionEnds = new SysMLine!ItemUsage;
		connectionEnds.isReference = true;
		connectionEnds.featureNote.add(":>");
		connectionEnds.featureSpecialization.add("connectionEnds");
		connectionEnds.valuePart = s.connectionEnds.getEReference();
		t.body.add(connectionEnds);
	}
	//ConnectionInstance -> EReference : type
	if (s.type.getEReference() != null){
		var type = new SysMLine!ItemUsage;
		type.isReference = true;
		type.featureNote.add(":>");
		type.featureSpecialization.add("type");
		type.valuePart = s.type.getEReference();
		t.body.add(type);
	}
}

@lazy
rule DeploymentAspect
	transform s : DSL!DeploymentAspect
	to t : SysMLine!ItemUsage
	extends Base{
	//DeploymentAspect -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//DeploymentAspect -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//DeploymentAspect -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//DeploymentAspect -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//DeploymentAspect -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//DeploymentAspect -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//DeploymentAspect -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//DeploymentAspect -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//DeploymentAspect -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//DeploymentAspect -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//DeploymentAspect -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//DeploymentAspect -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//DeploymentAspect -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//DeploymentAspect -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//DeploymentAspect -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//DeploymentAspect -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//DeploymentAspect -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//DeploymentAspect -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//DeploymentAspect -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//DeploymentAspect -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//DeploymentAspect -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//DeploymentAspect -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//DeploymentAspect -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//DeploymentAspect -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//DeploymentAspect -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//DeploymentAspect -> EReference : ownedConfigurations
	if (s.ownedConfigurations.getEReference() != null){
		var ownedConfigurations = new SysMLine!ItemUsage;
		ownedConfigurations.isReference = true;
		ownedConfigurations.featureNote.add(":>");
		ownedConfigurations.featureSpecialization.add("ownedConfigurations");
		ownedConfigurations.valuePart = s.ownedConfigurations.getEReference();
		t.body.add(ownedConfigurations);
	}
	//DeploymentAspect -> EReference : ownedDeploymentAspects
	if (s.ownedDeploymentAspects.getEReference() != null){
		var ownedDeploymentAspects = new SysMLine!ItemUsage;
		ownedDeploymentAspects.isReference = true;
		ownedDeploymentAspects.featureNote.add(":>");
		ownedDeploymentAspects.featureSpecialization.add("ownedDeploymentAspects");
		ownedDeploymentAspects.valuePart = s.ownedDeploymentAspects.getEReference();
		t.body.add(ownedDeploymentAspects);
	}
}

@lazy
rule DeploymentConfiguration
	transform s : DSL!DeploymentConfiguration
	to t : SysMLine!ItemUsage
	extends Base{
	//DeploymentConfiguration -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//DeploymentConfiguration -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//DeploymentConfiguration -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//DeploymentConfiguration -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//DeploymentConfiguration -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//DeploymentConfiguration -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//DeploymentConfiguration -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//DeploymentConfiguration -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//DeploymentConfiguration -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//DeploymentConfiguration -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//DeploymentConfiguration -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//DeploymentConfiguration -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//DeploymentConfiguration -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//DeploymentConfiguration -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//DeploymentConfiguration -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//DeploymentConfiguration -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//DeploymentConfiguration -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//DeploymentConfiguration -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//DeploymentConfiguration -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//DeploymentConfiguration -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//DeploymentConfiguration -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//DeploymentConfiguration -> EReference : ownedDeploymentLinks
	if (s.ownedDeploymentLinks.getEReference() != null){
		var ownedDeploymentLinks = new SysMLine!ItemUsage;
		ownedDeploymentLinks.isReference = true;
		ownedDeploymentLinks.featureNote.add(":>");
		ownedDeploymentLinks.featureSpecialization.add("ownedDeploymentLinks");
		ownedDeploymentLinks.valuePart = s.ownedDeploymentLinks.getEReference();
		t.body.add(ownedDeploymentLinks);
	}
	//DeploymentConfiguration -> EReference : ownedPhysicalInstances
	if (s.ownedPhysicalInstances.getEReference() != null){
		var ownedPhysicalInstances = new SysMLine!ItemUsage;
		ownedPhysicalInstances.isReference = true;
		ownedPhysicalInstances.featureNote.add(":>");
		ownedPhysicalInstances.featureSpecialization.add("ownedPhysicalInstances");
		ownedPhysicalInstances.valuePart = s.ownedPhysicalInstances.getEReference();
		t.body.add(ownedPhysicalInstances);
	}
}

@lazy
rule InstanceDeploymentLink
	transform s : DSL!InstanceDeploymentLink
	to t : SysMLine!ItemUsage
	extends Base{
	//InstanceDeploymentLink -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//InstanceDeploymentLink -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//InstanceDeploymentLink -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//InstanceDeploymentLink -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//InstanceDeploymentLink -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//InstanceDeploymentLink -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//InstanceDeploymentLink -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//InstanceDeploymentLink -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//InstanceDeploymentLink -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//InstanceDeploymentLink -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//InstanceDeploymentLink -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//InstanceDeploymentLink -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//InstanceDeploymentLink -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//InstanceDeploymentLink -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//InstanceDeploymentLink -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//InstanceDeploymentLink -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//InstanceDeploymentLink -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//InstanceDeploymentLink -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//InstanceDeploymentLink -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//InstanceDeploymentLink -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//InstanceDeploymentLink -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//InstanceDeploymentLink -> EReference : deployedElement
	if (s.deployedElement.getEReference() != null){
		var deployedElement = new SysMLine!ItemUsage;
		deployedElement.isReference = true;
		deployedElement.featureNote.add(":>");
		deployedElement.featureSpecialization.add("deployedElement");
		deployedElement.valuePart = s.deployedElement.getEReference();
		t.body.add(deployedElement);
	}
	//InstanceDeploymentLink -> EReference : location
	if (s.location.getEReference() != null){
		var location = new SysMLine!ItemUsage;
		location.isReference = true;
		location.featureNote.add(":>");
		location.featureSpecialization.add("location");
		location.valuePart = s.location.getEReference();
		t.body.add(location);
	}
}

@lazy
rule PartDeploymentLink
	transform s : DSL!PartDeploymentLink
	to t : SysMLine!ItemUsage
	extends Base{
	//PartDeploymentLink -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//PartDeploymentLink -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//PartDeploymentLink -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//PartDeploymentLink -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//PartDeploymentLink -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//PartDeploymentLink -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//PartDeploymentLink -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//PartDeploymentLink -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//PartDeploymentLink -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//PartDeploymentLink -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//PartDeploymentLink -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//PartDeploymentLink -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//PartDeploymentLink -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//PartDeploymentLink -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//PartDeploymentLink -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//PartDeploymentLink -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//PartDeploymentLink -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//PartDeploymentLink -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//PartDeploymentLink -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//PartDeploymentLink -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//PartDeploymentLink -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//PartDeploymentLink -> EReference : deployedElement
	if (s.deployedElement.getEReference() != null){
		var deployedElement = new SysMLine!ItemUsage;
		deployedElement.isReference = true;
		deployedElement.featureNote.add(":>");
		deployedElement.featureSpecialization.add("deployedElement");
		deployedElement.valuePart = s.deployedElement.getEReference();
		t.body.add(deployedElement);
	}
	//PartDeploymentLink -> EReference : location
	if (s.location.getEReference() != null){
		var location = new SysMLine!ItemUsage;
		location.isReference = true;
		location.featureNote.add(":>");
		location.featureSpecialization.add("location");
		location.valuePart = s.location.getEReference();
		t.body.add(location);
	}
}

@lazy
rule AbstractPhysicalInstance
	transform s : DSL!AbstractPhysicalInstance
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractPhysicalInstance -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//AbstractPhysicalInstance -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//AbstractPhysicalInstance -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//AbstractPhysicalInstance -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//AbstractPhysicalInstance -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//AbstractPhysicalInstance -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//AbstractPhysicalInstance -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//AbstractPhysicalInstance -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//AbstractPhysicalInstance -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//AbstractPhysicalInstance -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//AbstractPhysicalInstance -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//AbstractPhysicalInstance -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//AbstractPhysicalInstance -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//AbstractPhysicalInstance -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//AbstractPhysicalInstance -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//AbstractPhysicalInstance -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//AbstractPhysicalInstance -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//AbstractPhysicalInstance -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//AbstractPhysicalInstance -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//AbstractPhysicalInstance -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
}

@lazy
rule PortInstance
	transform s : DSL!PortInstance
	to t : SysMLine!ItemUsage
	extends Base{
	//PortInstance -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//PortInstance -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//PortInstance -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//PortInstance -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//PortInstance -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//PortInstance -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//PortInstance -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//PortInstance -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//PortInstance -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//PortInstance -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//PortInstance -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//PortInstance -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//PortInstance -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//PortInstance -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//PortInstance -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//PortInstance -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//PortInstance -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//PortInstance -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//PortInstance -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//PortInstance -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//PortInstance -> EReference : connections
	if (s.connections.getEReference() != null){
		var connections = new SysMLine!ItemUsage;
		connections.isReference = true;
		connections.featureNote.add(":>");
		connections.featureSpecialization.add("connections");
		connections.valuePart = s.connections.getEReference();
		t.body.add(connections);
	}
	//PortInstance -> EReference : component
	if (s.component.getEReference() != null){
		var component = new SysMLine!ItemUsage;
		component.isReference = true;
		component.featureNote.add(":>");
		component.featureSpecialization.add("component");
		component.valuePart = s.component.getEReference();
		t.body.add(component);
	}
	//PortInstance -> EReference : type
	if (s.type.getEReference() != null){
		var type = new SysMLine!ItemUsage;
		type.isReference = true;
		type.featureNote.add(":>");
		type.featureSpecialization.add("type");
		type.valuePart = s.type.getEReference();
		t.body.add(type);
	}
}

@lazy
rule TypeDeploymentLink
	transform s : DSL!TypeDeploymentLink
	to t : SysMLine!ItemUsage
	extends Base{
	//TypeDeploymentLink -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//TypeDeploymentLink -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//TypeDeploymentLink -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//TypeDeploymentLink -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//TypeDeploymentLink -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//TypeDeploymentLink -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//TypeDeploymentLink -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//TypeDeploymentLink -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//TypeDeploymentLink -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//TypeDeploymentLink -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//TypeDeploymentLink -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//TypeDeploymentLink -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//TypeDeploymentLink -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//TypeDeploymentLink -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//TypeDeploymentLink -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//TypeDeploymentLink -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//TypeDeploymentLink -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//TypeDeploymentLink -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//TypeDeploymentLink -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//TypeDeploymentLink -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//TypeDeploymentLink -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//TypeDeploymentLink -> EReference : deployedElement
	if (s.deployedElement.getEReference() != null){
		var deployedElement = new SysMLine!ItemUsage;
		deployedElement.isReference = true;
		deployedElement.featureNote.add(":>");
		deployedElement.featureSpecialization.add("deployedElement");
		deployedElement.valuePart = s.deployedElement.getEReference();
		t.body.add(deployedElement);
	}
	//TypeDeploymentLink -> EReference : location
	if (s.location.getEReference() != null){
		var location = new SysMLine!ItemUsage;
		location.isReference = true;
		location.featureNote.add(":>");
		location.featureSpecialization.add("location");
		location.valuePart = s.location.getEReference();
		t.body.add(location);
	}
}


// epbs.ecore
@lazy
rule EPBSArchitecturePkg
	transform s : DSL!EPBSArchitecturePkg
	to t : SysMLine!ItemUsage
	extends Base{
	//EPBSArchitecturePkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//EPBSArchitecturePkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//EPBSArchitecturePkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//EPBSArchitecturePkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//EPBSArchitecturePkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//EPBSArchitecturePkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//EPBSArchitecturePkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//EPBSArchitecturePkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//EPBSArchitecturePkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//EPBSArchitecturePkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//EPBSArchitecturePkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//EPBSArchitecturePkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//EPBSArchitecturePkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//EPBSArchitecturePkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//EPBSArchitecturePkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//EPBSArchitecturePkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//EPBSArchitecturePkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//EPBSArchitecturePkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//EPBSArchitecturePkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//EPBSArchitecturePkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//EPBSArchitecturePkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//EPBSArchitecturePkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//EPBSArchitecturePkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//EPBSArchitecturePkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//EPBSArchitecturePkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//EPBSArchitecturePkg -> EReference : ownedEPBSArchitectures
	if (s.ownedEPBSArchitectures.getEReference() != null){
		var ownedEPBSArchitectures = new SysMLine!ItemUsage;
		ownedEPBSArchitectures.isReference = true;
		ownedEPBSArchitectures.featureNote.add(":>");
		ownedEPBSArchitectures.featureSpecialization.add("ownedEPBSArchitectures");
		ownedEPBSArchitectures.valuePart = s.ownedEPBSArchitectures.getEReference();
		t.body.add(ownedEPBSArchitectures);
	}
}

@lazy
rule EPBSArchitecture
	transform s : DSL!EPBSArchitecture
	to t : SysMLine!ItemUsage
	extends Base{
	//EPBSArchitecture -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//EPBSArchitecture -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//EPBSArchitecture -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//EPBSArchitecture -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//EPBSArchitecture -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//EPBSArchitecture -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//EPBSArchitecture -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//EPBSArchitecture -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//EPBSArchitecture -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//EPBSArchitecture -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//EPBSArchitecture -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//EPBSArchitecture -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//EPBSArchitecture -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//EPBSArchitecture -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//EPBSArchitecture -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//EPBSArchitecture -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//EPBSArchitecture -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//EPBSArchitecture -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//EPBSArchitecture -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//EPBSArchitecture -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//EPBSArchitecture -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//EPBSArchitecture -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//EPBSArchitecture -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//EPBSArchitecture -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//EPBSArchitecture -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//EPBSArchitecture -> EReference : ownedFunctionPkg
	if (s.ownedFunctionPkg.getEReference() != null){
		var ownedFunctionPkg = new SysMLine!ItemUsage;
		ownedFunctionPkg.isReference = true;
		ownedFunctionPkg.featureNote.add(":>");
		ownedFunctionPkg.featureSpecialization.add("ownedFunctionPkg");
		ownedFunctionPkg.valuePart = s.ownedFunctionPkg.getEReference();
		t.body.add(ownedFunctionPkg);
	}
	//EPBSArchitecture -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null){
		var ownedComponentExchanges = new SysMLine!ItemUsage;
		ownedComponentExchanges.isReference = true;
		ownedComponentExchanges.featureNote.add(":>");
		ownedComponentExchanges.featureSpecialization.add("ownedComponentExchanges");
		ownedComponentExchanges.valuePart = s.ownedComponentExchanges.getEReference();
		t.body.add(ownedComponentExchanges);
	}
	//EPBSArchitecture -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null){
		var ownedComponentExchangeCategories = new SysMLine!ItemUsage;
		ownedComponentExchangeCategories.isReference = true;
		ownedComponentExchangeCategories.featureNote.add(":>");
		ownedComponentExchangeCategories.featureSpecialization.add("ownedComponentExchangeCategories");
		ownedComponentExchangeCategories.valuePart = s.ownedComponentExchangeCategories.getEReference();
		t.body.add(ownedComponentExchangeCategories);
	}
	//EPBSArchitecture -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null){
		var ownedFunctionalLinks = new SysMLine!ItemUsage;
		ownedFunctionalLinks.isReference = true;
		ownedFunctionalLinks.featureNote.add(":>");
		ownedFunctionalLinks.featureSpecialization.add("ownedFunctionalLinks");
		ownedFunctionalLinks.valuePart = s.ownedFunctionalLinks.getEReference();
		t.body.add(ownedFunctionalLinks);
	}
	//EPBSArchitecture -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null){
		var ownedFunctionalAllocations = new SysMLine!ItemUsage;
		ownedFunctionalAllocations.isReference = true;
		ownedFunctionalAllocations.featureNote.add(":>");
		ownedFunctionalAllocations.featureSpecialization.add("ownedFunctionalAllocations");
		ownedFunctionalAllocations.valuePart = s.ownedFunctionalAllocations.getEReference();
		t.body.add(ownedFunctionalAllocations);
	}
	//EPBSArchitecture -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null){
		var ownedComponentExchangeRealizations = new SysMLine!ItemUsage;
		ownedComponentExchangeRealizations.isReference = true;
		ownedComponentExchangeRealizations.featureNote.add(":>");
		ownedComponentExchangeRealizations.featureSpecialization.add("ownedComponentExchangeRealizations");
		ownedComponentExchangeRealizations.valuePart = s.ownedComponentExchangeRealizations.getEReference();
		t.body.add(ownedComponentExchangeRealizations);
	}
	//EPBSArchitecture -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null){
		var ownedAbstractCapabilityPkg = new SysMLine!ItemUsage;
		ownedAbstractCapabilityPkg.isReference = true;
		ownedAbstractCapabilityPkg.featureNote.add(":>");
		ownedAbstractCapabilityPkg.featureSpecialization.add("ownedAbstractCapabilityPkg");
		ownedAbstractCapabilityPkg.valuePart = s.ownedAbstractCapabilityPkg.getEReference();
		t.body.add(ownedAbstractCapabilityPkg);
	}
	//EPBSArchitecture -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null){
		var ownedInterfacePkg = new SysMLine!ItemUsage;
		ownedInterfacePkg.isReference = true;
		ownedInterfacePkg.featureNote.add(":>");
		ownedInterfacePkg.featureSpecialization.add("ownedInterfacePkg");
		ownedInterfacePkg.valuePart = s.ownedInterfacePkg.getEReference();
		t.body.add(ownedInterfacePkg);
	}
	//EPBSArchitecture -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null){
		var ownedDataPkg = new SysMLine!ItemUsage;
		ownedDataPkg.isReference = true;
		ownedDataPkg.featureNote.add(":>");
		ownedDataPkg.featureSpecialization.add("ownedDataPkg");
		ownedDataPkg.valuePart = s.ownedDataPkg.getEReference();
		t.body.add(ownedDataPkg);
	}
	//EPBSArchitecture -> EReference : provisionedArchitectureAllocations
	if (s.provisionedArchitectureAllocations.getEReference() != null){
		var provisionedArchitectureAllocations = new SysMLine!ItemUsage;
		provisionedArchitectureAllocations.isReference = true;
		provisionedArchitectureAllocations.featureNote.add(":>");
		provisionedArchitectureAllocations.featureSpecialization.add("provisionedArchitectureAllocations");
		provisionedArchitectureAllocations.valuePart = s.provisionedArchitectureAllocations.getEReference();
		t.body.add(provisionedArchitectureAllocations);
	}
	//EPBSArchitecture -> EReference : provisioningArchitectureAllocations
	if (s.provisioningArchitectureAllocations.getEReference() != null){
		var provisioningArchitectureAllocations = new SysMLine!ItemUsage;
		provisioningArchitectureAllocations.isReference = true;
		provisioningArchitectureAllocations.featureNote.add(":>");
		provisioningArchitectureAllocations.featureSpecialization.add("provisioningArchitectureAllocations");
		provisioningArchitectureAllocations.valuePart = s.provisioningArchitectureAllocations.getEReference();
		t.body.add(provisioningArchitectureAllocations);
	}
	//EPBSArchitecture -> EReference : allocatedArchitectures
	if (s.allocatedArchitectures.getEReference() != null){
		var allocatedArchitectures = new SysMLine!ItemUsage;
		allocatedArchitectures.isReference = true;
		allocatedArchitectures.featureNote.add(":>");
		allocatedArchitectures.featureSpecialization.add("allocatedArchitectures");
		allocatedArchitectures.valuePart = s.allocatedArchitectures.getEReference();
		t.body.add(allocatedArchitectures);
	}
	//EPBSArchitecture -> EReference : allocatingArchitectures
	if (s.allocatingArchitectures.getEReference() != null){
		var allocatingArchitectures = new SysMLine!ItemUsage;
		allocatingArchitectures.isReference = true;
		allocatingArchitectures.featureNote.add(":>");
		allocatingArchitectures.featureSpecialization.add("allocatingArchitectures");
		allocatingArchitectures.valuePart = s.allocatingArchitectures.getEReference();
		t.body.add(allocatingArchitectures);
	}
	//EPBSArchitecture -> EReference : system
	if (s.system.getEReference() != null){
		var system = new SysMLine!ItemUsage;
		system.isReference = true;
		system.featureNote.add(":>");
		system.featureSpecialization.add("system");
		system.valuePart = s.system.getEReference();
		t.body.add(system);
	}
	//EPBSArchitecture -> EReference : ownedConfigurationItemPkg
	if (s.ownedConfigurationItemPkg.getEReference() != null){
		var ownedConfigurationItemPkg = new SysMLine!ItemUsage;
		ownedConfigurationItemPkg.isReference = true;
		ownedConfigurationItemPkg.featureNote.add(":>");
		ownedConfigurationItemPkg.featureSpecialization.add("ownedConfigurationItemPkg");
		ownedConfigurationItemPkg.valuePart = s.ownedConfigurationItemPkg.getEReference();
		t.body.add(ownedConfigurationItemPkg);
	}
	//EPBSArchitecture -> EReference : containedCapabilityRealizationPkg
	if (s.containedCapabilityRealizationPkg.getEReference() != null){
		var containedCapabilityRealizationPkg = new SysMLine!ItemUsage;
		containedCapabilityRealizationPkg.isReference = true;
		containedCapabilityRealizationPkg.featureNote.add(":>");
		containedCapabilityRealizationPkg.featureSpecialization.add("containedCapabilityRealizationPkg");
		containedCapabilityRealizationPkg.valuePart = s.containedCapabilityRealizationPkg.getEReference();
		t.body.add(containedCapabilityRealizationPkg);
	}
	//EPBSArchitecture -> EReference : ownedPhysicalArchitectureRealizations
	if (s.ownedPhysicalArchitectureRealizations.getEReference() != null){
		var ownedPhysicalArchitectureRealizations = new SysMLine!ItemUsage;
		ownedPhysicalArchitectureRealizations.isReference = true;
		ownedPhysicalArchitectureRealizations.featureNote.add(":>");
		ownedPhysicalArchitectureRealizations.featureSpecialization.add("ownedPhysicalArchitectureRealizations");
		ownedPhysicalArchitectureRealizations.valuePart = s.ownedPhysicalArchitectureRealizations.getEReference();
		t.body.add(ownedPhysicalArchitectureRealizations);
	}
	//EPBSArchitecture -> EReference : allocatedPhysicalArchitectureRealizations
	if (s.allocatedPhysicalArchitectureRealizations.getEReference() != null){
		var allocatedPhysicalArchitectureRealizations = new SysMLine!ItemUsage;
		allocatedPhysicalArchitectureRealizations.isReference = true;
		allocatedPhysicalArchitectureRealizations.featureNote.add(":>");
		allocatedPhysicalArchitectureRealizations.featureSpecialization.add("allocatedPhysicalArchitectureRealizations");
		allocatedPhysicalArchitectureRealizations.valuePart = s.allocatedPhysicalArchitectureRealizations.getEReference();
		t.body.add(allocatedPhysicalArchitectureRealizations);
	}
	//EPBSArchitecture -> EReference : allocatedPhysicalArchitectures
	if (s.allocatedPhysicalArchitectures.getEReference() != null){
		var allocatedPhysicalArchitectures = new SysMLine!ItemUsage;
		allocatedPhysicalArchitectures.isReference = true;
		allocatedPhysicalArchitectures.featureNote.add(":>");
		allocatedPhysicalArchitectures.featureSpecialization.add("allocatedPhysicalArchitectures");
		allocatedPhysicalArchitectures.valuePart = s.allocatedPhysicalArchitectures.getEReference();
		t.body.add(allocatedPhysicalArchitectures);
	}
}

@lazy
rule ConfigurationItemPkg
	transform s : DSL!ConfigurationItemPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//ConfigurationItemPkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//ConfigurationItemPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//ConfigurationItemPkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//ConfigurationItemPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//ConfigurationItemPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//ConfigurationItemPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//ConfigurationItemPkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//ConfigurationItemPkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//ConfigurationItemPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//ConfigurationItemPkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//ConfigurationItemPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//ConfigurationItemPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//ConfigurationItemPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//ConfigurationItemPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//ConfigurationItemPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//ConfigurationItemPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//ConfigurationItemPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//ConfigurationItemPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//ConfigurationItemPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//ConfigurationItemPkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//ConfigurationItemPkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//ConfigurationItemPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//ConfigurationItemPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//ConfigurationItemPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//ConfigurationItemPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//ConfigurationItemPkg -> EReference : ownedParts
	if (s.ownedParts.getEReference() != null){
		var ownedParts = new SysMLine!ItemUsage;
		ownedParts.isReference = true;
		ownedParts.featureNote.add(":>");
		ownedParts.featureSpecialization.add("ownedParts");
		ownedParts.valuePart = s.ownedParts.getEReference();
		t.body.add(ownedParts);
	}
	//ConfigurationItemPkg -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null){
		var ownedComponentExchanges = new SysMLine!ItemUsage;
		ownedComponentExchanges.isReference = true;
		ownedComponentExchanges.featureNote.add(":>");
		ownedComponentExchanges.featureSpecialization.add("ownedComponentExchanges");
		ownedComponentExchanges.valuePart = s.ownedComponentExchanges.getEReference();
		t.body.add(ownedComponentExchanges);
	}
	//ConfigurationItemPkg -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null){
		var ownedComponentExchangeCategories = new SysMLine!ItemUsage;
		ownedComponentExchangeCategories.isReference = true;
		ownedComponentExchangeCategories.featureNote.add(":>");
		ownedComponentExchangeCategories.featureSpecialization.add("ownedComponentExchangeCategories");
		ownedComponentExchangeCategories.valuePart = s.ownedComponentExchangeCategories.getEReference();
		t.body.add(ownedComponentExchangeCategories);
	}
	//ConfigurationItemPkg -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null){
		var ownedFunctionalLinks = new SysMLine!ItemUsage;
		ownedFunctionalLinks.isReference = true;
		ownedFunctionalLinks.featureNote.add(":>");
		ownedFunctionalLinks.featureSpecialization.add("ownedFunctionalLinks");
		ownedFunctionalLinks.valuePart = s.ownedFunctionalLinks.getEReference();
		t.body.add(ownedFunctionalLinks);
	}
	//ConfigurationItemPkg -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null){
		var ownedFunctionalAllocations = new SysMLine!ItemUsage;
		ownedFunctionalAllocations.isReference = true;
		ownedFunctionalAllocations.featureNote.add(":>");
		ownedFunctionalAllocations.featureSpecialization.add("ownedFunctionalAllocations");
		ownedFunctionalAllocations.valuePart = s.ownedFunctionalAllocations.getEReference();
		t.body.add(ownedFunctionalAllocations);
	}
	//ConfigurationItemPkg -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null){
		var ownedComponentExchangeRealizations = new SysMLine!ItemUsage;
		ownedComponentExchangeRealizations.isReference = true;
		ownedComponentExchangeRealizations.featureNote.add(":>");
		ownedComponentExchangeRealizations.featureSpecialization.add("ownedComponentExchangeRealizations");
		ownedComponentExchangeRealizations.valuePart = s.ownedComponentExchangeRealizations.getEReference();
		t.body.add(ownedComponentExchangeRealizations);
	}
	//ConfigurationItemPkg -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null){
		var ownedPhysicalLinks = new SysMLine!ItemUsage;
		ownedPhysicalLinks.isReference = true;
		ownedPhysicalLinks.featureNote.add(":>");
		ownedPhysicalLinks.featureSpecialization.add("ownedPhysicalLinks");
		ownedPhysicalLinks.valuePart = s.ownedPhysicalLinks.getEReference();
		t.body.add(ownedPhysicalLinks);
	}
	//ConfigurationItemPkg -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null){
		var ownedPhysicalLinkCategories = new SysMLine!ItemUsage;
		ownedPhysicalLinkCategories.isReference = true;
		ownedPhysicalLinkCategories.featureNote.add(":>");
		ownedPhysicalLinkCategories.featureSpecialization.add("ownedPhysicalLinkCategories");
		ownedPhysicalLinkCategories.valuePart = s.ownedPhysicalLinkCategories.getEReference();
		t.body.add(ownedPhysicalLinkCategories);
	}
	//ConfigurationItemPkg -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null){
		var ownedStateMachines = new SysMLine!ItemUsage;
		ownedStateMachines.isReference = true;
		ownedStateMachines.featureNote.add(":>");
		ownedStateMachines.featureSpecialization.add("ownedStateMachines");
		ownedStateMachines.valuePart = s.ownedStateMachines.getEReference();
		t.body.add(ownedStateMachines);
	}
	//ConfigurationItemPkg -> EReference : ownedConfigurationItems
	if (s.ownedConfigurationItems.getEReference() != null){
		var ownedConfigurationItems = new SysMLine!ItemUsage;
		ownedConfigurationItems.isReference = true;
		ownedConfigurationItems.featureNote.add(":>");
		ownedConfigurationItems.featureSpecialization.add("ownedConfigurationItems");
		ownedConfigurationItems.valuePart = s.ownedConfigurationItems.getEReference();
		t.body.add(ownedConfigurationItems);
	}
	//ConfigurationItemPkg -> EReference : ownedConfigurationItemPkgs
	if (s.ownedConfigurationItemPkgs.getEReference() != null){
		var ownedConfigurationItemPkgs = new SysMLine!ItemUsage;
		ownedConfigurationItemPkgs.isReference = true;
		ownedConfigurationItemPkgs.featureNote.add(":>");
		ownedConfigurationItemPkgs.featureSpecialization.add("ownedConfigurationItemPkgs");
		ownedConfigurationItemPkgs.valuePart = s.ownedConfigurationItemPkgs.getEReference();
		t.body.add(ownedConfigurationItemPkgs);
	}
}

@lazy
rule ConfigurationItem
	transform s : DSL!ConfigurationItem
	to t : SysMLine!ItemUsage
	extends Base{
	//ConfigurationItem -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//ConfigurationItem -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//ConfigurationItem -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//ConfigurationItem -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//ConfigurationItem -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//ConfigurationItem -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//ConfigurationItem -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//ConfigurationItem -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//ConfigurationItem -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null){
		var abstract = new SysMLine!AttributeUsage;
		abstract.featureNote.add(":>>");
		abstract.featureSpecialization.add("abstract");
		abstract.valuePart = s.abstract.getEAttribute();
		t.body.add(abstract);
	}
	//ConfigurationItem -> EAttribute : actor
	if (s.actor.getEAttribute() != null){
		var actor = new SysMLine!AttributeUsage;
		actor.featureNote.add(":>>");
		actor.featureSpecialization.add("actor");
		actor.valuePart = s.actor.getEAttribute();
		t.body.add(actor);
	}
	//ConfigurationItem -> EAttribute : human
	if (s.human.getEAttribute() != null){
		var human = new SysMLine!AttributeUsage;
		human.featureNote.add(":>>");
		human.featureSpecialization.add("human");
		human.valuePart = s.human.getEAttribute();
		t.body.add(human);
	}
	//ConfigurationItem -> EAttribute : itemIdentifier
	if (s.itemIdentifier.getEAttribute() != null){
		var itemIdentifier = new SysMLine!AttributeUsage;
		itemIdentifier.featureNote.add(":>>");
		itemIdentifier.featureSpecialization.add("itemIdentifier");
		itemIdentifier.valuePart = s.itemIdentifier.getEAttribute();
		t.body.add(itemIdentifier);
	}
	//ConfigurationItem -> EAttribute : kind
	if (s.kind.getEAttribute() != null){
		var kind = new SysMLine!AttributeUsage;
		kind.featureNote.add(":>>");
		kind.featureSpecialization.add("kind");
		kind.valuePart = s.kind.getEAttribute();
		t.body.add(kind);
	}
	//ConfigurationItem -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//ConfigurationItem -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//ConfigurationItem -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//ConfigurationItem -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//ConfigurationItem -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//ConfigurationItem -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//ConfigurationItem -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//ConfigurationItem -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//ConfigurationItem -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//ConfigurationItem -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//ConfigurationItem -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//ConfigurationItem -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//ConfigurationItem -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//ConfigurationItem -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null){
		var involvingInvolvements = new SysMLine!ItemUsage;
		involvingInvolvements.isReference = true;
		involvingInvolvements.featureNote.add(":>");
		involvingInvolvements.featureSpecialization.add("involvingInvolvements");
		involvingInvolvements.valuePart = s.involvingInvolvements.getEReference();
		t.body.add(involvingInvolvements);
	}
	//ConfigurationItem -> EReference : capabilityRealizationInvolvements
	if (s.capabilityRealizationInvolvements.getEReference() != null){
		var capabilityRealizationInvolvements = new SysMLine!ItemUsage;
		capabilityRealizationInvolvements.isReference = true;
		capabilityRealizationInvolvements.featureNote.add(":>");
		capabilityRealizationInvolvements.featureSpecialization.add("capabilityRealizationInvolvements");
		capabilityRealizationInvolvements.valuePart = s.capabilityRealizationInvolvements.getEReference();
		t.body.add(capabilityRealizationInvolvements);
	}
	//ConfigurationItem -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null){
		var involvingCapabilityRealizations = new SysMLine!ItemUsage;
		involvingCapabilityRealizations.isReference = true;
		involvingCapabilityRealizations.featureNote.add(":>");
		involvingCapabilityRealizations.featureSpecialization.add("involvingCapabilityRealizations");
		involvingCapabilityRealizations.valuePart = s.involvingCapabilityRealizations.getEReference();
		t.body.add(involvingCapabilityRealizations);
	}
	//ConfigurationItem -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null){
		var abstractTypedElements = new SysMLine!ItemUsage;
		abstractTypedElements.isReference = true;
		abstractTypedElements.featureNote.add(":>");
		abstractTypedElements.featureSpecialization.add("abstractTypedElements");
		abstractTypedElements.valuePart = s.abstractTypedElements.getEReference();
		t.body.add(abstractTypedElements);
	}
	//ConfigurationItem -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//ConfigurationItem -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//ConfigurationItem -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//ConfigurationItem -> EReference : typedElements
	if (s.typedElements.getEReference() != null){
		var typedElements = new SysMLine!ItemUsage;
		typedElements.isReference = true;
		typedElements.featureNote.add(":>");
		typedElements.featureSpecialization.add("typedElements");
		typedElements.valuePart = s.typedElements.getEReference();
		t.body.add(typedElements);
	}
	//ConfigurationItem -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null){
		var ownedFunctionalAllocation = new SysMLine!ItemUsage;
		ownedFunctionalAllocation.isReference = true;
		ownedFunctionalAllocation.featureNote.add(":>");
		ownedFunctionalAllocation.featureSpecialization.add("ownedFunctionalAllocation");
		ownedFunctionalAllocation.valuePart = s.ownedFunctionalAllocation.getEReference();
		t.body.add(ownedFunctionalAllocation);
	}
	//ConfigurationItem -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null){
		var ownedComponentExchanges = new SysMLine!ItemUsage;
		ownedComponentExchanges.isReference = true;
		ownedComponentExchanges.featureNote.add(":>");
		ownedComponentExchanges.featureSpecialization.add("ownedComponentExchanges");
		ownedComponentExchanges.valuePart = s.ownedComponentExchanges.getEReference();
		t.body.add(ownedComponentExchanges);
	}
	//ConfigurationItem -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null){
		var ownedComponentExchangeCategories = new SysMLine!ItemUsage;
		ownedComponentExchangeCategories.isReference = true;
		ownedComponentExchangeCategories.featureNote.add(":>");
		ownedComponentExchangeCategories.featureSpecialization.add("ownedComponentExchangeCategories");
		ownedComponentExchangeCategories.valuePart = s.ownedComponentExchangeCategories.getEReference();
		t.body.add(ownedComponentExchangeCategories);
	}
	//ConfigurationItem -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null){
		var functionalAllocations = new SysMLine!ItemUsage;
		functionalAllocations.isReference = true;
		functionalAllocations.featureNote.add(":>");
		functionalAllocations.featureSpecialization.add("functionalAllocations");
		functionalAllocations.valuePart = s.functionalAllocations.getEReference();
		t.body.add(functionalAllocations);
	}
	//ConfigurationItem -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null){
		var allocatedFunctions = new SysMLine!ItemUsage;
		allocatedFunctions.isReference = true;
		allocatedFunctions.featureNote.add(":>");
		allocatedFunctions.featureSpecialization.add("allocatedFunctions");
		allocatedFunctions.valuePart = s.allocatedFunctions.getEReference();
		t.body.add(allocatedFunctions);
	}
	//ConfigurationItem -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null){
		var inExchangeLinks = new SysMLine!ItemUsage;
		inExchangeLinks.isReference = true;
		inExchangeLinks.featureNote.add(":>");
		inExchangeLinks.featureSpecialization.add("inExchangeLinks");
		inExchangeLinks.valuePart = s.inExchangeLinks.getEReference();
		t.body.add(inExchangeLinks);
	}
	//ConfigurationItem -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null){
		var outExchangeLinks = new SysMLine!ItemUsage;
		outExchangeLinks.isReference = true;
		outExchangeLinks.featureNote.add(":>");
		outExchangeLinks.featureSpecialization.add("outExchangeLinks");
		outExchangeLinks.valuePart = s.outExchangeLinks.getEReference();
		t.body.add(outExchangeLinks);
	}
	//ConfigurationItem -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null){
		var ownedAbstractCapabilityPkg = new SysMLine!ItemUsage;
		ownedAbstractCapabilityPkg.isReference = true;
		ownedAbstractCapabilityPkg.featureNote.add(":>");
		ownedAbstractCapabilityPkg.featureSpecialization.add("ownedAbstractCapabilityPkg");
		ownedAbstractCapabilityPkg.valuePart = s.ownedAbstractCapabilityPkg.getEReference();
		t.body.add(ownedAbstractCapabilityPkg);
	}
	//ConfigurationItem -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null){
		var ownedInterfacePkg = new SysMLine!ItemUsage;
		ownedInterfacePkg.isReference = true;
		ownedInterfacePkg.featureNote.add(":>");
		ownedInterfacePkg.featureSpecialization.add("ownedInterfacePkg");
		ownedInterfacePkg.valuePart = s.ownedInterfacePkg.getEReference();
		t.body.add(ownedInterfacePkg);
	}
	//ConfigurationItem -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null){
		var ownedDataPkg = new SysMLine!ItemUsage;
		ownedDataPkg.isReference = true;
		ownedDataPkg.featureNote.add(":>");
		ownedDataPkg.featureSpecialization.add("ownedDataPkg");
		ownedDataPkg.valuePart = s.ownedDataPkg.getEReference();
		t.body.add(ownedDataPkg);
	}
	//ConfigurationItem -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null){
		var ownedStateMachines = new SysMLine!ItemUsage;
		ownedStateMachines.isReference = true;
		ownedStateMachines.featureNote.add(":>");
		ownedStateMachines.featureSpecialization.add("ownedStateMachines");
		ownedStateMachines.valuePart = s.ownedStateMachines.getEReference();
		t.body.add(ownedStateMachines);
	}
	//ConfigurationItem -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null){
		var ownedGeneralizations = new SysMLine!ItemUsage;
		ownedGeneralizations.isReference = true;
		ownedGeneralizations.featureNote.add(":>");
		ownedGeneralizations.featureSpecialization.add("ownedGeneralizations");
		ownedGeneralizations.valuePart = s.ownedGeneralizations.getEReference();
		t.body.add(ownedGeneralizations);
	}
	//ConfigurationItem -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null){
		var superGeneralizations = new SysMLine!ItemUsage;
		superGeneralizations.isReference = true;
		superGeneralizations.featureNote.add(":>");
		superGeneralizations.featureSpecialization.add("superGeneralizations");
		superGeneralizations.valuePart = s.superGeneralizations.getEReference();
		t.body.add(superGeneralizations);
	}
	//ConfigurationItem -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null){
		var subGeneralizations = new SysMLine!ItemUsage;
		subGeneralizations.isReference = true;
		subGeneralizations.featureNote.add(":>");
		subGeneralizations.featureSpecialization.add("subGeneralizations");
		subGeneralizations.valuePart = s.subGeneralizations.getEReference();
		t.body.add(subGeneralizations);
	}
	//ConfigurationItem -> EReference : super
	if (s.super.getEReference() != null){
		var super = new SysMLine!ItemUsage;
		super.isReference = true;
		super.featureNote.add(":>");
		super.featureSpecialization.add("super");
		super.valuePart = s.super.getEReference();
		t.body.add(super);
	}
	//ConfigurationItem -> EReference : sub
	if (s.sub.getEReference() != null){
		var sub = new SysMLine!ItemUsage;
		sub.isReference = true;
		sub.featureNote.add(":>");
		sub.featureSpecialization.add("sub");
		sub.valuePart = s.sub.getEReference();
		t.body.add(sub);
	}
	//ConfigurationItem -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null){
		var ownedFeatures = new SysMLine!ItemUsage;
		ownedFeatures.isReference = true;
		ownedFeatures.featureNote.add(":>");
		ownedFeatures.featureSpecialization.add("ownedFeatures");
		ownedFeatures.valuePart = s.ownedFeatures.getEReference();
		t.body.add(ownedFeatures);
	}
	//ConfigurationItem -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null){
		var containedProperties = new SysMLine!ItemUsage;
		containedProperties.isReference = true;
		containedProperties.featureNote.add(":>");
		containedProperties.featureSpecialization.add("containedProperties");
		containedProperties.valuePart = s.containedProperties.getEReference();
		t.body.add(containedProperties);
	}
	//ConfigurationItem -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null){
		var ownedInterfaceAllocations = new SysMLine!ItemUsage;
		ownedInterfaceAllocations.isReference = true;
		ownedInterfaceAllocations.featureNote.add(":>");
		ownedInterfaceAllocations.featureSpecialization.add("ownedInterfaceAllocations");
		ownedInterfaceAllocations.valuePart = s.ownedInterfaceAllocations.getEReference();
		t.body.add(ownedInterfaceAllocations);
	}
	//ConfigurationItem -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null){
		var provisionedInterfaceAllocations = new SysMLine!ItemUsage;
		provisionedInterfaceAllocations.isReference = true;
		provisionedInterfaceAllocations.featureNote.add(":>");
		provisionedInterfaceAllocations.featureSpecialization.add("provisionedInterfaceAllocations");
		provisionedInterfaceAllocations.valuePart = s.provisionedInterfaceAllocations.getEReference();
		t.body.add(provisionedInterfaceAllocations);
	}
	//ConfigurationItem -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null){
		var allocatedInterfaces = new SysMLine!ItemUsage;
		allocatedInterfaces.isReference = true;
		allocatedInterfaces.featureNote.add(":>");
		allocatedInterfaces.featureSpecialization.add("allocatedInterfaces");
		allocatedInterfaces.valuePart = s.allocatedInterfaces.getEReference();
		t.body.add(allocatedInterfaces);
	}
	//ConfigurationItem -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null){
		var ownedCommunicationLinks = new SysMLine!ItemUsage;
		ownedCommunicationLinks.isReference = true;
		ownedCommunicationLinks.featureNote.add(":>");
		ownedCommunicationLinks.featureSpecialization.add("ownedCommunicationLinks");
		ownedCommunicationLinks.valuePart = s.ownedCommunicationLinks.getEReference();
		t.body.add(ownedCommunicationLinks);
	}
	//ConfigurationItem -> EReference : produce
	if (s.produce.getEReference() != null){
		var produce = new SysMLine!ItemUsage;
		produce.isReference = true;
		produce.featureNote.add(":>");
		produce.featureSpecialization.add("produce");
		produce.valuePart = s.produce.getEReference();
		t.body.add(produce);
	}
	//ConfigurationItem -> EReference : consume
	if (s.consume.getEReference() != null){
		var consume = new SysMLine!ItemUsage;
		consume.isReference = true;
		consume.featureNote.add(":>");
		consume.featureSpecialization.add("consume");
		consume.valuePart = s.consume.getEReference();
		t.body.add(consume);
	}
	//ConfigurationItem -> EReference : send
	if (s.send.getEReference() != null){
		var send = new SysMLine!ItemUsage;
		send.isReference = true;
		send.featureNote.add(":>");
		send.featureSpecialization.add("send");
		send.valuePart = s.send.getEReference();
		t.body.add(send);
	}
	//ConfigurationItem -> EReference : receive
	if (s.receive.getEReference() != null){
		var receive = new SysMLine!ItemUsage;
		receive.isReference = true;
		receive.featureNote.add(":>");
		receive.featureSpecialization.add("receive");
		receive.valuePart = s.receive.getEReference();
		t.body.add(receive);
	}
	//ConfigurationItem -> EReference : call
	if (s.call.getEReference() != null){
		var call = new SysMLine!ItemUsage;
		call.isReference = true;
		call.featureNote.add(":>");
		call.featureSpecialization.add("call");
		call.valuePart = s.call.getEReference();
		t.body.add(call);
	}
	//ConfigurationItem -> EReference : execute
	if (s.execute.getEReference() != null){
		var execute = new SysMLine!ItemUsage;
		execute.isReference = true;
		execute.featureNote.add(":>");
		execute.featureSpecialization.add("execute");
		execute.valuePart = s.execute.getEReference();
		t.body.add(execute);
	}
	//ConfigurationItem -> EReference : write
	if (s.write.getEReference() != null){
		var write = new SysMLine!ItemUsage;
		write.isReference = true;
		write.featureNote.add(":>");
		write.featureSpecialization.add("write");
		write.valuePart = s.write.getEReference();
		t.body.add(write);
	}
	//ConfigurationItem -> EReference : access
	if (s.access.getEReference() != null){
		var access = new SysMLine!ItemUsage;
		access.isReference = true;
		access.featureNote.add(":>");
		access.featureSpecialization.add("access");
		access.valuePart = s.access.getEReference();
		t.body.add(access);
	}
	//ConfigurationItem -> EReference : acquire
	if (s.acquire.getEReference() != null){
		var acquire = new SysMLine!ItemUsage;
		acquire.isReference = true;
		acquire.featureNote.add(":>");
		acquire.featureSpecialization.add("acquire");
		acquire.valuePart = s.acquire.getEReference();
		t.body.add(acquire);
	}
	//ConfigurationItem -> EReference : transmit
	if (s.transmit.getEReference() != null){
		var transmit = new SysMLine!ItemUsage;
		transmit.isReference = true;
		transmit.featureNote.add(":>");
		transmit.featureSpecialization.add("transmit");
		transmit.valuePart = s.transmit.getEReference();
		t.body.add(transmit);
	}
	//ConfigurationItem -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null){
		var ownedInterfaceUses = new SysMLine!ItemUsage;
		ownedInterfaceUses.isReference = true;
		ownedInterfaceUses.featureNote.add(":>");
		ownedInterfaceUses.featureSpecialization.add("ownedInterfaceUses");
		ownedInterfaceUses.valuePart = s.ownedInterfaceUses.getEReference();
		t.body.add(ownedInterfaceUses);
	}
	//ConfigurationItem -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null){
		var usedInterfaceLinks = new SysMLine!ItemUsage;
		usedInterfaceLinks.isReference = true;
		usedInterfaceLinks.featureNote.add(":>");
		usedInterfaceLinks.featureSpecialization.add("usedInterfaceLinks");
		usedInterfaceLinks.valuePart = s.usedInterfaceLinks.getEReference();
		t.body.add(usedInterfaceLinks);
	}
	//ConfigurationItem -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null){
		var usedInterfaces = new SysMLine!ItemUsage;
		usedInterfaces.isReference = true;
		usedInterfaces.featureNote.add(":>");
		usedInterfaces.featureSpecialization.add("usedInterfaces");
		usedInterfaces.valuePart = s.usedInterfaces.getEReference();
		t.body.add(usedInterfaces);
	}
	//ConfigurationItem -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null){
		var ownedInterfaceImplementations = new SysMLine!ItemUsage;
		ownedInterfaceImplementations.isReference = true;
		ownedInterfaceImplementations.featureNote.add(":>");
		ownedInterfaceImplementations.featureSpecialization.add("ownedInterfaceImplementations");
		ownedInterfaceImplementations.valuePart = s.ownedInterfaceImplementations.getEReference();
		t.body.add(ownedInterfaceImplementations);
	}
	//ConfigurationItem -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null){
		var implementedInterfaceLinks = new SysMLine!ItemUsage;
		implementedInterfaceLinks.isReference = true;
		implementedInterfaceLinks.featureNote.add(":>");
		implementedInterfaceLinks.featureSpecialization.add("implementedInterfaceLinks");
		implementedInterfaceLinks.valuePart = s.implementedInterfaceLinks.getEReference();
		t.body.add(implementedInterfaceLinks);
	}
	//ConfigurationItem -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null){
		var implementedInterfaces = new SysMLine!ItemUsage;
		implementedInterfaces.isReference = true;
		implementedInterfaces.featureNote.add(":>");
		implementedInterfaces.featureSpecialization.add("implementedInterfaces");
		implementedInterfaces.valuePart = s.implementedInterfaces.getEReference();
		t.body.add(implementedInterfaces);
	}
	//ConfigurationItem -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null){
		var ownedComponentRealizations = new SysMLine!ItemUsage;
		ownedComponentRealizations.isReference = true;
		ownedComponentRealizations.featureNote.add(":>");
		ownedComponentRealizations.featureSpecialization.add("ownedComponentRealizations");
		ownedComponentRealizations.valuePart = s.ownedComponentRealizations.getEReference();
		t.body.add(ownedComponentRealizations);
	}
	//ConfigurationItem -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null){
		var realizedComponents = new SysMLine!ItemUsage;
		realizedComponents.isReference = true;
		realizedComponents.featureNote.add(":>");
		realizedComponents.featureSpecialization.add("realizedComponents");
		realizedComponents.valuePart = s.realizedComponents.getEReference();
		t.body.add(realizedComponents);
	}
	//ConfigurationItem -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null){
		var realizingComponents = new SysMLine!ItemUsage;
		realizingComponents.isReference = true;
		realizingComponents.featureNote.add(":>");
		realizingComponents.featureSpecialization.add("realizingComponents");
		realizingComponents.valuePart = s.realizingComponents.getEReference();
		t.body.add(realizingComponents);
	}
	//ConfigurationItem -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null){
		var providedInterfaces = new SysMLine!ItemUsage;
		providedInterfaces.isReference = true;
		providedInterfaces.featureNote.add(":>");
		providedInterfaces.featureSpecialization.add("providedInterfaces");
		providedInterfaces.valuePart = s.providedInterfaces.getEReference();
		t.body.add(providedInterfaces);
	}
	//ConfigurationItem -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null){
		var requiredInterfaces = new SysMLine!ItemUsage;
		requiredInterfaces.isReference = true;
		requiredInterfaces.featureNote.add(":>");
		requiredInterfaces.featureSpecialization.add("requiredInterfaces");
		requiredInterfaces.valuePart = s.requiredInterfaces.getEReference();
		t.body.add(requiredInterfaces);
	}
	//ConfigurationItem -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null){
		var containedComponentPorts = new SysMLine!ItemUsage;
		containedComponentPorts.isReference = true;
		containedComponentPorts.featureNote.add(":>");
		containedComponentPorts.featureSpecialization.add("containedComponentPorts");
		containedComponentPorts.valuePart = s.containedComponentPorts.getEReference();
		t.body.add(containedComponentPorts);
	}
	//ConfigurationItem -> EReference : containedParts
	if (s.containedParts.getEReference() != null){
		var containedParts = new SysMLine!ItemUsage;
		containedParts.isReference = true;
		containedParts.featureNote.add(":>");
		containedParts.featureSpecialization.add("containedParts");
		containedParts.valuePart = s.containedParts.getEReference();
		t.body.add(containedParts);
	}
	//ConfigurationItem -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null){
		var containedPhysicalPorts = new SysMLine!ItemUsage;
		containedPhysicalPorts.isReference = true;
		containedPhysicalPorts.featureNote.add(":>");
		containedPhysicalPorts.featureSpecialization.add("containedPhysicalPorts");
		containedPhysicalPorts.valuePart = s.containedPhysicalPorts.getEReference();
		t.body.add(containedPhysicalPorts);
	}
	//ConfigurationItem -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null){
		var ownedPhysicalPath = new SysMLine!ItemUsage;
		ownedPhysicalPath.isReference = true;
		ownedPhysicalPath.featureNote.add(":>");
		ownedPhysicalPath.featureSpecialization.add("ownedPhysicalPath");
		ownedPhysicalPath.valuePart = s.ownedPhysicalPath.getEReference();
		t.body.add(ownedPhysicalPath);
	}
	//ConfigurationItem -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null){
		var ownedPhysicalLinks = new SysMLine!ItemUsage;
		ownedPhysicalLinks.isReference = true;
		ownedPhysicalLinks.featureNote.add(":>");
		ownedPhysicalLinks.featureSpecialization.add("ownedPhysicalLinks");
		ownedPhysicalLinks.valuePart = s.ownedPhysicalLinks.getEReference();
		t.body.add(ownedPhysicalLinks);
	}
	//ConfigurationItem -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null){
		var ownedPhysicalLinkCategories = new SysMLine!ItemUsage;
		ownedPhysicalLinkCategories.isReference = true;
		ownedPhysicalLinkCategories.featureNote.add(":>");
		ownedPhysicalLinkCategories.featureSpecialization.add("ownedPhysicalLinkCategories");
		ownedPhysicalLinkCategories.valuePart = s.ownedPhysicalLinkCategories.getEReference();
		t.body.add(ownedPhysicalLinkCategories);
	}
	//ConfigurationItem -> EReference : representingParts
	if (s.representingParts.getEReference() != null){
		var representingParts = new SysMLine!ItemUsage;
		representingParts.isReference = true;
		representingParts.featureNote.add(":>");
		representingParts.featureSpecialization.add("representingParts");
		representingParts.valuePart = s.representingParts.getEReference();
		t.body.add(representingParts);
	}
	//ConfigurationItem -> EReference : ownedConfigurationItems
	if (s.ownedConfigurationItems.getEReference() != null){
		var ownedConfigurationItems = new SysMLine!ItemUsage;
		ownedConfigurationItems.isReference = true;
		ownedConfigurationItems.featureNote.add(":>");
		ownedConfigurationItems.featureSpecialization.add("ownedConfigurationItems");
		ownedConfigurationItems.valuePart = s.ownedConfigurationItems.getEReference();
		t.body.add(ownedConfigurationItems);
	}
	//ConfigurationItem -> EReference : ownedConfigurationItemPkgs
	if (s.ownedConfigurationItemPkgs.getEReference() != null){
		var ownedConfigurationItemPkgs = new SysMLine!ItemUsage;
		ownedConfigurationItemPkgs.isReference = true;
		ownedConfigurationItemPkgs.featureNote.add(":>");
		ownedConfigurationItemPkgs.featureSpecialization.add("ownedConfigurationItemPkgs");
		ownedConfigurationItemPkgs.valuePart = s.ownedConfigurationItemPkgs.getEReference();
		t.body.add(ownedConfigurationItemPkgs);
	}
	//ConfigurationItem -> EReference : ownedPhysicalArtifactRealizations
	if (s.ownedPhysicalArtifactRealizations.getEReference() != null){
		var ownedPhysicalArtifactRealizations = new SysMLine!ItemUsage;
		ownedPhysicalArtifactRealizations.isReference = true;
		ownedPhysicalArtifactRealizations.featureNote.add(":>");
		ownedPhysicalArtifactRealizations.featureSpecialization.add("ownedPhysicalArtifactRealizations");
		ownedPhysicalArtifactRealizations.valuePart = s.ownedPhysicalArtifactRealizations.getEReference();
		t.body.add(ownedPhysicalArtifactRealizations);
	}
	//ConfigurationItem -> EReference : allocatedPhysicalArtifacts
	if (s.allocatedPhysicalArtifacts.getEReference() != null){
		var allocatedPhysicalArtifacts = new SysMLine!ItemUsage;
		allocatedPhysicalArtifacts.isReference = true;
		allocatedPhysicalArtifacts.featureNote.add(":>");
		allocatedPhysicalArtifacts.featureSpecialization.add("allocatedPhysicalArtifacts");
		allocatedPhysicalArtifacts.valuePart = s.allocatedPhysicalArtifacts.getEReference();
		t.body.add(allocatedPhysicalArtifacts);
	}
}

@lazy
rule PhysicalArchitectureRealization
	transform s : DSL!PhysicalArchitectureRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalArchitectureRealization -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//PhysicalArchitectureRealization -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//PhysicalArchitectureRealization -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//PhysicalArchitectureRealization -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//PhysicalArchitectureRealization -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//PhysicalArchitectureRealization -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//PhysicalArchitectureRealization -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//PhysicalArchitectureRealization -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//PhysicalArchitectureRealization -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//PhysicalArchitectureRealization -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//PhysicalArchitectureRealization -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//PhysicalArchitectureRealization -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//PhysicalArchitectureRealization -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//PhysicalArchitectureRealization -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//PhysicalArchitectureRealization -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//PhysicalArchitectureRealization -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//PhysicalArchitectureRealization -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//PhysicalArchitectureRealization -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//PhysicalArchitectureRealization -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//PhysicalArchitectureRealization -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//PhysicalArchitectureRealization -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//PhysicalArchitectureRealization -> EReference : targetElement
	if (s.targetElement.getEReference() != null){
		var targetElement = new SysMLine!ItemUsage;
		targetElement.isReference = true;
		targetElement.featureNote.add(":>");
		targetElement.featureSpecialization.add("targetElement");
		targetElement.valuePart = s.targetElement.getEReference();
		t.body.add(targetElement);
	}
	//PhysicalArchitectureRealization -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null){
		var sourceElement = new SysMLine!ItemUsage;
		sourceElement.isReference = true;
		sourceElement.featureNote.add(":>");
		sourceElement.featureSpecialization.add("sourceElement");
		sourceElement.valuePart = s.sourceElement.getEReference();
		t.body.add(sourceElement);
	}
	//PhysicalArchitectureRealization -> EReference : allocatedArchitecture
	if (s.allocatedArchitecture.getEReference() != null){
		var allocatedArchitecture = new SysMLine!ItemUsage;
		allocatedArchitecture.isReference = true;
		allocatedArchitecture.featureNote.add(":>");
		allocatedArchitecture.featureSpecialization.add("allocatedArchitecture");
		allocatedArchitecture.valuePart = s.allocatedArchitecture.getEReference();
		t.body.add(allocatedArchitecture);
	}
	//PhysicalArchitectureRealization -> EReference : allocatingArchitecture
	if (s.allocatingArchitecture.getEReference() != null){
		var allocatingArchitecture = new SysMLine!ItemUsage;
		allocatingArchitecture.isReference = true;
		allocatingArchitecture.featureNote.add(":>");
		allocatingArchitecture.featureSpecialization.add("allocatingArchitecture");
		allocatingArchitecture.valuePart = s.allocatingArchitecture.getEReference();
		t.body.add(allocatingArchitecture);
	}
}

@lazy
rule PhysicalArtifactRealization
	transform s : DSL!PhysicalArtifactRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalArtifactRealization -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//PhysicalArtifactRealization -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//PhysicalArtifactRealization -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//PhysicalArtifactRealization -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//PhysicalArtifactRealization -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//PhysicalArtifactRealization -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//PhysicalArtifactRealization -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//PhysicalArtifactRealization -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//PhysicalArtifactRealization -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//PhysicalArtifactRealization -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//PhysicalArtifactRealization -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//PhysicalArtifactRealization -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null){
		var realizedFlow = new SysMLine!ItemUsage;
		realizedFlow.isReference = true;
		realizedFlow.featureNote.add(":>");
		realizedFlow.featureSpecialization.add("realizedFlow");
		realizedFlow.valuePart = s.realizedFlow.getEReference();
		t.body.add(realizedFlow);
	}
	//PhysicalArtifactRealization -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//PhysicalArtifactRealization -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//PhysicalArtifactRealization -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//PhysicalArtifactRealization -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//PhysicalArtifactRealization -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//PhysicalArtifactRealization -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//PhysicalArtifactRealization -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//PhysicalArtifactRealization -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//PhysicalArtifactRealization -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//PhysicalArtifactRealization -> EReference : targetElement
	if (s.targetElement.getEReference() != null){
		var targetElement = new SysMLine!ItemUsage;
		targetElement.isReference = true;
		targetElement.featureNote.add(":>");
		targetElement.featureSpecialization.add("targetElement");
		targetElement.valuePart = s.targetElement.getEReference();
		t.body.add(targetElement);
	}
	//PhysicalArtifactRealization -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null){
		var sourceElement = new SysMLine!ItemUsage;
		sourceElement.isReference = true;
		sourceElement.featureNote.add(":>");
		sourceElement.featureSpecialization.add("sourceElement");
		sourceElement.valuePart = s.sourceElement.getEReference();
		t.body.add(sourceElement);
	}
	//PhysicalArtifactRealization -> EReference : realizedPhysicalArtifact
	if (s.realizedPhysicalArtifact.getEReference() != null){
		var realizedPhysicalArtifact = new SysMLine!ItemUsage;
		realizedPhysicalArtifact.isReference = true;
		realizedPhysicalArtifact.featureNote.add(":>");
		realizedPhysicalArtifact.featureSpecialization.add("realizedPhysicalArtifact");
		realizedPhysicalArtifact.valuePart = s.realizedPhysicalArtifact.getEReference();
		t.body.add(realizedPhysicalArtifact);
	}
	//PhysicalArtifactRealization -> EReference : realizingConfigurationItem
	if (s.realizingConfigurationItem.getEReference() != null){
		var realizingConfigurationItem = new SysMLine!ItemUsage;
		realizingConfigurationItem.isReference = true;
		realizingConfigurationItem.featureNote.add(":>");
		realizingConfigurationItem.featureSpecialization.add("realizingConfigurationItem");
		realizingConfigurationItem.valuePart = s.realizingConfigurationItem.getEReference();
		t.body.add(realizingConfigurationItem);
	}
}


// sharedmodel.ecore
@lazy
rule SharedPkg
	transform s : DSL!SharedPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//SharedPkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//SharedPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//SharedPkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//SharedPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//SharedPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//SharedPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//SharedPkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//SharedPkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//SharedPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//SharedPkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//SharedPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//SharedPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//SharedPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//SharedPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//SharedPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//SharedPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//SharedPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//SharedPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//SharedPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//SharedPkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//SharedPkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//SharedPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//SharedPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//SharedPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//SharedPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//SharedPkg -> EReference : reuseLinks
	if (s.reuseLinks.getEReference() != null){
		var reuseLinks = new SysMLine!ItemUsage;
		reuseLinks.isReference = true;
		reuseLinks.featureNote.add(":>");
		reuseLinks.featureSpecialization.add("reuseLinks");
		reuseLinks.valuePart = s.reuseLinks.getEReference();
		t.body.add(reuseLinks);
	}
	//SharedPkg -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null){
		var ownedDataPkg = new SysMLine!ItemUsage;
		ownedDataPkg.isReference = true;
		ownedDataPkg.featureNote.add(":>");
		ownedDataPkg.featureSpecialization.add("ownedDataPkg");
		ownedDataPkg.valuePart = s.ownedDataPkg.getEReference();
		t.body.add(ownedDataPkg);
	}
	//SharedPkg -> EReference : ownedGenericPkg
	if (s.ownedGenericPkg.getEReference() != null){
		var ownedGenericPkg = new SysMLine!ItemUsage;
		ownedGenericPkg.isReference = true;
		ownedGenericPkg.featureNote.add(":>");
		ownedGenericPkg.featureSpecialization.add("ownedGenericPkg");
		ownedGenericPkg.valuePart = s.ownedGenericPkg.getEReference();
		t.body.add(ownedGenericPkg);
	}
}

@lazy
rule GenericPkg
	transform s : DSL!GenericPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//GenericPkg -> EAttribute : id
	if (s.id.getEAttribute() != null){
		var id = new SysMLine!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	//GenericPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null){
		var sid = new SysMLine!AttributeUsage;
		sid.featureNote.add(":>>");
		sid.featureSpecialization.add("sid");
		sid.valuePart = s.sid.getEAttribute();
		t.body.add(sid);
	}
	//GenericPkg -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMLine!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//GenericPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null){
		var visibleInDoc = new SysMLine!AttributeUsage;
		visibleInDoc.featureNote.add(":>>");
		visibleInDoc.featureSpecialization.add("visibleInDoc");
		visibleInDoc.valuePart = s.visibleInDoc.getEAttribute();
		t.body.add(visibleInDoc);
	}
	//GenericPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null){
		var visibleInLM = new SysMLine!AttributeUsage;
		visibleInLM.featureNote.add(":>>");
		visibleInLM.featureSpecialization.add("visibleInLM");
		visibleInLM.valuePart = s.visibleInLM.getEAttribute();
		t.body.add(visibleInLM);
	}
	//GenericPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null){
		var summary = new SysMLine!AttributeUsage;
		summary.featureNote.add(":>>");
		summary.featureSpecialization.add("summary");
		summary.valuePart = s.summary.getEAttribute();
		t.body.add(summary);
	}
	//GenericPkg -> EAttribute : description
	if (s.description.getEAttribute() != null){
		var description = new SysMLine!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	//GenericPkg -> EAttribute : review
	if (s.review.getEAttribute() != null){
		var review = new SysMLine!AttributeUsage;
		review.featureNote.add(":>>");
		review.featureSpecialization.add("review");
		review.valuePart = s.review.getEAttribute();
		t.body.add(review);
	}
	//GenericPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null){
		var ownedExtensions = new SysMLine!ItemUsage;
		ownedExtensions.isReference = true;
		ownedExtensions.featureNote.add(":>");
		ownedExtensions.featureSpecialization.add("ownedExtensions");
		ownedExtensions.valuePart = s.ownedExtensions.getEReference();
		t.body.add(ownedExtensions);
	}
	//GenericPkg -> EReference : constraints
	if (s.constraints.getEReference() != null){
		var constraints = new SysMLine!ItemUsage;
		constraints.isReference = true;
		constraints.featureNote.add(":>");
		constraints.featureSpecialization.add("constraints");
		constraints.valuePart = s.constraints.getEReference();
		t.body.add(constraints);
	}
	//GenericPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null){
		var ownedConstraints = new SysMLine!ItemUsage;
		ownedConstraints.isReference = true;
		ownedConstraints.featureNote.add(":>");
		ownedConstraints.featureSpecialization.add("ownedConstraints");
		ownedConstraints.valuePart = s.ownedConstraints.getEReference();
		t.body.add(ownedConstraints);
	}
	//GenericPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null){
		var ownedMigratedElements = new SysMLine!ItemUsage;
		ownedMigratedElements.isReference = true;
		ownedMigratedElements.featureNote.add(":>");
		ownedMigratedElements.featureSpecialization.add("ownedMigratedElements");
		ownedMigratedElements.valuePart = s.ownedMigratedElements.getEReference();
		t.body.add(ownedMigratedElements);
	}
	//GenericPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null){
		var incomingTraces = new SysMLine!ItemUsage;
		incomingTraces.isReference = true;
		incomingTraces.featureNote.add(":>");
		incomingTraces.featureSpecialization.add("incomingTraces");
		incomingTraces.valuePart = s.incomingTraces.getEReference();
		t.body.add(incomingTraces);
	}
	//GenericPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null){
		var outgoingTraces = new SysMLine!ItemUsage;
		outgoingTraces.isReference = true;
		outgoingTraces.featureNote.add(":>");
		outgoingTraces.featureSpecialization.add("outgoingTraces");
		outgoingTraces.valuePart = s.outgoingTraces.getEReference();
		t.body.add(outgoingTraces);
	}
	//GenericPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null){
		var ownedPropertyValues = new SysMLine!ItemUsage;
		ownedPropertyValues.isReference = true;
		ownedPropertyValues.featureNote.add(":>");
		ownedPropertyValues.featureSpecialization.add("ownedPropertyValues");
		ownedPropertyValues.valuePart = s.ownedPropertyValues.getEReference();
		t.body.add(ownedPropertyValues);
	}
	//GenericPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null){
		var ownedEnumerationPropertyTypes = new SysMLine!ItemUsage;
		ownedEnumerationPropertyTypes.isReference = true;
		ownedEnumerationPropertyTypes.featureNote.add(":>");
		ownedEnumerationPropertyTypes.featureSpecialization.add("ownedEnumerationPropertyTypes");
		ownedEnumerationPropertyTypes.valuePart = s.ownedEnumerationPropertyTypes.getEReference();
		t.body.add(ownedEnumerationPropertyTypes);
	}
	//GenericPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null){
		var appliedPropertyValues = new SysMLine!ItemUsage;
		appliedPropertyValues.isReference = true;
		appliedPropertyValues.featureNote.add(":>");
		appliedPropertyValues.featureSpecialization.add("appliedPropertyValues");
		appliedPropertyValues.valuePart = s.appliedPropertyValues.getEReference();
		t.body.add(appliedPropertyValues);
	}
	//GenericPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null){
		var ownedPropertyValueGroups = new SysMLine!ItemUsage;
		ownedPropertyValueGroups.isReference = true;
		ownedPropertyValueGroups.featureNote.add(":>");
		ownedPropertyValueGroups.featureSpecialization.add("ownedPropertyValueGroups");
		ownedPropertyValueGroups.valuePart = s.ownedPropertyValueGroups.getEReference();
		t.body.add(ownedPropertyValueGroups);
	}
	//GenericPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null){
		var appliedPropertyValueGroups = new SysMLine!ItemUsage;
		appliedPropertyValueGroups.isReference = true;
		appliedPropertyValueGroups.featureNote.add(":>");
		appliedPropertyValueGroups.featureSpecialization.add("appliedPropertyValueGroups");
		appliedPropertyValueGroups.valuePart = s.appliedPropertyValueGroups.getEReference();
		t.body.add(appliedPropertyValueGroups);
	}
	//GenericPkg -> EReference : status
	if (s.status.getEReference() != null){
		var status = new SysMLine!ItemUsage;
		status.isReference = true;
		status.featureNote.add(":>");
		status.featureSpecialization.add("status");
		status.valuePart = s.status.getEReference();
		t.body.add(status);
	}
	//GenericPkg -> EReference : features
	if (s.features.getEReference() != null){
		var features = new SysMLine!ItemUsage;
		features.isReference = true;
		features.featureNote.add(":>");
		features.featureSpecialization.add("features");
		features.valuePart = s.features.getEReference();
		t.body.add(features);
	}
	//GenericPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null){
		var ownedTraces = new SysMLine!ItemUsage;
		ownedTraces.isReference = true;
		ownedTraces.featureNote.add(":>");
		ownedTraces.featureSpecialization.add("ownedTraces");
		ownedTraces.valuePart = s.ownedTraces.getEReference();
		t.body.add(ownedTraces);
	}
	//GenericPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null){
		var containedGenericTraces = new SysMLine!ItemUsage;
		containedGenericTraces.isReference = true;
		containedGenericTraces.featureNote.add(":>");
		containedGenericTraces.featureSpecialization.add("containedGenericTraces");
		containedGenericTraces.valuePart = s.containedGenericTraces.getEReference();
		t.body.add(containedGenericTraces);
	}
	//GenericPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null){
		var namingRules = new SysMLine!ItemUsage;
		namingRules.isReference = true;
		namingRules.featureNote.add(":>");
		namingRules.featureSpecialization.add("namingRules");
		namingRules.valuePart = s.namingRules.getEReference();
		t.body.add(namingRules);
	}
	//GenericPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null){
		var ownedPropertyValuePkgs = new SysMLine!ItemUsage;
		ownedPropertyValuePkgs.isReference = true;
		ownedPropertyValuePkgs.featureNote.add(":>");
		ownedPropertyValuePkgs.featureSpecialization.add("ownedPropertyValuePkgs");
		ownedPropertyValuePkgs.valuePart = s.ownedPropertyValuePkgs.getEReference();
		t.body.add(ownedPropertyValuePkgs);
	}
	//GenericPkg -> EReference : subGenericPkgs
	if (s.subGenericPkgs.getEReference() != null){
		var subGenericPkgs = new SysMLine!ItemUsage;
		subGenericPkgs.isReference = true;
		subGenericPkgs.featureNote.add(":>");
		subGenericPkgs.featureSpecialization.add("subGenericPkgs");
		subGenericPkgs.valuePart = s.subGenericPkgs.getEReference();
		t.body.add(subGenericPkgs);
	}
	//GenericPkg -> EReference : capellaElements
	if (s.capellaElements.getEReference() != null){
		var capellaElements = new SysMLine!ItemUsage;
		capellaElements.isReference = true;
		capellaElements.featureNote.add(":>");
		capellaElements.featureSpecialization.add("capellaElements");
		capellaElements.valuePart = s.capellaElements.getEReference();
		t.body.add(capellaElements);
	}
}


