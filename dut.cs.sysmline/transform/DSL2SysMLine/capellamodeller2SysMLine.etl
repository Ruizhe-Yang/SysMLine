import "DSL2SysMLine-util.eol";

pre{
	var eObjectSequence = new Sequence;
	var KeyWords = baseKeyWords();
	var i = 0;
	eObjectSequence.init_capellamodeller();
	main_capellamodeller();
}

post{
	("[ETL] capellamodeller2SysMLine >> " + SysMLine!Package.all.first().declaredName + ".sysmline").println();
}

operation main_capellamodeller(){
	var rootEcore = DSL!EObject.all.first();
	var rootSysMLine = new SysMLine!Namespace;
	var rootPackage = new SysMLine!Package;
	rootPackage.declaredName = "capellamodeller_model";
	rootSysMLine.body.add(rootPackage);
	rootPackage.addNamespaceImport("capellamodeller");
	rootPackage.addNamespaceImport("capellacore");
	rootPackage.addNamespaceImport("modellingcore");
	rootPackage.addNamespaceImport("emde");
	rootPackage.addNamespaceImport("oa");
	rootPackage.addNamespaceImport("ctx");
	rootPackage.addNamespaceImport("la");
	rootPackage.addNamespaceImport("pa");
	rootPackage.addNamespaceImport("deployment");
	rootPackage.addNamespaceImport("epbs");
	rootPackage.addNamespaceImport("sharedmodel");
	rootPackage.addNamespaceImport("activity");
	rootPackage.addNamespaceImport("behavior");
	rootPackage.addNamespaceImport("capellacommon");
	rootPackage.addNamespaceImport("fa");
	rootPackage.addNamespaceImport("interaction");
	rootPackage.addNamespaceImport("cs");
	rootPackage.addNamespaceImport("information");
	rootPackage.addNamespaceImport("communication");
	rootPackage.addNamespaceImport("datatype");
	rootPackage.addNamespaceImport("datavalue");
	rootPackage.addNamespaceImport("libraries");
	rootPackage.addNamespaceImport("re");
	rootEcore.addNodeTo(rootPackage);
}

operation Sequence init_capellamodeller(){
	//capellamodeller.Project -> Instantiation
	var idProject = 0;
	for (eProject in DSL!EObject.all.select(s|s.isTypeOf(DSL!Project))){
		var eProjectTuple = Tuple{"key"="Project_"+(idProject++).asString(),"value"= eProject};
		self.add(eProjectTuple);
	}
	//capellamodeller.Folder -> Instantiation
	var idFolder = 0;
	for (eFolder in DSL!EObject.all.select(s|s.isTypeOf(DSL!Folder))){
		var eFolderTuple = Tuple{"key"="Folder_"+(idFolder++).asString(),"value"= eFolder};
		self.add(eFolderTuple);
	}
	//capellamodeller.ModelRoot -> Instantiation
	var idModelRoot = 0;
	for (eModelRoot in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModelRoot))){
		var eModelRootTuple = Tuple{"key"="ModelRoot_"+(idModelRoot++).asString(),"value"= eModelRoot};
		self.add(eModelRootTuple);
	}
	//capellamodeller.SystemEngineering -> Instantiation
	var idSystemEngineering = 0;
	for (eSystemEngineering in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemEngineering))){
		var eSystemEngineeringTuple = Tuple{"key"="SystemEngineering_"+(idSystemEngineering++).asString(),"value"= eSystemEngineering};
		self.add(eSystemEngineeringTuple);
	}
	//capellamodeller.SystemEngineeringPkg -> Instantiation
	var idSystemEngineeringPkg = 0;
	for (eSystemEngineeringPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemEngineeringPkg))){
		var eSystemEngineeringPkgTuple = Tuple{"key"="SystemEngineeringPkg_"+(idSystemEngineeringPkg++).asString(),"value"= eSystemEngineeringPkg};
		self.add(eSystemEngineeringPkgTuple);
	}
	//capellamodeller.Library -> Instantiation
	var idLibrary = 0;
	for (eLibrary in DSL!EObject.all.select(s|s.isTypeOf(DSL!Library))){
		var eLibraryTuple = Tuple{"key"="Library_"+(idLibrary++).asString(),"value"= eLibrary};
		self.add(eLibraryTuple);
	}
	//capellacore.CapellaElement -> Instantiation
	var idCapellaElement = 0;
	for (eCapellaElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapellaElement))){
		var eCapellaElementTuple = Tuple{"key"="CapellaElement_"+(idCapellaElement++).asString(),"value"= eCapellaElement};
		self.add(eCapellaElementTuple);
	}
	//capellacore.NamedElement -> Instantiation
	var idNamedElement = 0;
	for (eNamedElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!NamedElement))){
		var eNamedElementTuple = Tuple{"key"="NamedElement_"+(idNamedElement++).asString(),"value"= eNamedElement};
		self.add(eNamedElementTuple);
	}
	//capellacore.Relationship -> Instantiation
	var idRelationship = 0;
	for (eRelationship in DSL!EObject.all.select(s|s.isTypeOf(DSL!Relationship))){
		var eRelationshipTuple = Tuple{"key"="Relationship_"+(idRelationship++).asString(),"value"= eRelationship};
		self.add(eRelationshipTuple);
	}
	//capellacore.Namespace -> Instantiation
	var idNamespace = 0;
	for (eNamespace in DSL!EObject.all.select(s|s.isTypeOf(DSL!Namespace))){
		var eNamespaceTuple = Tuple{"key"="Namespace_"+(idNamespace++).asString(),"value"= eNamespace};
		self.add(eNamespaceTuple);
	}
	//capellacore.NamedRelationship -> Instantiation
	var idNamedRelationship = 0;
	for (eNamedRelationship in DSL!EObject.all.select(s|s.isTypeOf(DSL!NamedRelationship))){
		var eNamedRelationshipTuple = Tuple{"key"="NamedRelationship_"+(idNamedRelationship++).asString(),"value"= eNamedRelationship};
		self.add(eNamedRelationshipTuple);
	}
	//capellacore.Structure -> Instantiation
	var idStructure = 0;
	for (eStructure in DSL!EObject.all.select(s|s.isTypeOf(DSL!Structure))){
		var eStructureTuple = Tuple{"key"="Structure_"+(idStructure++).asString(),"value"= eStructure};
		self.add(eStructureTuple);
	}
	//capellacore.AbstractModellingStructure -> Instantiation
	var idAbstractModellingStructure = 0;
	for (eAbstractModellingStructure in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractModellingStructure))){
		var eAbstractModellingStructureTuple = Tuple{"key"="AbstractModellingStructure_"+(idAbstractModellingStructure++).asString(),"value"= eAbstractModellingStructure};
		self.add(eAbstractModellingStructureTuple);
	}
	//capellacore.ModellingBlock -> Instantiation
	var idModellingBlock = 0;
	for (eModellingBlock in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModellingBlock))){
		var eModellingBlockTuple = Tuple{"key"="ModellingBlock_"+(idModellingBlock++).asString(),"value"= eModellingBlock};
		self.add(eModellingBlockTuple);
	}
	//capellacore.ModellingArchitecture -> Instantiation
	var idModellingArchitecture = 0;
	for (eModellingArchitecture in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModellingArchitecture))){
		var eModellingArchitectureTuple = Tuple{"key"="ModellingArchitecture_"+(idModellingArchitecture++).asString(),"value"= eModellingArchitecture};
		self.add(eModellingArchitectureTuple);
	}
	//capellacore.ModellingArchitecturePkg -> Instantiation
	var idModellingArchitecturePkg = 0;
	for (eModellingArchitecturePkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModellingArchitecturePkg))){
		var eModellingArchitecturePkgTuple = Tuple{"key"="ModellingArchitecturePkg_"+(idModellingArchitecturePkg++).asString(),"value"= eModellingArchitecturePkg};
		self.add(eModellingArchitecturePkgTuple);
	}
	//capellacore.Type -> Instantiation
	var idType = 0;
	for (eType in DSL!EObject.all.select(s|s.isTypeOf(DSL!Type))){
		var eTypeTuple = Tuple{"key"="Type_"+(idType++).asString(),"value"= eType};
		self.add(eTypeTuple);
	}
	//capellacore.TypedElement -> Instantiation
	var idTypedElement = 0;
	for (eTypedElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!TypedElement))){
		var eTypedElementTuple = Tuple{"key"="TypedElement_"+(idTypedElement++).asString(),"value"= eTypedElement};
		self.add(eTypedElementTuple);
	}
	//capellacore.Trace -> Instantiation
	var idTrace = 0;
	for (eTrace in DSL!EObject.all.select(s|s.isTypeOf(DSL!Trace))){
		var eTraceTuple = Tuple{"key"="Trace_"+(idTrace++).asString(),"value"= eTrace};
		self.add(eTraceTuple);
	}
	//capellacore.AbstractAnnotation -> Instantiation
	var idAbstractAnnotation = 0;
	for (eAbstractAnnotation in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractAnnotation))){
		var eAbstractAnnotationTuple = Tuple{"key"="AbstractAnnotation_"+(idAbstractAnnotation++).asString(),"value"= eAbstractAnnotation};
		self.add(eAbstractAnnotationTuple);
	}
	//capellacore.NamingRule -> Instantiation
	var idNamingRule = 0;
	for (eNamingRule in DSL!EObject.all.select(s|s.isTypeOf(DSL!NamingRule))){
		var eNamingRuleTuple = Tuple{"key"="NamingRule_"+(idNamingRule++).asString(),"value"= eNamingRule};
		self.add(eNamingRuleTuple);
	}
	//capellacore.Constraint -> Instantiation
	var idConstraint = 0;
	for (eConstraint in DSL!EObject.all.select(s|s.isTypeOf(DSL!Constraint))){
		var eConstraintTuple = Tuple{"key"="Constraint_"+(idConstraint++).asString(),"value"= eConstraint};
		self.add(eConstraintTuple);
	}
	//capellacore.KeyValue -> Instantiation
	var idKeyValue = 0;
	for (eKeyValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!KeyValue))){
		var eKeyValueTuple = Tuple{"key"="KeyValue_"+(idKeyValue++).asString(),"value"= eKeyValue};
		self.add(eKeyValueTuple);
	}
	//capellacore.ReuseLink -> Instantiation
	var idReuseLink = 0;
	for (eReuseLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!ReuseLink))){
		var eReuseLinkTuple = Tuple{"key"="ReuseLink_"+(idReuseLink++).asString(),"value"= eReuseLink};
		self.add(eReuseLinkTuple);
	}
	//capellacore.ReuseableStructure -> Instantiation
	var idReuseableStructure = 0;
	for (eReuseableStructure in DSL!EObject.all.select(s|s.isTypeOf(DSL!ReuseableStructure))){
		var eReuseableStructureTuple = Tuple{"key"="ReuseableStructure_"+(idReuseableStructure++).asString(),"value"= eReuseableStructure};
		self.add(eReuseableStructureTuple);
	}
	//capellacore.ReuserStructure -> Instantiation
	var idReuserStructure = 0;
	for (eReuserStructure in DSL!EObject.all.select(s|s.isTypeOf(DSL!ReuserStructure))){
		var eReuserStructureTuple = Tuple{"key"="ReuserStructure_"+(idReuserStructure++).asString(),"value"= eReuserStructure};
		self.add(eReuserStructureTuple);
	}
	//capellacore.GeneralizableElement -> Instantiation
	var idGeneralizableElement = 0;
	for (eGeneralizableElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!GeneralizableElement))){
		var eGeneralizableElementTuple = Tuple{"key"="GeneralizableElement_"+(idGeneralizableElement++).asString(),"value"= eGeneralizableElement};
		self.add(eGeneralizableElementTuple);
	}
	//capellacore.Classifier -> Instantiation
	var idClassifier = 0;
	for (eClassifier in DSL!EObject.all.select(s|s.isTypeOf(DSL!Classifier))){
		var eClassifierTuple = Tuple{"key"="Classifier_"+(idClassifier++).asString(),"value"= eClassifier};
		self.add(eClassifierTuple);
	}
	//capellacore.GeneralClass -> Instantiation
	var idGeneralClass = 0;
	for (eGeneralClass in DSL!EObject.all.select(s|s.isTypeOf(DSL!GeneralClass))){
		var eGeneralClassTuple = Tuple{"key"="GeneralClass_"+(idGeneralClass++).asString(),"value"= eGeneralClass};
		self.add(eGeneralClassTuple);
	}
	//capellacore.Generalization -> Instantiation
	var idGeneralization = 0;
	for (eGeneralization in DSL!EObject.all.select(s|s.isTypeOf(DSL!Generalization))){
		var eGeneralizationTuple = Tuple{"key"="Generalization_"+(idGeneralization++).asString(),"value"= eGeneralization};
		self.add(eGeneralizationTuple);
	}
	//capellacore.Feature -> Instantiation
	var idFeature = 0;
	for (eFeature in DSL!EObject.all.select(s|s.isTypeOf(DSL!Feature))){
		var eFeatureTuple = Tuple{"key"="Feature_"+(idFeature++).asString(),"value"= eFeature};
		self.add(eFeatureTuple);
	}
	//capellacore.AbstractExchangeItemPkg -> Instantiation
	var idAbstractExchangeItemPkg = 0;
	for (eAbstractExchangeItemPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractExchangeItemPkg))){
		var eAbstractExchangeItemPkgTuple = Tuple{"key"="AbstractExchangeItemPkg_"+(idAbstractExchangeItemPkg++).asString(),"value"= eAbstractExchangeItemPkg};
		self.add(eAbstractExchangeItemPkgTuple);
	}
	//capellacore.Allocation -> Instantiation
	var idAllocation = 0;
	for (eAllocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!Allocation))){
		var eAllocationTuple = Tuple{"key"="Allocation_"+(idAllocation++).asString(),"value"= eAllocation};
		self.add(eAllocationTuple);
	}
	//capellacore.Involvement -> Instantiation
	var idInvolvement = 0;
	for (eInvolvement in DSL!EObject.all.select(s|s.isTypeOf(DSL!Involvement))){
		var eInvolvementTuple = Tuple{"key"="Involvement_"+(idInvolvement++).asString(),"value"= eInvolvement};
		self.add(eInvolvementTuple);
	}
	//capellacore.InvolverElement -> Instantiation
	var idInvolverElement = 0;
	for (eInvolverElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!InvolverElement))){
		var eInvolverElementTuple = Tuple{"key"="InvolverElement_"+(idInvolverElement++).asString(),"value"= eInvolverElement};
		self.add(eInvolverElementTuple);
	}
	//capellacore.InvolvedElement -> Instantiation
	var idInvolvedElement = 0;
	for (eInvolvedElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!InvolvedElement))){
		var eInvolvedElementTuple = Tuple{"key"="InvolvedElement_"+(idInvolvedElement++).asString(),"value"= eInvolvedElement};
		self.add(eInvolvedElementTuple);
	}
	//capellacore.AbstractPropertyValue -> Instantiation
	var idAbstractPropertyValue = 0;
	for (eAbstractPropertyValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractPropertyValue))){
		var eAbstractPropertyValueTuple = Tuple{"key"="AbstractPropertyValue_"+(idAbstractPropertyValue++).asString(),"value"= eAbstractPropertyValue};
		self.add(eAbstractPropertyValueTuple);
	}
	//capellacore.StringPropertyValue -> Instantiation
	var idStringPropertyValue = 0;
	for (eStringPropertyValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!StringPropertyValue))){
		var eStringPropertyValueTuple = Tuple{"key"="StringPropertyValue_"+(idStringPropertyValue++).asString(),"value"= eStringPropertyValue};
		self.add(eStringPropertyValueTuple);
	}
	//capellacore.IntegerPropertyValue -> Instantiation
	var idIntegerPropertyValue = 0;
	for (eIntegerPropertyValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!IntegerPropertyValue))){
		var eIntegerPropertyValueTuple = Tuple{"key"="IntegerPropertyValue_"+(idIntegerPropertyValue++).asString(),"value"= eIntegerPropertyValue};
		self.add(eIntegerPropertyValueTuple);
	}
	//capellacore.BooleanPropertyValue -> Instantiation
	var idBooleanPropertyValue = 0;
	for (eBooleanPropertyValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!BooleanPropertyValue))){
		var eBooleanPropertyValueTuple = Tuple{"key"="BooleanPropertyValue_"+(idBooleanPropertyValue++).asString(),"value"= eBooleanPropertyValue};
		self.add(eBooleanPropertyValueTuple);
	}
	//capellacore.FloatPropertyValue -> Instantiation
	var idFloatPropertyValue = 0;
	for (eFloatPropertyValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!FloatPropertyValue))){
		var eFloatPropertyValueTuple = Tuple{"key"="FloatPropertyValue_"+(idFloatPropertyValue++).asString(),"value"= eFloatPropertyValue};
		self.add(eFloatPropertyValueTuple);
	}
	//capellacore.EnumerationPropertyValue -> Instantiation
	var idEnumerationPropertyValue = 0;
	for (eEnumerationPropertyValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!EnumerationPropertyValue))){
		var eEnumerationPropertyValueTuple = Tuple{"key"="EnumerationPropertyValue_"+(idEnumerationPropertyValue++).asString(),"value"= eEnumerationPropertyValue};
		self.add(eEnumerationPropertyValueTuple);
	}
	//capellacore.EnumerationPropertyType -> Instantiation
	var idEnumerationPropertyType = 0;
	for (eEnumerationPropertyType in DSL!EObject.all.select(s|s.isTypeOf(DSL!EnumerationPropertyType))){
		var eEnumerationPropertyTypeTuple = Tuple{"key"="EnumerationPropertyType_"+(idEnumerationPropertyType++).asString(),"value"= eEnumerationPropertyType};
		self.add(eEnumerationPropertyTypeTuple);
	}
	//capellacore.EnumerationPropertyLiteral -> Instantiation
	var idEnumerationPropertyLiteral = 0;
	for (eEnumerationPropertyLiteral in DSL!EObject.all.select(s|s.isTypeOf(DSL!EnumerationPropertyLiteral))){
		var eEnumerationPropertyLiteralTuple = Tuple{"key"="EnumerationPropertyLiteral_"+(idEnumerationPropertyLiteral++).asString(),"value"= eEnumerationPropertyLiteral};
		self.add(eEnumerationPropertyLiteralTuple);
	}
	//capellacore.PropertyValueGroup -> Instantiation
	var idPropertyValueGroup = 0;
	for (ePropertyValueGroup in DSL!EObject.all.select(s|s.isTypeOf(DSL!PropertyValueGroup))){
		var ePropertyValueGroupTuple = Tuple{"key"="PropertyValueGroup_"+(idPropertyValueGroup++).asString(),"value"= ePropertyValueGroup};
		self.add(ePropertyValueGroupTuple);
	}
	//capellacore.PropertyValuePkg -> Instantiation
	var idPropertyValuePkg = 0;
	for (ePropertyValuePkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!PropertyValuePkg))){
		var ePropertyValuePkgTuple = Tuple{"key"="PropertyValuePkg_"+(idPropertyValuePkg++).asString(),"value"= ePropertyValuePkg};
		self.add(ePropertyValuePkgTuple);
	}
	//capellacore.AbstractDependenciesPkg -> Instantiation
	var idAbstractDependenciesPkg = 0;
	for (eAbstractDependenciesPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractDependenciesPkg))){
		var eAbstractDependenciesPkgTuple = Tuple{"key"="AbstractDependenciesPkg_"+(idAbstractDependenciesPkg++).asString(),"value"= eAbstractDependenciesPkg};
		self.add(eAbstractDependenciesPkgTuple);
	}
	//modellingcore.ModelElement -> Instantiation
	var idModelElement = 0;
	for (eModelElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModelElement))){
		var eModelElementTuple = Tuple{"key"="ModelElement_"+(idModelElement++).asString(),"value"= eModelElement};
		self.add(eModelElementTuple);
	}
	//modellingcore.AbstractRelationship -> Instantiation
	var idAbstractRelationship = 0;
	for (eAbstractRelationship in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractRelationship))){
		var eAbstractRelationshipTuple = Tuple{"key"="AbstractRelationship_"+(idAbstractRelationship++).asString(),"value"= eAbstractRelationship};
		self.add(eAbstractRelationshipTuple);
	}
	//modellingcore.AbstractNamedElement -> Instantiation
	var idAbstractNamedElement = 0;
	for (eAbstractNamedElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractNamedElement))){
		var eAbstractNamedElementTuple = Tuple{"key"="AbstractNamedElement_"+(idAbstractNamedElement++).asString(),"value"= eAbstractNamedElement};
		self.add(eAbstractNamedElementTuple);
	}
	//modellingcore.InformationsExchanger -> Instantiation
	var idInformationsExchanger = 0;
	for (eInformationsExchanger in DSL!EObject.all.select(s|s.isTypeOf(DSL!InformationsExchanger))){
		var eInformationsExchangerTuple = Tuple{"key"="InformationsExchanger_"+(idInformationsExchanger++).asString(),"value"= eInformationsExchanger};
		self.add(eInformationsExchangerTuple);
	}
	//modellingcore.TraceableElement -> Instantiation
	var idTraceableElement = 0;
	for (eTraceableElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!TraceableElement))){
		var eTraceableElementTuple = Tuple{"key"="TraceableElement_"+(idTraceableElement++).asString(),"value"= eTraceableElement};
		self.add(eTraceableElementTuple);
	}
	//modellingcore.FinalizableElement -> Instantiation
	var idFinalizableElement = 0;
	for (eFinalizableElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!FinalizableElement))){
		var eFinalizableElementTuple = Tuple{"key"="FinalizableElement_"+(idFinalizableElement++).asString(),"value"= eFinalizableElement};
		self.add(eFinalizableElementTuple);
	}
	//modellingcore.PublishableElement -> Instantiation
	var idPublishableElement = 0;
	for (ePublishableElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!PublishableElement))){
		var ePublishableElementTuple = Tuple{"key"="PublishableElement_"+(idPublishableElement++).asString(),"value"= ePublishableElement};
		self.add(ePublishableElementTuple);
	}
	//modellingcore.AbstractType -> Instantiation
	var idAbstractType = 0;
	for (eAbstractType in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractType))){
		var eAbstractTypeTuple = Tuple{"key"="AbstractType_"+(idAbstractType++).asString(),"value"= eAbstractType};
		self.add(eAbstractTypeTuple);
	}
	//modellingcore.AbstractTypedElement -> Instantiation
	var idAbstractTypedElement = 0;
	for (eAbstractTypedElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractTypedElement))){
		var eAbstractTypedElementTuple = Tuple{"key"="AbstractTypedElement_"+(idAbstractTypedElement++).asString(),"value"= eAbstractTypedElement};
		self.add(eAbstractTypedElementTuple);
	}
	//modellingcore.AbstractTrace -> Instantiation
	var idAbstractTrace = 0;
	for (eAbstractTrace in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractTrace))){
		var eAbstractTraceTuple = Tuple{"key"="AbstractTrace_"+(idAbstractTrace++).asString(),"value"= eAbstractTrace};
		self.add(eAbstractTraceTuple);
	}
	//modellingcore.AbstractConstraint -> Instantiation
	var idAbstractConstraint = 0;
	for (eAbstractConstraint in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractConstraint))){
		var eAbstractConstraintTuple = Tuple{"key"="AbstractConstraint_"+(idAbstractConstraint++).asString(),"value"= eAbstractConstraint};
		self.add(eAbstractConstraintTuple);
	}
	//modellingcore.ValueSpecification -> Instantiation
	var idValueSpecification = 0;
	for (eValueSpecification in DSL!EObject.all.select(s|s.isTypeOf(DSL!ValueSpecification))){
		var eValueSpecificationTuple = Tuple{"key"="ValueSpecification_"+(idValueSpecification++).asString(),"value"= eValueSpecification};
		self.add(eValueSpecificationTuple);
	}
	//modellingcore.AbstractParameter -> Instantiation
	var idAbstractParameter = 0;
	for (eAbstractParameter in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractParameter))){
		var eAbstractParameterTuple = Tuple{"key"="AbstractParameter_"+(idAbstractParameter++).asString(),"value"= eAbstractParameter};
		self.add(eAbstractParameterTuple);
	}
	//modellingcore.AbstractParameterSet -> Instantiation
	var idAbstractParameterSet = 0;
	for (eAbstractParameterSet in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractParameterSet))){
		var eAbstractParameterSetTuple = Tuple{"key"="AbstractParameterSet_"+(idAbstractParameterSet++).asString(),"value"= eAbstractParameterSet};
		self.add(eAbstractParameterSetTuple);
	}
	//modellingcore.AbstractInformationFlow -> Instantiation
	var idAbstractInformationFlow = 0;
	for (eAbstractInformationFlow in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractInformationFlow))){
		var eAbstractInformationFlowTuple = Tuple{"key"="AbstractInformationFlow_"+(idAbstractInformationFlow++).asString(),"value"= eAbstractInformationFlow};
		self.add(eAbstractInformationFlowTuple);
	}
	//modellingcore.AbstractExchangeItem -> Instantiation
	var idAbstractExchangeItem = 0;
	for (eAbstractExchangeItem in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractExchangeItem))){
		var eAbstractExchangeItemTuple = Tuple{"key"="AbstractExchangeItem_"+(idAbstractExchangeItem++).asString(),"value"= eAbstractExchangeItem};
		self.add(eAbstractExchangeItemTuple);
	}
	//modellingcore.IState -> Instantiation
	var idIState = 0;
	for (eIState in DSL!EObject.all.select(s|s.isTypeOf(DSL!IState))){
		var eIStateTuple = Tuple{"key"="IState_"+(idIState++).asString(),"value"= eIState};
		self.add(eIStateTuple);
	}
	//emde.Element -> Instantiation
	var idElement = 0;
	for (eElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!Element))){
		var eElementTuple = Tuple{"key"="Element_"+(idElement++).asString(),"value"= eElement};
		self.add(eElementTuple);
	}
	//emde.ExtensibleElement -> Instantiation
	var idExtensibleElement = 0;
	for (eExtensibleElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExtensibleElement))){
		var eExtensibleElementTuple = Tuple{"key"="ExtensibleElement_"+(idExtensibleElement++).asString(),"value"= eExtensibleElement};
		self.add(eExtensibleElementTuple);
	}
	//emde.ElementExtension -> Instantiation
	var idElementExtension = 0;
	for (eElementExtension in DSL!EObject.all.select(s|s.isTypeOf(DSL!ElementExtension))){
		var eElementExtensionTuple = Tuple{"key"="ElementExtension_"+(idElementExtension++).asString(),"value"= eElementExtension};
		self.add(eElementExtensionTuple);
	}
	//oa.OperationalAnalysis -> Instantiation
	var idOperationalAnalysis = 0;
	for (eOperationalAnalysis in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalAnalysis))){
		var eOperationalAnalysisTuple = Tuple{"key"="OperationalAnalysis_"+(idOperationalAnalysis++).asString(),"value"= eOperationalAnalysis};
		self.add(eOperationalAnalysisTuple);
	}
	//oa.OperationalScenario -> Instantiation
	var idOperationalScenario = 0;
	for (eOperationalScenario in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalScenario))){
		var eOperationalScenarioTuple = Tuple{"key"="OperationalScenario_"+(idOperationalScenario++).asString(),"value"= eOperationalScenario};
		self.add(eOperationalScenarioTuple);
	}
	//oa.OperationalActivityPkg -> Instantiation
	var idOperationalActivityPkg = 0;
	for (eOperationalActivityPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalActivityPkg))){
		var eOperationalActivityPkgTuple = Tuple{"key"="OperationalActivityPkg_"+(idOperationalActivityPkg++).asString(),"value"= eOperationalActivityPkg};
		self.add(eOperationalActivityPkgTuple);
	}
	//oa.OperationalActivity -> Instantiation
	var idOperationalActivity = 0;
	for (eOperationalActivity in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalActivity))){
		var eOperationalActivityTuple = Tuple{"key"="OperationalActivity_"+(idOperationalActivity++).asString(),"value"= eOperationalActivity};
		self.add(eOperationalActivityTuple);
	}
	//oa.OperationalProcess -> Instantiation
	var idOperationalProcess = 0;
	for (eOperationalProcess in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalProcess))){
		var eOperationalProcessTuple = Tuple{"key"="OperationalProcess_"+(idOperationalProcess++).asString(),"value"= eOperationalProcess};
		self.add(eOperationalProcessTuple);
	}
	//oa.Swimlane -> Instantiation
	var idSwimlane = 0;
	for (eSwimlane in DSL!EObject.all.select(s|s.isTypeOf(DSL!Swimlane))){
		var eSwimlaneTuple = Tuple{"key"="Swimlane_"+(idSwimlane++).asString(),"value"= eSwimlane};
		self.add(eSwimlaneTuple);
	}
	//oa.OperationalCapabilityPkg -> Instantiation
	var idOperationalCapabilityPkg = 0;
	for (eOperationalCapabilityPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalCapabilityPkg))){
		var eOperationalCapabilityPkgTuple = Tuple{"key"="OperationalCapabilityPkg_"+(idOperationalCapabilityPkg++).asString(),"value"= eOperationalCapabilityPkg};
		self.add(eOperationalCapabilityPkgTuple);
	}
	//oa.OperationalCapability -> Instantiation
	var idOperationalCapability = 0;
	for (eOperationalCapability in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalCapability))){
		var eOperationalCapabilityTuple = Tuple{"key"="OperationalCapability_"+(idOperationalCapability++).asString(),"value"= eOperationalCapability};
		self.add(eOperationalCapabilityTuple);
	}
	//oa.ActivityAllocation -> Instantiation
	var idActivityAllocation = 0;
	for (eActivityAllocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!ActivityAllocation))){
		var eActivityAllocationTuple = Tuple{"key"="ActivityAllocation_"+(idActivityAllocation++).asString(),"value"= eActivityAllocation};
		self.add(eActivityAllocationTuple);
	}
	//oa.RolePkg -> Instantiation
	var idRolePkg = 0;
	for (eRolePkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!RolePkg))){
		var eRolePkgTuple = Tuple{"key"="RolePkg_"+(idRolePkg++).asString(),"value"= eRolePkg};
		self.add(eRolePkgTuple);
	}
	//oa.Role -> Instantiation
	var idRole = 0;
	for (eRole in DSL!EObject.all.select(s|s.isTypeOf(DSL!Role))){
		var eRoleTuple = Tuple{"key"="Role_"+(idRole++).asString(),"value"= eRole};
		self.add(eRoleTuple);
	}
	//oa.RoleAssemblyUsage -> Instantiation
	var idRoleAssemblyUsage = 0;
	for (eRoleAssemblyUsage in DSL!EObject.all.select(s|s.isTypeOf(DSL!RoleAssemblyUsage))){
		var eRoleAssemblyUsageTuple = Tuple{"key"="RoleAssemblyUsage_"+(idRoleAssemblyUsage++).asString(),"value"= eRoleAssemblyUsage};
		self.add(eRoleAssemblyUsageTuple);
	}
	//oa.RoleAllocation -> Instantiation
	var idRoleAllocation = 0;
	for (eRoleAllocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!RoleAllocation))){
		var eRoleAllocationTuple = Tuple{"key"="RoleAllocation_"+(idRoleAllocation++).asString(),"value"= eRoleAllocation};
		self.add(eRoleAllocationTuple);
	}
	//oa.EntityPkg -> Instantiation
	var idEntityPkg = 0;
	for (eEntityPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!EntityPkg))){
		var eEntityPkgTuple = Tuple{"key"="EntityPkg_"+(idEntityPkg++).asString(),"value"= eEntityPkg};
		self.add(eEntityPkgTuple);
	}
	//oa.Entity -> Instantiation
	var idEntity = 0;
	for (eEntity in DSL!EObject.all.select(s|s.isTypeOf(DSL!Entity))){
		var eEntityTuple = Tuple{"key"="Entity_"+(idEntity++).asString(),"value"= eEntity};
		self.add(eEntityTuple);
	}
	//oa.ConceptPkg -> Instantiation
	var idConceptPkg = 0;
	for (eConceptPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!ConceptPkg))){
		var eConceptPkgTuple = Tuple{"key"="ConceptPkg_"+(idConceptPkg++).asString(),"value"= eConceptPkg};
		self.add(eConceptPkgTuple);
	}
	//oa.Concept -> Instantiation
	var idConcept = 0;
	for (eConcept in DSL!EObject.all.select(s|s.isTypeOf(DSL!Concept))){
		var eConceptTuple = Tuple{"key"="Concept_"+(idConcept++).asString(),"value"= eConcept};
		self.add(eConceptTuple);
	}
	//oa.ConceptCompliance -> Instantiation
	var idConceptCompliance = 0;
	for (eConceptCompliance in DSL!EObject.all.select(s|s.isTypeOf(DSL!ConceptCompliance))){
		var eConceptComplianceTuple = Tuple{"key"="ConceptCompliance_"+(idConceptCompliance++).asString(),"value"= eConceptCompliance};
		self.add(eConceptComplianceTuple);
	}
	//oa.ItemInConcept -> Instantiation
	var idItemInConcept = 0;
	for (eItemInConcept in DSL!EObject.all.select(s|s.isTypeOf(DSL!ItemInConcept))){
		var eItemInConceptTuple = Tuple{"key"="ItemInConcept_"+(idItemInConcept++).asString(),"value"= eItemInConcept};
		self.add(eItemInConceptTuple);
	}
	//oa.AbstractConceptItem -> Instantiation
	var idAbstractConceptItem = 0;
	for (eAbstractConceptItem in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractConceptItem))){
		var eAbstractConceptItemTuple = Tuple{"key"="AbstractConceptItem_"+(idAbstractConceptItem++).asString(),"value"= eAbstractConceptItem};
		self.add(eAbstractConceptItemTuple);
	}
	//oa.CommunityOfInterest -> Instantiation
	var idCommunityOfInterest = 0;
	for (eCommunityOfInterest in DSL!EObject.all.select(s|s.isTypeOf(DSL!CommunityOfInterest))){
		var eCommunityOfInterestTuple = Tuple{"key"="CommunityOfInterest_"+(idCommunityOfInterest++).asString(),"value"= eCommunityOfInterest};
		self.add(eCommunityOfInterestTuple);
	}
	//oa.CommunityOfInterestComposition -> Instantiation
	var idCommunityOfInterestComposition = 0;
	for (eCommunityOfInterestComposition in DSL!EObject.all.select(s|s.isTypeOf(DSL!CommunityOfInterestComposition))){
		var eCommunityOfInterestCompositionTuple = Tuple{"key"="CommunityOfInterestComposition_"+(idCommunityOfInterestComposition++).asString(),"value"= eCommunityOfInterestComposition};
		self.add(eCommunityOfInterestCompositionTuple);
	}
	//oa.OrganisationalUnit -> Instantiation
	var idOrganisationalUnit = 0;
	for (eOrganisationalUnit in DSL!EObject.all.select(s|s.isTypeOf(DSL!OrganisationalUnit))){
		var eOrganisationalUnitTuple = Tuple{"key"="OrganisationalUnit_"+(idOrganisationalUnit++).asString(),"value"= eOrganisationalUnit};
		self.add(eOrganisationalUnitTuple);
	}
	//oa.OrganisationalUnitComposition -> Instantiation
	var idOrganisationalUnitComposition = 0;
	for (eOrganisationalUnitComposition in DSL!EObject.all.select(s|s.isTypeOf(DSL!OrganisationalUnitComposition))){
		var eOrganisationalUnitCompositionTuple = Tuple{"key"="OrganisationalUnitComposition_"+(idOrganisationalUnitComposition++).asString(),"value"= eOrganisationalUnitComposition};
		self.add(eOrganisationalUnitCompositionTuple);
	}
	//oa.Location -> Instantiation
	var idLocation = 0;
	for (eLocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!Location))){
		var eLocationTuple = Tuple{"key"="Location_"+(idLocation++).asString(),"value"= eLocation};
		self.add(eLocationTuple);
	}
	//oa.CapabilityConfiguration -> Instantiation
	var idCapabilityConfiguration = 0;
	for (eCapabilityConfiguration in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapabilityConfiguration))){
		var eCapabilityConfigurationTuple = Tuple{"key"="CapabilityConfiguration_"+(idCapabilityConfiguration++).asString(),"value"= eCapabilityConfiguration};
		self.add(eCapabilityConfigurationTuple);
	}
	//oa.CommunicationMean -> Instantiation
	var idCommunicationMean = 0;
	for (eCommunicationMean in DSL!EObject.all.select(s|s.isTypeOf(DSL!CommunicationMean))){
		var eCommunicationMeanTuple = Tuple{"key"="CommunicationMean_"+(idCommunicationMean++).asString(),"value"= eCommunicationMean};
		self.add(eCommunicationMeanTuple);
	}
	//oa.EntityOperationalCapabilityInvolvement -> Instantiation
	var idEntityOperationalCapabilityInvolvement = 0;
	for (eEntityOperationalCapabilityInvolvement in DSL!EObject.all.select(s|s.isTypeOf(DSL!EntityOperationalCapabilityInvolvement))){
		var eEntityOperationalCapabilityInvolvementTuple = Tuple{"key"="EntityOperationalCapabilityInvolvement_"+(idEntityOperationalCapabilityInvolvement++).asString(),"value"= eEntityOperationalCapabilityInvolvement};
		self.add(eEntityOperationalCapabilityInvolvementTuple);
	}
	//ctx.SystemAnalysis -> Instantiation
	var idSystemAnalysis = 0;
	for (eSystemAnalysis in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemAnalysis))){
		var eSystemAnalysisTuple = Tuple{"key"="SystemAnalysis_"+(idSystemAnalysis++).asString(),"value"= eSystemAnalysis};
		self.add(eSystemAnalysisTuple);
	}
	//ctx.SystemFunction -> Instantiation
	var idSystemFunction = 0;
	for (eSystemFunction in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemFunction))){
		var eSystemFunctionTuple = Tuple{"key"="SystemFunction_"+(idSystemFunction++).asString(),"value"= eSystemFunction};
		self.add(eSystemFunctionTuple);
	}
	//ctx.SystemFunctionPkg -> Instantiation
	var idSystemFunctionPkg = 0;
	for (eSystemFunctionPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemFunctionPkg))){
		var eSystemFunctionPkgTuple = Tuple{"key"="SystemFunctionPkg_"+(idSystemFunctionPkg++).asString(),"value"= eSystemFunctionPkg};
		self.add(eSystemFunctionPkgTuple);
	}
	//ctx.SystemCommunicationHook -> Instantiation
	var idSystemCommunicationHook = 0;
	for (eSystemCommunicationHook in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemCommunicationHook))){
		var eSystemCommunicationHookTuple = Tuple{"key"="SystemCommunicationHook_"+(idSystemCommunicationHook++).asString(),"value"= eSystemCommunicationHook};
		self.add(eSystemCommunicationHookTuple);
	}
	//ctx.SystemCommunication -> Instantiation
	var idSystemCommunication = 0;
	for (eSystemCommunication in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemCommunication))){
		var eSystemCommunicationTuple = Tuple{"key"="SystemCommunication_"+(idSystemCommunication++).asString(),"value"= eSystemCommunication};
		self.add(eSystemCommunicationTuple);
	}
	//ctx.CapabilityInvolvement -> Instantiation
	var idCapabilityInvolvement = 0;
	for (eCapabilityInvolvement in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapabilityInvolvement))){
		var eCapabilityInvolvementTuple = Tuple{"key"="CapabilityInvolvement_"+(idCapabilityInvolvement++).asString(),"value"= eCapabilityInvolvement};
		self.add(eCapabilityInvolvementTuple);
	}
	//ctx.MissionInvolvement -> Instantiation
	var idMissionInvolvement = 0;
	for (eMissionInvolvement in DSL!EObject.all.select(s|s.isTypeOf(DSL!MissionInvolvement))){
		var eMissionInvolvementTuple = Tuple{"key"="MissionInvolvement_"+(idMissionInvolvement++).asString(),"value"= eMissionInvolvement};
		self.add(eMissionInvolvementTuple);
	}
	//ctx.Mission -> Instantiation
	var idMission = 0;
	for (eMission in DSL!EObject.all.select(s|s.isTypeOf(DSL!Mission))){
		var eMissionTuple = Tuple{"key"="Mission_"+(idMission++).asString(),"value"= eMission};
		self.add(eMissionTuple);
	}
	//ctx.MissionPkg -> Instantiation
	var idMissionPkg = 0;
	for (eMissionPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!MissionPkg))){
		var eMissionPkgTuple = Tuple{"key"="MissionPkg_"+(idMissionPkg++).asString(),"value"= eMissionPkg};
		self.add(eMissionPkgTuple);
	}
	//ctx.Capability -> Instantiation
	var idCapability = 0;
	for (eCapability in DSL!EObject.all.select(s|s.isTypeOf(DSL!Capability))){
		var eCapabilityTuple = Tuple{"key"="Capability_"+(idCapability++).asString(),"value"= eCapability};
		self.add(eCapabilityTuple);
	}
	//ctx.CapabilityExploitation -> Instantiation
	var idCapabilityExploitation = 0;
	for (eCapabilityExploitation in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapabilityExploitation))){
		var eCapabilityExploitationTuple = Tuple{"key"="CapabilityExploitation_"+(idCapabilityExploitation++).asString(),"value"= eCapabilityExploitation};
		self.add(eCapabilityExploitationTuple);
	}
	//ctx.CapabilityPkg -> Instantiation
	var idCapabilityPkg = 0;
	for (eCapabilityPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapabilityPkg))){
		var eCapabilityPkgTuple = Tuple{"key"="CapabilityPkg_"+(idCapabilityPkg++).asString(),"value"= eCapabilityPkg};
		self.add(eCapabilityPkgTuple);
	}
	//ctx.OperationalAnalysisRealization -> Instantiation
	var idOperationalAnalysisRealization = 0;
	for (eOperationalAnalysisRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalAnalysisRealization))){
		var eOperationalAnalysisRealizationTuple = Tuple{"key"="OperationalAnalysisRealization_"+(idOperationalAnalysisRealization++).asString(),"value"= eOperationalAnalysisRealization};
		self.add(eOperationalAnalysisRealizationTuple);
	}
	//ctx.SystemComponentPkg -> Instantiation
	var idSystemComponentPkg = 0;
	for (eSystemComponentPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemComponentPkg))){
		var eSystemComponentPkgTuple = Tuple{"key"="SystemComponentPkg_"+(idSystemComponentPkg++).asString(),"value"= eSystemComponentPkg};
		self.add(eSystemComponentPkgTuple);
	}
	//ctx.SystemComponent -> Instantiation
	var idSystemComponent = 0;
	for (eSystemComponent in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemComponent))){
		var eSystemComponentTuple = Tuple{"key"="SystemComponent_"+(idSystemComponent++).asString(),"value"= eSystemComponent};
		self.add(eSystemComponentTuple);
	}
	//la.LogicalArchitecturePkg -> Instantiation
	var idLogicalArchitecturePkg = 0;
	for (eLogicalArchitecturePkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalArchitecturePkg))){
		var eLogicalArchitecturePkgTuple = Tuple{"key"="LogicalArchitecturePkg_"+(idLogicalArchitecturePkg++).asString(),"value"= eLogicalArchitecturePkg};
		self.add(eLogicalArchitecturePkgTuple);
	}
	//la.LogicalArchitecture -> Instantiation
	var idLogicalArchitecture = 0;
	for (eLogicalArchitecture in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalArchitecture))){
		var eLogicalArchitectureTuple = Tuple{"key"="LogicalArchitecture_"+(idLogicalArchitecture++).asString(),"value"= eLogicalArchitecture};
		self.add(eLogicalArchitectureTuple);
	}
	//la.LogicalFunction -> Instantiation
	var idLogicalFunction = 0;
	for (eLogicalFunction in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalFunction))){
		var eLogicalFunctionTuple = Tuple{"key"="LogicalFunction_"+(idLogicalFunction++).asString(),"value"= eLogicalFunction};
		self.add(eLogicalFunctionTuple);
	}
	//la.LogicalFunctionPkg -> Instantiation
	var idLogicalFunctionPkg = 0;
	for (eLogicalFunctionPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalFunctionPkg))){
		var eLogicalFunctionPkgTuple = Tuple{"key"="LogicalFunctionPkg_"+(idLogicalFunctionPkg++).asString(),"value"= eLogicalFunctionPkg};
		self.add(eLogicalFunctionPkgTuple);
	}
	//la.LogicalComponent -> Instantiation
	var idLogicalComponent = 0;
	for (eLogicalComponent in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalComponent))){
		var eLogicalComponentTuple = Tuple{"key"="LogicalComponent_"+(idLogicalComponent++).asString(),"value"= eLogicalComponent};
		self.add(eLogicalComponentTuple);
	}
	//la.LogicalComponentPkg -> Instantiation
	var idLogicalComponentPkg = 0;
	for (eLogicalComponentPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalComponentPkg))){
		var eLogicalComponentPkgTuple = Tuple{"key"="LogicalComponentPkg_"+(idLogicalComponentPkg++).asString(),"value"= eLogicalComponentPkg};
		self.add(eLogicalComponentPkgTuple);
	}
	//la.CapabilityRealization -> Instantiation
	var idCapabilityRealization = 0;
	for (eCapabilityRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapabilityRealization))){
		var eCapabilityRealizationTuple = Tuple{"key"="CapabilityRealization_"+(idCapabilityRealization++).asString(),"value"= eCapabilityRealization};
		self.add(eCapabilityRealizationTuple);
	}
	//la.CapabilityRealizationPkg -> Instantiation
	var idCapabilityRealizationPkg = 0;
	for (eCapabilityRealizationPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapabilityRealizationPkg))){
		var eCapabilityRealizationPkgTuple = Tuple{"key"="CapabilityRealizationPkg_"+(idCapabilityRealizationPkg++).asString(),"value"= eCapabilityRealizationPkg};
		self.add(eCapabilityRealizationPkgTuple);
	}
	//la.SystemAnalysisRealization -> Instantiation
	var idSystemAnalysisRealization = 0;
	for (eSystemAnalysisRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemAnalysisRealization))){
		var eSystemAnalysisRealizationTuple = Tuple{"key"="SystemAnalysisRealization_"+(idSystemAnalysisRealization++).asString(),"value"= eSystemAnalysisRealization};
		self.add(eSystemAnalysisRealizationTuple);
	}
	//la.ContextInterfaceRealization -> Instantiation
	var idContextInterfaceRealization = 0;
	for (eContextInterfaceRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!ContextInterfaceRealization))){
		var eContextInterfaceRealizationTuple = Tuple{"key"="ContextInterfaceRealization_"+(idContextInterfaceRealization++).asString(),"value"= eContextInterfaceRealization};
		self.add(eContextInterfaceRealizationTuple);
	}
	//pa.PhysicalArchitecturePkg -> Instantiation
	var idPhysicalArchitecturePkg = 0;
	for (ePhysicalArchitecturePkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalArchitecturePkg))){
		var ePhysicalArchitecturePkgTuple = Tuple{"key"="PhysicalArchitecturePkg_"+(idPhysicalArchitecturePkg++).asString(),"value"= ePhysicalArchitecturePkg};
		self.add(ePhysicalArchitecturePkgTuple);
	}
	//pa.PhysicalArchitecture -> Instantiation
	var idPhysicalArchitecture = 0;
	for (ePhysicalArchitecture in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalArchitecture))){
		var ePhysicalArchitectureTuple = Tuple{"key"="PhysicalArchitecture_"+(idPhysicalArchitecture++).asString(),"value"= ePhysicalArchitecture};
		self.add(ePhysicalArchitectureTuple);
	}
	//pa.PhysicalFunction -> Instantiation
	var idPhysicalFunction = 0;
	for (ePhysicalFunction in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalFunction))){
		var ePhysicalFunctionTuple = Tuple{"key"="PhysicalFunction_"+(idPhysicalFunction++).asString(),"value"= ePhysicalFunction};
		self.add(ePhysicalFunctionTuple);
	}
	//pa.PhysicalFunctionPkg -> Instantiation
	var idPhysicalFunctionPkg = 0;
	for (ePhysicalFunctionPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalFunctionPkg))){
		var ePhysicalFunctionPkgTuple = Tuple{"key"="PhysicalFunctionPkg_"+(idPhysicalFunctionPkg++).asString(),"value"= ePhysicalFunctionPkg};
		self.add(ePhysicalFunctionPkgTuple);
	}
	//pa.PhysicalComponent -> Instantiation
	var idPhysicalComponent = 0;
	for (ePhysicalComponent in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalComponent))){
		var ePhysicalComponentTuple = Tuple{"key"="PhysicalComponent_"+(idPhysicalComponent++).asString(),"value"= ePhysicalComponent};
		self.add(ePhysicalComponentTuple);
	}
	//pa.PhysicalComponentPkg -> Instantiation
	var idPhysicalComponentPkg = 0;
	for (ePhysicalComponentPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalComponentPkg))){
		var ePhysicalComponentPkgTuple = Tuple{"key"="PhysicalComponentPkg_"+(idPhysicalComponentPkg++).asString(),"value"= ePhysicalComponentPkg};
		self.add(ePhysicalComponentPkgTuple);
	}
	//pa.PhysicalNode -> Instantiation
	var idPhysicalNode = 0;
	for (ePhysicalNode in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalNode))){
		var ePhysicalNodeTuple = Tuple{"key"="PhysicalNode_"+(idPhysicalNode++).asString(),"value"= ePhysicalNode};
		self.add(ePhysicalNodeTuple);
	}
	//pa.LogicalArchitectureRealization -> Instantiation
	var idLogicalArchitectureRealization = 0;
	for (eLogicalArchitectureRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalArchitectureRealization))){
		var eLogicalArchitectureRealizationTuple = Tuple{"key"="LogicalArchitectureRealization_"+(idLogicalArchitectureRealization++).asString(),"value"= eLogicalArchitectureRealization};
		self.add(eLogicalArchitectureRealizationTuple);
	}
	//pa.LogicalInterfaceRealization -> Instantiation
	var idLogicalInterfaceRealization = 0;
	for (eLogicalInterfaceRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalInterfaceRealization))){
		var eLogicalInterfaceRealizationTuple = Tuple{"key"="LogicalInterfaceRealization_"+(idLogicalInterfaceRealization++).asString(),"value"= eLogicalInterfaceRealization};
		self.add(eLogicalInterfaceRealizationTuple);
	}
	//deployment.ComponentInstance -> Instantiation
	var idComponentInstance = 0;
	for (eComponentInstance in DSL!EObject.all.select(s|s.isTypeOf(DSL!ComponentInstance))){
		var eComponentInstanceTuple = Tuple{"key"="ComponentInstance_"+(idComponentInstance++).asString(),"value"= eComponentInstance};
		self.add(eComponentInstanceTuple);
	}
	//deployment.ConnectionInstance -> Instantiation
	var idConnectionInstance = 0;
	for (eConnectionInstance in DSL!EObject.all.select(s|s.isTypeOf(DSL!ConnectionInstance))){
		var eConnectionInstanceTuple = Tuple{"key"="ConnectionInstance_"+(idConnectionInstance++).asString(),"value"= eConnectionInstance};
		self.add(eConnectionInstanceTuple);
	}
	//deployment.DeploymentAspect -> Instantiation
	var idDeploymentAspect = 0;
	for (eDeploymentAspect in DSL!EObject.all.select(s|s.isTypeOf(DSL!DeploymentAspect))){
		var eDeploymentAspectTuple = Tuple{"key"="DeploymentAspect_"+(idDeploymentAspect++).asString(),"value"= eDeploymentAspect};
		self.add(eDeploymentAspectTuple);
	}
	//deployment.DeploymentConfiguration -> Instantiation
	var idDeploymentConfiguration = 0;
	for (eDeploymentConfiguration in DSL!EObject.all.select(s|s.isTypeOf(DSL!DeploymentConfiguration))){
		var eDeploymentConfigurationTuple = Tuple{"key"="DeploymentConfiguration_"+(idDeploymentConfiguration++).asString(),"value"= eDeploymentConfiguration};
		self.add(eDeploymentConfigurationTuple);
	}
	//deployment.InstanceDeploymentLink -> Instantiation
	var idInstanceDeploymentLink = 0;
	for (eInstanceDeploymentLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!InstanceDeploymentLink))){
		var eInstanceDeploymentLinkTuple = Tuple{"key"="InstanceDeploymentLink_"+(idInstanceDeploymentLink++).asString(),"value"= eInstanceDeploymentLink};
		self.add(eInstanceDeploymentLinkTuple);
	}
	//deployment.PartDeploymentLink -> Instantiation
	var idPartDeploymentLink = 0;
	for (ePartDeploymentLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!PartDeploymentLink))){
		var ePartDeploymentLinkTuple = Tuple{"key"="PartDeploymentLink_"+(idPartDeploymentLink++).asString(),"value"= ePartDeploymentLink};
		self.add(ePartDeploymentLinkTuple);
	}
	//deployment.AbstractPhysicalInstance -> Instantiation
	var idAbstractPhysicalInstance = 0;
	for (eAbstractPhysicalInstance in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractPhysicalInstance))){
		var eAbstractPhysicalInstanceTuple = Tuple{"key"="AbstractPhysicalInstance_"+(idAbstractPhysicalInstance++).asString(),"value"= eAbstractPhysicalInstance};
		self.add(eAbstractPhysicalInstanceTuple);
	}
	//deployment.PortInstance -> Instantiation
	var idPortInstance = 0;
	for (ePortInstance in DSL!EObject.all.select(s|s.isTypeOf(DSL!PortInstance))){
		var ePortInstanceTuple = Tuple{"key"="PortInstance_"+(idPortInstance++).asString(),"value"= ePortInstance};
		self.add(ePortInstanceTuple);
	}
	//deployment.TypeDeploymentLink -> Instantiation
	var idTypeDeploymentLink = 0;
	for (eTypeDeploymentLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!TypeDeploymentLink))){
		var eTypeDeploymentLinkTuple = Tuple{"key"="TypeDeploymentLink_"+(idTypeDeploymentLink++).asString(),"value"= eTypeDeploymentLink};
		self.add(eTypeDeploymentLinkTuple);
	}
	//epbs.EPBSArchitecturePkg -> Instantiation
	var idEPBSArchitecturePkg = 0;
	for (eEPBSArchitecturePkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!EPBSArchitecturePkg))){
		var eEPBSArchitecturePkgTuple = Tuple{"key"="EPBSArchitecturePkg_"+(idEPBSArchitecturePkg++).asString(),"value"= eEPBSArchitecturePkg};
		self.add(eEPBSArchitecturePkgTuple);
	}
	//epbs.EPBSArchitecture -> Instantiation
	var idEPBSArchitecture = 0;
	for (eEPBSArchitecture in DSL!EObject.all.select(s|s.isTypeOf(DSL!EPBSArchitecture))){
		var eEPBSArchitectureTuple = Tuple{"key"="EPBSArchitecture_"+(idEPBSArchitecture++).asString(),"value"= eEPBSArchitecture};
		self.add(eEPBSArchitectureTuple);
	}
	//epbs.ConfigurationItemPkg -> Instantiation
	var idConfigurationItemPkg = 0;
	for (eConfigurationItemPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!ConfigurationItemPkg))){
		var eConfigurationItemPkgTuple = Tuple{"key"="ConfigurationItemPkg_"+(idConfigurationItemPkg++).asString(),"value"= eConfigurationItemPkg};
		self.add(eConfigurationItemPkgTuple);
	}
	//epbs.ConfigurationItem -> Instantiation
	var idConfigurationItem = 0;
	for (eConfigurationItem in DSL!EObject.all.select(s|s.isTypeOf(DSL!ConfigurationItem))){
		var eConfigurationItemTuple = Tuple{"key"="ConfigurationItem_"+(idConfigurationItem++).asString(),"value"= eConfigurationItem};
		self.add(eConfigurationItemTuple);
	}
	//epbs.PhysicalArchitectureRealization -> Instantiation
	var idPhysicalArchitectureRealization = 0;
	for (ePhysicalArchitectureRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalArchitectureRealization))){
		var ePhysicalArchitectureRealizationTuple = Tuple{"key"="PhysicalArchitectureRealization_"+(idPhysicalArchitectureRealization++).asString(),"value"= ePhysicalArchitectureRealization};
		self.add(ePhysicalArchitectureRealizationTuple);
	}
	//epbs.PhysicalArtifactRealization -> Instantiation
	var idPhysicalArtifactRealization = 0;
	for (ePhysicalArtifactRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalArtifactRealization))){
		var ePhysicalArtifactRealizationTuple = Tuple{"key"="PhysicalArtifactRealization_"+(idPhysicalArtifactRealization++).asString(),"value"= ePhysicalArtifactRealization};
		self.add(ePhysicalArtifactRealizationTuple);
	}
	//sharedmodel.SharedPkg -> Instantiation
	var idSharedPkg = 0;
	for (eSharedPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!SharedPkg))){
		var eSharedPkgTuple = Tuple{"key"="SharedPkg_"+(idSharedPkg++).asString(),"value"= eSharedPkg};
		self.add(eSharedPkgTuple);
	}
	//sharedmodel.GenericPkg -> Instantiation
	var idGenericPkg = 0;
	for (eGenericPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!GenericPkg))){
		var eGenericPkgTuple = Tuple{"key"="GenericPkg_"+(idGenericPkg++).asString(),"value"= eGenericPkg};
		self.add(eGenericPkgTuple);
	}
	//activity.AbstractActivity -> Instantiation
	var idAbstractActivity = 0;
	for (eAbstractActivity in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractActivity))){
		var eAbstractActivityTuple = Tuple{"key"="AbstractActivity_"+(idAbstractActivity++).asString(),"value"= eAbstractActivity};
		self.add(eAbstractActivityTuple);
	}
	//activity.ExceptionHandler -> Instantiation
	var idExceptionHandler = 0;
	for (eExceptionHandler in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExceptionHandler))){
		var eExceptionHandlerTuple = Tuple{"key"="ExceptionHandler_"+(idExceptionHandler++).asString(),"value"= eExceptionHandler};
		self.add(eExceptionHandlerTuple);
	}
	//activity.ActivityGroup -> Instantiation
	var idActivityGroup = 0;
	for (eActivityGroup in DSL!EObject.all.select(s|s.isTypeOf(DSL!ActivityGroup))){
		var eActivityGroupTuple = Tuple{"key"="ActivityGroup_"+(idActivityGroup++).asString(),"value"= eActivityGroup};
		self.add(eActivityGroupTuple);
	}
	//activity.InterruptibleActivityRegion -> Instantiation
	var idInterruptibleActivityRegion = 0;
	for (eInterruptibleActivityRegion in DSL!EObject.all.select(s|s.isTypeOf(DSL!InterruptibleActivityRegion))){
		var eInterruptibleActivityRegionTuple = Tuple{"key"="InterruptibleActivityRegion_"+(idInterruptibleActivityRegion++).asString(),"value"= eInterruptibleActivityRegion};
		self.add(eInterruptibleActivityRegionTuple);
	}
	//activity.ActivityEdge -> Instantiation
	var idActivityEdge = 0;
	for (eActivityEdge in DSL!EObject.all.select(s|s.isTypeOf(DSL!ActivityEdge))){
		var eActivityEdgeTuple = Tuple{"key"="ActivityEdge_"+(idActivityEdge++).asString(),"value"= eActivityEdge};
		self.add(eActivityEdgeTuple);
	}
	//activity.ControlFlow -> Instantiation
	var idControlFlow = 0;
	for (eControlFlow in DSL!EObject.all.select(s|s.isTypeOf(DSL!ControlFlow))){
		var eControlFlowTuple = Tuple{"key"="ControlFlow_"+(idControlFlow++).asString(),"value"= eControlFlow};
		self.add(eControlFlowTuple);
	}
	//activity.ObjectFlow -> Instantiation
	var idObjectFlow = 0;
	for (eObjectFlow in DSL!EObject.all.select(s|s.isTypeOf(DSL!ObjectFlow))){
		var eObjectFlowTuple = Tuple{"key"="ObjectFlow_"+(idObjectFlow++).asString(),"value"= eObjectFlow};
		self.add(eObjectFlowTuple);
	}
	//activity.ActivityPartition -> Instantiation
	var idActivityPartition = 0;
	for (eActivityPartition in DSL!EObject.all.select(s|s.isTypeOf(DSL!ActivityPartition))){
		var eActivityPartitionTuple = Tuple{"key"="ActivityPartition_"+(idActivityPartition++).asString(),"value"= eActivityPartition};
		self.add(eActivityPartitionTuple);
	}
	//activity.ActivityExchange -> Instantiation
	var idActivityExchange = 0;
	for (eActivityExchange in DSL!EObject.all.select(s|s.isTypeOf(DSL!ActivityExchange))){
		var eActivityExchangeTuple = Tuple{"key"="ActivityExchange_"+(idActivityExchange++).asString(),"value"= eActivityExchange};
		self.add(eActivityExchangeTuple);
	}
	//activity.ActivityNode -> Instantiation
	var idActivityNode = 0;
	for (eActivityNode in DSL!EObject.all.select(s|s.isTypeOf(DSL!ActivityNode))){
		var eActivityNodeTuple = Tuple{"key"="ActivityNode_"+(idActivityNode++).asString(),"value"= eActivityNode};
		self.add(eActivityNodeTuple);
	}
	//activity.ExecutableNode -> Instantiation
	var idExecutableNode = 0;
	for (eExecutableNode in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExecutableNode))){
		var eExecutableNodeTuple = Tuple{"key"="ExecutableNode_"+(idExecutableNode++).asString(),"value"= eExecutableNode};
		self.add(eExecutableNodeTuple);
	}
	//activity.StructuredActivityNode -> Instantiation
	var idStructuredActivityNode = 0;
	for (eStructuredActivityNode in DSL!EObject.all.select(s|s.isTypeOf(DSL!StructuredActivityNode))){
		var eStructuredActivityNodeTuple = Tuple{"key"="StructuredActivityNode_"+(idStructuredActivityNode++).asString(),"value"= eStructuredActivityNode};
		self.add(eStructuredActivityNodeTuple);
	}
	//activity.AbstractAction -> Instantiation
	var idAbstractAction = 0;
	for (eAbstractAction in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractAction))){
		var eAbstractActionTuple = Tuple{"key"="AbstractAction_"+(idAbstractAction++).asString(),"value"= eAbstractAction};
		self.add(eAbstractActionTuple);
	}
	//activity.AcceptEventAction -> Instantiation
	var idAcceptEventAction = 0;
	for (eAcceptEventAction in DSL!EObject.all.select(s|s.isTypeOf(DSL!AcceptEventAction))){
		var eAcceptEventActionTuple = Tuple{"key"="AcceptEventAction_"+(idAcceptEventAction++).asString(),"value"= eAcceptEventAction};
		self.add(eAcceptEventActionTuple);
	}
	//activity.InvocationAction -> Instantiation
	var idInvocationAction = 0;
	for (eInvocationAction in DSL!EObject.all.select(s|s.isTypeOf(DSL!InvocationAction))){
		var eInvocationActionTuple = Tuple{"key"="InvocationAction_"+(idInvocationAction++).asString(),"value"= eInvocationAction};
		self.add(eInvocationActionTuple);
	}
	//activity.SendSignalAction -> Instantiation
	var idSendSignalAction = 0;
	for (eSendSignalAction in DSL!EObject.all.select(s|s.isTypeOf(DSL!SendSignalAction))){
		var eSendSignalActionTuple = Tuple{"key"="SendSignalAction_"+(idSendSignalAction++).asString(),"value"= eSendSignalAction};
		self.add(eSendSignalActionTuple);
	}
	//activity.CallAction -> Instantiation
	var idCallAction = 0;
	for (eCallAction in DSL!EObject.all.select(s|s.isTypeOf(DSL!CallAction))){
		var eCallActionTuple = Tuple{"key"="CallAction_"+(idCallAction++).asString(),"value"= eCallAction};
		self.add(eCallActionTuple);
	}
	//activity.CallBehaviorAction -> Instantiation
	var idCallBehaviorAction = 0;
	for (eCallBehaviorAction in DSL!EObject.all.select(s|s.isTypeOf(DSL!CallBehaviorAction))){
		var eCallBehaviorActionTuple = Tuple{"key"="CallBehaviorAction_"+(idCallBehaviorAction++).asString(),"value"= eCallBehaviorAction};
		self.add(eCallBehaviorActionTuple);
	}
	//activity.ObjectNode -> Instantiation
	var idObjectNode = 0;
	for (eObjectNode in DSL!EObject.all.select(s|s.isTypeOf(DSL!ObjectNode))){
		var eObjectNodeTuple = Tuple{"key"="ObjectNode_"+(idObjectNode++).asString(),"value"= eObjectNode};
		self.add(eObjectNodeTuple);
	}
	//activity.Pin -> Instantiation
	var idPin = 0;
	for (ePin in DSL!EObject.all.select(s|s.isTypeOf(DSL!Pin))){
		var ePinTuple = Tuple{"key"="Pin_"+(idPin++).asString(),"value"= ePin};
		self.add(ePinTuple);
	}
	//activity.InputPin -> Instantiation
	var idInputPin = 0;
	for (eInputPin in DSL!EObject.all.select(s|s.isTypeOf(DSL!InputPin))){
		var eInputPinTuple = Tuple{"key"="InputPin_"+(idInputPin++).asString(),"value"= eInputPin};
		self.add(eInputPinTuple);
	}
	//activity.ValuePin -> Instantiation
	var idValuePin = 0;
	for (eValuePin in DSL!EObject.all.select(s|s.isTypeOf(DSL!ValuePin))){
		var eValuePinTuple = Tuple{"key"="ValuePin_"+(idValuePin++).asString(),"value"= eValuePin};
		self.add(eValuePinTuple);
	}
	//activity.OutputPin -> Instantiation
	var idOutputPin = 0;
	for (eOutputPin in DSL!EObject.all.select(s|s.isTypeOf(DSL!OutputPin))){
		var eOutputPinTuple = Tuple{"key"="OutputPin_"+(idOutputPin++).asString(),"value"= eOutputPin};
		self.add(eOutputPinTuple);
	}
	//behavior.AbstractBehavior -> Instantiation
	var idAbstractBehavior = 0;
	for (eAbstractBehavior in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractBehavior))){
		var eAbstractBehaviorTuple = Tuple{"key"="AbstractBehavior_"+(idAbstractBehavior++).asString(),"value"= eAbstractBehavior};
		self.add(eAbstractBehaviorTuple);
	}
	//behavior.AbstractSignal -> Instantiation
	var idAbstractSignal = 0;
	for (eAbstractSignal in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractSignal))){
		var eAbstractSignalTuple = Tuple{"key"="AbstractSignal_"+(idAbstractSignal++).asString(),"value"= eAbstractSignal};
		self.add(eAbstractSignalTuple);
	}
	//behavior.AbstractEvent -> Instantiation
	var idAbstractEvent = 0;
	for (eAbstractEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractEvent))){
		var eAbstractEventTuple = Tuple{"key"="AbstractEvent_"+(idAbstractEvent++).asString(),"value"= eAbstractEvent};
		self.add(eAbstractEventTuple);
	}
	//behavior.AbstractTimeEvent -> Instantiation
	var idAbstractTimeEvent = 0;
	for (eAbstractTimeEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractTimeEvent))){
		var eAbstractTimeEventTuple = Tuple{"key"="AbstractTimeEvent_"+(idAbstractTimeEvent++).asString(),"value"= eAbstractTimeEvent};
		self.add(eAbstractTimeEventTuple);
	}
	//behavior.AbstractMessageEvent -> Instantiation
	var idAbstractMessageEvent = 0;
	for (eAbstractMessageEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractMessageEvent))){
		var eAbstractMessageEventTuple = Tuple{"key"="AbstractMessageEvent_"+(idAbstractMessageEvent++).asString(),"value"= eAbstractMessageEvent};
		self.add(eAbstractMessageEventTuple);
	}
	//behavior.AbstractSignalEvent -> Instantiation
	var idAbstractSignalEvent = 0;
	for (eAbstractSignalEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractSignalEvent))){
		var eAbstractSignalEventTuple = Tuple{"key"="AbstractSignalEvent_"+(idAbstractSignalEvent++).asString(),"value"= eAbstractSignalEvent};
		self.add(eAbstractSignalEventTuple);
	}
	//behavior.TimeExpression -> Instantiation
	var idTimeExpression = 0;
	for (eTimeExpression in DSL!EObject.all.select(s|s.isTypeOf(DSL!TimeExpression))){
		var eTimeExpressionTuple = Tuple{"key"="TimeExpression_"+(idTimeExpression++).asString(),"value"= eTimeExpression};
		self.add(eTimeExpressionTuple);
	}
	//capellacommon.AbstractCapabilityPkg -> Instantiation
	var idAbstractCapabilityPkg = 0;
	for (eAbstractCapabilityPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractCapabilityPkg))){
		var eAbstractCapabilityPkgTuple = Tuple{"key"="AbstractCapabilityPkg_"+(idAbstractCapabilityPkg++).asString(),"value"= eAbstractCapabilityPkg};
		self.add(eAbstractCapabilityPkgTuple);
	}
	//capellacommon.GenericTrace -> Instantiation
	var idGenericTrace = 0;
	for (eGenericTrace in DSL!EObject.all.select(s|s.isTypeOf(DSL!GenericTrace))){
		var eGenericTraceTuple = Tuple{"key"="GenericTrace_"+(idGenericTrace++).asString(),"value"= eGenericTrace};
		self.add(eGenericTraceTuple);
	}
	//capellacommon.TransfoLink -> Instantiation
	var idTransfoLink = 0;
	for (eTransfoLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!TransfoLink))){
		var eTransfoLinkTuple = Tuple{"key"="TransfoLink_"+(idTransfoLink++).asString(),"value"= eTransfoLink};
		self.add(eTransfoLinkTuple);
	}
	//capellacommon.JustificationLink -> Instantiation
	var idJustificationLink = 0;
	for (eJustificationLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!JustificationLink))){
		var eJustificationLinkTuple = Tuple{"key"="JustificationLink_"+(idJustificationLink++).asString(),"value"= eJustificationLink};
		self.add(eJustificationLinkTuple);
	}
	//capellacommon.CapabilityRealizationInvolvement -> Instantiation
	var idCapabilityRealizationInvolvement = 0;
	for (eCapabilityRealizationInvolvement in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapabilityRealizationInvolvement))){
		var eCapabilityRealizationInvolvementTuple = Tuple{"key"="CapabilityRealizationInvolvement_"+(idCapabilityRealizationInvolvement++).asString(),"value"= eCapabilityRealizationInvolvement};
		self.add(eCapabilityRealizationInvolvementTuple);
	}
	//capellacommon.CapabilityRealizationInvolvedElement -> Instantiation
	var idCapabilityRealizationInvolvedElement = 0;
	for (eCapabilityRealizationInvolvedElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapabilityRealizationInvolvedElement))){
		var eCapabilityRealizationInvolvedElementTuple = Tuple{"key"="CapabilityRealizationInvolvedElement_"+(idCapabilityRealizationInvolvedElement++).asString(),"value"= eCapabilityRealizationInvolvedElement};
		self.add(eCapabilityRealizationInvolvedElementTuple);
	}
	//capellacommon.StateMachine -> Instantiation
	var idStateMachine = 0;
	for (eStateMachine in DSL!EObject.all.select(s|s.isTypeOf(DSL!StateMachine))){
		var eStateMachineTuple = Tuple{"key"="StateMachine_"+(idStateMachine++).asString(),"value"= eStateMachine};
		self.add(eStateMachineTuple);
	}
	//capellacommon.Region -> Instantiation
	var idRegion = 0;
	for (eRegion in DSL!EObject.all.select(s|s.isTypeOf(DSL!Region))){
		var eRegionTuple = Tuple{"key"="Region_"+(idRegion++).asString(),"value"= eRegion};
		self.add(eRegionTuple);
	}
	//capellacommon.State -> Instantiation
	var idState = 0;
	for (eState in DSL!EObject.all.select(s|s.isTypeOf(DSL!State))){
		var eStateTuple = Tuple{"key"="State_"+(idState++).asString(),"value"= eState};
		self.add(eStateTuple);
	}
	//capellacommon.Mode -> Instantiation
	var idMode = 0;
	for (eMode in DSL!EObject.all.select(s|s.isTypeOf(DSL!Mode))){
		var eModeTuple = Tuple{"key"="Mode_"+(idMode++).asString(),"value"= eMode};
		self.add(eModeTuple);
	}
	//capellacommon.FinalState -> Instantiation
	var idFinalState = 0;
	for (eFinalState in DSL!EObject.all.select(s|s.isTypeOf(DSL!FinalState))){
		var eFinalStateTuple = Tuple{"key"="FinalState_"+(idFinalState++).asString(),"value"= eFinalState};
		self.add(eFinalStateTuple);
	}
	//capellacommon.AbstractState -> Instantiation
	var idAbstractState = 0;
	for (eAbstractState in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractState))){
		var eAbstractStateTuple = Tuple{"key"="AbstractState_"+(idAbstractState++).asString(),"value"= eAbstractState};
		self.add(eAbstractStateTuple);
	}
	//capellacommon.StateTransition -> Instantiation
	var idStateTransition = 0;
	for (eStateTransition in DSL!EObject.all.select(s|s.isTypeOf(DSL!StateTransition))){
		var eStateTransitionTuple = Tuple{"key"="StateTransition_"+(idStateTransition++).asString(),"value"= eStateTransition};
		self.add(eStateTransitionTuple);
	}
	//capellacommon.Pseudostate -> Instantiation
	var idPseudostate = 0;
	for (ePseudostate in DSL!EObject.all.select(s|s.isTypeOf(DSL!Pseudostate))){
		var ePseudostateTuple = Tuple{"key"="Pseudostate_"+(idPseudostate++).asString(),"value"= ePseudostate};
		self.add(ePseudostateTuple);
	}
	//capellacommon.InitialPseudoState -> Instantiation
	var idInitialPseudoState = 0;
	for (eInitialPseudoState in DSL!EObject.all.select(s|s.isTypeOf(DSL!InitialPseudoState))){
		var eInitialPseudoStateTuple = Tuple{"key"="InitialPseudoState_"+(idInitialPseudoState++).asString(),"value"= eInitialPseudoState};
		self.add(eInitialPseudoStateTuple);
	}
	//capellacommon.JoinPseudoState -> Instantiation
	var idJoinPseudoState = 0;
	for (eJoinPseudoState in DSL!EObject.all.select(s|s.isTypeOf(DSL!JoinPseudoState))){
		var eJoinPseudoStateTuple = Tuple{"key"="JoinPseudoState_"+(idJoinPseudoState++).asString(),"value"= eJoinPseudoState};
		self.add(eJoinPseudoStateTuple);
	}
	//capellacommon.ForkPseudoState -> Instantiation
	var idForkPseudoState = 0;
	for (eForkPseudoState in DSL!EObject.all.select(s|s.isTypeOf(DSL!ForkPseudoState))){
		var eForkPseudoStateTuple = Tuple{"key"="ForkPseudoState_"+(idForkPseudoState++).asString(),"value"= eForkPseudoState};
		self.add(eForkPseudoStateTuple);
	}
	//capellacommon.ChoicePseudoState -> Instantiation
	var idChoicePseudoState = 0;
	for (eChoicePseudoState in DSL!EObject.all.select(s|s.isTypeOf(DSL!ChoicePseudoState))){
		var eChoicePseudoStateTuple = Tuple{"key"="ChoicePseudoState_"+(idChoicePseudoState++).asString(),"value"= eChoicePseudoState};
		self.add(eChoicePseudoStateTuple);
	}
	//capellacommon.TerminatePseudoState -> Instantiation
	var idTerminatePseudoState = 0;
	for (eTerminatePseudoState in DSL!EObject.all.select(s|s.isTypeOf(DSL!TerminatePseudoState))){
		var eTerminatePseudoStateTuple = Tuple{"key"="TerminatePseudoState_"+(idTerminatePseudoState++).asString(),"value"= eTerminatePseudoState};
		self.add(eTerminatePseudoStateTuple);
	}
	//capellacommon.AbstractStateRealization -> Instantiation
	var idAbstractStateRealization = 0;
	for (eAbstractStateRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractStateRealization))){
		var eAbstractStateRealizationTuple = Tuple{"key"="AbstractStateRealization_"+(idAbstractStateRealization++).asString(),"value"= eAbstractStateRealization};
		self.add(eAbstractStateRealizationTuple);
	}
	//capellacommon.StateTransitionRealization -> Instantiation
	var idStateTransitionRealization = 0;
	for (eStateTransitionRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!StateTransitionRealization))){
		var eStateTransitionRealizationTuple = Tuple{"key"="StateTransitionRealization_"+(idStateTransitionRealization++).asString(),"value"= eStateTransitionRealization};
		self.add(eStateTransitionRealizationTuple);
	}
	//capellacommon.ShallowHistoryPseudoState -> Instantiation
	var idShallowHistoryPseudoState = 0;
	for (eShallowHistoryPseudoState in DSL!EObject.all.select(s|s.isTypeOf(DSL!ShallowHistoryPseudoState))){
		var eShallowHistoryPseudoStateTuple = Tuple{"key"="ShallowHistoryPseudoState_"+(idShallowHistoryPseudoState++).asString(),"value"= eShallowHistoryPseudoState};
		self.add(eShallowHistoryPseudoStateTuple);
	}
	//capellacommon.DeepHistoryPseudoState -> Instantiation
	var idDeepHistoryPseudoState = 0;
	for (eDeepHistoryPseudoState in DSL!EObject.all.select(s|s.isTypeOf(DSL!DeepHistoryPseudoState))){
		var eDeepHistoryPseudoStateTuple = Tuple{"key"="DeepHistoryPseudoState_"+(idDeepHistoryPseudoState++).asString(),"value"= eDeepHistoryPseudoState};
		self.add(eDeepHistoryPseudoStateTuple);
	}
	//capellacommon.EntryPointPseudoState -> Instantiation
	var idEntryPointPseudoState = 0;
	for (eEntryPointPseudoState in DSL!EObject.all.select(s|s.isTypeOf(DSL!EntryPointPseudoState))){
		var eEntryPointPseudoStateTuple = Tuple{"key"="EntryPointPseudoState_"+(idEntryPointPseudoState++).asString(),"value"= eEntryPointPseudoState};
		self.add(eEntryPointPseudoStateTuple);
	}
	//capellacommon.ExitPointPseudoState -> Instantiation
	var idExitPointPseudoState = 0;
	for (eExitPointPseudoState in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExitPointPseudoState))){
		var eExitPointPseudoStateTuple = Tuple{"key"="ExitPointPseudoState_"+(idExitPointPseudoState++).asString(),"value"= eExitPointPseudoState};
		self.add(eExitPointPseudoStateTuple);
	}
	//capellacommon.StateEventRealization -> Instantiation
	var idStateEventRealization = 0;
	for (eStateEventRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!StateEventRealization))){
		var eStateEventRealizationTuple = Tuple{"key"="StateEventRealization_"+(idStateEventRealization++).asString(),"value"= eStateEventRealization};
		self.add(eStateEventRealizationTuple);
	}
	//capellacommon.StateEvent -> Instantiation
	var idStateEvent = 0;
	for (eStateEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!StateEvent))){
		var eStateEventTuple = Tuple{"key"="StateEvent_"+(idStateEvent++).asString(),"value"= eStateEvent};
		self.add(eStateEventTuple);
	}
	//capellacommon.ChangeEvent -> Instantiation
	var idChangeEvent = 0;
	for (eChangeEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!ChangeEvent))){
		var eChangeEventTuple = Tuple{"key"="ChangeEvent_"+(idChangeEvent++).asString(),"value"= eChangeEvent};
		self.add(eChangeEventTuple);
	}
	//capellacommon.TimeEvent -> Instantiation
	var idTimeEvent = 0;
	for (eTimeEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!TimeEvent))){
		var eTimeEventTuple = Tuple{"key"="TimeEvent_"+(idTimeEvent++).asString(),"value"= eTimeEvent};
		self.add(eTimeEventTuple);
	}
	//fa.AbstractFunctionalArchitecture -> Instantiation
	var idAbstractFunctionalArchitecture = 0;
	for (eAbstractFunctionalArchitecture in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractFunctionalArchitecture))){
		var eAbstractFunctionalArchitectureTuple = Tuple{"key"="AbstractFunctionalArchitecture_"+(idAbstractFunctionalArchitecture++).asString(),"value"= eAbstractFunctionalArchitecture};
		self.add(eAbstractFunctionalArchitectureTuple);
	}
	//fa.AbstractFunctionalBlock -> Instantiation
	var idAbstractFunctionalBlock = 0;
	for (eAbstractFunctionalBlock in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractFunctionalBlock))){
		var eAbstractFunctionalBlockTuple = Tuple{"key"="AbstractFunctionalBlock_"+(idAbstractFunctionalBlock++).asString(),"value"= eAbstractFunctionalBlock};
		self.add(eAbstractFunctionalBlockTuple);
	}
	//fa.FunctionPkg -> Instantiation
	var idFunctionPkg = 0;
	for (eFunctionPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!FunctionPkg))){
		var eFunctionPkgTuple = Tuple{"key"="FunctionPkg_"+(idFunctionPkg++).asString(),"value"= eFunctionPkg};
		self.add(eFunctionPkgTuple);
	}
	//fa.FunctionSpecification -> Instantiation
	var idFunctionSpecification = 0;
	for (eFunctionSpecification in DSL!EObject.all.select(s|s.isTypeOf(DSL!FunctionSpecification))){
		var eFunctionSpecificationTuple = Tuple{"key"="FunctionSpecification_"+(idFunctionSpecification++).asString(),"value"= eFunctionSpecification};
		self.add(eFunctionSpecificationTuple);
	}
	//fa.ExchangeCategory -> Instantiation
	var idExchangeCategory = 0;
	for (eExchangeCategory in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExchangeCategory))){
		var eExchangeCategoryTuple = Tuple{"key"="ExchangeCategory_"+(idExchangeCategory++).asString(),"value"= eExchangeCategory};
		self.add(eExchangeCategoryTuple);
	}
	//fa.ExchangeLink -> Instantiation
	var idExchangeLink = 0;
	for (eExchangeLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExchangeLink))){
		var eExchangeLinkTuple = Tuple{"key"="ExchangeLink_"+(idExchangeLink++).asString(),"value"= eExchangeLink};
		self.add(eExchangeLinkTuple);
	}
	//fa.ExchangeContainment -> Instantiation
	var idExchangeContainment = 0;
	for (eExchangeContainment in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExchangeContainment))){
		var eExchangeContainmentTuple = Tuple{"key"="ExchangeContainment_"+(idExchangeContainment++).asString(),"value"= eExchangeContainment};
		self.add(eExchangeContainmentTuple);
	}
	//fa.ExchangeSpecification -> Instantiation
	var idExchangeSpecification = 0;
	for (eExchangeSpecification in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExchangeSpecification))){
		var eExchangeSpecificationTuple = Tuple{"key"="ExchangeSpecification_"+(idExchangeSpecification++).asString(),"value"= eExchangeSpecification};
		self.add(eExchangeSpecificationTuple);
	}
	//fa.FunctionalExchangeSpecification -> Instantiation
	var idFunctionalExchangeSpecification = 0;
	for (eFunctionalExchangeSpecification in DSL!EObject.all.select(s|s.isTypeOf(DSL!FunctionalExchangeSpecification))){
		var eFunctionalExchangeSpecificationTuple = Tuple{"key"="FunctionalExchangeSpecification_"+(idFunctionalExchangeSpecification++).asString(),"value"= eFunctionalExchangeSpecification};
		self.add(eFunctionalExchangeSpecificationTuple);
	}
	//fa.FunctionalChain -> Instantiation
	var idFunctionalChain = 0;
	for (eFunctionalChain in DSL!EObject.all.select(s|s.isTypeOf(DSL!FunctionalChain))){
		var eFunctionalChainTuple = Tuple{"key"="FunctionalChain_"+(idFunctionalChain++).asString(),"value"= eFunctionalChain};
		self.add(eFunctionalChainTuple);
	}
	//fa.AbstractFunctionalChainContainer -> Instantiation
	var idAbstractFunctionalChainContainer = 0;
	for (eAbstractFunctionalChainContainer in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractFunctionalChainContainer))){
		var eAbstractFunctionalChainContainerTuple = Tuple{"key"="AbstractFunctionalChainContainer_"+(idAbstractFunctionalChainContainer++).asString(),"value"= eAbstractFunctionalChainContainer};
		self.add(eAbstractFunctionalChainContainerTuple);
	}
	//fa.FunctionalChainInvolvement -> Instantiation
	var idFunctionalChainInvolvement = 0;
	for (eFunctionalChainInvolvement in DSL!EObject.all.select(s|s.isTypeOf(DSL!FunctionalChainInvolvement))){
		var eFunctionalChainInvolvementTuple = Tuple{"key"="FunctionalChainInvolvement_"+(idFunctionalChainInvolvement++).asString(),"value"= eFunctionalChainInvolvement};
		self.add(eFunctionalChainInvolvementTuple);
	}
	//fa.FunctionalChainReference -> Instantiation
	var idFunctionalChainReference = 0;
	for (eFunctionalChainReference in DSL!EObject.all.select(s|s.isTypeOf(DSL!FunctionalChainReference))){
		var eFunctionalChainReferenceTuple = Tuple{"key"="FunctionalChainReference_"+(idFunctionalChainReference++).asString(),"value"= eFunctionalChainReference};
		self.add(eFunctionalChainReferenceTuple);
	}
	//fa.FunctionInputPort -> Instantiation
	var idFunctionInputPort = 0;
	for (eFunctionInputPort in DSL!EObject.all.select(s|s.isTypeOf(DSL!FunctionInputPort))){
		var eFunctionInputPortTuple = Tuple{"key"="FunctionInputPort_"+(idFunctionInputPort++).asString(),"value"= eFunctionInputPort};
		self.add(eFunctionInputPortTuple);
	}
	//fa.FunctionOutputPort -> Instantiation
	var idFunctionOutputPort = 0;
	for (eFunctionOutputPort in DSL!EObject.all.select(s|s.isTypeOf(DSL!FunctionOutputPort))){
		var eFunctionOutputPortTuple = Tuple{"key"="FunctionOutputPort_"+(idFunctionOutputPort++).asString(),"value"= eFunctionOutputPort};
		self.add(eFunctionOutputPortTuple);
	}
	//fa.AbstractFunctionAllocation -> Instantiation
	var idAbstractFunctionAllocation = 0;
	for (eAbstractFunctionAllocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractFunctionAllocation))){
		var eAbstractFunctionAllocationTuple = Tuple{"key"="AbstractFunctionAllocation_"+(idAbstractFunctionAllocation++).asString(),"value"= eAbstractFunctionAllocation};
		self.add(eAbstractFunctionAllocationTuple);
	}
	//fa.ComponentFunctionalAllocation -> Instantiation
	var idComponentFunctionalAllocation = 0;
	for (eComponentFunctionalAllocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!ComponentFunctionalAllocation))){
		var eComponentFunctionalAllocationTuple = Tuple{"key"="ComponentFunctionalAllocation_"+(idComponentFunctionalAllocation++).asString(),"value"= eComponentFunctionalAllocation};
		self.add(eComponentFunctionalAllocationTuple);
	}
	//fa.FunctionalChainRealization -> Instantiation
	var idFunctionalChainRealization = 0;
	for (eFunctionalChainRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!FunctionalChainRealization))){
		var eFunctionalChainRealizationTuple = Tuple{"key"="FunctionalChainRealization_"+(idFunctionalChainRealization++).asString(),"value"= eFunctionalChainRealization};
		self.add(eFunctionalChainRealizationTuple);
	}
	//fa.ExchangeSpecificationRealization -> Instantiation
	var idExchangeSpecificationRealization = 0;
	for (eExchangeSpecificationRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExchangeSpecificationRealization))){
		var eExchangeSpecificationRealizationTuple = Tuple{"key"="ExchangeSpecificationRealization_"+(idExchangeSpecificationRealization++).asString(),"value"= eExchangeSpecificationRealization};
		self.add(eExchangeSpecificationRealizationTuple);
	}
	//fa.FunctionalExchangeRealization -> Instantiation
	var idFunctionalExchangeRealization = 0;
	for (eFunctionalExchangeRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!FunctionalExchangeRealization))){
		var eFunctionalExchangeRealizationTuple = Tuple{"key"="FunctionalExchangeRealization_"+(idFunctionalExchangeRealization++).asString(),"value"= eFunctionalExchangeRealization};
		self.add(eFunctionalExchangeRealizationTuple);
	}
	//fa.FunctionRealization -> Instantiation
	var idFunctionRealization = 0;
	for (eFunctionRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!FunctionRealization))){
		var eFunctionRealizationTuple = Tuple{"key"="FunctionRealization_"+(idFunctionRealization++).asString(),"value"= eFunctionRealization};
		self.add(eFunctionRealizationTuple);
	}
	//fa.FunctionalExchange -> Instantiation
	var idFunctionalExchange = 0;
	for (eFunctionalExchange in DSL!EObject.all.select(s|s.isTypeOf(DSL!FunctionalExchange))){
		var eFunctionalExchangeTuple = Tuple{"key"="FunctionalExchange_"+(idFunctionalExchange++).asString(),"value"= eFunctionalExchange};
		self.add(eFunctionalExchangeTuple);
	}
	//fa.AbstractFunction -> Instantiation
	var idAbstractFunction = 0;
	for (eAbstractFunction in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractFunction))){
		var eAbstractFunctionTuple = Tuple{"key"="AbstractFunction_"+(idAbstractFunction++).asString(),"value"= eAbstractFunction};
		self.add(eAbstractFunctionTuple);
	}
	//fa.FunctionPort -> Instantiation
	var idFunctionPort = 0;
	for (eFunctionPort in DSL!EObject.all.select(s|s.isTypeOf(DSL!FunctionPort))){
		var eFunctionPortTuple = Tuple{"key"="FunctionPort_"+(idFunctionPort++).asString(),"value"= eFunctionPort};
		self.add(eFunctionPortTuple);
	}
	//fa.ComponentExchange -> Instantiation
	var idComponentExchange = 0;
	for (eComponentExchange in DSL!EObject.all.select(s|s.isTypeOf(DSL!ComponentExchange))){
		var eComponentExchangeTuple = Tuple{"key"="ComponentExchange_"+(idComponentExchange++).asString(),"value"= eComponentExchange};
		self.add(eComponentExchangeTuple);
	}
	//fa.ComponentExchangeAllocation -> Instantiation
	var idComponentExchangeAllocation = 0;
	for (eComponentExchangeAllocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!ComponentExchangeAllocation))){
		var eComponentExchangeAllocationTuple = Tuple{"key"="ComponentExchangeAllocation_"+(idComponentExchangeAllocation++).asString(),"value"= eComponentExchangeAllocation};
		self.add(eComponentExchangeAllocationTuple);
	}
	//fa.ComponentExchangeAllocator -> Instantiation
	var idComponentExchangeAllocator = 0;
	for (eComponentExchangeAllocator in DSL!EObject.all.select(s|s.isTypeOf(DSL!ComponentExchangeAllocator))){
		var eComponentExchangeAllocatorTuple = Tuple{"key"="ComponentExchangeAllocator_"+(idComponentExchangeAllocator++).asString(),"value"= eComponentExchangeAllocator};
		self.add(eComponentExchangeAllocatorTuple);
	}
	//fa.ComponentExchangeCategory -> Instantiation
	var idComponentExchangeCategory = 0;
	for (eComponentExchangeCategory in DSL!EObject.all.select(s|s.isTypeOf(DSL!ComponentExchangeCategory))){
		var eComponentExchangeCategoryTuple = Tuple{"key"="ComponentExchangeCategory_"+(idComponentExchangeCategory++).asString(),"value"= eComponentExchangeCategory};
		self.add(eComponentExchangeCategoryTuple);
	}
	//fa.ComponentExchangeEnd -> Instantiation
	var idComponentExchangeEnd = 0;
	for (eComponentExchangeEnd in DSL!EObject.all.select(s|s.isTypeOf(DSL!ComponentExchangeEnd))){
		var eComponentExchangeEndTuple = Tuple{"key"="ComponentExchangeEnd_"+(idComponentExchangeEnd++).asString(),"value"= eComponentExchangeEnd};
		self.add(eComponentExchangeEndTuple);
	}
	//fa.ComponentExchangeFunctionalExchangeAllocation -> Instantiation
	var idComponentExchangeFunctionalExchangeAllocation = 0;
	for (eComponentExchangeFunctionalExchangeAllocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!ComponentExchangeFunctionalExchangeAllocation))){
		var eComponentExchangeFunctionalExchangeAllocationTuple = Tuple{"key"="ComponentExchangeFunctionalExchangeAllocation_"+(idComponentExchangeFunctionalExchangeAllocation++).asString(),"value"= eComponentExchangeFunctionalExchangeAllocation};
		self.add(eComponentExchangeFunctionalExchangeAllocationTuple);
	}
	//fa.ComponentExchangeRealization -> Instantiation
	var idComponentExchangeRealization = 0;
	for (eComponentExchangeRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!ComponentExchangeRealization))){
		var eComponentExchangeRealizationTuple = Tuple{"key"="ComponentExchangeRealization_"+(idComponentExchangeRealization++).asString(),"value"= eComponentExchangeRealization};
		self.add(eComponentExchangeRealizationTuple);
	}
	//fa.ComponentPort -> Instantiation
	var idComponentPort = 0;
	for (eComponentPort in DSL!EObject.all.select(s|s.isTypeOf(DSL!ComponentPort))){
		var eComponentPortTuple = Tuple{"key"="ComponentPort_"+(idComponentPort++).asString(),"value"= eComponentPort};
		self.add(eComponentPortTuple);
	}
	//fa.ComponentPortAllocation -> Instantiation
	var idComponentPortAllocation = 0;
	for (eComponentPortAllocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!ComponentPortAllocation))){
		var eComponentPortAllocationTuple = Tuple{"key"="ComponentPortAllocation_"+(idComponentPortAllocation++).asString(),"value"= eComponentPortAllocation};
		self.add(eComponentPortAllocationTuple);
	}
	//fa.ComponentPortAllocationEnd -> Instantiation
	var idComponentPortAllocationEnd = 0;
	for (eComponentPortAllocationEnd in DSL!EObject.all.select(s|s.isTypeOf(DSL!ComponentPortAllocationEnd))){
		var eComponentPortAllocationEndTuple = Tuple{"key"="ComponentPortAllocationEnd_"+(idComponentPortAllocationEnd++).asString(),"value"= eComponentPortAllocationEnd};
		self.add(eComponentPortAllocationEndTuple);
	}
	//fa.FunctionalChainInvolvementLink -> Instantiation
	var idFunctionalChainInvolvementLink = 0;
	for (eFunctionalChainInvolvementLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!FunctionalChainInvolvementLink))){
		var eFunctionalChainInvolvementLinkTuple = Tuple{"key"="FunctionalChainInvolvementLink_"+(idFunctionalChainInvolvementLink++).asString(),"value"= eFunctionalChainInvolvementLink};
		self.add(eFunctionalChainInvolvementLinkTuple);
	}
	//fa.SequenceLink -> Instantiation
	var idSequenceLink = 0;
	for (eSequenceLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!SequenceLink))){
		var eSequenceLinkTuple = Tuple{"key"="SequenceLink_"+(idSequenceLink++).asString(),"value"= eSequenceLink};
		self.add(eSequenceLinkTuple);
	}
	//fa.SequenceLinkEnd -> Instantiation
	var idSequenceLinkEnd = 0;
	for (eSequenceLinkEnd in DSL!EObject.all.select(s|s.isTypeOf(DSL!SequenceLinkEnd))){
		var eSequenceLinkEndTuple = Tuple{"key"="SequenceLinkEnd_"+(idSequenceLinkEnd++).asString(),"value"= eSequenceLinkEnd};
		self.add(eSequenceLinkEndTuple);
	}
	//fa.FunctionalChainInvolvementFunction -> Instantiation
	var idFunctionalChainInvolvementFunction = 0;
	for (eFunctionalChainInvolvementFunction in DSL!EObject.all.select(s|s.isTypeOf(DSL!FunctionalChainInvolvementFunction))){
		var eFunctionalChainInvolvementFunctionTuple = Tuple{"key"="FunctionalChainInvolvementFunction_"+(idFunctionalChainInvolvementFunction++).asString(),"value"= eFunctionalChainInvolvementFunction};
		self.add(eFunctionalChainInvolvementFunctionTuple);
	}
	//fa.ControlNode -> Instantiation
	var idControlNode = 0;
	for (eControlNode in DSL!EObject.all.select(s|s.isTypeOf(DSL!ControlNode))){
		var eControlNodeTuple = Tuple{"key"="ControlNode_"+(idControlNode++).asString(),"value"= eControlNode};
		self.add(eControlNodeTuple);
	}
	//fa.ReferenceHierarchyContext -> Instantiation
	var idReferenceHierarchyContext = 0;
	for (eReferenceHierarchyContext in DSL!EObject.all.select(s|s.isTypeOf(DSL!ReferenceHierarchyContext))){
		var eReferenceHierarchyContextTuple = Tuple{"key"="ReferenceHierarchyContext_"+(idReferenceHierarchyContext++).asString(),"value"= eReferenceHierarchyContext};
		self.add(eReferenceHierarchyContextTuple);
	}
	//interaction.SequenceMessage -> Instantiation
	var idSequenceMessage = 0;
	for (eSequenceMessage in DSL!EObject.all.select(s|s.isTypeOf(DSL!SequenceMessage))){
		var eSequenceMessageTuple = Tuple{"key"="SequenceMessage_"+(idSequenceMessage++).asString(),"value"= eSequenceMessage};
		self.add(eSequenceMessageTuple);
	}
	//interaction.Scenario -> Instantiation
	var idScenario = 0;
	for (eScenario in DSL!EObject.all.select(s|s.isTypeOf(DSL!Scenario))){
		var eScenarioTuple = Tuple{"key"="Scenario_"+(idScenario++).asString(),"value"= eScenario};
		self.add(eScenarioTuple);
	}
	//interaction.MessageEnd -> Instantiation
	var idMessageEnd = 0;
	for (eMessageEnd in DSL!EObject.all.select(s|s.isTypeOf(DSL!MessageEnd))){
		var eMessageEndTuple = Tuple{"key"="MessageEnd_"+(idMessageEnd++).asString(),"value"= eMessageEnd};
		self.add(eMessageEndTuple);
	}
	//interaction.Execution -> Instantiation
	var idExecution = 0;
	for (eExecution in DSL!EObject.all.select(s|s.isTypeOf(DSL!Execution))){
		var eExecutionTuple = Tuple{"key"="Execution_"+(idExecution++).asString(),"value"= eExecution};
		self.add(eExecutionTuple);
	}
	//interaction.ExecutionEnd -> Instantiation
	var idExecutionEnd = 0;
	for (eExecutionEnd in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExecutionEnd))){
		var eExecutionEndTuple = Tuple{"key"="ExecutionEnd_"+(idExecutionEnd++).asString(),"value"= eExecutionEnd};
		self.add(eExecutionEndTuple);
	}
	//interaction.CreationEvent -> Instantiation
	var idCreationEvent = 0;
	for (eCreationEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!CreationEvent))){
		var eCreationEventTuple = Tuple{"key"="CreationEvent_"+(idCreationEvent++).asString(),"value"= eCreationEvent};
		self.add(eCreationEventTuple);
	}
	//interaction.DestructionEvent -> Instantiation
	var idDestructionEvent = 0;
	for (eDestructionEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!DestructionEvent))){
		var eDestructionEventTuple = Tuple{"key"="DestructionEvent_"+(idDestructionEvent++).asString(),"value"= eDestructionEvent};
		self.add(eDestructionEventTuple);
	}
	//interaction.ExecutionEvent -> Instantiation
	var idExecutionEvent = 0;
	for (eExecutionEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExecutionEvent))){
		var eExecutionEventTuple = Tuple{"key"="ExecutionEvent_"+(idExecutionEvent++).asString(),"value"= eExecutionEvent};
		self.add(eExecutionEventTuple);
	}
	//interaction.InstanceRole -> Instantiation
	var idInstanceRole = 0;
	for (eInstanceRole in DSL!EObject.all.select(s|s.isTypeOf(DSL!InstanceRole))){
		var eInstanceRoleTuple = Tuple{"key"="InstanceRole_"+(idInstanceRole++).asString(),"value"= eInstanceRole};
		self.add(eInstanceRoleTuple);
	}
	//interaction.AbstractEnd -> Instantiation
	var idAbstractEnd = 0;
	for (eAbstractEnd in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractEnd))){
		var eAbstractEndTuple = Tuple{"key"="AbstractEnd_"+(idAbstractEnd++).asString(),"value"= eAbstractEnd};
		self.add(eAbstractEndTuple);
	}
	//interaction.Event -> Instantiation
	var idEvent = 0;
	for (eEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!Event))){
		var eEventTuple = Tuple{"key"="Event_"+(idEvent++).asString(),"value"= eEvent};
		self.add(eEventTuple);
	}
	//interaction.EventReceiptOperation -> Instantiation
	var idEventReceiptOperation = 0;
	for (eEventReceiptOperation in DSL!EObject.all.select(s|s.isTypeOf(DSL!EventReceiptOperation))){
		var eEventReceiptOperationTuple = Tuple{"key"="EventReceiptOperation_"+(idEventReceiptOperation++).asString(),"value"= eEventReceiptOperation};
		self.add(eEventReceiptOperationTuple);
	}
	//interaction.EventSentOperation -> Instantiation
	var idEventSentOperation = 0;
	for (eEventSentOperation in DSL!EObject.all.select(s|s.isTypeOf(DSL!EventSentOperation))){
		var eEventSentOperationTuple = Tuple{"key"="EventSentOperation_"+(idEventSentOperation++).asString(),"value"= eEventSentOperation};
		self.add(eEventSentOperationTuple);
	}
	//interaction.MergeLink -> Instantiation
	var idMergeLink = 0;
	for (eMergeLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!MergeLink))){
		var eMergeLinkTuple = Tuple{"key"="MergeLink_"+(idMergeLink++).asString(),"value"= eMergeLink};
		self.add(eMergeLinkTuple);
	}
	//interaction.RefinementLink -> Instantiation
	var idRefinementLink = 0;
	for (eRefinementLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!RefinementLink))){
		var eRefinementLinkTuple = Tuple{"key"="RefinementLink_"+(idRefinementLink++).asString(),"value"= eRefinementLink};
		self.add(eRefinementLinkTuple);
	}
	//interaction.AbstractCapabilityRealization -> Instantiation
	var idAbstractCapabilityRealization = 0;
	for (eAbstractCapabilityRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractCapabilityRealization))){
		var eAbstractCapabilityRealizationTuple = Tuple{"key"="AbstractCapabilityRealization_"+(idAbstractCapabilityRealization++).asString(),"value"= eAbstractCapabilityRealization};
		self.add(eAbstractCapabilityRealizationTuple);
	}
	//interaction.AbstractCapability -> Instantiation
	var idAbstractCapability = 0;
	for (eAbstractCapability in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractCapability))){
		var eAbstractCapabilityTuple = Tuple{"key"="AbstractCapability_"+(idAbstractCapability++).asString(),"value"= eAbstractCapability};
		self.add(eAbstractCapabilityTuple);
	}
	//interaction.AbstractCapabilityExtend -> Instantiation
	var idAbstractCapabilityExtend = 0;
	for (eAbstractCapabilityExtend in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractCapabilityExtend))){
		var eAbstractCapabilityExtendTuple = Tuple{"key"="AbstractCapabilityExtend_"+(idAbstractCapabilityExtend++).asString(),"value"= eAbstractCapabilityExtend};
		self.add(eAbstractCapabilityExtendTuple);
	}
	//interaction.AbstractCapabilityExtensionPoint -> Instantiation
	var idAbstractCapabilityExtensionPoint = 0;
	for (eAbstractCapabilityExtensionPoint in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractCapabilityExtensionPoint))){
		var eAbstractCapabilityExtensionPointTuple = Tuple{"key"="AbstractCapabilityExtensionPoint_"+(idAbstractCapabilityExtensionPoint++).asString(),"value"= eAbstractCapabilityExtensionPoint};
		self.add(eAbstractCapabilityExtensionPointTuple);
	}
	//interaction.AbstractCapabilityGeneralization -> Instantiation
	var idAbstractCapabilityGeneralization = 0;
	for (eAbstractCapabilityGeneralization in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractCapabilityGeneralization))){
		var eAbstractCapabilityGeneralizationTuple = Tuple{"key"="AbstractCapabilityGeneralization_"+(idAbstractCapabilityGeneralization++).asString(),"value"= eAbstractCapabilityGeneralization};
		self.add(eAbstractCapabilityGeneralizationTuple);
	}
	//interaction.AbstractCapabilityInclude -> Instantiation
	var idAbstractCapabilityInclude = 0;
	for (eAbstractCapabilityInclude in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractCapabilityInclude))){
		var eAbstractCapabilityIncludeTuple = Tuple{"key"="AbstractCapabilityInclude_"+(idAbstractCapabilityInclude++).asString(),"value"= eAbstractCapabilityInclude};
		self.add(eAbstractCapabilityIncludeTuple);
	}
	//interaction.InteractionFragment -> Instantiation
	var idInteractionFragment = 0;
	for (eInteractionFragment in DSL!EObject.all.select(s|s.isTypeOf(DSL!InteractionFragment))){
		var eInteractionFragmentTuple = Tuple{"key"="InteractionFragment_"+(idInteractionFragment++).asString(),"value"= eInteractionFragment};
		self.add(eInteractionFragmentTuple);
	}
	//interaction.InteractionState -> Instantiation
	var idInteractionState = 0;
	for (eInteractionState in DSL!EObject.all.select(s|s.isTypeOf(DSL!InteractionState))){
		var eInteractionStateTuple = Tuple{"key"="InteractionState_"+(idInteractionState++).asString(),"value"= eInteractionState};
		self.add(eInteractionStateTuple);
	}
	//interaction.InteractionUse -> Instantiation
	var idInteractionUse = 0;
	for (eInteractionUse in DSL!EObject.all.select(s|s.isTypeOf(DSL!InteractionUse))){
		var eInteractionUseTuple = Tuple{"key"="InteractionUse_"+(idInteractionUse++).asString(),"value"= eInteractionUse};
		self.add(eInteractionUseTuple);
	}
	//interaction.CombinedFragment -> Instantiation
	var idCombinedFragment = 0;
	for (eCombinedFragment in DSL!EObject.all.select(s|s.isTypeOf(DSL!CombinedFragment))){
		var eCombinedFragmentTuple = Tuple{"key"="CombinedFragment_"+(idCombinedFragment++).asString(),"value"= eCombinedFragment};
		self.add(eCombinedFragmentTuple);
	}
	//interaction.Gate -> Instantiation
	var idGate = 0;
	for (eGate in DSL!EObject.all.select(s|s.isTypeOf(DSL!Gate))){
		var eGateTuple = Tuple{"key"="Gate_"+(idGate++).asString(),"value"= eGate};
		self.add(eGateTuple);
	}
	//interaction.InteractionOperand -> Instantiation
	var idInteractionOperand = 0;
	for (eInteractionOperand in DSL!EObject.all.select(s|s.isTypeOf(DSL!InteractionOperand))){
		var eInteractionOperandTuple = Tuple{"key"="InteractionOperand_"+(idInteractionOperand++).asString(),"value"= eInteractionOperand};
		self.add(eInteractionOperandTuple);
	}
	//interaction.TimeLapse -> Instantiation
	var idTimeLapse = 0;
	for (eTimeLapse in DSL!EObject.all.select(s|s.isTypeOf(DSL!TimeLapse))){
		var eTimeLapseTuple = Tuple{"key"="TimeLapse_"+(idTimeLapse++).asString(),"value"= eTimeLapse};
		self.add(eTimeLapseTuple);
	}
	//interaction.AbstractFragment -> Instantiation
	var idAbstractFragment = 0;
	for (eAbstractFragment in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractFragment))){
		var eAbstractFragmentTuple = Tuple{"key"="AbstractFragment_"+(idAbstractFragment++).asString(),"value"= eAbstractFragment};
		self.add(eAbstractFragmentTuple);
	}
	//interaction.FragmentEnd -> Instantiation
	var idFragmentEnd = 0;
	for (eFragmentEnd in DSL!EObject.all.select(s|s.isTypeOf(DSL!FragmentEnd))){
		var eFragmentEndTuple = Tuple{"key"="FragmentEnd_"+(idFragmentEnd++).asString(),"value"= eFragmentEnd};
		self.add(eFragmentEndTuple);
	}
	//interaction.FunctionalChainAbstractCapabilityInvolvement -> Instantiation
	var idFunctionalChainAbstractCapabilityInvolvement = 0;
	for (eFunctionalChainAbstractCapabilityInvolvement in DSL!EObject.all.select(s|s.isTypeOf(DSL!FunctionalChainAbstractCapabilityInvolvement))){
		var eFunctionalChainAbstractCapabilityInvolvementTuple = Tuple{"key"="FunctionalChainAbstractCapabilityInvolvement_"+(idFunctionalChainAbstractCapabilityInvolvement++).asString(),"value"= eFunctionalChainAbstractCapabilityInvolvement};
		self.add(eFunctionalChainAbstractCapabilityInvolvementTuple);
	}
	//interaction.AbstractFunctionAbstractCapabilityInvolvement -> Instantiation
	var idAbstractFunctionAbstractCapabilityInvolvement = 0;
	for (eAbstractFunctionAbstractCapabilityInvolvement in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractFunctionAbstractCapabilityInvolvement))){
		var eAbstractFunctionAbstractCapabilityInvolvementTuple = Tuple{"key"="AbstractFunctionAbstractCapabilityInvolvement_"+(idAbstractFunctionAbstractCapabilityInvolvement++).asString(),"value"= eAbstractFunctionAbstractCapabilityInvolvement};
		self.add(eAbstractFunctionAbstractCapabilityInvolvementTuple);
	}
	//interaction.ScenarioRealization -> Instantiation
	var idScenarioRealization = 0;
	for (eScenarioRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!ScenarioRealization))){
		var eScenarioRealizationTuple = Tuple{"key"="ScenarioRealization_"+(idScenarioRealization++).asString(),"value"= eScenarioRealization};
		self.add(eScenarioRealizationTuple);
	}
	//interaction.StateFragment -> Instantiation
	var idStateFragment = 0;
	for (eStateFragment in DSL!EObject.all.select(s|s.isTypeOf(DSL!StateFragment))){
		var eStateFragmentTuple = Tuple{"key"="StateFragment_"+(idStateFragment++).asString(),"value"= eStateFragment};
		self.add(eStateFragmentTuple);
	}
	//interaction.ArmTimerEvent -> Instantiation
	var idArmTimerEvent = 0;
	for (eArmTimerEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArmTimerEvent))){
		var eArmTimerEventTuple = Tuple{"key"="ArmTimerEvent_"+(idArmTimerEvent++).asString(),"value"= eArmTimerEvent};
		self.add(eArmTimerEventTuple);
	}
	//interaction.CancelTimerEvent -> Instantiation
	var idCancelTimerEvent = 0;
	for (eCancelTimerEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!CancelTimerEvent))){
		var eCancelTimerEventTuple = Tuple{"key"="CancelTimerEvent_"+(idCancelTimerEvent++).asString(),"value"= eCancelTimerEvent};
		self.add(eCancelTimerEventTuple);
	}
	//interaction.ConstraintDuration -> Instantiation
	var idConstraintDuration = 0;
	for (eConstraintDuration in DSL!EObject.all.select(s|s.isTypeOf(DSL!ConstraintDuration))){
		var eConstraintDurationTuple = Tuple{"key"="ConstraintDuration_"+(idConstraintDuration++).asString(),"value"= eConstraintDuration};
		self.add(eConstraintDurationTuple);
	}
	//interaction.SequenceMessageValuation -> Instantiation
	var idSequenceMessageValuation = 0;
	for (eSequenceMessageValuation in DSL!EObject.all.select(s|s.isTypeOf(DSL!SequenceMessageValuation))){
		var eSequenceMessageValuationTuple = Tuple{"key"="SequenceMessageValuation_"+(idSequenceMessageValuation++).asString(),"value"= eSequenceMessageValuation};
		self.add(eSequenceMessageValuationTuple);
	}
	//cs.BlockArchitecturePkg -> Instantiation
	var idBlockArchitecturePkg = 0;
	for (eBlockArchitecturePkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!BlockArchitecturePkg))){
		var eBlockArchitecturePkgTuple = Tuple{"key"="BlockArchitecturePkg_"+(idBlockArchitecturePkg++).asString(),"value"= eBlockArchitecturePkg};
		self.add(eBlockArchitecturePkgTuple);
	}
	//cs.BlockArchitecture -> Instantiation
	var idBlockArchitecture = 0;
	for (eBlockArchitecture in DSL!EObject.all.select(s|s.isTypeOf(DSL!BlockArchitecture))){
		var eBlockArchitectureTuple = Tuple{"key"="BlockArchitecture_"+(idBlockArchitecture++).asString(),"value"= eBlockArchitecture};
		self.add(eBlockArchitectureTuple);
	}
	//cs.Block -> Instantiation
	var idBlock = 0;
	for (eBlock in DSL!EObject.all.select(s|s.isTypeOf(DSL!Block))){
		var eBlockTuple = Tuple{"key"="Block_"+(idBlock++).asString(),"value"= eBlock};
		self.add(eBlockTuple);
	}
	//cs.ComponentArchitecture -> Instantiation
	var idComponentArchitecture = 0;
	for (eComponentArchitecture in DSL!EObject.all.select(s|s.isTypeOf(DSL!ComponentArchitecture))){
		var eComponentArchitectureTuple = Tuple{"key"="ComponentArchitecture_"+(idComponentArchitecture++).asString(),"value"= eComponentArchitecture};
		self.add(eComponentArchitectureTuple);
	}
	//cs.Component -> Instantiation
	var idComponent = 0;
	for (eComponent in DSL!EObject.all.select(s|s.isTypeOf(DSL!Component))){
		var eComponentTuple = Tuple{"key"="Component_"+(idComponent++).asString(),"value"= eComponent};
		self.add(eComponentTuple);
	}
	//cs.Part -> Instantiation
	var idPart = 0;
	for (ePart in DSL!EObject.all.select(s|s.isTypeOf(DSL!Part))){
		var ePartTuple = Tuple{"key"="Part_"+(idPart++).asString(),"value"= ePart};
		self.add(ePartTuple);
	}
	//cs.ArchitectureAllocation -> Instantiation
	var idArchitectureAllocation = 0;
	for (eArchitectureAllocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!ArchitectureAllocation))){
		var eArchitectureAllocationTuple = Tuple{"key"="ArchitectureAllocation_"+(idArchitectureAllocation++).asString(),"value"= eArchitectureAllocation};
		self.add(eArchitectureAllocationTuple);
	}
	//cs.ComponentRealization -> Instantiation
	var idComponentRealization = 0;
	for (eComponentRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!ComponentRealization))){
		var eComponentRealizationTuple = Tuple{"key"="ComponentRealization_"+(idComponentRealization++).asString(),"value"= eComponentRealization};
		self.add(eComponentRealizationTuple);
	}
	//cs.InterfacePkg -> Instantiation
	var idInterfacePkg = 0;
	for (eInterfacePkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!InterfacePkg))){
		var eInterfacePkgTuple = Tuple{"key"="InterfacePkg_"+(idInterfacePkg++).asString(),"value"= eInterfacePkg};
		self.add(eInterfacePkgTuple);
	}
	//cs.Interface -> Instantiation
	var idInterface = 0;
	for (eInterface in DSL!EObject.all.select(s|s.isTypeOf(DSL!Interface))){
		var eInterfaceTuple = Tuple{"key"="Interface_"+(idInterface++).asString(),"value"= eInterface};
		self.add(eInterfaceTuple);
	}
	//cs.InterfaceImplementation -> Instantiation
	var idInterfaceImplementation = 0;
	for (eInterfaceImplementation in DSL!EObject.all.select(s|s.isTypeOf(DSL!InterfaceImplementation))){
		var eInterfaceImplementationTuple = Tuple{"key"="InterfaceImplementation_"+(idInterfaceImplementation++).asString(),"value"= eInterfaceImplementation};
		self.add(eInterfaceImplementationTuple);
	}
	//cs.InterfaceUse -> Instantiation
	var idInterfaceUse = 0;
	for (eInterfaceUse in DSL!EObject.all.select(s|s.isTypeOf(DSL!InterfaceUse))){
		var eInterfaceUseTuple = Tuple{"key"="InterfaceUse_"+(idInterfaceUse++).asString(),"value"= eInterfaceUse};
		self.add(eInterfaceUseTuple);
	}
	//cs.ProvidedInterfaceLink -> Instantiation
	var idProvidedInterfaceLink = 0;
	for (eProvidedInterfaceLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!ProvidedInterfaceLink))){
		var eProvidedInterfaceLinkTuple = Tuple{"key"="ProvidedInterfaceLink_"+(idProvidedInterfaceLink++).asString(),"value"= eProvidedInterfaceLink};
		self.add(eProvidedInterfaceLinkTuple);
	}
	//cs.RequiredInterfaceLink -> Instantiation
	var idRequiredInterfaceLink = 0;
	for (eRequiredInterfaceLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!RequiredInterfaceLink))){
		var eRequiredInterfaceLinkTuple = Tuple{"key"="RequiredInterfaceLink_"+(idRequiredInterfaceLink++).asString(),"value"= eRequiredInterfaceLink};
		self.add(eRequiredInterfaceLinkTuple);
	}
	//cs.InterfaceAllocation -> Instantiation
	var idInterfaceAllocation = 0;
	for (eInterfaceAllocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!InterfaceAllocation))){
		var eInterfaceAllocationTuple = Tuple{"key"="InterfaceAllocation_"+(idInterfaceAllocation++).asString(),"value"= eInterfaceAllocation};
		self.add(eInterfaceAllocationTuple);
	}
	//cs.InterfaceAllocator -> Instantiation
	var idInterfaceAllocator = 0;
	for (eInterfaceAllocator in DSL!EObject.all.select(s|s.isTypeOf(DSL!InterfaceAllocator))){
		var eInterfaceAllocatorTuple = Tuple{"key"="InterfaceAllocator_"+(idInterfaceAllocator++).asString(),"value"= eInterfaceAllocator};
		self.add(eInterfaceAllocatorTuple);
	}
	//cs.ExchangeItemAllocation -> Instantiation
	var idExchangeItemAllocation = 0;
	for (eExchangeItemAllocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExchangeItemAllocation))){
		var eExchangeItemAllocationTuple = Tuple{"key"="ExchangeItemAllocation_"+(idExchangeItemAllocation++).asString(),"value"= eExchangeItemAllocation};
		self.add(eExchangeItemAllocationTuple);
	}
	//cs.DeployableElement -> Instantiation
	var idDeployableElement = 0;
	for (eDeployableElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!DeployableElement))){
		var eDeployableElementTuple = Tuple{"key"="DeployableElement_"+(idDeployableElement++).asString(),"value"= eDeployableElement};
		self.add(eDeployableElementTuple);
	}
	//cs.DeploymentTarget -> Instantiation
	var idDeploymentTarget = 0;
	for (eDeploymentTarget in DSL!EObject.all.select(s|s.isTypeOf(DSL!DeploymentTarget))){
		var eDeploymentTargetTuple = Tuple{"key"="DeploymentTarget_"+(idDeploymentTarget++).asString(),"value"= eDeploymentTarget};
		self.add(eDeploymentTargetTuple);
	}
	//cs.AbstractDeploymentLink -> Instantiation
	var idAbstractDeploymentLink = 0;
	for (eAbstractDeploymentLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractDeploymentLink))){
		var eAbstractDeploymentLinkTuple = Tuple{"key"="AbstractDeploymentLink_"+(idAbstractDeploymentLink++).asString(),"value"= eAbstractDeploymentLink};
		self.add(eAbstractDeploymentLinkTuple);
	}
	//cs.AbstractPathInvolvedElement -> Instantiation
	var idAbstractPathInvolvedElement = 0;
	for (eAbstractPathInvolvedElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractPathInvolvedElement))){
		var eAbstractPathInvolvedElementTuple = Tuple{"key"="AbstractPathInvolvedElement_"+(idAbstractPathInvolvedElement++).asString(),"value"= eAbstractPathInvolvedElement};
		self.add(eAbstractPathInvolvedElementTuple);
	}
	//cs.AbstractPhysicalArtifact -> Instantiation
	var idAbstractPhysicalArtifact = 0;
	for (eAbstractPhysicalArtifact in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractPhysicalArtifact))){
		var eAbstractPhysicalArtifactTuple = Tuple{"key"="AbstractPhysicalArtifact_"+(idAbstractPhysicalArtifact++).asString(),"value"= eAbstractPhysicalArtifact};
		self.add(eAbstractPhysicalArtifactTuple);
	}
	//cs.AbstractPhysicalLinkEnd -> Instantiation
	var idAbstractPhysicalLinkEnd = 0;
	for (eAbstractPhysicalLinkEnd in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractPhysicalLinkEnd))){
		var eAbstractPhysicalLinkEndTuple = Tuple{"key"="AbstractPhysicalLinkEnd_"+(idAbstractPhysicalLinkEnd++).asString(),"value"= eAbstractPhysicalLinkEnd};
		self.add(eAbstractPhysicalLinkEndTuple);
	}
	//cs.AbstractPhysicalPathLink -> Instantiation
	var idAbstractPhysicalPathLink = 0;
	for (eAbstractPhysicalPathLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractPhysicalPathLink))){
		var eAbstractPhysicalPathLinkTuple = Tuple{"key"="AbstractPhysicalPathLink_"+(idAbstractPhysicalPathLink++).asString(),"value"= eAbstractPhysicalPathLink};
		self.add(eAbstractPhysicalPathLinkTuple);
	}
	//cs.PhysicalLink -> Instantiation
	var idPhysicalLink = 0;
	for (ePhysicalLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalLink))){
		var ePhysicalLinkTuple = Tuple{"key"="PhysicalLink_"+(idPhysicalLink++).asString(),"value"= ePhysicalLink};
		self.add(ePhysicalLinkTuple);
	}
	//cs.PhysicalLinkCategory -> Instantiation
	var idPhysicalLinkCategory = 0;
	for (ePhysicalLinkCategory in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalLinkCategory))){
		var ePhysicalLinkCategoryTuple = Tuple{"key"="PhysicalLinkCategory_"+(idPhysicalLinkCategory++).asString(),"value"= ePhysicalLinkCategory};
		self.add(ePhysicalLinkCategoryTuple);
	}
	//cs.PhysicalLinkEnd -> Instantiation
	var idPhysicalLinkEnd = 0;
	for (ePhysicalLinkEnd in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalLinkEnd))){
		var ePhysicalLinkEndTuple = Tuple{"key"="PhysicalLinkEnd_"+(idPhysicalLinkEnd++).asString(),"value"= ePhysicalLinkEnd};
		self.add(ePhysicalLinkEndTuple);
	}
	//cs.PhysicalLinkRealization -> Instantiation
	var idPhysicalLinkRealization = 0;
	for (ePhysicalLinkRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalLinkRealization))){
		var ePhysicalLinkRealizationTuple = Tuple{"key"="PhysicalLinkRealization_"+(idPhysicalLinkRealization++).asString(),"value"= ePhysicalLinkRealization};
		self.add(ePhysicalLinkRealizationTuple);
	}
	//cs.PhysicalPath -> Instantiation
	var idPhysicalPath = 0;
	for (ePhysicalPath in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalPath))){
		var ePhysicalPathTuple = Tuple{"key"="PhysicalPath_"+(idPhysicalPath++).asString(),"value"= ePhysicalPath};
		self.add(ePhysicalPathTuple);
	}
	//cs.PhysicalPathInvolvement -> Instantiation
	var idPhysicalPathInvolvement = 0;
	for (ePhysicalPathInvolvement in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalPathInvolvement))){
		var ePhysicalPathInvolvementTuple = Tuple{"key"="PhysicalPathInvolvement_"+(idPhysicalPathInvolvement++).asString(),"value"= ePhysicalPathInvolvement};
		self.add(ePhysicalPathInvolvementTuple);
	}
	//cs.PhysicalPathReference -> Instantiation
	var idPhysicalPathReference = 0;
	for (ePhysicalPathReference in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalPathReference))){
		var ePhysicalPathReferenceTuple = Tuple{"key"="PhysicalPathReference_"+(idPhysicalPathReference++).asString(),"value"= ePhysicalPathReference};
		self.add(ePhysicalPathReferenceTuple);
	}
	//cs.PhysicalPathRealization -> Instantiation
	var idPhysicalPathRealization = 0;
	for (ePhysicalPathRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalPathRealization))){
		var ePhysicalPathRealizationTuple = Tuple{"key"="PhysicalPathRealization_"+(idPhysicalPathRealization++).asString(),"value"= ePhysicalPathRealization};
		self.add(ePhysicalPathRealizationTuple);
	}
	//cs.PhysicalPort -> Instantiation
	var idPhysicalPort = 0;
	for (ePhysicalPort in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalPort))){
		var ePhysicalPortTuple = Tuple{"key"="PhysicalPort_"+(idPhysicalPort++).asString(),"value"= ePhysicalPort};
		self.add(ePhysicalPortTuple);
	}
	//cs.PhysicalPortRealization -> Instantiation
	var idPhysicalPortRealization = 0;
	for (ePhysicalPortRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalPortRealization))){
		var ePhysicalPortRealizationTuple = Tuple{"key"="PhysicalPortRealization_"+(idPhysicalPortRealization++).asString(),"value"= ePhysicalPortRealization};
		self.add(ePhysicalPortRealizationTuple);
	}
	//cs.ComponentPkg -> Instantiation
	var idComponentPkg = 0;
	for (eComponentPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!ComponentPkg))){
		var eComponentPkgTuple = Tuple{"key"="ComponentPkg_"+(idComponentPkg++).asString(),"value"= eComponentPkg};
		self.add(eComponentPkgTuple);
	}
	//information.AbstractInstance -> Instantiation
	var idAbstractInstance = 0;
	for (eAbstractInstance in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractInstance))){
		var eAbstractInstanceTuple = Tuple{"key"="AbstractInstance_"+(idAbstractInstance++).asString(),"value"= eAbstractInstance};
		self.add(eAbstractInstanceTuple);
	}
	//information.AssociationPkg -> Instantiation
	var idAssociationPkg = 0;
	for (eAssociationPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!AssociationPkg))){
		var eAssociationPkgTuple = Tuple{"key"="AssociationPkg_"+(idAssociationPkg++).asString(),"value"= eAssociationPkg};
		self.add(eAssociationPkgTuple);
	}
	//information.Association -> Instantiation
	var idAssociation = 0;
	for (eAssociation in DSL!EObject.all.select(s|s.isTypeOf(DSL!Association))){
		var eAssociationTuple = Tuple{"key"="Association_"+(idAssociation++).asString(),"value"= eAssociation};
		self.add(eAssociationTuple);
	}
	//information.Class -> Instantiation
	var idClass = 0;
	for (eClass in DSL!EObject.all.select(s|s.isTypeOf(DSL!Class))){
		var eClassTuple = Tuple{"key"="Class_"+(idClass++).asString(),"value"= eClass};
		self.add(eClassTuple);
	}
	//information.Collection -> Instantiation
	var idCollection = 0;
	for (eCollection in DSL!EObject.all.select(s|s.isTypeOf(DSL!`Collection`))){
		var eCollectionTuple = Tuple{"key"="Collection_"+(idCollection++).asString(),"value"= eCollection};
		self.add(eCollectionTuple);
	}
	//information.AbstractCollectionValue -> Instantiation
	var idAbstractCollectionValue = 0;
	for (eAbstractCollectionValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractCollectionValue))){
		var eAbstractCollectionValueTuple = Tuple{"key"="AbstractCollectionValue_"+(idAbstractCollectionValue++).asString(),"value"= eAbstractCollectionValue};
		self.add(eAbstractCollectionValueTuple);
	}
	//information.CollectionValue -> Instantiation
	var idCollectionValue = 0;
	for (eCollectionValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!CollectionValue))){
		var eCollectionValueTuple = Tuple{"key"="CollectionValue_"+(idCollectionValue++).asString(),"value"= eCollectionValue};
		self.add(eCollectionValueTuple);
	}
	//information.CollectionValueReference -> Instantiation
	var idCollectionValueReference = 0;
	for (eCollectionValueReference in DSL!EObject.all.select(s|s.isTypeOf(DSL!CollectionValueReference))){
		var eCollectionValueReferenceTuple = Tuple{"key"="CollectionValueReference_"+(idCollectionValueReference++).asString(),"value"= eCollectionValueReference};
		self.add(eCollectionValueReferenceTuple);
	}
	//information.DataPkg -> Instantiation
	var idDataPkg = 0;
	for (eDataPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!DataPkg))){
		var eDataPkgTuple = Tuple{"key"="DataPkg_"+(idDataPkg++).asString(),"value"= eDataPkg};
		self.add(eDataPkgTuple);
	}
	//information.DomainElement -> Instantiation
	var idDomainElement = 0;
	for (eDomainElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!DomainElement))){
		var eDomainElementTuple = Tuple{"key"="DomainElement_"+(idDomainElement++).asString(),"value"= eDomainElement};
		self.add(eDomainElementTuple);
	}
	//information.KeyPart -> Instantiation
	var idKeyPart = 0;
	for (eKeyPart in DSL!EObject.all.select(s|s.isTypeOf(DSL!KeyPart))){
		var eKeyPartTuple = Tuple{"key"="KeyPart_"+(idKeyPart++).asString(),"value"= eKeyPart};
		self.add(eKeyPartTuple);
	}
	//information.MultiplicityElement -> Instantiation
	var idMultiplicityElement = 0;
	for (eMultiplicityElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!MultiplicityElement))){
		var eMultiplicityElementTuple = Tuple{"key"="MultiplicityElement_"+(idMultiplicityElement++).asString(),"value"= eMultiplicityElement};
		self.add(eMultiplicityElementTuple);
	}
	//information.Operation -> Instantiation
	var idOperation = 0;
	for (eOperation in DSL!EObject.all.select(s|s.isTypeOf(DSL!Operation))){
		var eOperationTuple = Tuple{"key"="Operation_"+(idOperation++).asString(),"value"= eOperation};
		self.add(eOperationTuple);
	}
	//information.OperationAllocation -> Instantiation
	var idOperationAllocation = 0;
	for (eOperationAllocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationAllocation))){
		var eOperationAllocationTuple = Tuple{"key"="OperationAllocation_"+(idOperationAllocation++).asString(),"value"= eOperationAllocation};
		self.add(eOperationAllocationTuple);
	}
	//information.Parameter -> Instantiation
	var idParameter = 0;
	for (eParameter in DSL!EObject.all.select(s|s.isTypeOf(DSL!Parameter))){
		var eParameterTuple = Tuple{"key"="Parameter_"+(idParameter++).asString(),"value"= eParameter};
		self.add(eParameterTuple);
	}
	//information.Property -> Instantiation
	var idProperty = 0;
	for (eProperty in DSL!EObject.all.select(s|s.isTypeOf(DSL!Property))){
		var ePropertyTuple = Tuple{"key"="Property_"+(idProperty++).asString(),"value"= eProperty};
		self.add(ePropertyTuple);
	}
	//information.Service -> Instantiation
	var idService = 0;
	for (eService in DSL!EObject.all.select(s|s.isTypeOf(DSL!Service))){
		var eServiceTuple = Tuple{"key"="Service_"+(idService++).asString(),"value"= eService};
		self.add(eServiceTuple);
	}
	//information.Union -> Instantiation
	var idUnion = 0;
	for (eUnion in DSL!EObject.all.select(s|s.isTypeOf(DSL!Union))){
		var eUnionTuple = Tuple{"key"="Union_"+(idUnion++).asString(),"value"= eUnion};
		self.add(eUnionTuple);
	}
	//information.UnionProperty -> Instantiation
	var idUnionProperty = 0;
	for (eUnionProperty in DSL!EObject.all.select(s|s.isTypeOf(DSL!UnionProperty))){
		var eUnionPropertyTuple = Tuple{"key"="UnionProperty_"+(idUnionProperty++).asString(),"value"= eUnionProperty};
		self.add(eUnionPropertyTuple);
	}
	//information.Unit -> Instantiation
	var idUnit = 0;
	for (eUnit in DSL!EObject.all.select(s|s.isTypeOf(DSL!Unit))){
		var eUnitTuple = Tuple{"key"="Unit_"+(idUnit++).asString(),"value"= eUnit};
		self.add(eUnitTuple);
	}
	//information.Port -> Instantiation
	var idPort = 0;
	for (ePort in DSL!EObject.all.select(s|s.isTypeOf(DSL!Port))){
		var ePortTuple = Tuple{"key"="Port_"+(idPort++).asString(),"value"= ePort};
		self.add(ePortTuple);
	}
	//information.PortRealization -> Instantiation
	var idPortRealization = 0;
	for (ePortRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!PortRealization))){
		var ePortRealizationTuple = Tuple{"key"="PortRealization_"+(idPortRealization++).asString(),"value"= ePortRealization};
		self.add(ePortRealizationTuple);
	}
	//information.PortAllocation -> Instantiation
	var idPortAllocation = 0;
	for (ePortAllocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!PortAllocation))){
		var ePortAllocationTuple = Tuple{"key"="PortAllocation_"+(idPortAllocation++).asString(),"value"= ePortAllocation};
		self.add(ePortAllocationTuple);
	}
	//information.ExchangeItem -> Instantiation
	var idExchangeItem = 0;
	for (eExchangeItem in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExchangeItem))){
		var eExchangeItemTuple = Tuple{"key"="ExchangeItem_"+(idExchangeItem++).asString(),"value"= eExchangeItem};
		self.add(eExchangeItemTuple);
	}
	//information.ExchangeItemElement -> Instantiation
	var idExchangeItemElement = 0;
	for (eExchangeItemElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExchangeItemElement))){
		var eExchangeItemElementTuple = Tuple{"key"="ExchangeItemElement_"+(idExchangeItemElement++).asString(),"value"= eExchangeItemElement};
		self.add(eExchangeItemElementTuple);
	}
	//information.ExchangeItemInstance -> Instantiation
	var idExchangeItemInstance = 0;
	for (eExchangeItemInstance in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExchangeItemInstance))){
		var eExchangeItemInstanceTuple = Tuple{"key"="ExchangeItemInstance_"+(idExchangeItemInstance++).asString(),"value"= eExchangeItemInstance};
		self.add(eExchangeItemInstanceTuple);
	}
	//information.InformationRealization -> Instantiation
	var idInformationRealization = 0;
	for (eInformationRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!InformationRealization))){
		var eInformationRealizationTuple = Tuple{"key"="InformationRealization_"+(idInformationRealization++).asString(),"value"= eInformationRealization};
		self.add(eInformationRealizationTuple);
	}
	//information.ExchangeItemRealization -> Instantiation
	var idExchangeItemRealization = 0;
	for (eExchangeItemRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExchangeItemRealization))){
		var eExchangeItemRealizationTuple = Tuple{"key"="ExchangeItemRealization_"+(idExchangeItemRealization++).asString(),"value"= eExchangeItemRealization};
		self.add(eExchangeItemRealizationTuple);
	}
	//information.AbstractEventOperation -> Instantiation
	var idAbstractEventOperation = 0;
	for (eAbstractEventOperation in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractEventOperation))){
		var eAbstractEventOperationTuple = Tuple{"key"="AbstractEventOperation_"+(idAbstractEventOperation++).asString(),"value"= eAbstractEventOperation};
		self.add(eAbstractEventOperationTuple);
	}
	//communication.CommunicationItem -> Instantiation
	var idCommunicationItem = 0;
	for (eCommunicationItem in DSL!EObject.all.select(s|s.isTypeOf(DSL!CommunicationItem))){
		var eCommunicationItemTuple = Tuple{"key"="CommunicationItem_"+(idCommunicationItem++).asString(),"value"= eCommunicationItem};
		self.add(eCommunicationItemTuple);
	}
	//communication.Exception -> Instantiation
	var idException = 0;
	for (eException in DSL!EObject.all.select(s|s.isTypeOf(DSL!Exception))){
		var eExceptionTuple = Tuple{"key"="Exception_"+(idException++).asString(),"value"= eException};
		self.add(eExceptionTuple);
	}
	//communication.Message -> Instantiation
	var idMessage = 0;
	for (eMessage in DSL!EObject.all.select(s|s.isTypeOf(DSL!Message))){
		var eMessageTuple = Tuple{"key"="Message_"+(idMessage++).asString(),"value"= eMessage};
		self.add(eMessageTuple);
	}
	//communication.MessageReference -> Instantiation
	var idMessageReference = 0;
	for (eMessageReference in DSL!EObject.all.select(s|s.isTypeOf(DSL!MessageReference))){
		var eMessageReferenceTuple = Tuple{"key"="MessageReference_"+(idMessageReference++).asString(),"value"= eMessageReference};
		self.add(eMessageReferenceTuple);
	}
	//communication.MessageReferencePkg -> Instantiation
	var idMessageReferencePkg = 0;
	for (eMessageReferencePkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!MessageReferencePkg))){
		var eMessageReferencePkgTuple = Tuple{"key"="MessageReferencePkg_"+(idMessageReferencePkg++).asString(),"value"= eMessageReferencePkg};
		self.add(eMessageReferencePkgTuple);
	}
	//communication.Signal -> Instantiation
	var idSignal = 0;
	for (eSignal in DSL!EObject.all.select(s|s.isTypeOf(DSL!Signal))){
		var eSignalTuple = Tuple{"key"="Signal_"+(idSignal++).asString(),"value"= eSignal};
		self.add(eSignalTuple);
	}
	//communication.SignalInstance -> Instantiation
	var idSignalInstance = 0;
	for (eSignalInstance in DSL!EObject.all.select(s|s.isTypeOf(DSL!SignalInstance))){
		var eSignalInstanceTuple = Tuple{"key"="SignalInstance_"+(idSignalInstance++).asString(),"value"= eSignalInstance};
		self.add(eSignalInstanceTuple);
	}
	//communication.CommunicationLink -> Instantiation
	var idCommunicationLink = 0;
	for (eCommunicationLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!CommunicationLink))){
		var eCommunicationLinkTuple = Tuple{"key"="CommunicationLink_"+(idCommunicationLink++).asString(),"value"= eCommunicationLink};
		self.add(eCommunicationLinkTuple);
	}
	//communication.CommunicationLinkExchanger -> Instantiation
	var idCommunicationLinkExchanger = 0;
	for (eCommunicationLinkExchanger in DSL!EObject.all.select(s|s.isTypeOf(DSL!CommunicationLinkExchanger))){
		var eCommunicationLinkExchangerTuple = Tuple{"key"="CommunicationLinkExchanger_"+(idCommunicationLinkExchanger++).asString(),"value"= eCommunicationLinkExchanger};
		self.add(eCommunicationLinkExchangerTuple);
	}
	//datatype.DataType -> Instantiation
	var idDataType = 0;
	for (eDataType in DSL!EObject.all.select(s|s.isTypeOf(DSL!DataType))){
		var eDataTypeTuple = Tuple{"key"="DataType_"+(idDataType++).asString(),"value"= eDataType};
		self.add(eDataTypeTuple);
	}
	//datatype.BooleanType -> Instantiation
	var idBooleanType = 0;
	for (eBooleanType in DSL!EObject.all.select(s|s.isTypeOf(DSL!BooleanType))){
		var eBooleanTypeTuple = Tuple{"key"="BooleanType_"+(idBooleanType++).asString(),"value"= eBooleanType};
		self.add(eBooleanTypeTuple);
	}
	//datatype.Enumeration -> Instantiation
	var idEnumeration = 0;
	for (eEnumeration in DSL!EObject.all.select(s|s.isTypeOf(DSL!Enumeration))){
		var eEnumerationTuple = Tuple{"key"="Enumeration_"+(idEnumeration++).asString(),"value"= eEnumeration};
		self.add(eEnumerationTuple);
	}
	//datatype.StringType -> Instantiation
	var idStringType = 0;
	for (eStringType in DSL!EObject.all.select(s|s.isTypeOf(DSL!StringType))){
		var eStringTypeTuple = Tuple{"key"="StringType_"+(idStringType++).asString(),"value"= eStringType};
		self.add(eStringTypeTuple);
	}
	//datatype.NumericType -> Instantiation
	var idNumericType = 0;
	for (eNumericType in DSL!EObject.all.select(s|s.isTypeOf(DSL!NumericType))){
		var eNumericTypeTuple = Tuple{"key"="NumericType_"+(idNumericType++).asString(),"value"= eNumericType};
		self.add(eNumericTypeTuple);
	}
	//datatype.PhysicalQuantity -> Instantiation
	var idPhysicalQuantity = 0;
	for (ePhysicalQuantity in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalQuantity))){
		var ePhysicalQuantityTuple = Tuple{"key"="PhysicalQuantity_"+(idPhysicalQuantity++).asString(),"value"= ePhysicalQuantity};
		self.add(ePhysicalQuantityTuple);
	}
	//datavalue.DataValue -> Instantiation
	var idDataValue = 0;
	for (eDataValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!DataValue))){
		var eDataValueTuple = Tuple{"key"="DataValue_"+(idDataValue++).asString(),"value"= eDataValue};
		self.add(eDataValueTuple);
	}
	//datavalue.DataValueContainer -> Instantiation
	var idDataValueContainer = 0;
	for (eDataValueContainer in DSL!EObject.all.select(s|s.isTypeOf(DSL!DataValueContainer))){
		var eDataValueContainerTuple = Tuple{"key"="DataValueContainer_"+(idDataValueContainer++).asString(),"value"= eDataValueContainer};
		self.add(eDataValueContainerTuple);
	}
	//datavalue.AbstractBooleanValue -> Instantiation
	var idAbstractBooleanValue = 0;
	for (eAbstractBooleanValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractBooleanValue))){
		var eAbstractBooleanValueTuple = Tuple{"key"="AbstractBooleanValue_"+(idAbstractBooleanValue++).asString(),"value"= eAbstractBooleanValue};
		self.add(eAbstractBooleanValueTuple);
	}
	//datavalue.LiteralBooleanValue -> Instantiation
	var idLiteralBooleanValue = 0;
	for (eLiteralBooleanValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!LiteralBooleanValue))){
		var eLiteralBooleanValueTuple = Tuple{"key"="LiteralBooleanValue_"+(idLiteralBooleanValue++).asString(),"value"= eLiteralBooleanValue};
		self.add(eLiteralBooleanValueTuple);
	}
	//datavalue.BooleanReference -> Instantiation
	var idBooleanReference = 0;
	for (eBooleanReference in DSL!EObject.all.select(s|s.isTypeOf(DSL!BooleanReference))){
		var eBooleanReferenceTuple = Tuple{"key"="BooleanReference_"+(idBooleanReference++).asString(),"value"= eBooleanReference};
		self.add(eBooleanReferenceTuple);
	}
	//datavalue.AbstractEnumerationValue -> Instantiation
	var idAbstractEnumerationValue = 0;
	for (eAbstractEnumerationValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractEnumerationValue))){
		var eAbstractEnumerationValueTuple = Tuple{"key"="AbstractEnumerationValue_"+(idAbstractEnumerationValue++).asString(),"value"= eAbstractEnumerationValue};
		self.add(eAbstractEnumerationValueTuple);
	}
	//datavalue.EnumerationLiteral -> Instantiation
	var idEnumerationLiteral = 0;
	for (eEnumerationLiteral in DSL!EObject.all.select(s|s.isTypeOf(DSL!EnumerationLiteral))){
		var eEnumerationLiteralTuple = Tuple{"key"="EnumerationLiteral_"+(idEnumerationLiteral++).asString(),"value"= eEnumerationLiteral};
		self.add(eEnumerationLiteralTuple);
	}
	//datavalue.EnumerationReference -> Instantiation
	var idEnumerationReference = 0;
	for (eEnumerationReference in DSL!EObject.all.select(s|s.isTypeOf(DSL!EnumerationReference))){
		var eEnumerationReferenceTuple = Tuple{"key"="EnumerationReference_"+(idEnumerationReference++).asString(),"value"= eEnumerationReference};
		self.add(eEnumerationReferenceTuple);
	}
	//datavalue.AbstractStringValue -> Instantiation
	var idAbstractStringValue = 0;
	for (eAbstractStringValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractStringValue))){
		var eAbstractStringValueTuple = Tuple{"key"="AbstractStringValue_"+(idAbstractStringValue++).asString(),"value"= eAbstractStringValue};
		self.add(eAbstractStringValueTuple);
	}
	//datavalue.LiteralStringValue -> Instantiation
	var idLiteralStringValue = 0;
	for (eLiteralStringValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!LiteralStringValue))){
		var eLiteralStringValueTuple = Tuple{"key"="LiteralStringValue_"+(idLiteralStringValue++).asString(),"value"= eLiteralStringValue};
		self.add(eLiteralStringValueTuple);
	}
	//datavalue.StringReference -> Instantiation
	var idStringReference = 0;
	for (eStringReference in DSL!EObject.all.select(s|s.isTypeOf(DSL!StringReference))){
		var eStringReferenceTuple = Tuple{"key"="StringReference_"+(idStringReference++).asString(),"value"= eStringReference};
		self.add(eStringReferenceTuple);
	}
	//datavalue.NumericValue -> Instantiation
	var idNumericValue = 0;
	for (eNumericValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!NumericValue))){
		var eNumericValueTuple = Tuple{"key"="NumericValue_"+(idNumericValue++).asString(),"value"= eNumericValue};
		self.add(eNumericValueTuple);
	}
	//datavalue.LiteralNumericValue -> Instantiation
	var idLiteralNumericValue = 0;
	for (eLiteralNumericValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!LiteralNumericValue))){
		var eLiteralNumericValueTuple = Tuple{"key"="LiteralNumericValue_"+(idLiteralNumericValue++).asString(),"value"= eLiteralNumericValue};
		self.add(eLiteralNumericValueTuple);
	}
	//datavalue.NumericReference -> Instantiation
	var idNumericReference = 0;
	for (eNumericReference in DSL!EObject.all.select(s|s.isTypeOf(DSL!NumericReference))){
		var eNumericReferenceTuple = Tuple{"key"="NumericReference_"+(idNumericReference++).asString(),"value"= eNumericReference};
		self.add(eNumericReferenceTuple);
	}
	//datavalue.AbstractComplexValue -> Instantiation
	var idAbstractComplexValue = 0;
	for (eAbstractComplexValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractComplexValue))){
		var eAbstractComplexValueTuple = Tuple{"key"="AbstractComplexValue_"+(idAbstractComplexValue++).asString(),"value"= eAbstractComplexValue};
		self.add(eAbstractComplexValueTuple);
	}
	//datavalue.ComplexValue -> Instantiation
	var idComplexValue = 0;
	for (eComplexValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!ComplexValue))){
		var eComplexValueTuple = Tuple{"key"="ComplexValue_"+(idComplexValue++).asString(),"value"= eComplexValue};
		self.add(eComplexValueTuple);
	}
	//datavalue.ComplexValueReference -> Instantiation
	var idComplexValueReference = 0;
	for (eComplexValueReference in DSL!EObject.all.select(s|s.isTypeOf(DSL!ComplexValueReference))){
		var eComplexValueReferenceTuple = Tuple{"key"="ComplexValueReference_"+(idComplexValueReference++).asString(),"value"= eComplexValueReference};
		self.add(eComplexValueReferenceTuple);
	}
	//datavalue.ValuePart -> Instantiation
	var idValuePart = 0;
	for (eValuePart in DSL!EObject.all.select(s|s.isTypeOf(DSL!ValuePart))){
		var eValuePartTuple = Tuple{"key"="ValuePart_"+(idValuePart++).asString(),"value"= eValuePart};
		self.add(eValuePartTuple);
	}
	//datavalue.AbstractExpressionValue -> Instantiation
	var idAbstractExpressionValue = 0;
	for (eAbstractExpressionValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractExpressionValue))){
		var eAbstractExpressionValueTuple = Tuple{"key"="AbstractExpressionValue_"+(idAbstractExpressionValue++).asString(),"value"= eAbstractExpressionValue};
		self.add(eAbstractExpressionValueTuple);
	}
	//datavalue.BinaryExpression -> Instantiation
	var idBinaryExpression = 0;
	for (eBinaryExpression in DSL!EObject.all.select(s|s.isTypeOf(DSL!BinaryExpression))){
		var eBinaryExpressionTuple = Tuple{"key"="BinaryExpression_"+(idBinaryExpression++).asString(),"value"= eBinaryExpression};
		self.add(eBinaryExpressionTuple);
	}
	//datavalue.UnaryExpression -> Instantiation
	var idUnaryExpression = 0;
	for (eUnaryExpression in DSL!EObject.all.select(s|s.isTypeOf(DSL!UnaryExpression))){
		var eUnaryExpressionTuple = Tuple{"key"="UnaryExpression_"+(idUnaryExpression++).asString(),"value"= eUnaryExpression};
		self.add(eUnaryExpressionTuple);
	}
	//datavalue.OpaqueExpression -> Instantiation
	var idOpaqueExpression = 0;
	for (eOpaqueExpression in DSL!EObject.all.select(s|s.isTypeOf(DSL!OpaqueExpression))){
		var eOpaqueExpressionTuple = Tuple{"key"="OpaqueExpression_"+(idOpaqueExpression++).asString(),"value"= eOpaqueExpression};
		self.add(eOpaqueExpressionTuple);
	}
	//libraries.ModelInformation -> Instantiation
	var idModelInformation = 0;
	for (eModelInformation in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModelInformation))){
		var eModelInformationTuple = Tuple{"key"="ModelInformation_"+(idModelInformation++).asString(),"value"= eModelInformation};
		self.add(eModelInformationTuple);
	}
	//libraries.LibraryReference -> Instantiation
	var idLibraryReference = 0;
	for (eLibraryReference in DSL!EObject.all.select(s|s.isTypeOf(DSL!LibraryReference))){
		var eLibraryReferenceTuple = Tuple{"key"="LibraryReference_"+(idLibraryReference++).asString(),"value"= eLibraryReference};
		self.add(eLibraryReferenceTuple);
	}
	//libraries.ModelVersion -> Instantiation
	var idModelVersion = 0;
	for (eModelVersion in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModelVersion))){
		var eModelVersionTuple = Tuple{"key"="ModelVersion_"+(idModelVersion++).asString(),"value"= eModelVersion};
		self.add(eModelVersionTuple);
	}
	//libraries.LibraryAbstractElement -> Instantiation
	var idLibraryAbstractElement = 0;
	for (eLibraryAbstractElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!LibraryAbstractElement))){
		var eLibraryAbstractElementTuple = Tuple{"key"="LibraryAbstractElement_"+(idLibraryAbstractElement++).asString(),"value"= eLibraryAbstractElement};
		self.add(eLibraryAbstractElementTuple);
	}
	//re.ReAbstractElement -> Instantiation
	var idReAbstractElement = 0;
	for (eReAbstractElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!ReAbstractElement))){
		var eReAbstractElementTuple = Tuple{"key"="ReAbstractElement_"+(idReAbstractElement++).asString(),"value"= eReAbstractElement};
		self.add(eReAbstractElementTuple);
	}
	//re.ReNamedElement -> Instantiation
	var idReNamedElement = 0;
	for (eReNamedElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!ReNamedElement))){
		var eReNamedElementTuple = Tuple{"key"="ReNamedElement_"+(idReNamedElement++).asString(),"value"= eReNamedElement};
		self.add(eReNamedElementTuple);
	}
	//re.ReDescriptionElement -> Instantiation
	var idReDescriptionElement = 0;
	for (eReDescriptionElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!ReDescriptionElement))){
		var eReDescriptionElementTuple = Tuple{"key"="ReDescriptionElement_"+(idReDescriptionElement++).asString(),"value"= eReDescriptionElement};
		self.add(eReDescriptionElementTuple);
	}
	//re.ReElementContainer -> Instantiation
	var idReElementContainer = 0;
	for (eReElementContainer in DSL!EObject.all.select(s|s.isTypeOf(DSL!ReElementContainer))){
		var eReElementContainerTuple = Tuple{"key"="ReElementContainer_"+(idReElementContainer++).asString(),"value"= eReElementContainer};
		self.add(eReElementContainerTuple);
	}
	//re.CatalogElementPkg -> Instantiation
	var idCatalogElementPkg = 0;
	for (eCatalogElementPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!CatalogElementPkg))){
		var eCatalogElementPkgTuple = Tuple{"key"="CatalogElementPkg_"+(idCatalogElementPkg++).asString(),"value"= eCatalogElementPkg};
		self.add(eCatalogElementPkgTuple);
	}
	//re.RecCatalog -> Instantiation
	var idRecCatalog = 0;
	for (eRecCatalog in DSL!EObject.all.select(s|s.isTypeOf(DSL!RecCatalog))){
		var eRecCatalogTuple = Tuple{"key"="RecCatalog_"+(idRecCatalog++).asString(),"value"= eRecCatalog};
		self.add(eRecCatalogTuple);
	}
	//re.GroupingElementPkg -> Instantiation
	var idGroupingElementPkg = 0;
	for (eGroupingElementPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!GroupingElementPkg))){
		var eGroupingElementPkgTuple = Tuple{"key"="GroupingElementPkg_"+(idGroupingElementPkg++).asString(),"value"= eGroupingElementPkg};
		self.add(eGroupingElementPkgTuple);
	}
	//re.CatalogElementLink -> Instantiation
	var idCatalogElementLink = 0;
	for (eCatalogElementLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!CatalogElementLink))){
		var eCatalogElementLinkTuple = Tuple{"key"="CatalogElementLink_"+(idCatalogElementLink++).asString(),"value"= eCatalogElementLink};
		self.add(eCatalogElementLinkTuple);
	}
	//re.CatalogElement -> Instantiation
	var idCatalogElement = 0;
	for (eCatalogElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!CatalogElement))){
		var eCatalogElementTuple = Tuple{"key"="CatalogElement_"+(idCatalogElement++).asString(),"value"= eCatalogElement};
		self.add(eCatalogElementTuple);
	}
	//re.CompliancyDefinitionPkg -> Instantiation
	var idCompliancyDefinitionPkg = 0;
	for (eCompliancyDefinitionPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!CompliancyDefinitionPkg))){
		var eCompliancyDefinitionPkgTuple = Tuple{"key"="CompliancyDefinitionPkg_"+(idCompliancyDefinitionPkg++).asString(),"value"= eCompliancyDefinitionPkg};
		self.add(eCompliancyDefinitionPkgTuple);
	}
	//re.CompliancyDefinition -> Instantiation
	var idCompliancyDefinition = 0;
	for (eCompliancyDefinition in DSL!EObject.all.select(s|s.isTypeOf(DSL!CompliancyDefinition))){
		var eCompliancyDefinitionTuple = Tuple{"key"="CompliancyDefinition_"+(idCompliancyDefinition++).asString(),"value"= eCompliancyDefinition};
		self.add(eCompliancyDefinitionTuple);
	}
}

@abstract
rule Base
	transform s : DSL!EObject
	to t : SysMLine!ItemUsage{
	t.declaredName = s.getDeclaredName();
	t.featureNote.add(":");
	t.featureSpecialization.add(s.getfeatureSpecialization());
	if (s.eContainingFeature != null and s.eContainingFeature.name != null){
		t.featureNote.add(":>");
		t.featureSpecialization.add(s.eContainingFeature().name);
	}
}

// capellamodeller.ecore
@lazy
rule Project
	transform s : DSL!Project //capellamodeller.Project
	to t : SysMLine!ItemUsage
	extends Base{
	//Project.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Project.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Project.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Project.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Project.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Project.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Project.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Project.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Project.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Project.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Project.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Project.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Project.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Project.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Project.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Project.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Project.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Project.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Project.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Project.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Project.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Project.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Project.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Project.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Project.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//Project.keyValuePairs -> EReference : keyValuePairs
	if (s.keyValuePairs.getEReference() != null) t.addNewReference("keyValuePairs", s.keyValuePairs.getEReference());
	//Project.ownedFolders -> EReference : ownedFolders
	if (s.ownedFolders.getEReference() != null) t.addNewReference("ownedFolders", s.ownedFolders.getEReference());
	//Project.ownedModelRoots -> EReference : ownedModelRoots
	if (s.ownedModelRoots.getEReference() != null) t.addNewReference("ownedModelRoots", s.ownedModelRoots.getEReference());
}

@lazy
rule Folder
	transform s : DSL!Folder //capellamodeller.Folder
	to t : SysMLine!ItemUsage
	extends Base{
	//Folder.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Folder.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Folder.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Folder.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Folder.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Folder.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Folder.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Folder.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Folder.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Folder.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Folder.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Folder.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Folder.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Folder.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Folder.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Folder.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Folder.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Folder.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Folder.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Folder.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Folder.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Folder.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Folder.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Folder.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Folder.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//Folder.ownedFolders -> EReference : ownedFolders
	if (s.ownedFolders.getEReference() != null) t.addNewReference("ownedFolders", s.ownedFolders.getEReference());
	//Folder.ownedModelRoots -> EReference : ownedModelRoots
	if (s.ownedModelRoots.getEReference() != null) t.addNewReference("ownedModelRoots", s.ownedModelRoots.getEReference());
}

@lazy
rule ModelRoot
	transform s : DSL!ModelRoot //capellamodeller.ModelRoot
	to t : SysMLine!ItemUsage
	extends Base{
	//ModelRoot.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ModelRoot.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ModelRoot.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ModelRoot.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ModelRoot.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ModelRoot.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ModelRoot.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ModelRoot.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ModelRoot.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ModelRoot.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ModelRoot.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ModelRoot.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ModelRoot.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ModelRoot.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ModelRoot.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ModelRoot.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ModelRoot.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ModelRoot.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ModelRoot.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ModelRoot.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule SystemEngineering
	transform s : DSL!SystemEngineering //capellamodeller.SystemEngineering
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemEngineering.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SystemEngineering.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SystemEngineering.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//SystemEngineering.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SystemEngineering.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SystemEngineering.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SystemEngineering.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SystemEngineering.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SystemEngineering.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SystemEngineering.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SystemEngineering.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SystemEngineering.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SystemEngineering.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SystemEngineering.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SystemEngineering.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SystemEngineering.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SystemEngineering.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SystemEngineering.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SystemEngineering.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SystemEngineering.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SystemEngineering.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SystemEngineering.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//SystemEngineering.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//SystemEngineering.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//SystemEngineering.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//SystemEngineering.reuseLinks -> EReference : reuseLinks
	if (s.reuseLinks.getEReference() != null) t.addNewReference("reuseLinks", s.reuseLinks.getEReference());
	//SystemEngineering.ownedReuseLinks -> EReference : ownedReuseLinks
	if (s.ownedReuseLinks.getEReference() != null) t.addNewReference("ownedReuseLinks", s.ownedReuseLinks.getEReference());
	//SystemEngineering.ownedArchitectures -> EReference : ownedArchitectures
	if (s.ownedArchitectures.getEReference() != null) t.addNewReference("ownedArchitectures", s.ownedArchitectures.getEReference());
	//SystemEngineering.ownedArchitecturePkgs -> EReference : ownedArchitecturePkgs
	if (s.ownedArchitecturePkgs.getEReference() != null) t.addNewReference("ownedArchitecturePkgs", s.ownedArchitecturePkgs.getEReference());
	//SystemEngineering.containedOperationalAnalysis -> EReference : containedOperationalAnalysis
	if (s.containedOperationalAnalysis.getEReference() != null) t.addNewReference("containedOperationalAnalysis", s.containedOperationalAnalysis.getEReference());
	//SystemEngineering.containedSystemAnalysis -> EReference : containedSystemAnalysis
	if (s.containedSystemAnalysis.getEReference() != null) t.addNewReference("containedSystemAnalysis", s.containedSystemAnalysis.getEReference());
	//SystemEngineering.containedLogicalArchitectures -> EReference : containedLogicalArchitectures
	if (s.containedLogicalArchitectures.getEReference() != null) t.addNewReference("containedLogicalArchitectures", s.containedLogicalArchitectures.getEReference());
	//SystemEngineering.containedPhysicalArchitectures -> EReference : containedPhysicalArchitectures
	if (s.containedPhysicalArchitectures.getEReference() != null) t.addNewReference("containedPhysicalArchitectures", s.containedPhysicalArchitectures.getEReference());
	//SystemEngineering.containedEPBSArchitectures -> EReference : containedEPBSArchitectures
	if (s.containedEPBSArchitectures.getEReference() != null) t.addNewReference("containedEPBSArchitectures", s.containedEPBSArchitectures.getEReference());
	//SystemEngineering.containedSharedPkgs -> EReference : containedSharedPkgs
	if (s.containedSharedPkgs.getEReference() != null) t.addNewReference("containedSharedPkgs", s.containedSharedPkgs.getEReference());
}

@lazy
rule SystemEngineeringPkg
	transform s : DSL!SystemEngineeringPkg //capellamodeller.SystemEngineeringPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemEngineeringPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SystemEngineeringPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SystemEngineeringPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//SystemEngineeringPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SystemEngineeringPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SystemEngineeringPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SystemEngineeringPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SystemEngineeringPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SystemEngineeringPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SystemEngineeringPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SystemEngineeringPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SystemEngineeringPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SystemEngineeringPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SystemEngineeringPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SystemEngineeringPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SystemEngineeringPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SystemEngineeringPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SystemEngineeringPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SystemEngineeringPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SystemEngineeringPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SystemEngineeringPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SystemEngineeringPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//SystemEngineeringPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//SystemEngineeringPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//SystemEngineeringPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//SystemEngineeringPkg.ownedSystemEngineerings -> EReference : ownedSystemEngineerings
	if (s.ownedSystemEngineerings.getEReference() != null) t.addNewReference("ownedSystemEngineerings", s.ownedSystemEngineerings.getEReference());
}

@lazy
rule Library
	transform s : DSL!Library //capellamodeller.Library
	to t : SysMLine!ItemUsage
	extends Base{
	//Library.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Library.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Library.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Library.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Library.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Library.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Library.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Library.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Library.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Library.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Library.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Library.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Library.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Library.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Library.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Library.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Library.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Library.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Library.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Library.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Library.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Library.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Library.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Library.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Library.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//Library.keyValuePairs -> EReference : keyValuePairs
	if (s.keyValuePairs.getEReference() != null) t.addNewReference("keyValuePairs", s.keyValuePairs.getEReference());
	//Library.ownedFolders -> EReference : ownedFolders
	if (s.ownedFolders.getEReference() != null) t.addNewReference("ownedFolders", s.ownedFolders.getEReference());
	//Library.ownedModelRoots -> EReference : ownedModelRoots
	if (s.ownedModelRoots.getEReference() != null) t.addNewReference("ownedModelRoots", s.ownedModelRoots.getEReference());
}


// capellacore.ecore
@lazy
rule CapellaElement
	transform s : DSL!CapellaElement //capellacore.CapellaElement
	to t : SysMLine!ItemUsage
	extends Base{
	//CapellaElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CapellaElement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CapellaElement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CapellaElement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CapellaElement.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CapellaElement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CapellaElement.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CapellaElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CapellaElement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CapellaElement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CapellaElement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CapellaElement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CapellaElement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CapellaElement.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CapellaElement.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CapellaElement.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CapellaElement.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CapellaElement.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CapellaElement.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CapellaElement.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule NamedElement
	transform s : DSL!NamedElement //capellacore.NamedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//NamedElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//NamedElement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//NamedElement.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//NamedElement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//NamedElement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//NamedElement.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//NamedElement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//NamedElement.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//NamedElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//NamedElement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//NamedElement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//NamedElement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//NamedElement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//NamedElement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//NamedElement.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//NamedElement.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//NamedElement.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//NamedElement.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//NamedElement.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//NamedElement.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//NamedElement.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule Relationship
	transform s : DSL!Relationship //capellacore.Relationship
	to t : SysMLine!ItemUsage
	extends Base{
	//Relationship.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Relationship.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Relationship.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Relationship.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Relationship.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Relationship.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Relationship.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Relationship.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Relationship.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Relationship.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Relationship.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Relationship.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//Relationship.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Relationship.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Relationship.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Relationship.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Relationship.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Relationship.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Relationship.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Relationship.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Relationship.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule Namespace
	transform s : DSL!Namespace //capellacore.Namespace
	to t : SysMLine!ItemUsage
	extends Base{
	//Namespace.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Namespace.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Namespace.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Namespace.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Namespace.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Namespace.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Namespace.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Namespace.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Namespace.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Namespace.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Namespace.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Namespace.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Namespace.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Namespace.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Namespace.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Namespace.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Namespace.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Namespace.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Namespace.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Namespace.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Namespace.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Namespace.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Namespace.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Namespace.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
}

@lazy
rule NamedRelationship
	transform s : DSL!NamedRelationship //capellacore.NamedRelationship
	to t : SysMLine!ItemUsage
	extends Base{
	//NamedRelationship.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//NamedRelationship.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//NamedRelationship.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//NamedRelationship.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//NamedRelationship.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//NamedRelationship.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//NamedRelationship.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//NamedRelationship.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//NamedRelationship.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//NamedRelationship.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//NamedRelationship.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//NamedRelationship.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//NamedRelationship.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//NamedRelationship.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//NamedRelationship.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//NamedRelationship.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//NamedRelationship.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//NamedRelationship.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//NamedRelationship.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//NamedRelationship.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//NamedRelationship.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//NamedRelationship.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//NamedRelationship.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
}

@lazy
rule Structure
	transform s : DSL!Structure //capellacore.Structure
	to t : SysMLine!ItemUsage
	extends Base{
	//Structure.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Structure.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Structure.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Structure.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Structure.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Structure.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Structure.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Structure.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Structure.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Structure.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Structure.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Structure.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Structure.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Structure.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Structure.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Structure.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Structure.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Structure.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Structure.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Structure.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Structure.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Structure.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Structure.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Structure.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Structure.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
}

@lazy
rule AbstractModellingStructure
	transform s : DSL!AbstractModellingStructure //capellacore.AbstractModellingStructure
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractModellingStructure.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractModellingStructure.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractModellingStructure.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractModellingStructure.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractModellingStructure.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractModellingStructure.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractModellingStructure.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractModellingStructure.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractModellingStructure.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractModellingStructure.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractModellingStructure.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractModellingStructure.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractModellingStructure.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractModellingStructure.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractModellingStructure.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractModellingStructure.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractModellingStructure.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractModellingStructure.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractModellingStructure.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractModellingStructure.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractModellingStructure.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractModellingStructure.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//AbstractModellingStructure.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//AbstractModellingStructure.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//AbstractModellingStructure.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//AbstractModellingStructure.reuseLinks -> EReference : reuseLinks
	if (s.reuseLinks.getEReference() != null) t.addNewReference("reuseLinks", s.reuseLinks.getEReference());
	//AbstractModellingStructure.ownedReuseLinks -> EReference : ownedReuseLinks
	if (s.ownedReuseLinks.getEReference() != null) t.addNewReference("ownedReuseLinks", s.ownedReuseLinks.getEReference());
	//AbstractModellingStructure.ownedArchitectures -> EReference : ownedArchitectures
	if (s.ownedArchitectures.getEReference() != null) t.addNewReference("ownedArchitectures", s.ownedArchitectures.getEReference());
	//AbstractModellingStructure.ownedArchitecturePkgs -> EReference : ownedArchitecturePkgs
	if (s.ownedArchitecturePkgs.getEReference() != null) t.addNewReference("ownedArchitecturePkgs", s.ownedArchitecturePkgs.getEReference());
}

@lazy
rule ModellingBlock
	transform s : DSL!ModellingBlock //capellacore.ModellingBlock
	to t : SysMLine!ItemUsage
	extends Base{
	//ModellingBlock.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ModellingBlock.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ModellingBlock.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ModellingBlock.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ModellingBlock.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ModellingBlock.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ModellingBlock.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ModellingBlock.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ModellingBlock.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ModellingBlock.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ModellingBlock.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ModellingBlock.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ModellingBlock.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//ModellingBlock.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ModellingBlock.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ModellingBlock.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ModellingBlock.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ModellingBlock.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ModellingBlock.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ModellingBlock.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ModellingBlock.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ModellingBlock.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ModellingBlock.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//ModellingBlock.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//ModellingBlock.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//ModellingBlock.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
}

@lazy
rule ModellingArchitecture
	transform s : DSL!ModellingArchitecture //capellacore.ModellingArchitecture
	to t : SysMLine!ItemUsage
	extends Base{
	//ModellingArchitecture.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ModellingArchitecture.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ModellingArchitecture.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ModellingArchitecture.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ModellingArchitecture.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ModellingArchitecture.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ModellingArchitecture.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ModellingArchitecture.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ModellingArchitecture.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ModellingArchitecture.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ModellingArchitecture.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ModellingArchitecture.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ModellingArchitecture.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ModellingArchitecture.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ModellingArchitecture.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ModellingArchitecture.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ModellingArchitecture.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ModellingArchitecture.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ModellingArchitecture.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ModellingArchitecture.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ModellingArchitecture.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ModellingArchitecture.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//ModellingArchitecture.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//ModellingArchitecture.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//ModellingArchitecture.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
}

@lazy
rule ModellingArchitecturePkg
	transform s : DSL!ModellingArchitecturePkg //capellacore.ModellingArchitecturePkg
	to t : SysMLine!ItemUsage
	extends Base{
	//ModellingArchitecturePkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ModellingArchitecturePkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ModellingArchitecturePkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ModellingArchitecturePkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ModellingArchitecturePkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ModellingArchitecturePkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ModellingArchitecturePkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ModellingArchitecturePkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ModellingArchitecturePkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ModellingArchitecturePkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ModellingArchitecturePkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ModellingArchitecturePkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ModellingArchitecturePkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ModellingArchitecturePkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ModellingArchitecturePkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ModellingArchitecturePkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ModellingArchitecturePkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ModellingArchitecturePkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ModellingArchitecturePkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ModellingArchitecturePkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ModellingArchitecturePkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ModellingArchitecturePkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//ModellingArchitecturePkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//ModellingArchitecturePkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//ModellingArchitecturePkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
}

@lazy
rule Type
	transform s : DSL!Type //capellacore.Type
	to t : SysMLine!ItemUsage
	extends Base{
	//Type.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Type.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Type.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Type.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Type.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Type.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Type.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Type.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Type.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Type.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Type.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Type.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Type.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//Type.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Type.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Type.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Type.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Type.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Type.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Type.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Type.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Type.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Type.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Type.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Type.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Type.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
}

@lazy
rule TypedElement
	transform s : DSL!TypedElement //capellacore.TypedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//TypedElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//TypedElement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//TypedElement.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//TypedElement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//TypedElement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//TypedElement.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//TypedElement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//TypedElement.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//TypedElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//TypedElement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//TypedElement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//TypedElement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//TypedElement.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//TypedElement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//TypedElement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//TypedElement.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//TypedElement.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//TypedElement.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//TypedElement.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//TypedElement.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//TypedElement.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//TypedElement.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//TypedElement.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
}

@lazy
rule Trace
	transform s : DSL!Trace //capellacore.Trace
	to t : SysMLine!ItemUsage
	extends Base{
	//Trace.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Trace.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Trace.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Trace.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Trace.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Trace.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Trace.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Trace.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Trace.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Trace.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Trace.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Trace.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//Trace.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Trace.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Trace.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Trace.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Trace.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Trace.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Trace.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Trace.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Trace.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Trace.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//Trace.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
}

@lazy
rule AbstractAnnotation
	transform s : DSL!AbstractAnnotation //capellacore.AbstractAnnotation
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractAnnotation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractAnnotation.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractAnnotation.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractAnnotation.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractAnnotation.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractAnnotation.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractAnnotation.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractAnnotation.content -> EAttribute : content
	if (s.content.getEAttribute() != null) t.addNewAttribute("content", s.content.getEAttribute());
	//AbstractAnnotation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractAnnotation.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractAnnotation.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractAnnotation.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractAnnotation.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractAnnotation.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractAnnotation.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractAnnotation.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractAnnotation.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractAnnotation.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractAnnotation.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractAnnotation.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractAnnotation.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule NamingRule
	transform s : DSL!NamingRule //capellacore.NamingRule
	to t : SysMLine!ItemUsage
	extends Base{
	//NamingRule.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//NamingRule.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//NamingRule.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//NamingRule.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//NamingRule.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//NamingRule.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//NamingRule.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//NamingRule.content -> EAttribute : content
	if (s.content.getEAttribute() != null) t.addNewAttribute("content", s.content.getEAttribute());
	//NamingRule.targetType -> EAttribute : targetType
	if (s.targetType.getEAttribute() != null) t.addNewAttribute("targetType", s.targetType.getEAttribute());
	//NamingRule.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//NamingRule.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//NamingRule.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//NamingRule.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//NamingRule.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//NamingRule.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//NamingRule.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//NamingRule.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//NamingRule.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//NamingRule.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//NamingRule.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//NamingRule.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//NamingRule.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule Constraint
	transform s : DSL!Constraint //capellacore.Constraint
	to t : SysMLine!ItemUsage
	extends Base{
	//Constraint.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Constraint.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Constraint.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Constraint.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Constraint.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Constraint.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Constraint.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Constraint.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Constraint.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Constraint.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Constraint.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Constraint.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Constraint.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Constraint.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Constraint.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Constraint.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Constraint.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Constraint.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Constraint.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Constraint.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Constraint.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Constraint.constrainedElements -> EReference : constrainedElements
	if (s.constrainedElements.getEReference() != null) t.addNewReference("constrainedElements", s.constrainedElements.getEReference());
	//Constraint.ownedSpecification -> EReference : ownedSpecification
	if (s.ownedSpecification.getEReference() != null) t.addNewReference("ownedSpecification", s.ownedSpecification.getEReference());
	//Constraint.context -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context", s.context.getEReference());
}

@lazy
rule KeyValue
	transform s : DSL!KeyValue //capellacore.KeyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//KeyValue.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//KeyValue.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//KeyValue.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//KeyValue.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//KeyValue.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//KeyValue.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//KeyValue.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//KeyValue.key -> EAttribute : key
	if (s.key.getEAttribute() != null) t.addNewAttribute("key", s.key.getEAttribute());
	//KeyValue.value -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value", s.value.getEAttribute());
	//KeyValue.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//KeyValue.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//KeyValue.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//KeyValue.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//KeyValue.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//KeyValue.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//KeyValue.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//KeyValue.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//KeyValue.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//KeyValue.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//KeyValue.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//KeyValue.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//KeyValue.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule ReuseLink
	transform s : DSL!ReuseLink //capellacore.ReuseLink
	to t : SysMLine!ItemUsage
	extends Base{
	//ReuseLink.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ReuseLink.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ReuseLink.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ReuseLink.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ReuseLink.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ReuseLink.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ReuseLink.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ReuseLink.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ReuseLink.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ReuseLink.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ReuseLink.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ReuseLink.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ReuseLink.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ReuseLink.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ReuseLink.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ReuseLink.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ReuseLink.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ReuseLink.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ReuseLink.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ReuseLink.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ReuseLink.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ReuseLink.reused -> EReference : reused
	if (s.reused.getEReference() != null) t.addNewReference("reused", s.reused.getEReference());
	//ReuseLink.reuser -> EReference : reuser
	if (s.reuser.getEReference() != null) t.addNewReference("reuser", s.reuser.getEReference());
}

@lazy
rule ReuseableStructure
	transform s : DSL!ReuseableStructure //capellacore.ReuseableStructure
	to t : SysMLine!ItemUsage
	extends Base{
	//ReuseableStructure.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ReuseableStructure.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ReuseableStructure.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ReuseableStructure.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ReuseableStructure.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ReuseableStructure.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ReuseableStructure.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ReuseableStructure.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ReuseableStructure.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ReuseableStructure.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ReuseableStructure.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ReuseableStructure.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ReuseableStructure.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ReuseableStructure.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ReuseableStructure.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ReuseableStructure.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ReuseableStructure.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ReuseableStructure.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ReuseableStructure.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ReuseableStructure.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ReuseableStructure.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ReuseableStructure.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//ReuseableStructure.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//ReuseableStructure.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//ReuseableStructure.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//ReuseableStructure.reuseLinks -> EReference : reuseLinks
	if (s.reuseLinks.getEReference() != null) t.addNewReference("reuseLinks", s.reuseLinks.getEReference());
}

@lazy
rule ReuserStructure
	transform s : DSL!ReuserStructure //capellacore.ReuserStructure
	to t : SysMLine!ItemUsage
	extends Base{
	//ReuserStructure.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ReuserStructure.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ReuserStructure.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ReuserStructure.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ReuserStructure.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ReuserStructure.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ReuserStructure.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ReuserStructure.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ReuserStructure.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ReuserStructure.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ReuserStructure.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ReuserStructure.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ReuserStructure.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ReuserStructure.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ReuserStructure.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ReuserStructure.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ReuserStructure.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ReuserStructure.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ReuserStructure.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ReuserStructure.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ReuserStructure.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ReuserStructure.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//ReuserStructure.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//ReuserStructure.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//ReuserStructure.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//ReuserStructure.reuseLinks -> EReference : reuseLinks
	if (s.reuseLinks.getEReference() != null) t.addNewReference("reuseLinks", s.reuseLinks.getEReference());
	//ReuserStructure.ownedReuseLinks -> EReference : ownedReuseLinks
	if (s.ownedReuseLinks.getEReference() != null) t.addNewReference("ownedReuseLinks", s.ownedReuseLinks.getEReference());
}

@lazy
rule GeneralizableElement
	transform s : DSL!GeneralizableElement //capellacore.GeneralizableElement
	to t : SysMLine!ItemUsage
	extends Base{
	//GeneralizableElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//GeneralizableElement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//GeneralizableElement.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//GeneralizableElement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//GeneralizableElement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//GeneralizableElement.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//GeneralizableElement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//GeneralizableElement.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//GeneralizableElement.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//GeneralizableElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//GeneralizableElement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//GeneralizableElement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//GeneralizableElement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//GeneralizableElement.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//GeneralizableElement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//GeneralizableElement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//GeneralizableElement.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//GeneralizableElement.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//GeneralizableElement.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//GeneralizableElement.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//GeneralizableElement.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//GeneralizableElement.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//GeneralizableElement.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//GeneralizableElement.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//GeneralizableElement.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//GeneralizableElement.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//GeneralizableElement.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//GeneralizableElement.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//GeneralizableElement.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//GeneralizableElement.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//GeneralizableElement.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//GeneralizableElement.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
}

@lazy
rule Classifier
	transform s : DSL!Classifier //capellacore.Classifier
	to t : SysMLine!ItemUsage
	extends Base{
	//Classifier.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Classifier.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Classifier.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Classifier.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Classifier.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Classifier.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Classifier.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Classifier.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Classifier.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//Classifier.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Classifier.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Classifier.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Classifier.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Classifier.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//Classifier.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Classifier.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Classifier.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Classifier.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Classifier.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Classifier.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Classifier.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Classifier.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Classifier.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Classifier.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Classifier.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Classifier.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Classifier.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//Classifier.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//Classifier.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//Classifier.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//Classifier.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//Classifier.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//Classifier.ownedFeatures -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//Classifier.containedProperties -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
}

@lazy
rule GeneralClass
	transform s : DSL!GeneralClass //capellacore.GeneralClass
	to t : SysMLine!ItemUsage
	extends Base{
	//GeneralClass.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//GeneralClass.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//GeneralClass.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//GeneralClass.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//GeneralClass.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//GeneralClass.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//GeneralClass.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//GeneralClass.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//GeneralClass.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//GeneralClass.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//GeneralClass.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//GeneralClass.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//GeneralClass.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//GeneralClass.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//GeneralClass.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//GeneralClass.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//GeneralClass.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//GeneralClass.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//GeneralClass.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//GeneralClass.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//GeneralClass.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//GeneralClass.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//GeneralClass.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//GeneralClass.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//GeneralClass.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//GeneralClass.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//GeneralClass.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//GeneralClass.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//GeneralClass.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//GeneralClass.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//GeneralClass.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//GeneralClass.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//GeneralClass.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//GeneralClass.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//GeneralClass.ownedFeatures -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//GeneralClass.containedProperties -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//GeneralClass.containedOperations -> EReference : containedOperations
	if (s.containedOperations.getEReference() != null) t.addNewReference("containedOperations", s.containedOperations.getEReference());
	//GeneralClass.nestedGeneralClasses -> EReference : nestedGeneralClasses
	if (s.nestedGeneralClasses.getEReference() != null) t.addNewReference("nestedGeneralClasses", s.nestedGeneralClasses.getEReference());
}

@lazy
rule Generalization
	transform s : DSL!Generalization //capellacore.Generalization
	to t : SysMLine!ItemUsage
	extends Base{
	//Generalization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Generalization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Generalization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Generalization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Generalization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Generalization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Generalization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Generalization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Generalization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Generalization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Generalization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Generalization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//Generalization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Generalization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Generalization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Generalization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Generalization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Generalization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Generalization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Generalization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Generalization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Generalization.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//Generalization.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
}

@lazy
rule Feature
	transform s : DSL!Feature //capellacore.Feature
	to t : SysMLine!ItemUsage
	extends Base{
	//Feature.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Feature.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Feature.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Feature.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Feature.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Feature.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Feature.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Feature.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Feature.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Feature.isStatic -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//Feature.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//Feature.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Feature.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Feature.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Feature.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Feature.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Feature.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Feature.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Feature.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Feature.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Feature.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Feature.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Feature.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Feature.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule AbstractExchangeItemPkg
	transform s : DSL!AbstractExchangeItemPkg //capellacore.AbstractExchangeItemPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractExchangeItemPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractExchangeItemPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractExchangeItemPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractExchangeItemPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractExchangeItemPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractExchangeItemPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractExchangeItemPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractExchangeItemPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractExchangeItemPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractExchangeItemPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractExchangeItemPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractExchangeItemPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractExchangeItemPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractExchangeItemPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractExchangeItemPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractExchangeItemPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractExchangeItemPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractExchangeItemPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractExchangeItemPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractExchangeItemPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractExchangeItemPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractExchangeItemPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//AbstractExchangeItemPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//AbstractExchangeItemPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//AbstractExchangeItemPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//AbstractExchangeItemPkg.ownedExchangeItems -> EReference : ownedExchangeItems
	if (s.ownedExchangeItems.getEReference() != null) t.addNewReference("ownedExchangeItems", s.ownedExchangeItems.getEReference());
}

@lazy
rule Allocation
	transform s : DSL!Allocation //capellacore.Allocation
	to t : SysMLine!ItemUsage
	extends Base{
	//Allocation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Allocation.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Allocation.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Allocation.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Allocation.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Allocation.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Allocation.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Allocation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Allocation.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Allocation.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Allocation.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Allocation.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//Allocation.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Allocation.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Allocation.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Allocation.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Allocation.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Allocation.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Allocation.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Allocation.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Allocation.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Allocation.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//Allocation.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
}

@lazy
rule Involvement
	transform s : DSL!Involvement //capellacore.Involvement
	to t : SysMLine!ItemUsage
	extends Base{
	//Involvement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Involvement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Involvement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Involvement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Involvement.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Involvement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Involvement.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Involvement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Involvement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Involvement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Involvement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Involvement.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//Involvement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Involvement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Involvement.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Involvement.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Involvement.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Involvement.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Involvement.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Involvement.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Involvement.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Involvement.involver -> EReference : involver
	if (s.involver.getEReference() != null) t.addNewReference("involver", s.involver.getEReference());
	//Involvement.involved -> EReference : involved
	if (s.involved.getEReference() != null) t.addNewReference("involved", s.involved.getEReference());
}

@lazy
rule InvolverElement
	transform s : DSL!InvolverElement //capellacore.InvolverElement
	to t : SysMLine!ItemUsage
	extends Base{
	//InvolverElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InvolverElement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InvolverElement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//InvolverElement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//InvolverElement.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//InvolverElement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//InvolverElement.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//InvolverElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InvolverElement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InvolverElement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InvolverElement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InvolverElement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//InvolverElement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//InvolverElement.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//InvolverElement.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//InvolverElement.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//InvolverElement.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//InvolverElement.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//InvolverElement.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//InvolverElement.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//InvolverElement.involvedInvolvements -> EReference : involvedInvolvements
	if (s.involvedInvolvements.getEReference() != null) t.addNewReference("involvedInvolvements", s.involvedInvolvements.getEReference());
}

@lazy
rule InvolvedElement
	transform s : DSL!InvolvedElement //capellacore.InvolvedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//InvolvedElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InvolvedElement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InvolvedElement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//InvolvedElement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//InvolvedElement.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//InvolvedElement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//InvolvedElement.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//InvolvedElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InvolvedElement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InvolvedElement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InvolvedElement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InvolvedElement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//InvolvedElement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//InvolvedElement.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//InvolvedElement.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//InvolvedElement.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//InvolvedElement.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//InvolvedElement.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//InvolvedElement.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//InvolvedElement.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//InvolvedElement.involvingInvolvements -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
}

@lazy
rule AbstractPropertyValue
	transform s : DSL!AbstractPropertyValue //capellacore.AbstractPropertyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractPropertyValue.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractPropertyValue.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractPropertyValue.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractPropertyValue.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractPropertyValue.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractPropertyValue.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractPropertyValue.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractPropertyValue.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractPropertyValue.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractPropertyValue.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractPropertyValue.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractPropertyValue.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractPropertyValue.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractPropertyValue.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractPropertyValue.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractPropertyValue.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractPropertyValue.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractPropertyValue.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractPropertyValue.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractPropertyValue.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractPropertyValue.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractPropertyValue.involvedElements -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null) t.addNewReference("involvedElements", s.involvedElements.getEReference());
	//AbstractPropertyValue.valuedElements -> EReference : valuedElements
	if (s.valuedElements.getEReference() != null) t.addNewReference("valuedElements", s.valuedElements.getEReference());
}

@lazy
rule StringPropertyValue
	transform s : DSL!StringPropertyValue //capellacore.StringPropertyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//StringPropertyValue.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//StringPropertyValue.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//StringPropertyValue.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//StringPropertyValue.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//StringPropertyValue.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//StringPropertyValue.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//StringPropertyValue.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//StringPropertyValue.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//StringPropertyValue.value -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value", s.value.getEAttribute());
	//StringPropertyValue.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//StringPropertyValue.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//StringPropertyValue.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//StringPropertyValue.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//StringPropertyValue.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//StringPropertyValue.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//StringPropertyValue.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//StringPropertyValue.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//StringPropertyValue.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//StringPropertyValue.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//StringPropertyValue.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//StringPropertyValue.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//StringPropertyValue.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//StringPropertyValue.involvedElements -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null) t.addNewReference("involvedElements", s.involvedElements.getEReference());
	//StringPropertyValue.valuedElements -> EReference : valuedElements
	if (s.valuedElements.getEReference() != null) t.addNewReference("valuedElements", s.valuedElements.getEReference());
}

@lazy
rule IntegerPropertyValue
	transform s : DSL!IntegerPropertyValue //capellacore.IntegerPropertyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//IntegerPropertyValue.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//IntegerPropertyValue.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//IntegerPropertyValue.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//IntegerPropertyValue.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//IntegerPropertyValue.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//IntegerPropertyValue.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//IntegerPropertyValue.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//IntegerPropertyValue.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//IntegerPropertyValue.value -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value", s.value.getEAttribute());
	//IntegerPropertyValue.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//IntegerPropertyValue.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//IntegerPropertyValue.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//IntegerPropertyValue.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//IntegerPropertyValue.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//IntegerPropertyValue.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//IntegerPropertyValue.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//IntegerPropertyValue.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//IntegerPropertyValue.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//IntegerPropertyValue.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//IntegerPropertyValue.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//IntegerPropertyValue.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//IntegerPropertyValue.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//IntegerPropertyValue.involvedElements -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null) t.addNewReference("involvedElements", s.involvedElements.getEReference());
	//IntegerPropertyValue.valuedElements -> EReference : valuedElements
	if (s.valuedElements.getEReference() != null) t.addNewReference("valuedElements", s.valuedElements.getEReference());
}

@lazy
rule BooleanPropertyValue
	transform s : DSL!BooleanPropertyValue //capellacore.BooleanPropertyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//BooleanPropertyValue.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//BooleanPropertyValue.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//BooleanPropertyValue.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//BooleanPropertyValue.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//BooleanPropertyValue.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//BooleanPropertyValue.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//BooleanPropertyValue.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//BooleanPropertyValue.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//BooleanPropertyValue.value -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value", s.value.getEAttribute());
	//BooleanPropertyValue.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//BooleanPropertyValue.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//BooleanPropertyValue.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//BooleanPropertyValue.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//BooleanPropertyValue.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//BooleanPropertyValue.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//BooleanPropertyValue.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//BooleanPropertyValue.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//BooleanPropertyValue.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//BooleanPropertyValue.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//BooleanPropertyValue.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//BooleanPropertyValue.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//BooleanPropertyValue.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//BooleanPropertyValue.involvedElements -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null) t.addNewReference("involvedElements", s.involvedElements.getEReference());
	//BooleanPropertyValue.valuedElements -> EReference : valuedElements
	if (s.valuedElements.getEReference() != null) t.addNewReference("valuedElements", s.valuedElements.getEReference());
}

@lazy
rule FloatPropertyValue
	transform s : DSL!FloatPropertyValue //capellacore.FloatPropertyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//FloatPropertyValue.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FloatPropertyValue.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FloatPropertyValue.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//FloatPropertyValue.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//FloatPropertyValue.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//FloatPropertyValue.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//FloatPropertyValue.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//FloatPropertyValue.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//FloatPropertyValue.value -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value", s.value.getEAttribute());
	//FloatPropertyValue.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FloatPropertyValue.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FloatPropertyValue.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FloatPropertyValue.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//FloatPropertyValue.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//FloatPropertyValue.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//FloatPropertyValue.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//FloatPropertyValue.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//FloatPropertyValue.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//FloatPropertyValue.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//FloatPropertyValue.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//FloatPropertyValue.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//FloatPropertyValue.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//FloatPropertyValue.involvedElements -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null) t.addNewReference("involvedElements", s.involvedElements.getEReference());
	//FloatPropertyValue.valuedElements -> EReference : valuedElements
	if (s.valuedElements.getEReference() != null) t.addNewReference("valuedElements", s.valuedElements.getEReference());
}

@lazy
rule EnumerationPropertyValue
	transform s : DSL!EnumerationPropertyValue //capellacore.EnumerationPropertyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//EnumerationPropertyValue.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//EnumerationPropertyValue.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//EnumerationPropertyValue.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//EnumerationPropertyValue.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//EnumerationPropertyValue.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//EnumerationPropertyValue.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//EnumerationPropertyValue.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//EnumerationPropertyValue.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//EnumerationPropertyValue.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//EnumerationPropertyValue.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//EnumerationPropertyValue.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//EnumerationPropertyValue.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//EnumerationPropertyValue.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//EnumerationPropertyValue.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//EnumerationPropertyValue.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//EnumerationPropertyValue.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//EnumerationPropertyValue.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//EnumerationPropertyValue.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//EnumerationPropertyValue.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//EnumerationPropertyValue.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//EnumerationPropertyValue.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//EnumerationPropertyValue.involvedElements -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null) t.addNewReference("involvedElements", s.involvedElements.getEReference());
	//EnumerationPropertyValue.valuedElements -> EReference : valuedElements
	if (s.valuedElements.getEReference() != null) t.addNewReference("valuedElements", s.valuedElements.getEReference());
	//EnumerationPropertyValue.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//EnumerationPropertyValue.value -> EReference : value
	if (s.value.getEReference() != null) t.addNewReference("value", s.value.getEReference());
}

@lazy
rule EnumerationPropertyType
	transform s : DSL!EnumerationPropertyType //capellacore.EnumerationPropertyType
	to t : SysMLine!ItemUsage
	extends Base{
	//EnumerationPropertyType.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//EnumerationPropertyType.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//EnumerationPropertyType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//EnumerationPropertyType.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//EnumerationPropertyType.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//EnumerationPropertyType.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//EnumerationPropertyType.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//EnumerationPropertyType.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//EnumerationPropertyType.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//EnumerationPropertyType.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//EnumerationPropertyType.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//EnumerationPropertyType.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//EnumerationPropertyType.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//EnumerationPropertyType.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//EnumerationPropertyType.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//EnumerationPropertyType.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//EnumerationPropertyType.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//EnumerationPropertyType.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//EnumerationPropertyType.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//EnumerationPropertyType.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//EnumerationPropertyType.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//EnumerationPropertyType.ownedLiterals -> EReference : ownedLiterals
	if (s.ownedLiterals.getEReference() != null) t.addNewReference("ownedLiterals", s.ownedLiterals.getEReference());
}

@lazy
rule EnumerationPropertyLiteral
	transform s : DSL!EnumerationPropertyLiteral //capellacore.EnumerationPropertyLiteral
	to t : SysMLine!ItemUsage
	extends Base{
	//EnumerationPropertyLiteral.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//EnumerationPropertyLiteral.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//EnumerationPropertyLiteral.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//EnumerationPropertyLiteral.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//EnumerationPropertyLiteral.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//EnumerationPropertyLiteral.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//EnumerationPropertyLiteral.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//EnumerationPropertyLiteral.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//EnumerationPropertyLiteral.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//EnumerationPropertyLiteral.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//EnumerationPropertyLiteral.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//EnumerationPropertyLiteral.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//EnumerationPropertyLiteral.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//EnumerationPropertyLiteral.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//EnumerationPropertyLiteral.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//EnumerationPropertyLiteral.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//EnumerationPropertyLiteral.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//EnumerationPropertyLiteral.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//EnumerationPropertyLiteral.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//EnumerationPropertyLiteral.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//EnumerationPropertyLiteral.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule PropertyValueGroup
	transform s : DSL!PropertyValueGroup //capellacore.PropertyValueGroup
	to t : SysMLine!ItemUsage
	extends Base{
	//PropertyValueGroup.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PropertyValueGroup.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PropertyValueGroup.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PropertyValueGroup.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PropertyValueGroup.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PropertyValueGroup.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PropertyValueGroup.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PropertyValueGroup.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PropertyValueGroup.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PropertyValueGroup.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PropertyValueGroup.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PropertyValueGroup.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PropertyValueGroup.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PropertyValueGroup.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PropertyValueGroup.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PropertyValueGroup.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PropertyValueGroup.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PropertyValueGroup.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PropertyValueGroup.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PropertyValueGroup.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PropertyValueGroup.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PropertyValueGroup.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//PropertyValueGroup.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//PropertyValueGroup.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//PropertyValueGroup.valuedElements -> EReference : valuedElements
	if (s.valuedElements.getEReference() != null) t.addNewReference("valuedElements", s.valuedElements.getEReference());
}

@lazy
rule PropertyValuePkg
	transform s : DSL!PropertyValuePkg //capellacore.PropertyValuePkg
	to t : SysMLine!ItemUsage
	extends Base{
	//PropertyValuePkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PropertyValuePkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PropertyValuePkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PropertyValuePkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PropertyValuePkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PropertyValuePkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PropertyValuePkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PropertyValuePkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PropertyValuePkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PropertyValuePkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PropertyValuePkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PropertyValuePkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PropertyValuePkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PropertyValuePkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PropertyValuePkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PropertyValuePkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PropertyValuePkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PropertyValuePkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PropertyValuePkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PropertyValuePkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PropertyValuePkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PropertyValuePkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//PropertyValuePkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//PropertyValuePkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//PropertyValuePkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
}

@lazy
rule AbstractDependenciesPkg
	transform s : DSL!AbstractDependenciesPkg //capellacore.AbstractDependenciesPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractDependenciesPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractDependenciesPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractDependenciesPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractDependenciesPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractDependenciesPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractDependenciesPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractDependenciesPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractDependenciesPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractDependenciesPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractDependenciesPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractDependenciesPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractDependenciesPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractDependenciesPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractDependenciesPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractDependenciesPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractDependenciesPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractDependenciesPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractDependenciesPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractDependenciesPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractDependenciesPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractDependenciesPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractDependenciesPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//AbstractDependenciesPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//AbstractDependenciesPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//AbstractDependenciesPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
}


// modellingcore.ecore
@lazy
rule ModelElement
	transform s : DSL!ModelElement //modellingcore.ModelElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ModelElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ModelElement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ModelElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ModelElement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ModelElement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ModelElement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
}

@lazy
rule AbstractRelationship
	transform s : DSL!AbstractRelationship //modellingcore.AbstractRelationship
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractRelationship.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractRelationship.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractRelationship.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractRelationship.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractRelationship.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractRelationship.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractRelationship.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
}

@lazy
rule AbstractNamedElement
	transform s : DSL!AbstractNamedElement //modellingcore.AbstractNamedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractNamedElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractNamedElement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractNamedElement.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractNamedElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractNamedElement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractNamedElement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractNamedElement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
}

@lazy
rule InformationsExchanger
	transform s : DSL!InformationsExchanger //modellingcore.InformationsExchanger
	to t : SysMLine!ItemUsage
	extends Base{
	//InformationsExchanger.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InformationsExchanger.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InformationsExchanger.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InformationsExchanger.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InformationsExchanger.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InformationsExchanger.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InformationsExchanger.incomingInformationFlows -> EReference : incomingInformationFlows
	if (s.incomingInformationFlows.getEReference() != null) t.addNewReference("incomingInformationFlows", s.incomingInformationFlows.getEReference());
	//InformationsExchanger.outgoingInformationFlows -> EReference : outgoingInformationFlows
	if (s.outgoingInformationFlows.getEReference() != null) t.addNewReference("outgoingInformationFlows", s.outgoingInformationFlows.getEReference());
	//InformationsExchanger.informationFlows -> EReference : informationFlows
	if (s.informationFlows.getEReference() != null) t.addNewReference("informationFlows", s.informationFlows.getEReference());
}

@lazy
rule TraceableElement
	transform s : DSL!TraceableElement //modellingcore.TraceableElement
	to t : SysMLine!ItemUsage
	extends Base{
	//TraceableElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//TraceableElement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//TraceableElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//TraceableElement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//TraceableElement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//TraceableElement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//TraceableElement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//TraceableElement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
}

@lazy
rule FinalizableElement
	transform s : DSL!FinalizableElement //modellingcore.FinalizableElement
	to t : SysMLine!ItemUsage
	extends Base{
	//FinalizableElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FinalizableElement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FinalizableElement.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//FinalizableElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FinalizableElement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FinalizableElement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FinalizableElement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
}

@lazy
rule PublishableElement
	transform s : DSL!PublishableElement //modellingcore.PublishableElement
	to t : SysMLine!ItemUsage
	extends Base{
	//PublishableElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PublishableElement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PublishableElement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PublishableElement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PublishableElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PublishableElement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PublishableElement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PublishableElement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
}

@lazy
rule AbstractType
	transform s : DSL!AbstractType //modellingcore.AbstractType
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractType.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractType.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractType.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractType.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractType.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractType.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractType.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
}

@lazy
rule AbstractTypedElement
	transform s : DSL!AbstractTypedElement //modellingcore.AbstractTypedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractTypedElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractTypedElement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractTypedElement.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractTypedElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractTypedElement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractTypedElement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractTypedElement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractTypedElement.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
}

@lazy
rule AbstractTrace
	transform s : DSL!AbstractTrace //modellingcore.AbstractTrace
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractTrace.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractTrace.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractTrace.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractTrace.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractTrace.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractTrace.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractTrace.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractTrace.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractTrace.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//AbstractTrace.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
}

@lazy
rule AbstractConstraint
	transform s : DSL!AbstractConstraint //modellingcore.AbstractConstraint
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractConstraint.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractConstraint.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractConstraint.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractConstraint.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractConstraint.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractConstraint.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractConstraint.constrainedElements -> EReference : constrainedElements
	if (s.constrainedElements.getEReference() != null) t.addNewReference("constrainedElements", s.constrainedElements.getEReference());
	//AbstractConstraint.ownedSpecification -> EReference : ownedSpecification
	if (s.ownedSpecification.getEReference() != null) t.addNewReference("ownedSpecification", s.ownedSpecification.getEReference());
	//AbstractConstraint.context -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context", s.context.getEReference());
}

@lazy
rule ValueSpecification
	transform s : DSL!ValueSpecification //modellingcore.ValueSpecification
	to t : SysMLine!ItemUsage
	extends Base{
	//ValueSpecification.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ValueSpecification.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ValueSpecification.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ValueSpecification.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ValueSpecification.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ValueSpecification.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ValueSpecification.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ValueSpecification.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
}

@lazy
rule AbstractParameter
	transform s : DSL!AbstractParameter //modellingcore.AbstractParameter
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractParameter.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractParameter.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractParameter.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractParameter.isException -> EAttribute : isException
	if (s.isException.getEAttribute() != null) t.addNewAttribute("isException", s.isException.getEAttribute());
	//AbstractParameter.isStream -> EAttribute : isStream
	if (s.isStream.getEAttribute() != null) t.addNewAttribute("isStream", s.isStream.getEAttribute());
	//AbstractParameter.isOptional -> EAttribute : isOptional
	if (s.isOptional.getEAttribute() != null) t.addNewAttribute("isOptional", s.isOptional.getEAttribute());
	//AbstractParameter.kindOfRate -> EAttribute : kindOfRate
	if (s.kindOfRate.getEAttribute() != null) t.addNewAttribute("kindOfRate", s.kindOfRate.getEAttribute());
	//AbstractParameter.effect -> EAttribute : effect
	if (s.effect.getEAttribute() != null) t.addNewAttribute("effect", s.effect.getEAttribute());
	//AbstractParameter.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractParameter.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractParameter.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractParameter.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractParameter.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//AbstractParameter.rate -> EReference : rate
	if (s.rate.getEReference() != null) t.addNewReference("rate", s.rate.getEReference());
	//AbstractParameter.probability -> EReference : probability
	if (s.probability.getEReference() != null) t.addNewReference("probability", s.probability.getEReference());
	//AbstractParameter.parameterSet -> EReference : parameterSet
	if (s.parameterSet.getEReference() != null) t.addNewReference("parameterSet", s.parameterSet.getEReference());
}

@lazy
rule AbstractParameterSet
	transform s : DSL!AbstractParameterSet //modellingcore.AbstractParameterSet
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractParameterSet.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractParameterSet.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractParameterSet.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractParameterSet.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractParameterSet.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractParameterSet.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractParameterSet.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractParameterSet.ownedConditions -> EReference : ownedConditions
	if (s.ownedConditions.getEReference() != null) t.addNewReference("ownedConditions", s.ownedConditions.getEReference());
	//AbstractParameterSet.probability -> EReference : probability
	if (s.probability.getEReference() != null) t.addNewReference("probability", s.probability.getEReference());
	//AbstractParameterSet.parameters -> EReference : parameters
	if (s.parameters.getEReference() != null) t.addNewReference("parameters", s.parameters.getEReference());
}

@lazy
rule AbstractInformationFlow
	transform s : DSL!AbstractInformationFlow //modellingcore.AbstractInformationFlow
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractInformationFlow.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractInformationFlow.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractInformationFlow.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractInformationFlow.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractInformationFlow.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractInformationFlow.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractInformationFlow.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractInformationFlow.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//AbstractInformationFlow.realizations -> EReference : realizations
	if (s.realizations.getEReference() != null) t.addNewReference("realizations", s.realizations.getEReference());
	//AbstractInformationFlow.convoyedInformations -> EReference : convoyedInformations
	if (s.convoyedInformations.getEReference() != null) t.addNewReference("convoyedInformations", s.convoyedInformations.getEReference());
	//AbstractInformationFlow.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//AbstractInformationFlow.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
}

@lazy
rule AbstractExchangeItem
	transform s : DSL!AbstractExchangeItem //modellingcore.AbstractExchangeItem
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractExchangeItem.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractExchangeItem.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractExchangeItem.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractExchangeItem.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractExchangeItem.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractExchangeItem.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractExchangeItem.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractExchangeItem.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
}

@lazy
rule IState
	transform s : DSL!IState //modellingcore.IState
	to t : SysMLine!ItemUsage
	extends Base{
	//IState.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//IState.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//IState.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//IState.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//IState.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//IState.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//IState.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//IState.referencedStates -> EReference : referencedStates
	if (s.referencedStates.getEReference() != null) t.addNewReference("referencedStates", s.referencedStates.getEReference());
	//IState.exploitedStates -> EReference : exploitedStates
	if (s.exploitedStates.getEReference() != null) t.addNewReference("exploitedStates", s.exploitedStates.getEReference());
}


// emde.ecore
@lazy
rule Element
	transform s : DSL!Element //emde.Element
	to t : SysMLine!ItemUsage
	extends Base{
}

@lazy
rule ExtensibleElement
	transform s : DSL!ExtensibleElement //emde.ExtensibleElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ExtensibleElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
}

@lazy
rule ElementExtension
	transform s : DSL!ElementExtension //emde.ElementExtension
	to t : SysMLine!ItemUsage
	extends Base{
	//ElementExtension.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
}


// oa.ecore
@lazy
rule OperationalAnalysis
	transform s : DSL!OperationalAnalysis //oa.OperationalAnalysis
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalAnalysis.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OperationalAnalysis.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OperationalAnalysis.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//OperationalAnalysis.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OperationalAnalysis.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OperationalAnalysis.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OperationalAnalysis.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OperationalAnalysis.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OperationalAnalysis.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OperationalAnalysis.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OperationalAnalysis.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OperationalAnalysis.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OperationalAnalysis.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OperationalAnalysis.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OperationalAnalysis.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OperationalAnalysis.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OperationalAnalysis.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OperationalAnalysis.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OperationalAnalysis.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OperationalAnalysis.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OperationalAnalysis.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//OperationalAnalysis.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//OperationalAnalysis.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//OperationalAnalysis.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//OperationalAnalysis.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//OperationalAnalysis.ownedFunctionPkg -> EReference : ownedFunctionPkg
	if (s.ownedFunctionPkg.getEReference() != null) t.addNewReference("ownedFunctionPkg", s.ownedFunctionPkg.getEReference());
	//OperationalAnalysis.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//OperationalAnalysis.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//OperationalAnalysis.ownedFunctionalLinks -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//OperationalAnalysis.ownedFunctionalAllocations -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//OperationalAnalysis.ownedComponentExchangeRealizations -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//OperationalAnalysis.ownedAbstractCapabilityPkg -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//OperationalAnalysis.ownedInterfacePkg -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//OperationalAnalysis.ownedDataPkg -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//OperationalAnalysis.provisionedArchitectureAllocations -> EReference : provisionedArchitectureAllocations
	if (s.provisionedArchitectureAllocations.getEReference() != null) t.addNewReference("provisionedArchitectureAllocations", s.provisionedArchitectureAllocations.getEReference());
	//OperationalAnalysis.provisioningArchitectureAllocations -> EReference : provisioningArchitectureAllocations
	if (s.provisioningArchitectureAllocations.getEReference() != null) t.addNewReference("provisioningArchitectureAllocations", s.provisioningArchitectureAllocations.getEReference());
	//OperationalAnalysis.allocatedArchitectures -> EReference : allocatedArchitectures
	if (s.allocatedArchitectures.getEReference() != null) t.addNewReference("allocatedArchitectures", s.allocatedArchitectures.getEReference());
	//OperationalAnalysis.allocatingArchitectures -> EReference : allocatingArchitectures
	if (s.allocatingArchitectures.getEReference() != null) t.addNewReference("allocatingArchitectures", s.allocatingArchitectures.getEReference());
	//OperationalAnalysis.system -> EReference : system
	if (s.system.getEReference() != null) t.addNewReference("system", s.system.getEReference());
	//OperationalAnalysis.ownedRolePkg -> EReference : ownedRolePkg
	if (s.ownedRolePkg.getEReference() != null) t.addNewReference("ownedRolePkg", s.ownedRolePkg.getEReference());
	//OperationalAnalysis.ownedEntityPkg -> EReference : ownedEntityPkg
	if (s.ownedEntityPkg.getEReference() != null) t.addNewReference("ownedEntityPkg", s.ownedEntityPkg.getEReference());
	//OperationalAnalysis.ownedConceptPkg -> EReference : ownedConceptPkg
	if (s.ownedConceptPkg.getEReference() != null) t.addNewReference("ownedConceptPkg", s.ownedConceptPkg.getEReference());
	//OperationalAnalysis.containedOperationalCapabilityPkg -> EReference : containedOperationalCapabilityPkg
	if (s.containedOperationalCapabilityPkg.getEReference() != null) t.addNewReference("containedOperationalCapabilityPkg", s.containedOperationalCapabilityPkg.getEReference());
	//OperationalAnalysis.containedOperationalActivityPkg -> EReference : containedOperationalActivityPkg
	if (s.containedOperationalActivityPkg.getEReference() != null) t.addNewReference("containedOperationalActivityPkg", s.containedOperationalActivityPkg.getEReference());
	//OperationalAnalysis.allocatingSystemAnalyses -> EReference : allocatingSystemAnalyses
	if (s.allocatingSystemAnalyses.getEReference() != null) t.addNewReference("allocatingSystemAnalyses", s.allocatingSystemAnalyses.getEReference());
}

@lazy
rule OperationalScenario
	transform s : DSL!OperationalScenario //oa.OperationalScenario
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalScenario.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OperationalScenario.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OperationalScenario.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//OperationalScenario.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OperationalScenario.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OperationalScenario.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OperationalScenario.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OperationalScenario.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OperationalScenario.context -> EAttribute : context
	if (s.context.getEAttribute() != null) t.addNewAttribute("context", s.context.getEAttribute());
	//OperationalScenario.objective -> EAttribute : objective
	if (s.objective.getEAttribute() != null) t.addNewAttribute("objective", s.objective.getEAttribute());
	//OperationalScenario.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OperationalScenario.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OperationalScenario.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OperationalScenario.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OperationalScenario.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OperationalScenario.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OperationalScenario.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OperationalScenario.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OperationalScenario.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OperationalScenario.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OperationalScenario.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OperationalScenario.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OperationalScenario.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule OperationalActivityPkg
	transform s : DSL!OperationalActivityPkg //oa.OperationalActivityPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalActivityPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OperationalActivityPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OperationalActivityPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//OperationalActivityPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OperationalActivityPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OperationalActivityPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OperationalActivityPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OperationalActivityPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OperationalActivityPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OperationalActivityPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OperationalActivityPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OperationalActivityPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OperationalActivityPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OperationalActivityPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OperationalActivityPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OperationalActivityPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OperationalActivityPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OperationalActivityPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OperationalActivityPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OperationalActivityPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OperationalActivityPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//OperationalActivityPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//OperationalActivityPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//OperationalActivityPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//OperationalActivityPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//OperationalActivityPkg.ownedFunctionalLinks -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//OperationalActivityPkg.ownedExchanges -> EReference : ownedExchanges
	if (s.ownedExchanges.getEReference() != null) t.addNewReference("ownedExchanges", s.ownedExchanges.getEReference());
	//OperationalActivityPkg.ownedExchangeSpecificationRealizations -> EReference : ownedExchangeSpecificationRealizations
	if (s.ownedExchangeSpecificationRealizations.getEReference() != null) t.addNewReference("ownedExchangeSpecificationRealizations", s.ownedExchangeSpecificationRealizations.getEReference());
	//OperationalActivityPkg.ownedCategories -> EReference : ownedCategories
	if (s.ownedCategories.getEReference() != null) t.addNewReference("ownedCategories", s.ownedCategories.getEReference());
	//OperationalActivityPkg.ownedFunctionSpecifications -> EReference : ownedFunctionSpecifications
	if (s.ownedFunctionSpecifications.getEReference() != null) t.addNewReference("ownedFunctionSpecifications", s.ownedFunctionSpecifications.getEReference());
	//OperationalActivityPkg.ownedOperationalActivities -> EReference : ownedOperationalActivities
	if (s.ownedOperationalActivities.getEReference() != null) t.addNewReference("ownedOperationalActivities", s.ownedOperationalActivities.getEReference());
	//OperationalActivityPkg.ownedOperationalActivityPkgs -> EReference : ownedOperationalActivityPkgs
	if (s.ownedOperationalActivityPkgs.getEReference() != null) t.addNewReference("ownedOperationalActivityPkgs", s.ownedOperationalActivityPkgs.getEReference());
}

@lazy
rule OperationalActivity
	transform s : DSL!OperationalActivity //oa.OperationalActivity
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalActivity.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OperationalActivity.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OperationalActivity.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//OperationalActivity.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OperationalActivity.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OperationalActivity.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OperationalActivity.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OperationalActivity.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OperationalActivity.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//OperationalActivity.isStatic -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//OperationalActivity.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//OperationalActivity.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//OperationalActivity.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//OperationalActivity.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//OperationalActivity.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//OperationalActivity.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//OperationalActivity.aggregationKind -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null) t.addNewAttribute("aggregationKind", s.aggregationKind.getEAttribute());
	//OperationalActivity.isDerived -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null) t.addNewAttribute("isDerived", s.isDerived.getEAttribute());
	//OperationalActivity.isReadOnly -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null) t.addNewAttribute("isReadOnly", s.isReadOnly.getEAttribute());
	//OperationalActivity.isPartOfKey -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null) t.addNewAttribute("isPartOfKey", s.isPartOfKey.getEAttribute());
	//OperationalActivity.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//OperationalActivity.condition -> EAttribute : condition
	if (s.condition.getEAttribute() != null) t.addNewAttribute("condition", s.condition.getEAttribute());
	//OperationalActivity.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OperationalActivity.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OperationalActivity.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OperationalActivity.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OperationalActivity.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OperationalActivity.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OperationalActivity.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OperationalActivity.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OperationalActivity.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OperationalActivity.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OperationalActivity.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OperationalActivity.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OperationalActivity.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//OperationalActivity.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//OperationalActivity.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//OperationalActivity.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//OperationalActivity.involvingInvolvements -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//OperationalActivity.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//OperationalActivity.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//OperationalActivity.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//OperationalActivity.ownedMinValue -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//OperationalActivity.ownedMaxValue -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//OperationalActivity.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//OperationalActivity.ownedMinCard -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//OperationalActivity.ownedMinLength -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//OperationalActivity.ownedMaxCard -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//OperationalActivity.ownedMaxLength -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//OperationalActivity.association -> EReference : association
	if (s.association.getEReference() != null) t.addNewReference("association", s.association.getEReference());
	//OperationalActivity.representingInstanceRoles -> EReference : representingInstanceRoles
	if (s.representingInstanceRoles.getEReference() != null) t.addNewReference("representingInstanceRoles", s.representingInstanceRoles.getEReference());
	//OperationalActivity.ownedFunctionalChains -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null) t.addNewReference("ownedFunctionalChains", s.ownedFunctionalChains.getEReference());
	//OperationalActivity.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//OperationalActivity.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//OperationalActivity.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//OperationalActivity.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//OperationalActivity.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//OperationalActivity.ownedHandlers -> EReference : ownedHandlers
	if (s.ownedHandlers.getEReference() != null) t.addNewReference("ownedHandlers", s.ownedHandlers.getEReference());
	//OperationalActivity.localPrecondition -> EReference : localPrecondition
	if (s.localPrecondition.getEReference() != null) t.addNewReference("localPrecondition", s.localPrecondition.getEReference());
	//OperationalActivity.localPostcondition -> EReference : localPostcondition
	if (s.localPostcondition.getEReference() != null) t.addNewReference("localPostcondition", s.localPostcondition.getEReference());
	//OperationalActivity.context -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context", s.context.getEReference());
	//OperationalActivity.inputs -> EReference : inputs
	if (s.inputs.getEReference() != null) t.addNewReference("inputs", s.inputs.getEReference());
	//OperationalActivity.outputs -> EReference : outputs
	if (s.outputs.getEReference() != null) t.addNewReference("outputs", s.outputs.getEReference());
	//OperationalActivity.arguments -> EReference : arguments
	if (s.arguments.getEReference() != null) t.addNewReference("arguments", s.arguments.getEReference());
	//OperationalActivity.results -> EReference : results
	if (s.results.getEReference() != null) t.addNewReference("results", s.results.getEReference());
	//OperationalActivity.behavior -> EReference : behavior
	if (s.behavior.getEReference() != null) t.addNewReference("behavior", s.behavior.getEReference());
	//OperationalActivity.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//OperationalActivity.ownedFunctions -> EReference : ownedFunctions
	if (s.ownedFunctions.getEReference() != null) t.addNewReference("ownedFunctions", s.ownedFunctions.getEReference());
	//OperationalActivity.ownedFunctionRealizations -> EReference : ownedFunctionRealizations
	if (s.ownedFunctionRealizations.getEReference() != null) t.addNewReference("ownedFunctionRealizations", s.ownedFunctionRealizations.getEReference());
	//OperationalActivity.ownedFunctionalExchanges -> EReference : ownedFunctionalExchanges
	if (s.ownedFunctionalExchanges.getEReference() != null) t.addNewReference("ownedFunctionalExchanges", s.ownedFunctionalExchanges.getEReference());
	//OperationalActivity.subFunctions -> EReference : subFunctions
	if (s.subFunctions.getEReference() != null) t.addNewReference("subFunctions", s.subFunctions.getEReference());
	//OperationalActivity.outFunctionRealizations -> EReference : outFunctionRealizations
	if (s.outFunctionRealizations.getEReference() != null) t.addNewReference("outFunctionRealizations", s.outFunctionRealizations.getEReference());
	//OperationalActivity.inFunctionRealizations -> EReference : inFunctionRealizations
	if (s.inFunctionRealizations.getEReference() != null) t.addNewReference("inFunctionRealizations", s.inFunctionRealizations.getEReference());
	//OperationalActivity.componentFunctionalAllocations -> EReference : componentFunctionalAllocations
	if (s.componentFunctionalAllocations.getEReference() != null) t.addNewReference("componentFunctionalAllocations", s.componentFunctionalAllocations.getEReference());
	//OperationalActivity.allocationBlocks -> EReference : allocationBlocks
	if (s.allocationBlocks.getEReference() != null) t.addNewReference("allocationBlocks", s.allocationBlocks.getEReference());
	//OperationalActivity.availableInStates -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null) t.addNewReference("availableInStates", s.availableInStates.getEReference());
	//OperationalActivity.involvingCapabilities -> EReference : involvingCapabilities
	if (s.involvingCapabilities.getEReference() != null) t.addNewReference("involvingCapabilities", s.involvingCapabilities.getEReference());
	//OperationalActivity.involvingCapabilityRealizations -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null) t.addNewReference("involvingCapabilityRealizations", s.involvingCapabilityRealizations.getEReference());
	//OperationalActivity.involvingFunctionalChains -> EReference : involvingFunctionalChains
	if (s.involvingFunctionalChains.getEReference() != null) t.addNewReference("involvingFunctionalChains", s.involvingFunctionalChains.getEReference());
	//OperationalActivity.linkedStateMachine -> EReference : linkedStateMachine
	if (s.linkedStateMachine.getEReference() != null) t.addNewReference("linkedStateMachine", s.linkedStateMachine.getEReference());
	//OperationalActivity.linkedFunctionSpecification -> EReference : linkedFunctionSpecification
	if (s.linkedFunctionSpecification.getEReference() != null) t.addNewReference("linkedFunctionSpecification", s.linkedFunctionSpecification.getEReference());
	//OperationalActivity.ownedOperationalActivityPkgs -> EReference : ownedOperationalActivityPkgs
	if (s.ownedOperationalActivityPkgs.getEReference() != null) t.addNewReference("ownedOperationalActivityPkgs", s.ownedOperationalActivityPkgs.getEReference());
	//OperationalActivity.activityAllocations -> EReference : activityAllocations
	if (s.activityAllocations.getEReference() != null) t.addNewReference("activityAllocations", s.activityAllocations.getEReference());
	//OperationalActivity.ownedSwimlanes -> EReference : ownedSwimlanes
	if (s.ownedSwimlanes.getEReference() != null) t.addNewReference("ownedSwimlanes", s.ownedSwimlanes.getEReference());
	//OperationalActivity.ownedProcess -> EReference : ownedProcess
	if (s.ownedProcess.getEReference() != null) t.addNewReference("ownedProcess", s.ownedProcess.getEReference());
	//OperationalActivity.allocatorEntities -> EReference : allocatorEntities
	if (s.allocatorEntities.getEReference() != null) t.addNewReference("allocatorEntities", s.allocatorEntities.getEReference());
	//OperationalActivity.realizingSystemFunctions -> EReference : realizingSystemFunctions
	if (s.realizingSystemFunctions.getEReference() != null) t.addNewReference("realizingSystemFunctions", s.realizingSystemFunctions.getEReference());
	//OperationalActivity.allocatingRoles -> EReference : allocatingRoles
	if (s.allocatingRoles.getEReference() != null) t.addNewReference("allocatingRoles", s.allocatingRoles.getEReference());
	//OperationalActivity.containedOperationalActivities -> EReference : containedOperationalActivities
	if (s.containedOperationalActivities.getEReference() != null) t.addNewReference("containedOperationalActivities", s.containedOperationalActivities.getEReference());
	//OperationalActivity.childrenOperationalActivities -> EReference : childrenOperationalActivities
	if (s.childrenOperationalActivities.getEReference() != null) t.addNewReference("childrenOperationalActivities", s.childrenOperationalActivities.getEReference());
}

@lazy
rule OperationalProcess
	transform s : DSL!OperationalProcess //oa.OperationalProcess
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalProcess.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OperationalProcess.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OperationalProcess.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//OperationalProcess.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OperationalProcess.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OperationalProcess.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OperationalProcess.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OperationalProcess.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OperationalProcess.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//OperationalProcess.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OperationalProcess.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OperationalProcess.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OperationalProcess.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OperationalProcess.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OperationalProcess.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OperationalProcess.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OperationalProcess.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OperationalProcess.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OperationalProcess.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OperationalProcess.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OperationalProcess.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OperationalProcess.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//OperationalProcess.involvedInvolvements -> EReference : involvedInvolvements
	if (s.involvedInvolvements.getEReference() != null) t.addNewReference("involvedInvolvements", s.involvedInvolvements.getEReference());
	//OperationalProcess.involvingInvolvements -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//OperationalProcess.ownedFunctionalChainInvolvements -> EReference : ownedFunctionalChainInvolvements
	if (s.ownedFunctionalChainInvolvements.getEReference() != null) t.addNewReference("ownedFunctionalChainInvolvements", s.ownedFunctionalChainInvolvements.getEReference());
	//OperationalProcess.ownedFunctionalChainRealizations -> EReference : ownedFunctionalChainRealizations
	if (s.ownedFunctionalChainRealizations.getEReference() != null) t.addNewReference("ownedFunctionalChainRealizations", s.ownedFunctionalChainRealizations.getEReference());
	//OperationalProcess.involvedFunctionalChainInvolvements -> EReference : involvedFunctionalChainInvolvements
	if (s.involvedFunctionalChainInvolvements.getEReference() != null) t.addNewReference("involvedFunctionalChainInvolvements", s.involvedFunctionalChainInvolvements.getEReference());
	//OperationalProcess.involvedFunctions -> EReference : involvedFunctions
	if (s.involvedFunctions.getEReference() != null) t.addNewReference("involvedFunctions", s.involvedFunctions.getEReference());
	//OperationalProcess.involvedFunctionalExchanges -> EReference : involvedFunctionalExchanges
	if (s.involvedFunctionalExchanges.getEReference() != null) t.addNewReference("involvedFunctionalExchanges", s.involvedFunctionalExchanges.getEReference());
	//OperationalProcess.involvedElements -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null) t.addNewReference("involvedElements", s.involvedElements.getEReference());
	//OperationalProcess.enactedFunctions -> EReference : enactedFunctions
	if (s.enactedFunctions.getEReference() != null) t.addNewReference("enactedFunctions", s.enactedFunctions.getEReference());
	//OperationalProcess.enactedFunctionalBlocks -> EReference : enactedFunctionalBlocks
	if (s.enactedFunctionalBlocks.getEReference() != null) t.addNewReference("enactedFunctionalBlocks", s.enactedFunctionalBlocks.getEReference());
	//OperationalProcess.availableInStates -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null) t.addNewReference("availableInStates", s.availableInStates.getEReference());
	//OperationalProcess.firstFunctionalChainInvolvements -> EReference : firstFunctionalChainInvolvements
	if (s.firstFunctionalChainInvolvements.getEReference() != null) t.addNewReference("firstFunctionalChainInvolvements", s.firstFunctionalChainInvolvements.getEReference());
	//OperationalProcess.involvingCapabilities -> EReference : involvingCapabilities
	if (s.involvingCapabilities.getEReference() != null) t.addNewReference("involvingCapabilities", s.involvingCapabilities.getEReference());
	//OperationalProcess.involvingCapabilityRealizations -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null) t.addNewReference("involvingCapabilityRealizations", s.involvingCapabilityRealizations.getEReference());
	//OperationalProcess.realizedFunctionalChains -> EReference : realizedFunctionalChains
	if (s.realizedFunctionalChains.getEReference() != null) t.addNewReference("realizedFunctionalChains", s.realizedFunctionalChains.getEReference());
	//OperationalProcess.realizingFunctionalChains -> EReference : realizingFunctionalChains
	if (s.realizingFunctionalChains.getEReference() != null) t.addNewReference("realizingFunctionalChains", s.realizingFunctionalChains.getEReference());
	//OperationalProcess.preCondition -> EReference : preCondition
	if (s.preCondition.getEReference() != null) t.addNewReference("preCondition", s.preCondition.getEReference());
	//OperationalProcess.postCondition -> EReference : postCondition
	if (s.postCondition.getEReference() != null) t.addNewReference("postCondition", s.postCondition.getEReference());
	//OperationalProcess.ownedSequenceNodes -> EReference : ownedSequenceNodes
	if (s.ownedSequenceNodes.getEReference() != null) t.addNewReference("ownedSequenceNodes", s.ownedSequenceNodes.getEReference());
	//OperationalProcess.ownedSequenceLinks -> EReference : ownedSequenceLinks
	if (s.ownedSequenceLinks.getEReference() != null) t.addNewReference("ownedSequenceLinks", s.ownedSequenceLinks.getEReference());
	//OperationalProcess.involvingOperationalCapabilities -> EReference : involvingOperationalCapabilities
	if (s.involvingOperationalCapabilities.getEReference() != null) t.addNewReference("involvingOperationalCapabilities", s.involvingOperationalCapabilities.getEReference());
}

@lazy
rule Swimlane
	transform s : DSL!Swimlane //oa.Swimlane
	to t : SysMLine!ItemUsage
	extends Base{
	//Swimlane.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Swimlane.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Swimlane.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Swimlane.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Swimlane.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Swimlane.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Swimlane.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Swimlane.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Swimlane.isDimension -> EAttribute : isDimension
	if (s.isDimension.getEAttribute() != null) t.addNewAttribute("isDimension", s.isDimension.getEAttribute());
	//Swimlane.isExternal -> EAttribute : isExternal
	if (s.isExternal.getEAttribute() != null) t.addNewAttribute("isExternal", s.isExternal.getEAttribute());
	//Swimlane.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Swimlane.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Swimlane.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Swimlane.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Swimlane.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Swimlane.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Swimlane.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Swimlane.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Swimlane.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Swimlane.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Swimlane.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Swimlane.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Swimlane.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Swimlane.superGroup -> EReference : superGroup
	if (s.superGroup.getEReference() != null) t.addNewReference("superGroup", s.superGroup.getEReference());
	//Swimlane.subGroups -> EReference : subGroups
	if (s.subGroups.getEReference() != null) t.addNewReference("subGroups", s.subGroups.getEReference());
	//Swimlane.ownedNodes -> EReference : ownedNodes
	if (s.ownedNodes.getEReference() != null) t.addNewReference("ownedNodes", s.ownedNodes.getEReference());
	//Swimlane.ownedEdges -> EReference : ownedEdges
	if (s.ownedEdges.getEReference() != null) t.addNewReference("ownedEdges", s.ownedEdges.getEReference());
	//Swimlane.representedElement -> EReference : representedElement
	if (s.representedElement.getEReference() != null) t.addNewReference("representedElement", s.representedElement.getEReference());
	//Swimlane.superPartition -> EReference : superPartition
	if (s.superPartition.getEReference() != null) t.addNewReference("superPartition", s.superPartition.getEReference());
	//Swimlane.subPartitions -> EReference : subPartitions
	if (s.subPartitions.getEReference() != null) t.addNewReference("subPartitions", s.subPartitions.getEReference());
	//Swimlane.representedEntity -> EReference : representedEntity
	if (s.representedEntity.getEReference() != null) t.addNewReference("representedEntity", s.representedEntity.getEReference());
}

@lazy
rule OperationalCapabilityPkg
	transform s : DSL!OperationalCapabilityPkg //oa.OperationalCapabilityPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalCapabilityPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OperationalCapabilityPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OperationalCapabilityPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//OperationalCapabilityPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OperationalCapabilityPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OperationalCapabilityPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OperationalCapabilityPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OperationalCapabilityPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OperationalCapabilityPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OperationalCapabilityPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OperationalCapabilityPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OperationalCapabilityPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OperationalCapabilityPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OperationalCapabilityPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OperationalCapabilityPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OperationalCapabilityPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OperationalCapabilityPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OperationalCapabilityPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OperationalCapabilityPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OperationalCapabilityPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OperationalCapabilityPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//OperationalCapabilityPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//OperationalCapabilityPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//OperationalCapabilityPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//OperationalCapabilityPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//OperationalCapabilityPkg.ownedOperationalCapabilities -> EReference : ownedOperationalCapabilities
	if (s.ownedOperationalCapabilities.getEReference() != null) t.addNewReference("ownedOperationalCapabilities", s.ownedOperationalCapabilities.getEReference());
	//OperationalCapabilityPkg.ownedOperationalCapabilityPkgs -> EReference : ownedOperationalCapabilityPkgs
	if (s.ownedOperationalCapabilityPkgs.getEReference() != null) t.addNewReference("ownedOperationalCapabilityPkgs", s.ownedOperationalCapabilityPkgs.getEReference());
	//OperationalCapabilityPkg.ownedCapabilityConfigurations -> EReference : ownedCapabilityConfigurations
	if (s.ownedCapabilityConfigurations.getEReference() != null) t.addNewReference("ownedCapabilityConfigurations", s.ownedCapabilityConfigurations.getEReference());
	//OperationalCapabilityPkg.ownedConceptCompliances -> EReference : ownedConceptCompliances
	if (s.ownedConceptCompliances.getEReference() != null) t.addNewReference("ownedConceptCompliances", s.ownedConceptCompliances.getEReference());
}

@lazy
rule OperationalCapability
	transform s : DSL!OperationalCapability //oa.OperationalCapability
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalCapability.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OperationalCapability.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OperationalCapability.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//OperationalCapability.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OperationalCapability.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OperationalCapability.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OperationalCapability.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OperationalCapability.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OperationalCapability.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OperationalCapability.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OperationalCapability.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OperationalCapability.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OperationalCapability.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OperationalCapability.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OperationalCapability.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OperationalCapability.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OperationalCapability.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OperationalCapability.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OperationalCapability.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OperationalCapability.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OperationalCapability.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//OperationalCapability.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//OperationalCapability.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//OperationalCapability.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//OperationalCapability.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//OperationalCapability.involvedInvolvements -> EReference : involvedInvolvements
	if (s.involvedInvolvements.getEReference() != null) t.addNewReference("involvedInvolvements", s.involvedInvolvements.getEReference());
	//OperationalCapability.ownedFunctionalChains -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null) t.addNewReference("ownedFunctionalChains", s.ownedFunctionalChains.getEReference());
	//OperationalCapability.preCondition -> EReference : preCondition
	if (s.preCondition.getEReference() != null) t.addNewReference("preCondition", s.preCondition.getEReference());
	//OperationalCapability.postCondition -> EReference : postCondition
	if (s.postCondition.getEReference() != null) t.addNewReference("postCondition", s.postCondition.getEReference());
	//OperationalCapability.ownedScenarios -> EReference : ownedScenarios
	if (s.ownedScenarios.getEReference() != null) t.addNewReference("ownedScenarios", s.ownedScenarios.getEReference());
	//OperationalCapability.incomingCapabilityAllocation -> EReference : incomingCapabilityAllocation
	if (s.incomingCapabilityAllocation.getEReference() != null) t.addNewReference("incomingCapabilityAllocation", s.incomingCapabilityAllocation.getEReference());
	//OperationalCapability.outgoingCapabilityAllocation -> EReference : outgoingCapabilityAllocation
	if (s.outgoingCapabilityAllocation.getEReference() != null) t.addNewReference("outgoingCapabilityAllocation", s.outgoingCapabilityAllocation.getEReference());
	//OperationalCapability.extends -> EReference : extends_
	if (s.`extends`.getEReference() != null) t.addNewReference("extends_", s.`extends`.getEReference());
	//OperationalCapability.extending -> EReference : extending
	if (s.extending.getEReference() != null) t.addNewReference("extending", s.extending.getEReference());
	//OperationalCapability.abstractCapabilityExtensionPoints -> EReference : abstractCapabilityExtensionPoints
	if (s.abstractCapabilityExtensionPoints.getEReference() != null) t.addNewReference("abstractCapabilityExtensionPoints", s.abstractCapabilityExtensionPoints.getEReference());
	//OperationalCapability.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//OperationalCapability.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//OperationalCapability.includes -> EReference : includes
	if (s.includes.getEReference() != null) t.addNewReference("includes", s.includes.getEReference());
	//OperationalCapability.including -> EReference : including
	if (s.including.getEReference() != null) t.addNewReference("including", s.including.getEReference());
	//OperationalCapability.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//OperationalCapability.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//OperationalCapability.includedAbstractCapabilities -> EReference : includedAbstractCapabilities
	if (s.includedAbstractCapabilities.getEReference() != null) t.addNewReference("includedAbstractCapabilities", s.includedAbstractCapabilities.getEReference());
	//OperationalCapability.includingAbstractCapabilities -> EReference : includingAbstractCapabilities
	if (s.includingAbstractCapabilities.getEReference() != null) t.addNewReference("includingAbstractCapabilities", s.includingAbstractCapabilities.getEReference());
	//OperationalCapability.extendedAbstractCapabilities -> EReference : extendedAbstractCapabilities
	if (s.extendedAbstractCapabilities.getEReference() != null) t.addNewReference("extendedAbstractCapabilities", s.extendedAbstractCapabilities.getEReference());
	//OperationalCapability.extendingAbstractCapabilities -> EReference : extendingAbstractCapabilities
	if (s.extendingAbstractCapabilities.getEReference() != null) t.addNewReference("extendingAbstractCapabilities", s.extendingAbstractCapabilities.getEReference());
	//OperationalCapability.ownedFunctionalChainAbstractCapabilityInvolvements -> EReference : ownedFunctionalChainAbstractCapabilityInvolvements
	if (s.ownedFunctionalChainAbstractCapabilityInvolvements.getEReference() != null) t.addNewReference("ownedFunctionalChainAbstractCapabilityInvolvements", s.ownedFunctionalChainAbstractCapabilityInvolvements.getEReference());
	//OperationalCapability.ownedAbstractFunctionAbstractCapabilityInvolvements -> EReference : ownedAbstractFunctionAbstractCapabilityInvolvements
	if (s.ownedAbstractFunctionAbstractCapabilityInvolvements.getEReference() != null) t.addNewReference("ownedAbstractFunctionAbstractCapabilityInvolvements", s.ownedAbstractFunctionAbstractCapabilityInvolvements.getEReference());
	//OperationalCapability.availableInStates -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null) t.addNewReference("availableInStates", s.availableInStates.getEReference());
	//OperationalCapability.ownedAbstractCapabilityRealizations -> EReference : ownedAbstractCapabilityRealizations
	if (s.ownedAbstractCapabilityRealizations.getEReference() != null) t.addNewReference("ownedAbstractCapabilityRealizations", s.ownedAbstractCapabilityRealizations.getEReference());
	//OperationalCapability.involvedAbstractFunctions -> EReference : involvedAbstractFunctions
	if (s.involvedAbstractFunctions.getEReference() != null) t.addNewReference("involvedAbstractFunctions", s.involvedAbstractFunctions.getEReference());
	//OperationalCapability.involvedFunctionalChains -> EReference : involvedFunctionalChains
	if (s.involvedFunctionalChains.getEReference() != null) t.addNewReference("involvedFunctionalChains", s.involvedFunctionalChains.getEReference());
	//OperationalCapability.compliances -> EReference : compliances
	if (s.compliances.getEReference() != null) t.addNewReference("compliances", s.compliances.getEReference());
	//OperationalCapability.configurations -> EReference : configurations
	if (s.configurations.getEReference() != null) t.addNewReference("configurations", s.configurations.getEReference());
	//OperationalCapability.ownedEntityOperationalCapabilityInvolvements -> EReference : ownedEntityOperationalCapabilityInvolvements
	if (s.ownedEntityOperationalCapabilityInvolvements.getEReference() != null) t.addNewReference("ownedEntityOperationalCapabilityInvolvements", s.ownedEntityOperationalCapabilityInvolvements.getEReference());
	//OperationalCapability.realizingCapabilities -> EReference : realizingCapabilities
	if (s.realizingCapabilities.getEReference() != null) t.addNewReference("realizingCapabilities", s.realizingCapabilities.getEReference());
	//OperationalCapability.involvedEntities -> EReference : involvedEntities
	if (s.involvedEntities.getEReference() != null) t.addNewReference("involvedEntities", s.involvedEntities.getEReference());
}

@lazy
rule ActivityAllocation
	transform s : DSL!ActivityAllocation //oa.ActivityAllocation
	to t : SysMLine!ItemUsage
	extends Base{
	//ActivityAllocation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ActivityAllocation.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ActivityAllocation.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ActivityAllocation.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ActivityAllocation.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ActivityAllocation.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ActivityAllocation.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ActivityAllocation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ActivityAllocation.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ActivityAllocation.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ActivityAllocation.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ActivityAllocation.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ActivityAllocation.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ActivityAllocation.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ActivityAllocation.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ActivityAllocation.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ActivityAllocation.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ActivityAllocation.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ActivityAllocation.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ActivityAllocation.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ActivityAllocation.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ActivityAllocation.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//ActivityAllocation.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//ActivityAllocation.role -> EReference : role
	if (s.role.getEReference() != null) t.addNewReference("role", s.role.getEReference());
	//ActivityAllocation.activity -> EReference : activity
	if (s.activity.getEReference() != null) t.addNewReference("activity", s.activity.getEReference());
}

@lazy
rule RolePkg
	transform s : DSL!RolePkg //oa.RolePkg
	to t : SysMLine!ItemUsage
	extends Base{
	//RolePkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//RolePkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//RolePkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//RolePkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//RolePkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//RolePkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//RolePkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//RolePkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//RolePkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//RolePkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//RolePkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//RolePkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//RolePkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//RolePkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//RolePkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//RolePkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//RolePkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//RolePkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//RolePkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//RolePkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//RolePkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//RolePkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//RolePkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//RolePkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//RolePkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//RolePkg.ownedRolePkgs -> EReference : ownedRolePkgs
	if (s.ownedRolePkgs.getEReference() != null) t.addNewReference("ownedRolePkgs", s.ownedRolePkgs.getEReference());
	//RolePkg.ownedRoles -> EReference : ownedRoles
	if (s.ownedRoles.getEReference() != null) t.addNewReference("ownedRoles", s.ownedRoles.getEReference());
}

@lazy
rule Role
	transform s : DSL!Role //oa.Role
	to t : SysMLine!ItemUsage
	extends Base{
	//Role.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Role.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Role.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Role.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Role.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Role.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Role.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Role.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Role.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Role.isStatic -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//Role.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//Role.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//Role.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//Role.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//Role.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//Role.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//Role.aggregationKind -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null) t.addNewAttribute("aggregationKind", s.aggregationKind.getEAttribute());
	//Role.isDerived -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null) t.addNewAttribute("isDerived", s.isDerived.getEAttribute());
	//Role.isReadOnly -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null) t.addNewAttribute("isReadOnly", s.isReadOnly.getEAttribute());
	//Role.isPartOfKey -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null) t.addNewAttribute("isPartOfKey", s.isPartOfKey.getEAttribute());
	//Role.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Role.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Role.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Role.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Role.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Role.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Role.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Role.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Role.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Role.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Role.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Role.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Role.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Role.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//Role.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//Role.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//Role.ownedMinValue -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//Role.ownedMaxValue -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//Role.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//Role.ownedMinCard -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//Role.ownedMinLength -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//Role.ownedMaxCard -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//Role.ownedMaxLength -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//Role.association -> EReference : association
	if (s.association.getEReference() != null) t.addNewReference("association", s.association.getEReference());
	//Role.representingInstanceRoles -> EReference : representingInstanceRoles
	if (s.representingInstanceRoles.getEReference() != null) t.addNewReference("representingInstanceRoles", s.representingInstanceRoles.getEReference());
	//Role.ownedRoleAssemblyUsages -> EReference : ownedRoleAssemblyUsages
	if (s.ownedRoleAssemblyUsages.getEReference() != null) t.addNewReference("ownedRoleAssemblyUsages", s.ownedRoleAssemblyUsages.getEReference());
	//Role.ownedActivityAllocations -> EReference : ownedActivityAllocations
	if (s.ownedActivityAllocations.getEReference() != null) t.addNewReference("ownedActivityAllocations", s.ownedActivityAllocations.getEReference());
	//Role.roleAllocations -> EReference : roleAllocations
	if (s.roleAllocations.getEReference() != null) t.addNewReference("roleAllocations", s.roleAllocations.getEReference());
	//Role.activityAllocations -> EReference : activityAllocations
	if (s.activityAllocations.getEReference() != null) t.addNewReference("activityAllocations", s.activityAllocations.getEReference());
	//Role.allocatingEntities -> EReference : allocatingEntities
	if (s.allocatingEntities.getEReference() != null) t.addNewReference("allocatingEntities", s.allocatingEntities.getEReference());
	//Role.allocatedOperationalActivities -> EReference : allocatedOperationalActivities
	if (s.allocatedOperationalActivities.getEReference() != null) t.addNewReference("allocatedOperationalActivities", s.allocatedOperationalActivities.getEReference());
}

@lazy
rule RoleAssemblyUsage
	transform s : DSL!RoleAssemblyUsage //oa.RoleAssemblyUsage
	to t : SysMLine!ItemUsage
	extends Base{
	//RoleAssemblyUsage.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//RoleAssemblyUsage.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//RoleAssemblyUsage.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//RoleAssemblyUsage.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//RoleAssemblyUsage.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//RoleAssemblyUsage.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//RoleAssemblyUsage.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//RoleAssemblyUsage.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//RoleAssemblyUsage.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//RoleAssemblyUsage.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//RoleAssemblyUsage.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//RoleAssemblyUsage.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//RoleAssemblyUsage.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//RoleAssemblyUsage.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//RoleAssemblyUsage.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//RoleAssemblyUsage.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//RoleAssemblyUsage.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//RoleAssemblyUsage.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//RoleAssemblyUsage.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//RoleAssemblyUsage.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//RoleAssemblyUsage.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//RoleAssemblyUsage.child -> EReference : child
	if (s.child.getEReference() != null) t.addNewReference("child", s.child.getEReference());
}

@lazy
rule RoleAllocation
	transform s : DSL!RoleAllocation //oa.RoleAllocation
	to t : SysMLine!ItemUsage
	extends Base{
	//RoleAllocation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//RoleAllocation.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//RoleAllocation.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//RoleAllocation.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//RoleAllocation.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//RoleAllocation.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//RoleAllocation.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//RoleAllocation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//RoleAllocation.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//RoleAllocation.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//RoleAllocation.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//RoleAllocation.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//RoleAllocation.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//RoleAllocation.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//RoleAllocation.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//RoleAllocation.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//RoleAllocation.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//RoleAllocation.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//RoleAllocation.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//RoleAllocation.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//RoleAllocation.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//RoleAllocation.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//RoleAllocation.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//RoleAllocation.role -> EReference : role
	if (s.role.getEReference() != null) t.addNewReference("role", s.role.getEReference());
	//RoleAllocation.entity -> EReference : entity
	if (s.entity.getEReference() != null) t.addNewReference("entity", s.entity.getEReference());
}

@lazy
rule EntityPkg
	transform s : DSL!EntityPkg //oa.EntityPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//EntityPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//EntityPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//EntityPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//EntityPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//EntityPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//EntityPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//EntityPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//EntityPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//EntityPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//EntityPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//EntityPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//EntityPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//EntityPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//EntityPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//EntityPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//EntityPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//EntityPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//EntityPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//EntityPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//EntityPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//EntityPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//EntityPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//EntityPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//EntityPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//EntityPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//EntityPkg.ownedParts -> EReference : ownedParts
	if (s.ownedParts.getEReference() != null) t.addNewReference("ownedParts", s.ownedParts.getEReference());
	//EntityPkg.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//EntityPkg.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//EntityPkg.ownedFunctionalLinks -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//EntityPkg.ownedFunctionalAllocations -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//EntityPkg.ownedComponentExchangeRealizations -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//EntityPkg.ownedPhysicalLinks -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//EntityPkg.ownedPhysicalLinkCategories -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//EntityPkg.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//EntityPkg.ownedEntities -> EReference : ownedEntities
	if (s.ownedEntities.getEReference() != null) t.addNewReference("ownedEntities", s.ownedEntities.getEReference());
	//EntityPkg.ownedEntityPkgs -> EReference : ownedEntityPkgs
	if (s.ownedEntityPkgs.getEReference() != null) t.addNewReference("ownedEntityPkgs", s.ownedEntityPkgs.getEReference());
	//EntityPkg.ownedLocations -> EReference : ownedLocations
	if (s.ownedLocations.getEReference() != null) t.addNewReference("ownedLocations", s.ownedLocations.getEReference());
	//EntityPkg.ownedCommunicationMeans -> EReference : ownedCommunicationMeans
	if (s.ownedCommunicationMeans.getEReference() != null) t.addNewReference("ownedCommunicationMeans", s.ownedCommunicationMeans.getEReference());
}

@lazy
rule Entity
	transform s : DSL!Entity //oa.Entity
	to t : SysMLine!ItemUsage
	extends Base{
	//Entity.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Entity.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Entity.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Entity.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Entity.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Entity.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Entity.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Entity.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Entity.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//Entity.actor -> EAttribute : actor
	if (s.actor.getEAttribute() != null) t.addNewAttribute("actor", s.actor.getEAttribute());
	//Entity.human -> EAttribute : human
	if (s.human.getEAttribute() != null) t.addNewAttribute("human", s.human.getEAttribute());
	//Entity.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Entity.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Entity.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Entity.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Entity.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//Entity.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Entity.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Entity.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Entity.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Entity.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Entity.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Entity.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Entity.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Entity.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Entity.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Entity.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Entity.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Entity.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//Entity.ownedFunctionalAllocation -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null) t.addNewReference("ownedFunctionalAllocation", s.ownedFunctionalAllocation.getEReference());
	//Entity.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//Entity.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//Entity.functionalAllocations -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null) t.addNewReference("functionalAllocations", s.functionalAllocations.getEReference());
	//Entity.allocatedFunctions -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null) t.addNewReference("allocatedFunctions", s.allocatedFunctions.getEReference());
	//Entity.inExchangeLinks -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//Entity.outExchangeLinks -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
	//Entity.ownedAbstractCapabilityPkg -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//Entity.ownedInterfacePkg -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//Entity.ownedDataPkg -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//Entity.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//Entity.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//Entity.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//Entity.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//Entity.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//Entity.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//Entity.ownedFeatures -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//Entity.containedProperties -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//Entity.ownedInterfaceAllocations -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null) t.addNewReference("ownedInterfaceAllocations", s.ownedInterfaceAllocations.getEReference());
	//Entity.provisionedInterfaceAllocations -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null) t.addNewReference("provisionedInterfaceAllocations", s.provisionedInterfaceAllocations.getEReference());
	//Entity.allocatedInterfaces -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null) t.addNewReference("allocatedInterfaces", s.allocatedInterfaces.getEReference());
	//Entity.ownedCommunicationLinks -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null) t.addNewReference("ownedCommunicationLinks", s.ownedCommunicationLinks.getEReference());
	//Entity.produce -> EReference : produce
	if (s.produce.getEReference() != null) t.addNewReference("produce", s.produce.getEReference());
	//Entity.consume -> EReference : consume
	if (s.consume.getEReference() != null) t.addNewReference("consume", s.consume.getEReference());
	//Entity.send -> EReference : send
	if (s.send.getEReference() != null) t.addNewReference("send", s.send.getEReference());
	//Entity.receive -> EReference : receive
	if (s.receive.getEReference() != null) t.addNewReference("receive", s.receive.getEReference());
	//Entity.call -> EReference : call
	if (s.call.getEReference() != null) t.addNewReference("call", s.call.getEReference());
	//Entity.execute -> EReference : execute
	if (s.execute.getEReference() != null) t.addNewReference("execute", s.execute.getEReference());
	//Entity.write -> EReference : write
	if (s.write.getEReference() != null) t.addNewReference("write", s.write.getEReference());
	//Entity.access -> EReference : access
	if (s.access.getEReference() != null) t.addNewReference("access", s.access.getEReference());
	//Entity.acquire -> EReference : acquire
	if (s.acquire.getEReference() != null) t.addNewReference("acquire", s.acquire.getEReference());
	//Entity.transmit -> EReference : transmit
	if (s.transmit.getEReference() != null) t.addNewReference("transmit", s.transmit.getEReference());
	//Entity.ownedInterfaceUses -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null) t.addNewReference("ownedInterfaceUses", s.ownedInterfaceUses.getEReference());
	//Entity.usedInterfaceLinks -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null) t.addNewReference("usedInterfaceLinks", s.usedInterfaceLinks.getEReference());
	//Entity.usedInterfaces -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null) t.addNewReference("usedInterfaces", s.usedInterfaces.getEReference());
	//Entity.ownedInterfaceImplementations -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null) t.addNewReference("ownedInterfaceImplementations", s.ownedInterfaceImplementations.getEReference());
	//Entity.implementedInterfaceLinks -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null) t.addNewReference("implementedInterfaceLinks", s.implementedInterfaceLinks.getEReference());
	//Entity.implementedInterfaces -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null) t.addNewReference("implementedInterfaces", s.implementedInterfaces.getEReference());
	//Entity.ownedComponentRealizations -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null) t.addNewReference("ownedComponentRealizations", s.ownedComponentRealizations.getEReference());
	//Entity.realizedComponents -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null) t.addNewReference("realizedComponents", s.realizedComponents.getEReference());
	//Entity.realizingComponents -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null) t.addNewReference("realizingComponents", s.realizingComponents.getEReference());
	//Entity.providedInterfaces -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//Entity.requiredInterfaces -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//Entity.containedComponentPorts -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null) t.addNewReference("containedComponentPorts", s.containedComponentPorts.getEReference());
	//Entity.containedParts -> EReference : containedParts
	if (s.containedParts.getEReference() != null) t.addNewReference("containedParts", s.containedParts.getEReference());
	//Entity.containedPhysicalPorts -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null) t.addNewReference("containedPhysicalPorts", s.containedPhysicalPorts.getEReference());
	//Entity.ownedPhysicalPath -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null) t.addNewReference("ownedPhysicalPath", s.ownedPhysicalPath.getEReference());
	//Entity.ownedPhysicalLinks -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//Entity.ownedPhysicalLinkCategories -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//Entity.representingParts -> EReference : representingParts
	if (s.representingParts.getEReference() != null) t.addNewReference("representingParts", s.representingParts.getEReference());
	//Entity.composingLinks -> EReference : composingLinks
	if (s.composingLinks.getEReference() != null) t.addNewReference("composingLinks", s.composingLinks.getEReference());
	//Entity.incomingInformationFlows -> EReference : incomingInformationFlows
	if (s.incomingInformationFlows.getEReference() != null) t.addNewReference("incomingInformationFlows", s.incomingInformationFlows.getEReference());
	//Entity.outgoingInformationFlows -> EReference : outgoingInformationFlows
	if (s.outgoingInformationFlows.getEReference() != null) t.addNewReference("outgoingInformationFlows", s.outgoingInformationFlows.getEReference());
	//Entity.informationFlows -> EReference : informationFlows
	if (s.informationFlows.getEReference() != null) t.addNewReference("informationFlows", s.informationFlows.getEReference());
	//Entity.involvingInvolvements -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//Entity.roleAllocations -> EReference : roleAllocations
	if (s.roleAllocations.getEReference() != null) t.addNewReference("roleAllocations", s.roleAllocations.getEReference());
	//Entity.organisationalUnitMemberships -> EReference : organisationalUnitMemberships
	if (s.organisationalUnitMemberships.getEReference() != null) t.addNewReference("organisationalUnitMemberships", s.organisationalUnitMemberships.getEReference());
	//Entity.actualLocation -> EReference : actualLocation
	if (s.actualLocation.getEReference() != null) t.addNewReference("actualLocation", s.actualLocation.getEReference());
	//Entity.subEntities -> EReference : subEntities
	if (s.subEntities.getEReference() != null) t.addNewReference("subEntities", s.subEntities.getEReference());
	//Entity.ownedEntities -> EReference : ownedEntities
	if (s.ownedEntities.getEReference() != null) t.addNewReference("ownedEntities", s.ownedEntities.getEReference());
	//Entity.ownedCommunicationMeans -> EReference : ownedCommunicationMeans
	if (s.ownedCommunicationMeans.getEReference() != null) t.addNewReference("ownedCommunicationMeans", s.ownedCommunicationMeans.getEReference());
	//Entity.ownedRoleAllocations -> EReference : ownedRoleAllocations
	if (s.ownedRoleAllocations.getEReference() != null) t.addNewReference("ownedRoleAllocations", s.ownedRoleAllocations.getEReference());
	//Entity.allocatedOperationalActivities -> EReference : allocatedOperationalActivities
	if (s.allocatedOperationalActivities.getEReference() != null) t.addNewReference("allocatedOperationalActivities", s.allocatedOperationalActivities.getEReference());
	//Entity.allocatedRoles -> EReference : allocatedRoles
	if (s.allocatedRoles.getEReference() != null) t.addNewReference("allocatedRoles", s.allocatedRoles.getEReference());
	//Entity.involvingOperationalCapabilities -> EReference : involvingOperationalCapabilities
	if (s.involvingOperationalCapabilities.getEReference() != null) t.addNewReference("involvingOperationalCapabilities", s.involvingOperationalCapabilities.getEReference());
	//Entity.realizingSystemComponents -> EReference : realizingSystemComponents
	if (s.realizingSystemComponents.getEReference() != null) t.addNewReference("realizingSystemComponents", s.realizingSystemComponents.getEReference());
}

@lazy
rule ConceptPkg
	transform s : DSL!ConceptPkg //oa.ConceptPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//ConceptPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ConceptPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ConceptPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ConceptPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ConceptPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ConceptPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ConceptPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ConceptPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ConceptPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ConceptPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ConceptPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ConceptPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ConceptPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ConceptPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ConceptPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ConceptPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ConceptPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ConceptPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ConceptPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ConceptPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ConceptPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ConceptPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//ConceptPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//ConceptPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//ConceptPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//ConceptPkg.ownedConceptPkgs -> EReference : ownedConceptPkgs
	if (s.ownedConceptPkgs.getEReference() != null) t.addNewReference("ownedConceptPkgs", s.ownedConceptPkgs.getEReference());
	//ConceptPkg.ownedConcepts -> EReference : ownedConcepts
	if (s.ownedConcepts.getEReference() != null) t.addNewReference("ownedConcepts", s.ownedConcepts.getEReference());
}

@lazy
rule Concept
	transform s : DSL!Concept //oa.Concept
	to t : SysMLine!ItemUsage
	extends Base{
	//Concept.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Concept.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Concept.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Concept.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Concept.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Concept.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Concept.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Concept.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Concept.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Concept.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Concept.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Concept.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Concept.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Concept.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Concept.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Concept.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Concept.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Concept.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Concept.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Concept.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Concept.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Concept.compliances -> EReference : compliances
	if (s.compliances.getEReference() != null) t.addNewReference("compliances", s.compliances.getEReference());
	//Concept.compositeLinks -> EReference : compositeLinks
	if (s.compositeLinks.getEReference() != null) t.addNewReference("compositeLinks", s.compositeLinks.getEReference());
}

@lazy
rule ConceptCompliance
	transform s : DSL!ConceptCompliance //oa.ConceptCompliance
	to t : SysMLine!ItemUsage
	extends Base{
	//ConceptCompliance.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ConceptCompliance.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ConceptCompliance.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ConceptCompliance.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ConceptCompliance.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ConceptCompliance.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ConceptCompliance.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ConceptCompliance.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ConceptCompliance.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ConceptCompliance.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ConceptCompliance.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ConceptCompliance.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ConceptCompliance.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ConceptCompliance.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ConceptCompliance.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ConceptCompliance.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ConceptCompliance.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ConceptCompliance.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ConceptCompliance.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ConceptCompliance.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ConceptCompliance.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ConceptCompliance.complyWithConcept -> EReference : complyWithConcept
	if (s.complyWithConcept.getEReference() != null) t.addNewReference("complyWithConcept", s.complyWithConcept.getEReference());
	//ConceptCompliance.compliantCapability -> EReference : compliantCapability
	if (s.compliantCapability.getEReference() != null) t.addNewReference("compliantCapability", s.compliantCapability.getEReference());
}

@lazy
rule ItemInConcept
	transform s : DSL!ItemInConcept //oa.ItemInConcept
	to t : SysMLine!ItemUsage
	extends Base{
	//ItemInConcept.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ItemInConcept.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ItemInConcept.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ItemInConcept.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ItemInConcept.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ItemInConcept.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ItemInConcept.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ItemInConcept.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ItemInConcept.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ItemInConcept.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ItemInConcept.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ItemInConcept.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ItemInConcept.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ItemInConcept.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ItemInConcept.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ItemInConcept.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ItemInConcept.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ItemInConcept.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ItemInConcept.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ItemInConcept.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ItemInConcept.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ItemInConcept.concept -> EReference : concept
	if (s.concept.getEReference() != null) t.addNewReference("concept", s.concept.getEReference());
	//ItemInConcept.item -> EReference : item
	if (s.item.getEReference() != null) t.addNewReference("item", s.item.getEReference());
}

@lazy
rule AbstractConceptItem
	transform s : DSL!AbstractConceptItem //oa.AbstractConceptItem
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractConceptItem.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractConceptItem.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractConceptItem.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractConceptItem.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractConceptItem.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractConceptItem.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractConceptItem.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractConceptItem.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractConceptItem.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//AbstractConceptItem.actor -> EAttribute : actor
	if (s.actor.getEAttribute() != null) t.addNewAttribute("actor", s.actor.getEAttribute());
	//AbstractConceptItem.human -> EAttribute : human
	if (s.human.getEAttribute() != null) t.addNewAttribute("human", s.human.getEAttribute());
	//AbstractConceptItem.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractConceptItem.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractConceptItem.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractConceptItem.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractConceptItem.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//AbstractConceptItem.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractConceptItem.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractConceptItem.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractConceptItem.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractConceptItem.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractConceptItem.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractConceptItem.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractConceptItem.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractConceptItem.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractConceptItem.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//AbstractConceptItem.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//AbstractConceptItem.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//AbstractConceptItem.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//AbstractConceptItem.ownedFunctionalAllocation -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null) t.addNewReference("ownedFunctionalAllocation", s.ownedFunctionalAllocation.getEReference());
	//AbstractConceptItem.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//AbstractConceptItem.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//AbstractConceptItem.functionalAllocations -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null) t.addNewReference("functionalAllocations", s.functionalAllocations.getEReference());
	//AbstractConceptItem.allocatedFunctions -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null) t.addNewReference("allocatedFunctions", s.allocatedFunctions.getEReference());
	//AbstractConceptItem.inExchangeLinks -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//AbstractConceptItem.outExchangeLinks -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
	//AbstractConceptItem.ownedAbstractCapabilityPkg -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//AbstractConceptItem.ownedInterfacePkg -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//AbstractConceptItem.ownedDataPkg -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//AbstractConceptItem.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//AbstractConceptItem.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//AbstractConceptItem.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//AbstractConceptItem.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//AbstractConceptItem.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//AbstractConceptItem.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//AbstractConceptItem.ownedFeatures -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//AbstractConceptItem.containedProperties -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//AbstractConceptItem.ownedInterfaceAllocations -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null) t.addNewReference("ownedInterfaceAllocations", s.ownedInterfaceAllocations.getEReference());
	//AbstractConceptItem.provisionedInterfaceAllocations -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null) t.addNewReference("provisionedInterfaceAllocations", s.provisionedInterfaceAllocations.getEReference());
	//AbstractConceptItem.allocatedInterfaces -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null) t.addNewReference("allocatedInterfaces", s.allocatedInterfaces.getEReference());
	//AbstractConceptItem.ownedCommunicationLinks -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null) t.addNewReference("ownedCommunicationLinks", s.ownedCommunicationLinks.getEReference());
	//AbstractConceptItem.produce -> EReference : produce
	if (s.produce.getEReference() != null) t.addNewReference("produce", s.produce.getEReference());
	//AbstractConceptItem.consume -> EReference : consume
	if (s.consume.getEReference() != null) t.addNewReference("consume", s.consume.getEReference());
	//AbstractConceptItem.send -> EReference : send
	if (s.send.getEReference() != null) t.addNewReference("send", s.send.getEReference());
	//AbstractConceptItem.receive -> EReference : receive
	if (s.receive.getEReference() != null) t.addNewReference("receive", s.receive.getEReference());
	//AbstractConceptItem.call -> EReference : call
	if (s.call.getEReference() != null) t.addNewReference("call", s.call.getEReference());
	//AbstractConceptItem.execute -> EReference : execute
	if (s.execute.getEReference() != null) t.addNewReference("execute", s.execute.getEReference());
	//AbstractConceptItem.write -> EReference : write
	if (s.write.getEReference() != null) t.addNewReference("write", s.write.getEReference());
	//AbstractConceptItem.access -> EReference : access
	if (s.access.getEReference() != null) t.addNewReference("access", s.access.getEReference());
	//AbstractConceptItem.acquire -> EReference : acquire
	if (s.acquire.getEReference() != null) t.addNewReference("acquire", s.acquire.getEReference());
	//AbstractConceptItem.transmit -> EReference : transmit
	if (s.transmit.getEReference() != null) t.addNewReference("transmit", s.transmit.getEReference());
	//AbstractConceptItem.ownedInterfaceUses -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null) t.addNewReference("ownedInterfaceUses", s.ownedInterfaceUses.getEReference());
	//AbstractConceptItem.usedInterfaceLinks -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null) t.addNewReference("usedInterfaceLinks", s.usedInterfaceLinks.getEReference());
	//AbstractConceptItem.usedInterfaces -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null) t.addNewReference("usedInterfaces", s.usedInterfaces.getEReference());
	//AbstractConceptItem.ownedInterfaceImplementations -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null) t.addNewReference("ownedInterfaceImplementations", s.ownedInterfaceImplementations.getEReference());
	//AbstractConceptItem.implementedInterfaceLinks -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null) t.addNewReference("implementedInterfaceLinks", s.implementedInterfaceLinks.getEReference());
	//AbstractConceptItem.implementedInterfaces -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null) t.addNewReference("implementedInterfaces", s.implementedInterfaces.getEReference());
	//AbstractConceptItem.ownedComponentRealizations -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null) t.addNewReference("ownedComponentRealizations", s.ownedComponentRealizations.getEReference());
	//AbstractConceptItem.realizedComponents -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null) t.addNewReference("realizedComponents", s.realizedComponents.getEReference());
	//AbstractConceptItem.realizingComponents -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null) t.addNewReference("realizingComponents", s.realizingComponents.getEReference());
	//AbstractConceptItem.providedInterfaces -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//AbstractConceptItem.requiredInterfaces -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//AbstractConceptItem.containedComponentPorts -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null) t.addNewReference("containedComponentPorts", s.containedComponentPorts.getEReference());
	//AbstractConceptItem.containedParts -> EReference : containedParts
	if (s.containedParts.getEReference() != null) t.addNewReference("containedParts", s.containedParts.getEReference());
	//AbstractConceptItem.containedPhysicalPorts -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null) t.addNewReference("containedPhysicalPorts", s.containedPhysicalPorts.getEReference());
	//AbstractConceptItem.ownedPhysicalPath -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null) t.addNewReference("ownedPhysicalPath", s.ownedPhysicalPath.getEReference());
	//AbstractConceptItem.ownedPhysicalLinks -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//AbstractConceptItem.ownedPhysicalLinkCategories -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//AbstractConceptItem.representingParts -> EReference : representingParts
	if (s.representingParts.getEReference() != null) t.addNewReference("representingParts", s.representingParts.getEReference());
	//AbstractConceptItem.composingLinks -> EReference : composingLinks
	if (s.composingLinks.getEReference() != null) t.addNewReference("composingLinks", s.composingLinks.getEReference());
}

@lazy
rule CommunityOfInterest
	transform s : DSL!CommunityOfInterest //oa.CommunityOfInterest
	to t : SysMLine!ItemUsage
	extends Base{
	//CommunityOfInterest.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CommunityOfInterest.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CommunityOfInterest.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CommunityOfInterest.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CommunityOfInterest.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CommunityOfInterest.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CommunityOfInterest.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CommunityOfInterest.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CommunityOfInterest.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CommunityOfInterest.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CommunityOfInterest.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CommunityOfInterest.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CommunityOfInterest.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CommunityOfInterest.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CommunityOfInterest.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CommunityOfInterest.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CommunityOfInterest.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CommunityOfInterest.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CommunityOfInterest.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CommunityOfInterest.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CommunityOfInterest.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CommunityOfInterest.communityOfInterestCompositions -> EReference : communityOfInterestCompositions
	if (s.communityOfInterestCompositions.getEReference() != null) t.addNewReference("communityOfInterestCompositions", s.communityOfInterestCompositions.getEReference());
}

@lazy
rule CommunityOfInterestComposition
	transform s : DSL!CommunityOfInterestComposition //oa.CommunityOfInterestComposition
	to t : SysMLine!ItemUsage
	extends Base{
	//CommunityOfInterestComposition.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CommunityOfInterestComposition.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CommunityOfInterestComposition.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CommunityOfInterestComposition.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CommunityOfInterestComposition.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CommunityOfInterestComposition.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CommunityOfInterestComposition.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CommunityOfInterestComposition.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CommunityOfInterestComposition.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CommunityOfInterestComposition.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CommunityOfInterestComposition.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CommunityOfInterestComposition.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CommunityOfInterestComposition.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CommunityOfInterestComposition.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CommunityOfInterestComposition.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CommunityOfInterestComposition.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CommunityOfInterestComposition.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CommunityOfInterestComposition.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CommunityOfInterestComposition.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CommunityOfInterestComposition.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CommunityOfInterestComposition.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CommunityOfInterestComposition.communityOfInterest -> EReference : communityOfInterest
	if (s.communityOfInterest.getEReference() != null) t.addNewReference("communityOfInterest", s.communityOfInterest.getEReference());
	//CommunityOfInterestComposition.interestedOrganisationUnit -> EReference : interestedOrganisationUnit
	if (s.interestedOrganisationUnit.getEReference() != null) t.addNewReference("interestedOrganisationUnit", s.interestedOrganisationUnit.getEReference());
}

@lazy
rule OrganisationalUnit
	transform s : DSL!OrganisationalUnit //oa.OrganisationalUnit
	to t : SysMLine!ItemUsage
	extends Base{
	//OrganisationalUnit.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OrganisationalUnit.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OrganisationalUnit.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//OrganisationalUnit.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OrganisationalUnit.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OrganisationalUnit.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OrganisationalUnit.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OrganisationalUnit.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OrganisationalUnit.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OrganisationalUnit.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OrganisationalUnit.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OrganisationalUnit.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OrganisationalUnit.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OrganisationalUnit.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OrganisationalUnit.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OrganisationalUnit.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OrganisationalUnit.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OrganisationalUnit.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OrganisationalUnit.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OrganisationalUnit.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OrganisationalUnit.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//OrganisationalUnit.organisationalUnitCompositions -> EReference : organisationalUnitCompositions
	if (s.organisationalUnitCompositions.getEReference() != null) t.addNewReference("organisationalUnitCompositions", s.organisationalUnitCompositions.getEReference());
	//OrganisationalUnit.communityOfInterestMemberships -> EReference : communityOfInterestMemberships
	if (s.communityOfInterestMemberships.getEReference() != null) t.addNewReference("communityOfInterestMemberships", s.communityOfInterestMemberships.getEReference());
}

@lazy
rule OrganisationalUnitComposition
	transform s : DSL!OrganisationalUnitComposition //oa.OrganisationalUnitComposition
	to t : SysMLine!ItemUsage
	extends Base{
	//OrganisationalUnitComposition.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OrganisationalUnitComposition.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OrganisationalUnitComposition.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//OrganisationalUnitComposition.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OrganisationalUnitComposition.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OrganisationalUnitComposition.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OrganisationalUnitComposition.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OrganisationalUnitComposition.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OrganisationalUnitComposition.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OrganisationalUnitComposition.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OrganisationalUnitComposition.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OrganisationalUnitComposition.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OrganisationalUnitComposition.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OrganisationalUnitComposition.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OrganisationalUnitComposition.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OrganisationalUnitComposition.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OrganisationalUnitComposition.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OrganisationalUnitComposition.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OrganisationalUnitComposition.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OrganisationalUnitComposition.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OrganisationalUnitComposition.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//OrganisationalUnitComposition.organisationalUnit -> EReference : organisationalUnit
	if (s.organisationalUnit.getEReference() != null) t.addNewReference("organisationalUnit", s.organisationalUnit.getEReference());
	//OrganisationalUnitComposition.participatingEntity -> EReference : participatingEntity
	if (s.participatingEntity.getEReference() != null) t.addNewReference("participatingEntity", s.participatingEntity.getEReference());
}

@lazy
rule Location
	transform s : DSL!Location //oa.Location
	to t : SysMLine!ItemUsage
	extends Base{
	//Location.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Location.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Location.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Location.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Location.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Location.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Location.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Location.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Location.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//Location.actor -> EAttribute : actor
	if (s.actor.getEAttribute() != null) t.addNewAttribute("actor", s.actor.getEAttribute());
	//Location.human -> EAttribute : human
	if (s.human.getEAttribute() != null) t.addNewAttribute("human", s.human.getEAttribute());
	//Location.locationDescription -> EAttribute : locationDescription
	if (s.locationDescription.getEAttribute() != null) t.addNewAttribute("locationDescription", s.locationDescription.getEAttribute());
	//Location.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Location.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Location.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Location.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Location.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//Location.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Location.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Location.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Location.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Location.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Location.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Location.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Location.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Location.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Location.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Location.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Location.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Location.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//Location.ownedFunctionalAllocation -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null) t.addNewReference("ownedFunctionalAllocation", s.ownedFunctionalAllocation.getEReference());
	//Location.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//Location.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//Location.functionalAllocations -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null) t.addNewReference("functionalAllocations", s.functionalAllocations.getEReference());
	//Location.allocatedFunctions -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null) t.addNewReference("allocatedFunctions", s.allocatedFunctions.getEReference());
	//Location.inExchangeLinks -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//Location.outExchangeLinks -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
	//Location.ownedAbstractCapabilityPkg -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//Location.ownedInterfacePkg -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//Location.ownedDataPkg -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//Location.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//Location.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//Location.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//Location.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//Location.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//Location.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//Location.ownedFeatures -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//Location.containedProperties -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//Location.ownedInterfaceAllocations -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null) t.addNewReference("ownedInterfaceAllocations", s.ownedInterfaceAllocations.getEReference());
	//Location.provisionedInterfaceAllocations -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null) t.addNewReference("provisionedInterfaceAllocations", s.provisionedInterfaceAllocations.getEReference());
	//Location.allocatedInterfaces -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null) t.addNewReference("allocatedInterfaces", s.allocatedInterfaces.getEReference());
	//Location.ownedCommunicationLinks -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null) t.addNewReference("ownedCommunicationLinks", s.ownedCommunicationLinks.getEReference());
	//Location.produce -> EReference : produce
	if (s.produce.getEReference() != null) t.addNewReference("produce", s.produce.getEReference());
	//Location.consume -> EReference : consume
	if (s.consume.getEReference() != null) t.addNewReference("consume", s.consume.getEReference());
	//Location.send -> EReference : send
	if (s.send.getEReference() != null) t.addNewReference("send", s.send.getEReference());
	//Location.receive -> EReference : receive
	if (s.receive.getEReference() != null) t.addNewReference("receive", s.receive.getEReference());
	//Location.call -> EReference : call
	if (s.call.getEReference() != null) t.addNewReference("call", s.call.getEReference());
	//Location.execute -> EReference : execute
	if (s.execute.getEReference() != null) t.addNewReference("execute", s.execute.getEReference());
	//Location.write -> EReference : write
	if (s.write.getEReference() != null) t.addNewReference("write", s.write.getEReference());
	//Location.access -> EReference : access
	if (s.access.getEReference() != null) t.addNewReference("access", s.access.getEReference());
	//Location.acquire -> EReference : acquire
	if (s.acquire.getEReference() != null) t.addNewReference("acquire", s.acquire.getEReference());
	//Location.transmit -> EReference : transmit
	if (s.transmit.getEReference() != null) t.addNewReference("transmit", s.transmit.getEReference());
	//Location.ownedInterfaceUses -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null) t.addNewReference("ownedInterfaceUses", s.ownedInterfaceUses.getEReference());
	//Location.usedInterfaceLinks -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null) t.addNewReference("usedInterfaceLinks", s.usedInterfaceLinks.getEReference());
	//Location.usedInterfaces -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null) t.addNewReference("usedInterfaces", s.usedInterfaces.getEReference());
	//Location.ownedInterfaceImplementations -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null) t.addNewReference("ownedInterfaceImplementations", s.ownedInterfaceImplementations.getEReference());
	//Location.implementedInterfaceLinks -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null) t.addNewReference("implementedInterfaceLinks", s.implementedInterfaceLinks.getEReference());
	//Location.implementedInterfaces -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null) t.addNewReference("implementedInterfaces", s.implementedInterfaces.getEReference());
	//Location.ownedComponentRealizations -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null) t.addNewReference("ownedComponentRealizations", s.ownedComponentRealizations.getEReference());
	//Location.realizedComponents -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null) t.addNewReference("realizedComponents", s.realizedComponents.getEReference());
	//Location.realizingComponents -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null) t.addNewReference("realizingComponents", s.realizingComponents.getEReference());
	//Location.providedInterfaces -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//Location.requiredInterfaces -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//Location.containedComponentPorts -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null) t.addNewReference("containedComponentPorts", s.containedComponentPorts.getEReference());
	//Location.containedParts -> EReference : containedParts
	if (s.containedParts.getEReference() != null) t.addNewReference("containedParts", s.containedParts.getEReference());
	//Location.containedPhysicalPorts -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null) t.addNewReference("containedPhysicalPorts", s.containedPhysicalPorts.getEReference());
	//Location.ownedPhysicalPath -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null) t.addNewReference("ownedPhysicalPath", s.ownedPhysicalPath.getEReference());
	//Location.ownedPhysicalLinks -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//Location.ownedPhysicalLinkCategories -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//Location.representingParts -> EReference : representingParts
	if (s.representingParts.getEReference() != null) t.addNewReference("representingParts", s.representingParts.getEReference());
	//Location.composingLinks -> EReference : composingLinks
	if (s.composingLinks.getEReference() != null) t.addNewReference("composingLinks", s.composingLinks.getEReference());
	//Location.locatedEntities -> EReference : locatedEntities
	if (s.locatedEntities.getEReference() != null) t.addNewReference("locatedEntities", s.locatedEntities.getEReference());
}

@lazy
rule CapabilityConfiguration
	transform s : DSL!CapabilityConfiguration //oa.CapabilityConfiguration
	to t : SysMLine!ItemUsage
	extends Base{
	//CapabilityConfiguration.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CapabilityConfiguration.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CapabilityConfiguration.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CapabilityConfiguration.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CapabilityConfiguration.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CapabilityConfiguration.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CapabilityConfiguration.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CapabilityConfiguration.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CapabilityConfiguration.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//CapabilityConfiguration.actor -> EAttribute : actor
	if (s.actor.getEAttribute() != null) t.addNewAttribute("actor", s.actor.getEAttribute());
	//CapabilityConfiguration.human -> EAttribute : human
	if (s.human.getEAttribute() != null) t.addNewAttribute("human", s.human.getEAttribute());
	//CapabilityConfiguration.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CapabilityConfiguration.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CapabilityConfiguration.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CapabilityConfiguration.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CapabilityConfiguration.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//CapabilityConfiguration.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CapabilityConfiguration.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CapabilityConfiguration.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CapabilityConfiguration.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CapabilityConfiguration.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CapabilityConfiguration.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CapabilityConfiguration.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CapabilityConfiguration.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CapabilityConfiguration.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CapabilityConfiguration.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//CapabilityConfiguration.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//CapabilityConfiguration.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//CapabilityConfiguration.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//CapabilityConfiguration.ownedFunctionalAllocation -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null) t.addNewReference("ownedFunctionalAllocation", s.ownedFunctionalAllocation.getEReference());
	//CapabilityConfiguration.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//CapabilityConfiguration.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//CapabilityConfiguration.functionalAllocations -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null) t.addNewReference("functionalAllocations", s.functionalAllocations.getEReference());
	//CapabilityConfiguration.allocatedFunctions -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null) t.addNewReference("allocatedFunctions", s.allocatedFunctions.getEReference());
	//CapabilityConfiguration.inExchangeLinks -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//CapabilityConfiguration.outExchangeLinks -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
	//CapabilityConfiguration.ownedAbstractCapabilityPkg -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//CapabilityConfiguration.ownedInterfacePkg -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//CapabilityConfiguration.ownedDataPkg -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//CapabilityConfiguration.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//CapabilityConfiguration.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//CapabilityConfiguration.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//CapabilityConfiguration.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//CapabilityConfiguration.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//CapabilityConfiguration.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//CapabilityConfiguration.ownedFeatures -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//CapabilityConfiguration.containedProperties -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//CapabilityConfiguration.ownedInterfaceAllocations -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null) t.addNewReference("ownedInterfaceAllocations", s.ownedInterfaceAllocations.getEReference());
	//CapabilityConfiguration.provisionedInterfaceAllocations -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null) t.addNewReference("provisionedInterfaceAllocations", s.provisionedInterfaceAllocations.getEReference());
	//CapabilityConfiguration.allocatedInterfaces -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null) t.addNewReference("allocatedInterfaces", s.allocatedInterfaces.getEReference());
	//CapabilityConfiguration.ownedCommunicationLinks -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null) t.addNewReference("ownedCommunicationLinks", s.ownedCommunicationLinks.getEReference());
	//CapabilityConfiguration.produce -> EReference : produce
	if (s.produce.getEReference() != null) t.addNewReference("produce", s.produce.getEReference());
	//CapabilityConfiguration.consume -> EReference : consume
	if (s.consume.getEReference() != null) t.addNewReference("consume", s.consume.getEReference());
	//CapabilityConfiguration.send -> EReference : send
	if (s.send.getEReference() != null) t.addNewReference("send", s.send.getEReference());
	//CapabilityConfiguration.receive -> EReference : receive
	if (s.receive.getEReference() != null) t.addNewReference("receive", s.receive.getEReference());
	//CapabilityConfiguration.call -> EReference : call
	if (s.call.getEReference() != null) t.addNewReference("call", s.call.getEReference());
	//CapabilityConfiguration.execute -> EReference : execute
	if (s.execute.getEReference() != null) t.addNewReference("execute", s.execute.getEReference());
	//CapabilityConfiguration.write -> EReference : write
	if (s.write.getEReference() != null) t.addNewReference("write", s.write.getEReference());
	//CapabilityConfiguration.access -> EReference : access
	if (s.access.getEReference() != null) t.addNewReference("access", s.access.getEReference());
	//CapabilityConfiguration.acquire -> EReference : acquire
	if (s.acquire.getEReference() != null) t.addNewReference("acquire", s.acquire.getEReference());
	//CapabilityConfiguration.transmit -> EReference : transmit
	if (s.transmit.getEReference() != null) t.addNewReference("transmit", s.transmit.getEReference());
	//CapabilityConfiguration.ownedInterfaceUses -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null) t.addNewReference("ownedInterfaceUses", s.ownedInterfaceUses.getEReference());
	//CapabilityConfiguration.usedInterfaceLinks -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null) t.addNewReference("usedInterfaceLinks", s.usedInterfaceLinks.getEReference());
	//CapabilityConfiguration.usedInterfaces -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null) t.addNewReference("usedInterfaces", s.usedInterfaces.getEReference());
	//CapabilityConfiguration.ownedInterfaceImplementations -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null) t.addNewReference("ownedInterfaceImplementations", s.ownedInterfaceImplementations.getEReference());
	//CapabilityConfiguration.implementedInterfaceLinks -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null) t.addNewReference("implementedInterfaceLinks", s.implementedInterfaceLinks.getEReference());
	//CapabilityConfiguration.implementedInterfaces -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null) t.addNewReference("implementedInterfaces", s.implementedInterfaces.getEReference());
	//CapabilityConfiguration.ownedComponentRealizations -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null) t.addNewReference("ownedComponentRealizations", s.ownedComponentRealizations.getEReference());
	//CapabilityConfiguration.realizedComponents -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null) t.addNewReference("realizedComponents", s.realizedComponents.getEReference());
	//CapabilityConfiguration.realizingComponents -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null) t.addNewReference("realizingComponents", s.realizingComponents.getEReference());
	//CapabilityConfiguration.providedInterfaces -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//CapabilityConfiguration.requiredInterfaces -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//CapabilityConfiguration.containedComponentPorts -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null) t.addNewReference("containedComponentPorts", s.containedComponentPorts.getEReference());
	//CapabilityConfiguration.containedParts -> EReference : containedParts
	if (s.containedParts.getEReference() != null) t.addNewReference("containedParts", s.containedParts.getEReference());
	//CapabilityConfiguration.containedPhysicalPorts -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null) t.addNewReference("containedPhysicalPorts", s.containedPhysicalPorts.getEReference());
	//CapabilityConfiguration.ownedPhysicalPath -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null) t.addNewReference("ownedPhysicalPath", s.ownedPhysicalPath.getEReference());
	//CapabilityConfiguration.ownedPhysicalLinks -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//CapabilityConfiguration.ownedPhysicalLinkCategories -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//CapabilityConfiguration.representingParts -> EReference : representingParts
	if (s.representingParts.getEReference() != null) t.addNewReference("representingParts", s.representingParts.getEReference());
	//CapabilityConfiguration.composingLinks -> EReference : composingLinks
	if (s.composingLinks.getEReference() != null) t.addNewReference("composingLinks", s.composingLinks.getEReference());
	//CapabilityConfiguration.configuredCapability -> EReference : configuredCapability
	if (s.configuredCapability.getEReference() != null) t.addNewReference("configuredCapability", s.configuredCapability.getEReference());
}

@lazy
rule CommunicationMean
	transform s : DSL!CommunicationMean //oa.CommunicationMean
	to t : SysMLine!ItemUsage
	extends Base{
	//CommunicationMean.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CommunicationMean.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CommunicationMean.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CommunicationMean.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CommunicationMean.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CommunicationMean.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CommunicationMean.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CommunicationMean.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CommunicationMean.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//CommunicationMean.oriented -> EAttribute : oriented
	if (s.oriented.getEAttribute() != null) t.addNewAttribute("oriented", s.oriented.getEAttribute());
	//CommunicationMean.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CommunicationMean.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CommunicationMean.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CommunicationMean.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CommunicationMean.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//CommunicationMean.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CommunicationMean.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CommunicationMean.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CommunicationMean.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CommunicationMean.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CommunicationMean.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CommunicationMean.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CommunicationMean.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CommunicationMean.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CommunicationMean.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//CommunicationMean.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//CommunicationMean.invokingSequenceMessages -> EReference : invokingSequenceMessages
	if (s.invokingSequenceMessages.getEReference() != null) t.addNewReference("invokingSequenceMessages", s.invokingSequenceMessages.getEReference());
	//CommunicationMean.realizations -> EReference : realizations
	if (s.realizations.getEReference() != null) t.addNewReference("realizations", s.realizations.getEReference());
	//CommunicationMean.convoyedInformations -> EReference : convoyedInformations
	if (s.convoyedInformations.getEReference() != null) t.addNewReference("convoyedInformations", s.convoyedInformations.getEReference());
	//CommunicationMean.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//CommunicationMean.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//CommunicationMean.realizingActivityFlows -> EReference : realizingActivityFlows
	if (s.realizingActivityFlows.getEReference() != null) t.addNewReference("realizingActivityFlows", s.realizingActivityFlows.getEReference());
	//CommunicationMean.containingLink -> EReference : containingLink
	if (s.containingLink.getEReference() != null) t.addNewReference("containingLink", s.containingLink.getEReference());
	//CommunicationMean.link -> EReference : link
	if (s.link.getEReference() != null) t.addNewReference("link", s.link.getEReference());
	//CommunicationMean.outgoingExchangeSpecificationRealizations -> EReference : outgoingExchangeSpecificationRealizations
	if (s.outgoingExchangeSpecificationRealizations.getEReference() != null) t.addNewReference("outgoingExchangeSpecificationRealizations", s.outgoingExchangeSpecificationRealizations.getEReference());
	//CommunicationMean.incomingExchangeSpecificationRealizations -> EReference : incomingExchangeSpecificationRealizations
	if (s.incomingExchangeSpecificationRealizations.getEReference() != null) t.addNewReference("incomingExchangeSpecificationRealizations", s.incomingExchangeSpecificationRealizations.getEReference());
	//CommunicationMean.allocatedFunctionalExchanges -> EReference : allocatedFunctionalExchanges
	if (s.allocatedFunctionalExchanges.getEReference() != null) t.addNewReference("allocatedFunctionalExchanges", s.allocatedFunctionalExchanges.getEReference());
	//CommunicationMean.incomingComponentExchangeRealizations -> EReference : incomingComponentExchangeRealizations
	if (s.incomingComponentExchangeRealizations.getEReference() != null) t.addNewReference("incomingComponentExchangeRealizations", s.incomingComponentExchangeRealizations.getEReference());
	//CommunicationMean.outgoingComponentExchangeRealizations -> EReference : outgoingComponentExchangeRealizations
	if (s.outgoingComponentExchangeRealizations.getEReference() != null) t.addNewReference("outgoingComponentExchangeRealizations", s.outgoingComponentExchangeRealizations.getEReference());
	//CommunicationMean.outgoingComponentExchangeFunctionalExchangeAllocations -> EReference : outgoingComponentExchangeFunctionalExchangeAllocations
	if (s.outgoingComponentExchangeFunctionalExchangeAllocations.getEReference() != null) t.addNewReference("outgoingComponentExchangeFunctionalExchangeAllocations", s.outgoingComponentExchangeFunctionalExchangeAllocations.getEReference());
	//CommunicationMean.ownedComponentExchangeFunctionalExchangeAllocations -> EReference : ownedComponentExchangeFunctionalExchangeAllocations
	if (s.ownedComponentExchangeFunctionalExchangeAllocations.getEReference() != null) t.addNewReference("ownedComponentExchangeFunctionalExchangeAllocations", s.ownedComponentExchangeFunctionalExchangeAllocations.getEReference());
	//CommunicationMean.ownedComponentExchangeRealizations -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//CommunicationMean.ownedComponentExchangeEnds -> EReference : ownedComponentExchangeEnds
	if (s.ownedComponentExchangeEnds.getEReference() != null) t.addNewReference("ownedComponentExchangeEnds", s.ownedComponentExchangeEnds.getEReference());
	//CommunicationMean.sourcePort -> EReference : sourcePort
	if (s.sourcePort.getEReference() != null) t.addNewReference("sourcePort", s.sourcePort.getEReference());
	//CommunicationMean.sourcePart -> EReference : sourcePart
	if (s.sourcePart.getEReference() != null) t.addNewReference("sourcePart", s.sourcePart.getEReference());
	//CommunicationMean.targetPort -> EReference : targetPort
	if (s.targetPort.getEReference() != null) t.addNewReference("targetPort", s.targetPort.getEReference());
	//CommunicationMean.targetPart -> EReference : targetPart
	if (s.targetPart.getEReference() != null) t.addNewReference("targetPart", s.targetPart.getEReference());
	//CommunicationMean.categories -> EReference : categories
	if (s.categories.getEReference() != null) t.addNewReference("categories", s.categories.getEReference());
	//CommunicationMean.allocatorPhysicalLinks -> EReference : allocatorPhysicalLinks
	if (s.allocatorPhysicalLinks.getEReference() != null) t.addNewReference("allocatorPhysicalLinks", s.allocatorPhysicalLinks.getEReference());
	//CommunicationMean.realizedComponentExchanges -> EReference : realizedComponentExchanges
	if (s.realizedComponentExchanges.getEReference() != null) t.addNewReference("realizedComponentExchanges", s.realizedComponentExchanges.getEReference());
	//CommunicationMean.realizingComponentExchanges -> EReference : realizingComponentExchanges
	if (s.realizingComponentExchanges.getEReference() != null) t.addNewReference("realizingComponentExchanges", s.realizingComponentExchanges.getEReference());
	//CommunicationMean.sourceEntity -> EReference : sourceEntity
	if (s.sourceEntity.getEReference() != null) t.addNewReference("sourceEntity", s.sourceEntity.getEReference());
	//CommunicationMean.targetEntity -> EReference : targetEntity
	if (s.targetEntity.getEReference() != null) t.addNewReference("targetEntity", s.targetEntity.getEReference());
}

@lazy
rule EntityOperationalCapabilityInvolvement
	transform s : DSL!EntityOperationalCapabilityInvolvement //oa.EntityOperationalCapabilityInvolvement
	to t : SysMLine!ItemUsage
	extends Base{
	//EntityOperationalCapabilityInvolvement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//EntityOperationalCapabilityInvolvement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//EntityOperationalCapabilityInvolvement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//EntityOperationalCapabilityInvolvement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//EntityOperationalCapabilityInvolvement.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//EntityOperationalCapabilityInvolvement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//EntityOperationalCapabilityInvolvement.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//EntityOperationalCapabilityInvolvement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//EntityOperationalCapabilityInvolvement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//EntityOperationalCapabilityInvolvement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//EntityOperationalCapabilityInvolvement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//EntityOperationalCapabilityInvolvement.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//EntityOperationalCapabilityInvolvement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//EntityOperationalCapabilityInvolvement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//EntityOperationalCapabilityInvolvement.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//EntityOperationalCapabilityInvolvement.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//EntityOperationalCapabilityInvolvement.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//EntityOperationalCapabilityInvolvement.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//EntityOperationalCapabilityInvolvement.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//EntityOperationalCapabilityInvolvement.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//EntityOperationalCapabilityInvolvement.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//EntityOperationalCapabilityInvolvement.involver -> EReference : involver
	if (s.involver.getEReference() != null) t.addNewReference("involver", s.involver.getEReference());
	//EntityOperationalCapabilityInvolvement.involved -> EReference : involved
	if (s.involved.getEReference() != null) t.addNewReference("involved", s.involved.getEReference());
	//EntityOperationalCapabilityInvolvement.entity -> EReference : entity
	if (s.entity.getEReference() != null) t.addNewReference("entity", s.entity.getEReference());
	//EntityOperationalCapabilityInvolvement.capability -> EReference : capability
	if (s.capability.getEReference() != null) t.addNewReference("capability", s.capability.getEReference());
}


// ctx.ecore
@lazy
rule SystemAnalysis
	transform s : DSL!SystemAnalysis //ctx.SystemAnalysis
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemAnalysis.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SystemAnalysis.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SystemAnalysis.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//SystemAnalysis.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SystemAnalysis.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SystemAnalysis.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SystemAnalysis.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SystemAnalysis.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SystemAnalysis.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SystemAnalysis.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SystemAnalysis.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SystemAnalysis.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SystemAnalysis.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SystemAnalysis.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SystemAnalysis.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SystemAnalysis.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SystemAnalysis.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SystemAnalysis.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SystemAnalysis.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SystemAnalysis.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SystemAnalysis.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SystemAnalysis.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//SystemAnalysis.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//SystemAnalysis.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//SystemAnalysis.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//SystemAnalysis.ownedFunctionPkg -> EReference : ownedFunctionPkg
	if (s.ownedFunctionPkg.getEReference() != null) t.addNewReference("ownedFunctionPkg", s.ownedFunctionPkg.getEReference());
	//SystemAnalysis.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//SystemAnalysis.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//SystemAnalysis.ownedFunctionalLinks -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//SystemAnalysis.ownedFunctionalAllocations -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//SystemAnalysis.ownedComponentExchangeRealizations -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//SystemAnalysis.ownedAbstractCapabilityPkg -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//SystemAnalysis.ownedInterfacePkg -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//SystemAnalysis.ownedDataPkg -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//SystemAnalysis.provisionedArchitectureAllocations -> EReference : provisionedArchitectureAllocations
	if (s.provisionedArchitectureAllocations.getEReference() != null) t.addNewReference("provisionedArchitectureAllocations", s.provisionedArchitectureAllocations.getEReference());
	//SystemAnalysis.provisioningArchitectureAllocations -> EReference : provisioningArchitectureAllocations
	if (s.provisioningArchitectureAllocations.getEReference() != null) t.addNewReference("provisioningArchitectureAllocations", s.provisioningArchitectureAllocations.getEReference());
	//SystemAnalysis.allocatedArchitectures -> EReference : allocatedArchitectures
	if (s.allocatedArchitectures.getEReference() != null) t.addNewReference("allocatedArchitectures", s.allocatedArchitectures.getEReference());
	//SystemAnalysis.allocatingArchitectures -> EReference : allocatingArchitectures
	if (s.allocatingArchitectures.getEReference() != null) t.addNewReference("allocatingArchitectures", s.allocatingArchitectures.getEReference());
	//SystemAnalysis.system -> EReference : system
	if (s.system.getEReference() != null) t.addNewReference("system", s.system.getEReference());
	//SystemAnalysis.ownedSystemComponentPkg -> EReference : ownedSystemComponentPkg
	if (s.ownedSystemComponentPkg.getEReference() != null) t.addNewReference("ownedSystemComponentPkg", s.ownedSystemComponentPkg.getEReference());
	//SystemAnalysis.ownedMissionPkg -> EReference : ownedMissionPkg
	if (s.ownedMissionPkg.getEReference() != null) t.addNewReference("ownedMissionPkg", s.ownedMissionPkg.getEReference());
	//SystemAnalysis.containedCapabilityPkg -> EReference : containedCapabilityPkg
	if (s.containedCapabilityPkg.getEReference() != null) t.addNewReference("containedCapabilityPkg", s.containedCapabilityPkg.getEReference());
	//SystemAnalysis.containedSystemFunctionPkg -> EReference : containedSystemFunctionPkg
	if (s.containedSystemFunctionPkg.getEReference() != null) t.addNewReference("containedSystemFunctionPkg", s.containedSystemFunctionPkg.getEReference());
	//SystemAnalysis.ownedOperationalAnalysisRealizations -> EReference : ownedOperationalAnalysisRealizations
	if (s.ownedOperationalAnalysisRealizations.getEReference() != null) t.addNewReference("ownedOperationalAnalysisRealizations", s.ownedOperationalAnalysisRealizations.getEReference());
	//SystemAnalysis.allocatedOperationalAnalysisRealizations -> EReference : allocatedOperationalAnalysisRealizations
	if (s.allocatedOperationalAnalysisRealizations.getEReference() != null) t.addNewReference("allocatedOperationalAnalysisRealizations", s.allocatedOperationalAnalysisRealizations.getEReference());
	//SystemAnalysis.allocatedOperationalAnalyses -> EReference : allocatedOperationalAnalyses
	if (s.allocatedOperationalAnalyses.getEReference() != null) t.addNewReference("allocatedOperationalAnalyses", s.allocatedOperationalAnalyses.getEReference());
	//SystemAnalysis.allocatingLogicalArchitectures -> EReference : allocatingLogicalArchitectures
	if (s.allocatingLogicalArchitectures.getEReference() != null) t.addNewReference("allocatingLogicalArchitectures", s.allocatingLogicalArchitectures.getEReference());
}

@lazy
rule SystemFunction
	transform s : DSL!SystemFunction //ctx.SystemFunction
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemFunction.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SystemFunction.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SystemFunction.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//SystemFunction.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SystemFunction.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SystemFunction.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SystemFunction.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SystemFunction.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SystemFunction.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//SystemFunction.isStatic -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//SystemFunction.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//SystemFunction.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//SystemFunction.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//SystemFunction.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//SystemFunction.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//SystemFunction.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//SystemFunction.aggregationKind -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null) t.addNewAttribute("aggregationKind", s.aggregationKind.getEAttribute());
	//SystemFunction.isDerived -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null) t.addNewAttribute("isDerived", s.isDerived.getEAttribute());
	//SystemFunction.isReadOnly -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null) t.addNewAttribute("isReadOnly", s.isReadOnly.getEAttribute());
	//SystemFunction.isPartOfKey -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null) t.addNewAttribute("isPartOfKey", s.isPartOfKey.getEAttribute());
	//SystemFunction.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//SystemFunction.condition -> EAttribute : condition
	if (s.condition.getEAttribute() != null) t.addNewAttribute("condition", s.condition.getEAttribute());
	//SystemFunction.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SystemFunction.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SystemFunction.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SystemFunction.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SystemFunction.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SystemFunction.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SystemFunction.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SystemFunction.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SystemFunction.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SystemFunction.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SystemFunction.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SystemFunction.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SystemFunction.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SystemFunction.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//SystemFunction.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//SystemFunction.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//SystemFunction.involvingInvolvements -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//SystemFunction.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//SystemFunction.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//SystemFunction.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//SystemFunction.ownedMinValue -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//SystemFunction.ownedMaxValue -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//SystemFunction.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//SystemFunction.ownedMinCard -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//SystemFunction.ownedMinLength -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//SystemFunction.ownedMaxCard -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//SystemFunction.ownedMaxLength -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//SystemFunction.association -> EReference : association
	if (s.association.getEReference() != null) t.addNewReference("association", s.association.getEReference());
	//SystemFunction.representingInstanceRoles -> EReference : representingInstanceRoles
	if (s.representingInstanceRoles.getEReference() != null) t.addNewReference("representingInstanceRoles", s.representingInstanceRoles.getEReference());
	//SystemFunction.ownedFunctionalChains -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null) t.addNewReference("ownedFunctionalChains", s.ownedFunctionalChains.getEReference());
	//SystemFunction.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//SystemFunction.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//SystemFunction.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//SystemFunction.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//SystemFunction.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//SystemFunction.ownedHandlers -> EReference : ownedHandlers
	if (s.ownedHandlers.getEReference() != null) t.addNewReference("ownedHandlers", s.ownedHandlers.getEReference());
	//SystemFunction.localPrecondition -> EReference : localPrecondition
	if (s.localPrecondition.getEReference() != null) t.addNewReference("localPrecondition", s.localPrecondition.getEReference());
	//SystemFunction.localPostcondition -> EReference : localPostcondition
	if (s.localPostcondition.getEReference() != null) t.addNewReference("localPostcondition", s.localPostcondition.getEReference());
	//SystemFunction.context -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context", s.context.getEReference());
	//SystemFunction.inputs -> EReference : inputs
	if (s.inputs.getEReference() != null) t.addNewReference("inputs", s.inputs.getEReference());
	//SystemFunction.outputs -> EReference : outputs
	if (s.outputs.getEReference() != null) t.addNewReference("outputs", s.outputs.getEReference());
	//SystemFunction.arguments -> EReference : arguments
	if (s.arguments.getEReference() != null) t.addNewReference("arguments", s.arguments.getEReference());
	//SystemFunction.results -> EReference : results
	if (s.results.getEReference() != null) t.addNewReference("results", s.results.getEReference());
	//SystemFunction.behavior -> EReference : behavior
	if (s.behavior.getEReference() != null) t.addNewReference("behavior", s.behavior.getEReference());
	//SystemFunction.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//SystemFunction.ownedFunctions -> EReference : ownedFunctions
	if (s.ownedFunctions.getEReference() != null) t.addNewReference("ownedFunctions", s.ownedFunctions.getEReference());
	//SystemFunction.ownedFunctionRealizations -> EReference : ownedFunctionRealizations
	if (s.ownedFunctionRealizations.getEReference() != null) t.addNewReference("ownedFunctionRealizations", s.ownedFunctionRealizations.getEReference());
	//SystemFunction.ownedFunctionalExchanges -> EReference : ownedFunctionalExchanges
	if (s.ownedFunctionalExchanges.getEReference() != null) t.addNewReference("ownedFunctionalExchanges", s.ownedFunctionalExchanges.getEReference());
	//SystemFunction.subFunctions -> EReference : subFunctions
	if (s.subFunctions.getEReference() != null) t.addNewReference("subFunctions", s.subFunctions.getEReference());
	//SystemFunction.outFunctionRealizations -> EReference : outFunctionRealizations
	if (s.outFunctionRealizations.getEReference() != null) t.addNewReference("outFunctionRealizations", s.outFunctionRealizations.getEReference());
	//SystemFunction.inFunctionRealizations -> EReference : inFunctionRealizations
	if (s.inFunctionRealizations.getEReference() != null) t.addNewReference("inFunctionRealizations", s.inFunctionRealizations.getEReference());
	//SystemFunction.componentFunctionalAllocations -> EReference : componentFunctionalAllocations
	if (s.componentFunctionalAllocations.getEReference() != null) t.addNewReference("componentFunctionalAllocations", s.componentFunctionalAllocations.getEReference());
	//SystemFunction.allocationBlocks -> EReference : allocationBlocks
	if (s.allocationBlocks.getEReference() != null) t.addNewReference("allocationBlocks", s.allocationBlocks.getEReference());
	//SystemFunction.availableInStates -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null) t.addNewReference("availableInStates", s.availableInStates.getEReference());
	//SystemFunction.involvingCapabilities -> EReference : involvingCapabilities
	if (s.involvingCapabilities.getEReference() != null) t.addNewReference("involvingCapabilities", s.involvingCapabilities.getEReference());
	//SystemFunction.involvingCapabilityRealizations -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null) t.addNewReference("involvingCapabilityRealizations", s.involvingCapabilityRealizations.getEReference());
	//SystemFunction.involvingFunctionalChains -> EReference : involvingFunctionalChains
	if (s.involvingFunctionalChains.getEReference() != null) t.addNewReference("involvingFunctionalChains", s.involvingFunctionalChains.getEReference());
	//SystemFunction.linkedStateMachine -> EReference : linkedStateMachine
	if (s.linkedStateMachine.getEReference() != null) t.addNewReference("linkedStateMachine", s.linkedStateMachine.getEReference());
	//SystemFunction.linkedFunctionSpecification -> EReference : linkedFunctionSpecification
	if (s.linkedFunctionSpecification.getEReference() != null) t.addNewReference("linkedFunctionSpecification", s.linkedFunctionSpecification.getEReference());
	//SystemFunction.ownedSystemFunctionPkgs -> EReference : ownedSystemFunctionPkgs
	if (s.ownedSystemFunctionPkgs.getEReference() != null) t.addNewReference("ownedSystemFunctionPkgs", s.ownedSystemFunctionPkgs.getEReference());
	//SystemFunction.allocatingSystemComponents -> EReference : allocatingSystemComponents
	if (s.allocatingSystemComponents.getEReference() != null) t.addNewReference("allocatingSystemComponents", s.allocatingSystemComponents.getEReference());
	//SystemFunction.realizedOperationalActivities -> EReference : realizedOperationalActivities
	if (s.realizedOperationalActivities.getEReference() != null) t.addNewReference("realizedOperationalActivities", s.realizedOperationalActivities.getEReference());
	//SystemFunction.realizingLogicalFunctions -> EReference : realizingLogicalFunctions
	if (s.realizingLogicalFunctions.getEReference() != null) t.addNewReference("realizingLogicalFunctions", s.realizingLogicalFunctions.getEReference());
	//SystemFunction.containedSystemFunctions -> EReference : containedSystemFunctions
	if (s.containedSystemFunctions.getEReference() != null) t.addNewReference("containedSystemFunctions", s.containedSystemFunctions.getEReference());
	//SystemFunction.childrenSystemFunctions -> EReference : childrenSystemFunctions
	if (s.childrenSystemFunctions.getEReference() != null) t.addNewReference("childrenSystemFunctions", s.childrenSystemFunctions.getEReference());
}

@lazy
rule SystemFunctionPkg
	transform s : DSL!SystemFunctionPkg //ctx.SystemFunctionPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemFunctionPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SystemFunctionPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SystemFunctionPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//SystemFunctionPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SystemFunctionPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SystemFunctionPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SystemFunctionPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SystemFunctionPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SystemFunctionPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SystemFunctionPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SystemFunctionPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SystemFunctionPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SystemFunctionPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SystemFunctionPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SystemFunctionPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SystemFunctionPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SystemFunctionPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SystemFunctionPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SystemFunctionPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SystemFunctionPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SystemFunctionPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SystemFunctionPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//SystemFunctionPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//SystemFunctionPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//SystemFunctionPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//SystemFunctionPkg.ownedFunctionalLinks -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//SystemFunctionPkg.ownedExchanges -> EReference : ownedExchanges
	if (s.ownedExchanges.getEReference() != null) t.addNewReference("ownedExchanges", s.ownedExchanges.getEReference());
	//SystemFunctionPkg.ownedExchangeSpecificationRealizations -> EReference : ownedExchangeSpecificationRealizations
	if (s.ownedExchangeSpecificationRealizations.getEReference() != null) t.addNewReference("ownedExchangeSpecificationRealizations", s.ownedExchangeSpecificationRealizations.getEReference());
	//SystemFunctionPkg.ownedCategories -> EReference : ownedCategories
	if (s.ownedCategories.getEReference() != null) t.addNewReference("ownedCategories", s.ownedCategories.getEReference());
	//SystemFunctionPkg.ownedFunctionSpecifications -> EReference : ownedFunctionSpecifications
	if (s.ownedFunctionSpecifications.getEReference() != null) t.addNewReference("ownedFunctionSpecifications", s.ownedFunctionSpecifications.getEReference());
	//SystemFunctionPkg.ownedSystemFunctions -> EReference : ownedSystemFunctions
	if (s.ownedSystemFunctions.getEReference() != null) t.addNewReference("ownedSystemFunctions", s.ownedSystemFunctions.getEReference());
	//SystemFunctionPkg.ownedSystemFunctionPkgs -> EReference : ownedSystemFunctionPkgs
	if (s.ownedSystemFunctionPkgs.getEReference() != null) t.addNewReference("ownedSystemFunctionPkgs", s.ownedSystemFunctionPkgs.getEReference());
}

@lazy
rule SystemCommunicationHook
	transform s : DSL!SystemCommunicationHook //ctx.SystemCommunicationHook
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemCommunicationHook.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SystemCommunicationHook.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SystemCommunicationHook.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//SystemCommunicationHook.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SystemCommunicationHook.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SystemCommunicationHook.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SystemCommunicationHook.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SystemCommunicationHook.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SystemCommunicationHook.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SystemCommunicationHook.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SystemCommunicationHook.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SystemCommunicationHook.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SystemCommunicationHook.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SystemCommunicationHook.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SystemCommunicationHook.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SystemCommunicationHook.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SystemCommunicationHook.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SystemCommunicationHook.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SystemCommunicationHook.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SystemCommunicationHook.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SystemCommunicationHook.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SystemCommunicationHook.communication -> EReference : communication
	if (s.communication.getEReference() != null) t.addNewReference("communication", s.communication.getEReference());
	//SystemCommunicationHook.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
}

@lazy
rule SystemCommunication
	transform s : DSL!SystemCommunication //ctx.SystemCommunication
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemCommunication.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SystemCommunication.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SystemCommunication.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SystemCommunication.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SystemCommunication.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SystemCommunication.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SystemCommunication.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SystemCommunication.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SystemCommunication.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SystemCommunication.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SystemCommunication.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SystemCommunication.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//SystemCommunication.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SystemCommunication.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SystemCommunication.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SystemCommunication.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SystemCommunication.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SystemCommunication.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SystemCommunication.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SystemCommunication.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SystemCommunication.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SystemCommunication.ends -> EReference : ends
	if (s.ends.getEReference() != null) t.addNewReference("ends", s.ends.getEReference());
}

@lazy
rule CapabilityInvolvement
	transform s : DSL!CapabilityInvolvement //ctx.CapabilityInvolvement
	to t : SysMLine!ItemUsage
	extends Base{
	//CapabilityInvolvement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CapabilityInvolvement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CapabilityInvolvement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CapabilityInvolvement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CapabilityInvolvement.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CapabilityInvolvement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CapabilityInvolvement.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CapabilityInvolvement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CapabilityInvolvement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CapabilityInvolvement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CapabilityInvolvement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CapabilityInvolvement.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//CapabilityInvolvement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CapabilityInvolvement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CapabilityInvolvement.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CapabilityInvolvement.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CapabilityInvolvement.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CapabilityInvolvement.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CapabilityInvolvement.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CapabilityInvolvement.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CapabilityInvolvement.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CapabilityInvolvement.involver -> EReference : involver
	if (s.involver.getEReference() != null) t.addNewReference("involver", s.involver.getEReference());
	//CapabilityInvolvement.involved -> EReference : involved
	if (s.involved.getEReference() != null) t.addNewReference("involved", s.involved.getEReference());
	//CapabilityInvolvement.systemComponent -> EReference : systemComponent
	if (s.systemComponent.getEReference() != null) t.addNewReference("systemComponent", s.systemComponent.getEReference());
	//CapabilityInvolvement.capability -> EReference : capability
	if (s.capability.getEReference() != null) t.addNewReference("capability", s.capability.getEReference());
}

@lazy
rule MissionInvolvement
	transform s : DSL!MissionInvolvement //ctx.MissionInvolvement
	to t : SysMLine!ItemUsage
	extends Base{
	//MissionInvolvement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//MissionInvolvement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//MissionInvolvement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//MissionInvolvement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//MissionInvolvement.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//MissionInvolvement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//MissionInvolvement.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//MissionInvolvement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//MissionInvolvement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//MissionInvolvement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//MissionInvolvement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//MissionInvolvement.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//MissionInvolvement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//MissionInvolvement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//MissionInvolvement.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//MissionInvolvement.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//MissionInvolvement.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//MissionInvolvement.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//MissionInvolvement.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//MissionInvolvement.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//MissionInvolvement.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//MissionInvolvement.involver -> EReference : involver
	if (s.involver.getEReference() != null) t.addNewReference("involver", s.involver.getEReference());
	//MissionInvolvement.involved -> EReference : involved
	if (s.involved.getEReference() != null) t.addNewReference("involved", s.involved.getEReference());
	//MissionInvolvement.systemComponent -> EReference : systemComponent
	if (s.systemComponent.getEReference() != null) t.addNewReference("systemComponent", s.systemComponent.getEReference());
	//MissionInvolvement.mission -> EReference : mission
	if (s.mission.getEReference() != null) t.addNewReference("mission", s.mission.getEReference());
}

@lazy
rule Mission
	transform s : DSL!Mission //ctx.Mission
	to t : SysMLine!ItemUsage
	extends Base{
	//Mission.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Mission.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Mission.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Mission.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Mission.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Mission.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Mission.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Mission.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Mission.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Mission.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Mission.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Mission.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Mission.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Mission.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Mission.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Mission.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Mission.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Mission.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Mission.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Mission.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Mission.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Mission.involvedInvolvements -> EReference : involvedInvolvements
	if (s.involvedInvolvements.getEReference() != null) t.addNewReference("involvedInvolvements", s.involvedInvolvements.getEReference());
	//Mission.ownedMissionInvolvements -> EReference : ownedMissionInvolvements
	if (s.ownedMissionInvolvements.getEReference() != null) t.addNewReference("ownedMissionInvolvements", s.ownedMissionInvolvements.getEReference());
	//Mission.involvedSystemComponents -> EReference : involvedSystemComponents
	if (s.involvedSystemComponents.getEReference() != null) t.addNewReference("involvedSystemComponents", s.involvedSystemComponents.getEReference());
	//Mission.ownedCapabilityExploitations -> EReference : ownedCapabilityExploitations
	if (s.ownedCapabilityExploitations.getEReference() != null) t.addNewReference("ownedCapabilityExploitations", s.ownedCapabilityExploitations.getEReference());
	//Mission.exploitedCapabilities -> EReference : exploitedCapabilities
	if (s.exploitedCapabilities.getEReference() != null) t.addNewReference("exploitedCapabilities", s.exploitedCapabilities.getEReference());
}

@lazy
rule MissionPkg
	transform s : DSL!MissionPkg //ctx.MissionPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//MissionPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//MissionPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//MissionPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//MissionPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//MissionPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//MissionPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//MissionPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//MissionPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//MissionPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//MissionPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//MissionPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//MissionPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//MissionPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//MissionPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//MissionPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//MissionPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//MissionPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//MissionPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//MissionPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//MissionPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//MissionPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//MissionPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//MissionPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//MissionPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//MissionPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//MissionPkg.ownedMissionPkgs -> EReference : ownedMissionPkgs
	if (s.ownedMissionPkgs.getEReference() != null) t.addNewReference("ownedMissionPkgs", s.ownedMissionPkgs.getEReference());
	//MissionPkg.ownedMissions -> EReference : ownedMissions
	if (s.ownedMissions.getEReference() != null) t.addNewReference("ownedMissions", s.ownedMissions.getEReference());
}

@lazy
rule Capability
	transform s : DSL!Capability //ctx.Capability
	to t : SysMLine!ItemUsage
	extends Base{
	//Capability.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Capability.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Capability.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Capability.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Capability.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Capability.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Capability.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Capability.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Capability.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Capability.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Capability.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Capability.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Capability.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Capability.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Capability.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Capability.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Capability.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Capability.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Capability.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Capability.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Capability.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Capability.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Capability.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Capability.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Capability.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//Capability.involvedInvolvements -> EReference : involvedInvolvements
	if (s.involvedInvolvements.getEReference() != null) t.addNewReference("involvedInvolvements", s.involvedInvolvements.getEReference());
	//Capability.ownedFunctionalChains -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null) t.addNewReference("ownedFunctionalChains", s.ownedFunctionalChains.getEReference());
	//Capability.preCondition -> EReference : preCondition
	if (s.preCondition.getEReference() != null) t.addNewReference("preCondition", s.preCondition.getEReference());
	//Capability.postCondition -> EReference : postCondition
	if (s.postCondition.getEReference() != null) t.addNewReference("postCondition", s.postCondition.getEReference());
	//Capability.ownedScenarios -> EReference : ownedScenarios
	if (s.ownedScenarios.getEReference() != null) t.addNewReference("ownedScenarios", s.ownedScenarios.getEReference());
	//Capability.incomingCapabilityAllocation -> EReference : incomingCapabilityAllocation
	if (s.incomingCapabilityAllocation.getEReference() != null) t.addNewReference("incomingCapabilityAllocation", s.incomingCapabilityAllocation.getEReference());
	//Capability.outgoingCapabilityAllocation -> EReference : outgoingCapabilityAllocation
	if (s.outgoingCapabilityAllocation.getEReference() != null) t.addNewReference("outgoingCapabilityAllocation", s.outgoingCapabilityAllocation.getEReference());
	//Capability.extends -> EReference : extends_
	if (s.`extends`.getEReference() != null) t.addNewReference("extends_", s.`extends`.getEReference());
	//Capability.extending -> EReference : extending
	if (s.extending.getEReference() != null) t.addNewReference("extending", s.extending.getEReference());
	//Capability.abstractCapabilityExtensionPoints -> EReference : abstractCapabilityExtensionPoints
	if (s.abstractCapabilityExtensionPoints.getEReference() != null) t.addNewReference("abstractCapabilityExtensionPoints", s.abstractCapabilityExtensionPoints.getEReference());
	//Capability.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//Capability.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//Capability.includes -> EReference : includes
	if (s.includes.getEReference() != null) t.addNewReference("includes", s.includes.getEReference());
	//Capability.including -> EReference : including
	if (s.including.getEReference() != null) t.addNewReference("including", s.including.getEReference());
	//Capability.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//Capability.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//Capability.includedAbstractCapabilities -> EReference : includedAbstractCapabilities
	if (s.includedAbstractCapabilities.getEReference() != null) t.addNewReference("includedAbstractCapabilities", s.includedAbstractCapabilities.getEReference());
	//Capability.includingAbstractCapabilities -> EReference : includingAbstractCapabilities
	if (s.includingAbstractCapabilities.getEReference() != null) t.addNewReference("includingAbstractCapabilities", s.includingAbstractCapabilities.getEReference());
	//Capability.extendedAbstractCapabilities -> EReference : extendedAbstractCapabilities
	if (s.extendedAbstractCapabilities.getEReference() != null) t.addNewReference("extendedAbstractCapabilities", s.extendedAbstractCapabilities.getEReference());
	//Capability.extendingAbstractCapabilities -> EReference : extendingAbstractCapabilities
	if (s.extendingAbstractCapabilities.getEReference() != null) t.addNewReference("extendingAbstractCapabilities", s.extendingAbstractCapabilities.getEReference());
	//Capability.ownedFunctionalChainAbstractCapabilityInvolvements -> EReference : ownedFunctionalChainAbstractCapabilityInvolvements
	if (s.ownedFunctionalChainAbstractCapabilityInvolvements.getEReference() != null) t.addNewReference("ownedFunctionalChainAbstractCapabilityInvolvements", s.ownedFunctionalChainAbstractCapabilityInvolvements.getEReference());
	//Capability.ownedAbstractFunctionAbstractCapabilityInvolvements -> EReference : ownedAbstractFunctionAbstractCapabilityInvolvements
	if (s.ownedAbstractFunctionAbstractCapabilityInvolvements.getEReference() != null) t.addNewReference("ownedAbstractFunctionAbstractCapabilityInvolvements", s.ownedAbstractFunctionAbstractCapabilityInvolvements.getEReference());
	//Capability.availableInStates -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null) t.addNewReference("availableInStates", s.availableInStates.getEReference());
	//Capability.ownedAbstractCapabilityRealizations -> EReference : ownedAbstractCapabilityRealizations
	if (s.ownedAbstractCapabilityRealizations.getEReference() != null) t.addNewReference("ownedAbstractCapabilityRealizations", s.ownedAbstractCapabilityRealizations.getEReference());
	//Capability.involvedAbstractFunctions -> EReference : involvedAbstractFunctions
	if (s.involvedAbstractFunctions.getEReference() != null) t.addNewReference("involvedAbstractFunctions", s.involvedAbstractFunctions.getEReference());
	//Capability.involvedFunctionalChains -> EReference : involvedFunctionalChains
	if (s.involvedFunctionalChains.getEReference() != null) t.addNewReference("involvedFunctionalChains", s.involvedFunctionalChains.getEReference());
	//Capability.ownedCapabilityInvolvements -> EReference : ownedCapabilityInvolvements
	if (s.ownedCapabilityInvolvements.getEReference() != null) t.addNewReference("ownedCapabilityInvolvements", s.ownedCapabilityInvolvements.getEReference());
	//Capability.involvedSystemComponents -> EReference : involvedSystemComponents
	if (s.involvedSystemComponents.getEReference() != null) t.addNewReference("involvedSystemComponents", s.involvedSystemComponents.getEReference());
	//Capability.purposes -> EReference : purposes
	if (s.purposes.getEReference() != null) t.addNewReference("purposes", s.purposes.getEReference());
	//Capability.purposeMissions -> EReference : purposeMissions
	if (s.purposeMissions.getEReference() != null) t.addNewReference("purposeMissions", s.purposeMissions.getEReference());
	//Capability.realizedOperationalCapabilities -> EReference : realizedOperationalCapabilities
	if (s.realizedOperationalCapabilities.getEReference() != null) t.addNewReference("realizedOperationalCapabilities", s.realizedOperationalCapabilities.getEReference());
	//Capability.realizingCapabilityRealizations -> EReference : realizingCapabilityRealizations
	if (s.realizingCapabilityRealizations.getEReference() != null) t.addNewReference("realizingCapabilityRealizations", s.realizingCapabilityRealizations.getEReference());
}

@lazy
rule CapabilityExploitation
	transform s : DSL!CapabilityExploitation //ctx.CapabilityExploitation
	to t : SysMLine!ItemUsage
	extends Base{
	//CapabilityExploitation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CapabilityExploitation.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CapabilityExploitation.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CapabilityExploitation.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CapabilityExploitation.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CapabilityExploitation.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CapabilityExploitation.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CapabilityExploitation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CapabilityExploitation.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CapabilityExploitation.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CapabilityExploitation.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CapabilityExploitation.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//CapabilityExploitation.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CapabilityExploitation.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CapabilityExploitation.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CapabilityExploitation.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CapabilityExploitation.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CapabilityExploitation.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CapabilityExploitation.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CapabilityExploitation.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CapabilityExploitation.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CapabilityExploitation.mission -> EReference : mission
	if (s.mission.getEReference() != null) t.addNewReference("mission", s.mission.getEReference());
	//CapabilityExploitation.capability -> EReference : capability
	if (s.capability.getEReference() != null) t.addNewReference("capability", s.capability.getEReference());
}

@lazy
rule CapabilityPkg
	transform s : DSL!CapabilityPkg //ctx.CapabilityPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//CapabilityPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CapabilityPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CapabilityPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CapabilityPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CapabilityPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CapabilityPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CapabilityPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CapabilityPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CapabilityPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CapabilityPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CapabilityPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CapabilityPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CapabilityPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CapabilityPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CapabilityPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CapabilityPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CapabilityPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CapabilityPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CapabilityPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CapabilityPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CapabilityPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CapabilityPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//CapabilityPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//CapabilityPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//CapabilityPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//CapabilityPkg.ownedCapabilities -> EReference : ownedCapabilities
	if (s.ownedCapabilities.getEReference() != null) t.addNewReference("ownedCapabilities", s.ownedCapabilities.getEReference());
	//CapabilityPkg.ownedCapabilityPkgs -> EReference : ownedCapabilityPkgs
	if (s.ownedCapabilityPkgs.getEReference() != null) t.addNewReference("ownedCapabilityPkgs", s.ownedCapabilityPkgs.getEReference());
}

@lazy
rule OperationalAnalysisRealization
	transform s : DSL!OperationalAnalysisRealization //ctx.OperationalAnalysisRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalAnalysisRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OperationalAnalysisRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OperationalAnalysisRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OperationalAnalysisRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OperationalAnalysisRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OperationalAnalysisRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OperationalAnalysisRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OperationalAnalysisRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OperationalAnalysisRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OperationalAnalysisRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OperationalAnalysisRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OperationalAnalysisRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//OperationalAnalysisRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OperationalAnalysisRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OperationalAnalysisRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OperationalAnalysisRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OperationalAnalysisRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OperationalAnalysisRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OperationalAnalysisRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OperationalAnalysisRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OperationalAnalysisRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//OperationalAnalysisRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//OperationalAnalysisRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//OperationalAnalysisRealization.allocatedArchitecture -> EReference : allocatedArchitecture
	if (s.allocatedArchitecture.getEReference() != null) t.addNewReference("allocatedArchitecture", s.allocatedArchitecture.getEReference());
	//OperationalAnalysisRealization.allocatingArchitecture -> EReference : allocatingArchitecture
	if (s.allocatingArchitecture.getEReference() != null) t.addNewReference("allocatingArchitecture", s.allocatingArchitecture.getEReference());
}

@lazy
rule SystemComponentPkg
	transform s : DSL!SystemComponentPkg //ctx.SystemComponentPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemComponentPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SystemComponentPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SystemComponentPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//SystemComponentPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SystemComponentPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SystemComponentPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SystemComponentPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SystemComponentPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SystemComponentPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SystemComponentPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SystemComponentPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SystemComponentPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SystemComponentPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SystemComponentPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SystemComponentPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SystemComponentPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SystemComponentPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SystemComponentPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SystemComponentPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SystemComponentPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SystemComponentPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SystemComponentPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//SystemComponentPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//SystemComponentPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//SystemComponentPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//SystemComponentPkg.ownedParts -> EReference : ownedParts
	if (s.ownedParts.getEReference() != null) t.addNewReference("ownedParts", s.ownedParts.getEReference());
	//SystemComponentPkg.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//SystemComponentPkg.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//SystemComponentPkg.ownedFunctionalLinks -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//SystemComponentPkg.ownedFunctionalAllocations -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//SystemComponentPkg.ownedComponentExchangeRealizations -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//SystemComponentPkg.ownedPhysicalLinks -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//SystemComponentPkg.ownedPhysicalLinkCategories -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//SystemComponentPkg.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//SystemComponentPkg.ownedSystemComponents -> EReference : ownedSystemComponents
	if (s.ownedSystemComponents.getEReference() != null) t.addNewReference("ownedSystemComponents", s.ownedSystemComponents.getEReference());
	//SystemComponentPkg.ownedSystemComponentPkgs -> EReference : ownedSystemComponentPkgs
	if (s.ownedSystemComponentPkgs.getEReference() != null) t.addNewReference("ownedSystemComponentPkgs", s.ownedSystemComponentPkgs.getEReference());
}

@lazy
rule SystemComponent
	transform s : DSL!SystemComponent //ctx.SystemComponent
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemComponent.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SystemComponent.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SystemComponent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//SystemComponent.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SystemComponent.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SystemComponent.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SystemComponent.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SystemComponent.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SystemComponent.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//SystemComponent.actor -> EAttribute : actor
	if (s.actor.getEAttribute() != null) t.addNewAttribute("actor", s.actor.getEAttribute());
	//SystemComponent.human -> EAttribute : human
	if (s.human.getEAttribute() != null) t.addNewAttribute("human", s.human.getEAttribute());
	//SystemComponent.dataComponent -> EAttribute : dataComponent
	if (s.dataComponent.getEAttribute() != null) t.addNewAttribute("dataComponent", s.dataComponent.getEAttribute());
	//SystemComponent.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SystemComponent.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SystemComponent.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SystemComponent.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SystemComponent.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//SystemComponent.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SystemComponent.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SystemComponent.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SystemComponent.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SystemComponent.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SystemComponent.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SystemComponent.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SystemComponent.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SystemComponent.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SystemComponent.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//SystemComponent.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//SystemComponent.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//SystemComponent.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//SystemComponent.ownedFunctionalAllocation -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null) t.addNewReference("ownedFunctionalAllocation", s.ownedFunctionalAllocation.getEReference());
	//SystemComponent.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//SystemComponent.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//SystemComponent.functionalAllocations -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null) t.addNewReference("functionalAllocations", s.functionalAllocations.getEReference());
	//SystemComponent.allocatedFunctions -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null) t.addNewReference("allocatedFunctions", s.allocatedFunctions.getEReference());
	//SystemComponent.inExchangeLinks -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//SystemComponent.outExchangeLinks -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
	//SystemComponent.ownedAbstractCapabilityPkg -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//SystemComponent.ownedInterfacePkg -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//SystemComponent.ownedDataPkg -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//SystemComponent.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//SystemComponent.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//SystemComponent.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//SystemComponent.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//SystemComponent.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//SystemComponent.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//SystemComponent.ownedFeatures -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//SystemComponent.containedProperties -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//SystemComponent.ownedInterfaceAllocations -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null) t.addNewReference("ownedInterfaceAllocations", s.ownedInterfaceAllocations.getEReference());
	//SystemComponent.provisionedInterfaceAllocations -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null) t.addNewReference("provisionedInterfaceAllocations", s.provisionedInterfaceAllocations.getEReference());
	//SystemComponent.allocatedInterfaces -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null) t.addNewReference("allocatedInterfaces", s.allocatedInterfaces.getEReference());
	//SystemComponent.ownedCommunicationLinks -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null) t.addNewReference("ownedCommunicationLinks", s.ownedCommunicationLinks.getEReference());
	//SystemComponent.produce -> EReference : produce
	if (s.produce.getEReference() != null) t.addNewReference("produce", s.produce.getEReference());
	//SystemComponent.consume -> EReference : consume
	if (s.consume.getEReference() != null) t.addNewReference("consume", s.consume.getEReference());
	//SystemComponent.send -> EReference : send
	if (s.send.getEReference() != null) t.addNewReference("send", s.send.getEReference());
	//SystemComponent.receive -> EReference : receive
	if (s.receive.getEReference() != null) t.addNewReference("receive", s.receive.getEReference());
	//SystemComponent.call -> EReference : call
	if (s.call.getEReference() != null) t.addNewReference("call", s.call.getEReference());
	//SystemComponent.execute -> EReference : execute
	if (s.execute.getEReference() != null) t.addNewReference("execute", s.execute.getEReference());
	//SystemComponent.write -> EReference : write
	if (s.write.getEReference() != null) t.addNewReference("write", s.write.getEReference());
	//SystemComponent.access -> EReference : access
	if (s.access.getEReference() != null) t.addNewReference("access", s.access.getEReference());
	//SystemComponent.acquire -> EReference : acquire
	if (s.acquire.getEReference() != null) t.addNewReference("acquire", s.acquire.getEReference());
	//SystemComponent.transmit -> EReference : transmit
	if (s.transmit.getEReference() != null) t.addNewReference("transmit", s.transmit.getEReference());
	//SystemComponent.ownedInterfaceUses -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null) t.addNewReference("ownedInterfaceUses", s.ownedInterfaceUses.getEReference());
	//SystemComponent.usedInterfaceLinks -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null) t.addNewReference("usedInterfaceLinks", s.usedInterfaceLinks.getEReference());
	//SystemComponent.usedInterfaces -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null) t.addNewReference("usedInterfaces", s.usedInterfaces.getEReference());
	//SystemComponent.ownedInterfaceImplementations -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null) t.addNewReference("ownedInterfaceImplementations", s.ownedInterfaceImplementations.getEReference());
	//SystemComponent.implementedInterfaceLinks -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null) t.addNewReference("implementedInterfaceLinks", s.implementedInterfaceLinks.getEReference());
	//SystemComponent.implementedInterfaces -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null) t.addNewReference("implementedInterfaces", s.implementedInterfaces.getEReference());
	//SystemComponent.ownedComponentRealizations -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null) t.addNewReference("ownedComponentRealizations", s.ownedComponentRealizations.getEReference());
	//SystemComponent.realizedComponents -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null) t.addNewReference("realizedComponents", s.realizedComponents.getEReference());
	//SystemComponent.realizingComponents -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null) t.addNewReference("realizingComponents", s.realizingComponents.getEReference());
	//SystemComponent.providedInterfaces -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//SystemComponent.requiredInterfaces -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//SystemComponent.containedComponentPorts -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null) t.addNewReference("containedComponentPorts", s.containedComponentPorts.getEReference());
	//SystemComponent.containedParts -> EReference : containedParts
	if (s.containedParts.getEReference() != null) t.addNewReference("containedParts", s.containedParts.getEReference());
	//SystemComponent.containedPhysicalPorts -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null) t.addNewReference("containedPhysicalPorts", s.containedPhysicalPorts.getEReference());
	//SystemComponent.ownedPhysicalPath -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null) t.addNewReference("ownedPhysicalPath", s.ownedPhysicalPath.getEReference());
	//SystemComponent.ownedPhysicalLinks -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//SystemComponent.ownedPhysicalLinkCategories -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//SystemComponent.representingParts -> EReference : representingParts
	if (s.representingParts.getEReference() != null) t.addNewReference("representingParts", s.representingParts.getEReference());
	//SystemComponent.involvingInvolvements -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//SystemComponent.ownedSystemComponents -> EReference : ownedSystemComponents
	if (s.ownedSystemComponents.getEReference() != null) t.addNewReference("ownedSystemComponents", s.ownedSystemComponents.getEReference());
	//SystemComponent.ownedSystemComponentPkgs -> EReference : ownedSystemComponentPkgs
	if (s.ownedSystemComponentPkgs.getEReference() != null) t.addNewReference("ownedSystemComponentPkgs", s.ownedSystemComponentPkgs.getEReference());
	//SystemComponent.dataType -> EReference : dataType
	if (s.dataType.getEReference() != null) t.addNewReference("dataType", s.dataType.getEReference());
	//SystemComponent.involvingCapabilities -> EReference : involvingCapabilities
	if (s.involvingCapabilities.getEReference() != null) t.addNewReference("involvingCapabilities", s.involvingCapabilities.getEReference());
	//SystemComponent.capabilityInvolvements -> EReference : capabilityInvolvements
	if (s.capabilityInvolvements.getEReference() != null) t.addNewReference("capabilityInvolvements", s.capabilityInvolvements.getEReference());
	//SystemComponent.involvingMissions -> EReference : involvingMissions
	if (s.involvingMissions.getEReference() != null) t.addNewReference("involvingMissions", s.involvingMissions.getEReference());
	//SystemComponent.missionInvolvements -> EReference : missionInvolvements
	if (s.missionInvolvements.getEReference() != null) t.addNewReference("missionInvolvements", s.missionInvolvements.getEReference());
	//SystemComponent.realizedEntities -> EReference : realizedEntities
	if (s.realizedEntities.getEReference() != null) t.addNewReference("realizedEntities", s.realizedEntities.getEReference());
	//SystemComponent.realizingLogicalComponents -> EReference : realizingLogicalComponents
	if (s.realizingLogicalComponents.getEReference() != null) t.addNewReference("realizingLogicalComponents", s.realizingLogicalComponents.getEReference());
	//SystemComponent.allocatedSystemFunctions -> EReference : allocatedSystemFunctions
	if (s.allocatedSystemFunctions.getEReference() != null) t.addNewReference("allocatedSystemFunctions", s.allocatedSystemFunctions.getEReference());
}


// la.ecore
@lazy
rule LogicalArchitecturePkg
	transform s : DSL!LogicalArchitecturePkg //la.LogicalArchitecturePkg
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalArchitecturePkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//LogicalArchitecturePkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//LogicalArchitecturePkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//LogicalArchitecturePkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//LogicalArchitecturePkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//LogicalArchitecturePkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//LogicalArchitecturePkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//LogicalArchitecturePkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//LogicalArchitecturePkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//LogicalArchitecturePkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//LogicalArchitecturePkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//LogicalArchitecturePkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//LogicalArchitecturePkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//LogicalArchitecturePkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//LogicalArchitecturePkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//LogicalArchitecturePkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//LogicalArchitecturePkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//LogicalArchitecturePkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//LogicalArchitecturePkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//LogicalArchitecturePkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//LogicalArchitecturePkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//LogicalArchitecturePkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//LogicalArchitecturePkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//LogicalArchitecturePkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//LogicalArchitecturePkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//LogicalArchitecturePkg.ownedLogicalArchitectures -> EReference : ownedLogicalArchitectures
	if (s.ownedLogicalArchitectures.getEReference() != null) t.addNewReference("ownedLogicalArchitectures", s.ownedLogicalArchitectures.getEReference());
}

@lazy
rule LogicalArchitecture
	transform s : DSL!LogicalArchitecture //la.LogicalArchitecture
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalArchitecture.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//LogicalArchitecture.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//LogicalArchitecture.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//LogicalArchitecture.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//LogicalArchitecture.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//LogicalArchitecture.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//LogicalArchitecture.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//LogicalArchitecture.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//LogicalArchitecture.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//LogicalArchitecture.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//LogicalArchitecture.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//LogicalArchitecture.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//LogicalArchitecture.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//LogicalArchitecture.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//LogicalArchitecture.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//LogicalArchitecture.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//LogicalArchitecture.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//LogicalArchitecture.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//LogicalArchitecture.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//LogicalArchitecture.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//LogicalArchitecture.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//LogicalArchitecture.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//LogicalArchitecture.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//LogicalArchitecture.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//LogicalArchitecture.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//LogicalArchitecture.ownedFunctionPkg -> EReference : ownedFunctionPkg
	if (s.ownedFunctionPkg.getEReference() != null) t.addNewReference("ownedFunctionPkg", s.ownedFunctionPkg.getEReference());
	//LogicalArchitecture.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//LogicalArchitecture.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//LogicalArchitecture.ownedFunctionalLinks -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//LogicalArchitecture.ownedFunctionalAllocations -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//LogicalArchitecture.ownedComponentExchangeRealizations -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//LogicalArchitecture.ownedAbstractCapabilityPkg -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//LogicalArchitecture.ownedInterfacePkg -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//LogicalArchitecture.ownedDataPkg -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//LogicalArchitecture.provisionedArchitectureAllocations -> EReference : provisionedArchitectureAllocations
	if (s.provisionedArchitectureAllocations.getEReference() != null) t.addNewReference("provisionedArchitectureAllocations", s.provisionedArchitectureAllocations.getEReference());
	//LogicalArchitecture.provisioningArchitectureAllocations -> EReference : provisioningArchitectureAllocations
	if (s.provisioningArchitectureAllocations.getEReference() != null) t.addNewReference("provisioningArchitectureAllocations", s.provisioningArchitectureAllocations.getEReference());
	//LogicalArchitecture.allocatedArchitectures -> EReference : allocatedArchitectures
	if (s.allocatedArchitectures.getEReference() != null) t.addNewReference("allocatedArchitectures", s.allocatedArchitectures.getEReference());
	//LogicalArchitecture.allocatingArchitectures -> EReference : allocatingArchitectures
	if (s.allocatingArchitectures.getEReference() != null) t.addNewReference("allocatingArchitectures", s.allocatingArchitectures.getEReference());
	//LogicalArchitecture.system -> EReference : system
	if (s.system.getEReference() != null) t.addNewReference("system", s.system.getEReference());
	//LogicalArchitecture.ownedLogicalComponentPkg -> EReference : ownedLogicalComponentPkg
	if (s.ownedLogicalComponentPkg.getEReference() != null) t.addNewReference("ownedLogicalComponentPkg", s.ownedLogicalComponentPkg.getEReference());
	//LogicalArchitecture.containedCapabilityRealizationPkg -> EReference : containedCapabilityRealizationPkg
	if (s.containedCapabilityRealizationPkg.getEReference() != null) t.addNewReference("containedCapabilityRealizationPkg", s.containedCapabilityRealizationPkg.getEReference());
	//LogicalArchitecture.containedLogicalFunctionPkg -> EReference : containedLogicalFunctionPkg
	if (s.containedLogicalFunctionPkg.getEReference() != null) t.addNewReference("containedLogicalFunctionPkg", s.containedLogicalFunctionPkg.getEReference());
	//LogicalArchitecture.ownedSystemAnalysisRealizations -> EReference : ownedSystemAnalysisRealizations
	if (s.ownedSystemAnalysisRealizations.getEReference() != null) t.addNewReference("ownedSystemAnalysisRealizations", s.ownedSystemAnalysisRealizations.getEReference());
	//LogicalArchitecture.allocatedSystemAnalysisRealizations -> EReference : allocatedSystemAnalysisRealizations
	if (s.allocatedSystemAnalysisRealizations.getEReference() != null) t.addNewReference("allocatedSystemAnalysisRealizations", s.allocatedSystemAnalysisRealizations.getEReference());
	//LogicalArchitecture.allocatedSystemAnalyses -> EReference : allocatedSystemAnalyses
	if (s.allocatedSystemAnalyses.getEReference() != null) t.addNewReference("allocatedSystemAnalyses", s.allocatedSystemAnalyses.getEReference());
	//LogicalArchitecture.allocatingPhysicalArchitectures -> EReference : allocatingPhysicalArchitectures
	if (s.allocatingPhysicalArchitectures.getEReference() != null) t.addNewReference("allocatingPhysicalArchitectures", s.allocatingPhysicalArchitectures.getEReference());
}

@lazy
rule LogicalFunction
	transform s : DSL!LogicalFunction //la.LogicalFunction
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalFunction.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//LogicalFunction.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//LogicalFunction.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//LogicalFunction.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//LogicalFunction.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//LogicalFunction.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//LogicalFunction.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//LogicalFunction.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//LogicalFunction.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//LogicalFunction.isStatic -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//LogicalFunction.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//LogicalFunction.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//LogicalFunction.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//LogicalFunction.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//LogicalFunction.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//LogicalFunction.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//LogicalFunction.aggregationKind -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null) t.addNewAttribute("aggregationKind", s.aggregationKind.getEAttribute());
	//LogicalFunction.isDerived -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null) t.addNewAttribute("isDerived", s.isDerived.getEAttribute());
	//LogicalFunction.isReadOnly -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null) t.addNewAttribute("isReadOnly", s.isReadOnly.getEAttribute());
	//LogicalFunction.isPartOfKey -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null) t.addNewAttribute("isPartOfKey", s.isPartOfKey.getEAttribute());
	//LogicalFunction.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//LogicalFunction.condition -> EAttribute : condition
	if (s.condition.getEAttribute() != null) t.addNewAttribute("condition", s.condition.getEAttribute());
	//LogicalFunction.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//LogicalFunction.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//LogicalFunction.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//LogicalFunction.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//LogicalFunction.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//LogicalFunction.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//LogicalFunction.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//LogicalFunction.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//LogicalFunction.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//LogicalFunction.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//LogicalFunction.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//LogicalFunction.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//LogicalFunction.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//LogicalFunction.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//LogicalFunction.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//LogicalFunction.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//LogicalFunction.involvingInvolvements -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//LogicalFunction.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//LogicalFunction.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//LogicalFunction.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//LogicalFunction.ownedMinValue -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//LogicalFunction.ownedMaxValue -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//LogicalFunction.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//LogicalFunction.ownedMinCard -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//LogicalFunction.ownedMinLength -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//LogicalFunction.ownedMaxCard -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//LogicalFunction.ownedMaxLength -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//LogicalFunction.association -> EReference : association
	if (s.association.getEReference() != null) t.addNewReference("association", s.association.getEReference());
	//LogicalFunction.representingInstanceRoles -> EReference : representingInstanceRoles
	if (s.representingInstanceRoles.getEReference() != null) t.addNewReference("representingInstanceRoles", s.representingInstanceRoles.getEReference());
	//LogicalFunction.ownedFunctionalChains -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null) t.addNewReference("ownedFunctionalChains", s.ownedFunctionalChains.getEReference());
	//LogicalFunction.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//LogicalFunction.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//LogicalFunction.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//LogicalFunction.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//LogicalFunction.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//LogicalFunction.ownedHandlers -> EReference : ownedHandlers
	if (s.ownedHandlers.getEReference() != null) t.addNewReference("ownedHandlers", s.ownedHandlers.getEReference());
	//LogicalFunction.localPrecondition -> EReference : localPrecondition
	if (s.localPrecondition.getEReference() != null) t.addNewReference("localPrecondition", s.localPrecondition.getEReference());
	//LogicalFunction.localPostcondition -> EReference : localPostcondition
	if (s.localPostcondition.getEReference() != null) t.addNewReference("localPostcondition", s.localPostcondition.getEReference());
	//LogicalFunction.context -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context", s.context.getEReference());
	//LogicalFunction.inputs -> EReference : inputs
	if (s.inputs.getEReference() != null) t.addNewReference("inputs", s.inputs.getEReference());
	//LogicalFunction.outputs -> EReference : outputs
	if (s.outputs.getEReference() != null) t.addNewReference("outputs", s.outputs.getEReference());
	//LogicalFunction.arguments -> EReference : arguments
	if (s.arguments.getEReference() != null) t.addNewReference("arguments", s.arguments.getEReference());
	//LogicalFunction.results -> EReference : results
	if (s.results.getEReference() != null) t.addNewReference("results", s.results.getEReference());
	//LogicalFunction.behavior -> EReference : behavior
	if (s.behavior.getEReference() != null) t.addNewReference("behavior", s.behavior.getEReference());
	//LogicalFunction.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//LogicalFunction.ownedFunctions -> EReference : ownedFunctions
	if (s.ownedFunctions.getEReference() != null) t.addNewReference("ownedFunctions", s.ownedFunctions.getEReference());
	//LogicalFunction.ownedFunctionRealizations -> EReference : ownedFunctionRealizations
	if (s.ownedFunctionRealizations.getEReference() != null) t.addNewReference("ownedFunctionRealizations", s.ownedFunctionRealizations.getEReference());
	//LogicalFunction.ownedFunctionalExchanges -> EReference : ownedFunctionalExchanges
	if (s.ownedFunctionalExchanges.getEReference() != null) t.addNewReference("ownedFunctionalExchanges", s.ownedFunctionalExchanges.getEReference());
	//LogicalFunction.subFunctions -> EReference : subFunctions
	if (s.subFunctions.getEReference() != null) t.addNewReference("subFunctions", s.subFunctions.getEReference());
	//LogicalFunction.outFunctionRealizations -> EReference : outFunctionRealizations
	if (s.outFunctionRealizations.getEReference() != null) t.addNewReference("outFunctionRealizations", s.outFunctionRealizations.getEReference());
	//LogicalFunction.inFunctionRealizations -> EReference : inFunctionRealizations
	if (s.inFunctionRealizations.getEReference() != null) t.addNewReference("inFunctionRealizations", s.inFunctionRealizations.getEReference());
	//LogicalFunction.componentFunctionalAllocations -> EReference : componentFunctionalAllocations
	if (s.componentFunctionalAllocations.getEReference() != null) t.addNewReference("componentFunctionalAllocations", s.componentFunctionalAllocations.getEReference());
	//LogicalFunction.allocationBlocks -> EReference : allocationBlocks
	if (s.allocationBlocks.getEReference() != null) t.addNewReference("allocationBlocks", s.allocationBlocks.getEReference());
	//LogicalFunction.availableInStates -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null) t.addNewReference("availableInStates", s.availableInStates.getEReference());
	//LogicalFunction.involvingCapabilities -> EReference : involvingCapabilities
	if (s.involvingCapabilities.getEReference() != null) t.addNewReference("involvingCapabilities", s.involvingCapabilities.getEReference());
	//LogicalFunction.involvingCapabilityRealizations -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null) t.addNewReference("involvingCapabilityRealizations", s.involvingCapabilityRealizations.getEReference());
	//LogicalFunction.involvingFunctionalChains -> EReference : involvingFunctionalChains
	if (s.involvingFunctionalChains.getEReference() != null) t.addNewReference("involvingFunctionalChains", s.involvingFunctionalChains.getEReference());
	//LogicalFunction.linkedStateMachine -> EReference : linkedStateMachine
	if (s.linkedStateMachine.getEReference() != null) t.addNewReference("linkedStateMachine", s.linkedStateMachine.getEReference());
	//LogicalFunction.linkedFunctionSpecification -> EReference : linkedFunctionSpecification
	if (s.linkedFunctionSpecification.getEReference() != null) t.addNewReference("linkedFunctionSpecification", s.linkedFunctionSpecification.getEReference());
	//LogicalFunction.ownedLogicalFunctionPkgs -> EReference : ownedLogicalFunctionPkgs
	if (s.ownedLogicalFunctionPkgs.getEReference() != null) t.addNewReference("ownedLogicalFunctionPkgs", s.ownedLogicalFunctionPkgs.getEReference());
	//LogicalFunction.allocatingLogicalComponents -> EReference : allocatingLogicalComponents
	if (s.allocatingLogicalComponents.getEReference() != null) t.addNewReference("allocatingLogicalComponents", s.allocatingLogicalComponents.getEReference());
	//LogicalFunction.realizedSystemFunctions -> EReference : realizedSystemFunctions
	if (s.realizedSystemFunctions.getEReference() != null) t.addNewReference("realizedSystemFunctions", s.realizedSystemFunctions.getEReference());
	//LogicalFunction.realizingPhysicalFunctions -> EReference : realizingPhysicalFunctions
	if (s.realizingPhysicalFunctions.getEReference() != null) t.addNewReference("realizingPhysicalFunctions", s.realizingPhysicalFunctions.getEReference());
	//LogicalFunction.containedLogicalFunctions -> EReference : containedLogicalFunctions
	if (s.containedLogicalFunctions.getEReference() != null) t.addNewReference("containedLogicalFunctions", s.containedLogicalFunctions.getEReference());
	//LogicalFunction.childrenLogicalFunctions -> EReference : childrenLogicalFunctions
	if (s.childrenLogicalFunctions.getEReference() != null) t.addNewReference("childrenLogicalFunctions", s.childrenLogicalFunctions.getEReference());
}

@lazy
rule LogicalFunctionPkg
	transform s : DSL!LogicalFunctionPkg //la.LogicalFunctionPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalFunctionPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//LogicalFunctionPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//LogicalFunctionPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//LogicalFunctionPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//LogicalFunctionPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//LogicalFunctionPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//LogicalFunctionPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//LogicalFunctionPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//LogicalFunctionPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//LogicalFunctionPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//LogicalFunctionPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//LogicalFunctionPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//LogicalFunctionPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//LogicalFunctionPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//LogicalFunctionPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//LogicalFunctionPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//LogicalFunctionPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//LogicalFunctionPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//LogicalFunctionPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//LogicalFunctionPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//LogicalFunctionPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//LogicalFunctionPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//LogicalFunctionPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//LogicalFunctionPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//LogicalFunctionPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//LogicalFunctionPkg.ownedFunctionalLinks -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//LogicalFunctionPkg.ownedExchanges -> EReference : ownedExchanges
	if (s.ownedExchanges.getEReference() != null) t.addNewReference("ownedExchanges", s.ownedExchanges.getEReference());
	//LogicalFunctionPkg.ownedExchangeSpecificationRealizations -> EReference : ownedExchangeSpecificationRealizations
	if (s.ownedExchangeSpecificationRealizations.getEReference() != null) t.addNewReference("ownedExchangeSpecificationRealizations", s.ownedExchangeSpecificationRealizations.getEReference());
	//LogicalFunctionPkg.ownedCategories -> EReference : ownedCategories
	if (s.ownedCategories.getEReference() != null) t.addNewReference("ownedCategories", s.ownedCategories.getEReference());
	//LogicalFunctionPkg.ownedFunctionSpecifications -> EReference : ownedFunctionSpecifications
	if (s.ownedFunctionSpecifications.getEReference() != null) t.addNewReference("ownedFunctionSpecifications", s.ownedFunctionSpecifications.getEReference());
	//LogicalFunctionPkg.ownedLogicalFunctions -> EReference : ownedLogicalFunctions
	if (s.ownedLogicalFunctions.getEReference() != null) t.addNewReference("ownedLogicalFunctions", s.ownedLogicalFunctions.getEReference());
	//LogicalFunctionPkg.ownedLogicalFunctionPkgs -> EReference : ownedLogicalFunctionPkgs
	if (s.ownedLogicalFunctionPkgs.getEReference() != null) t.addNewReference("ownedLogicalFunctionPkgs", s.ownedLogicalFunctionPkgs.getEReference());
}

@lazy
rule LogicalComponent
	transform s : DSL!LogicalComponent //la.LogicalComponent
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalComponent.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//LogicalComponent.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//LogicalComponent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//LogicalComponent.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//LogicalComponent.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//LogicalComponent.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//LogicalComponent.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//LogicalComponent.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//LogicalComponent.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//LogicalComponent.actor -> EAttribute : actor
	if (s.actor.getEAttribute() != null) t.addNewAttribute("actor", s.actor.getEAttribute());
	//LogicalComponent.human -> EAttribute : human
	if (s.human.getEAttribute() != null) t.addNewAttribute("human", s.human.getEAttribute());
	//LogicalComponent.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//LogicalComponent.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//LogicalComponent.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//LogicalComponent.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//LogicalComponent.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//LogicalComponent.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//LogicalComponent.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//LogicalComponent.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//LogicalComponent.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//LogicalComponent.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//LogicalComponent.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//LogicalComponent.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//LogicalComponent.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//LogicalComponent.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//LogicalComponent.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//LogicalComponent.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//LogicalComponent.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//LogicalComponent.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//LogicalComponent.ownedFunctionalAllocation -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null) t.addNewReference("ownedFunctionalAllocation", s.ownedFunctionalAllocation.getEReference());
	//LogicalComponent.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//LogicalComponent.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//LogicalComponent.functionalAllocations -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null) t.addNewReference("functionalAllocations", s.functionalAllocations.getEReference());
	//LogicalComponent.allocatedFunctions -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null) t.addNewReference("allocatedFunctions", s.allocatedFunctions.getEReference());
	//LogicalComponent.inExchangeLinks -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//LogicalComponent.outExchangeLinks -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
	//LogicalComponent.ownedAbstractCapabilityPkg -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//LogicalComponent.ownedInterfacePkg -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//LogicalComponent.ownedDataPkg -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//LogicalComponent.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//LogicalComponent.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//LogicalComponent.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//LogicalComponent.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//LogicalComponent.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//LogicalComponent.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//LogicalComponent.ownedFeatures -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//LogicalComponent.containedProperties -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//LogicalComponent.ownedInterfaceAllocations -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null) t.addNewReference("ownedInterfaceAllocations", s.ownedInterfaceAllocations.getEReference());
	//LogicalComponent.provisionedInterfaceAllocations -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null) t.addNewReference("provisionedInterfaceAllocations", s.provisionedInterfaceAllocations.getEReference());
	//LogicalComponent.allocatedInterfaces -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null) t.addNewReference("allocatedInterfaces", s.allocatedInterfaces.getEReference());
	//LogicalComponent.ownedCommunicationLinks -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null) t.addNewReference("ownedCommunicationLinks", s.ownedCommunicationLinks.getEReference());
	//LogicalComponent.produce -> EReference : produce
	if (s.produce.getEReference() != null) t.addNewReference("produce", s.produce.getEReference());
	//LogicalComponent.consume -> EReference : consume
	if (s.consume.getEReference() != null) t.addNewReference("consume", s.consume.getEReference());
	//LogicalComponent.send -> EReference : send
	if (s.send.getEReference() != null) t.addNewReference("send", s.send.getEReference());
	//LogicalComponent.receive -> EReference : receive
	if (s.receive.getEReference() != null) t.addNewReference("receive", s.receive.getEReference());
	//LogicalComponent.call -> EReference : call
	if (s.call.getEReference() != null) t.addNewReference("call", s.call.getEReference());
	//LogicalComponent.execute -> EReference : execute
	if (s.execute.getEReference() != null) t.addNewReference("execute", s.execute.getEReference());
	//LogicalComponent.write -> EReference : write
	if (s.write.getEReference() != null) t.addNewReference("write", s.write.getEReference());
	//LogicalComponent.access -> EReference : access
	if (s.access.getEReference() != null) t.addNewReference("access", s.access.getEReference());
	//LogicalComponent.acquire -> EReference : acquire
	if (s.acquire.getEReference() != null) t.addNewReference("acquire", s.acquire.getEReference());
	//LogicalComponent.transmit -> EReference : transmit
	if (s.transmit.getEReference() != null) t.addNewReference("transmit", s.transmit.getEReference());
	//LogicalComponent.ownedInterfaceUses -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null) t.addNewReference("ownedInterfaceUses", s.ownedInterfaceUses.getEReference());
	//LogicalComponent.usedInterfaceLinks -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null) t.addNewReference("usedInterfaceLinks", s.usedInterfaceLinks.getEReference());
	//LogicalComponent.usedInterfaces -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null) t.addNewReference("usedInterfaces", s.usedInterfaces.getEReference());
	//LogicalComponent.ownedInterfaceImplementations -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null) t.addNewReference("ownedInterfaceImplementations", s.ownedInterfaceImplementations.getEReference());
	//LogicalComponent.implementedInterfaceLinks -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null) t.addNewReference("implementedInterfaceLinks", s.implementedInterfaceLinks.getEReference());
	//LogicalComponent.implementedInterfaces -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null) t.addNewReference("implementedInterfaces", s.implementedInterfaces.getEReference());
	//LogicalComponent.ownedComponentRealizations -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null) t.addNewReference("ownedComponentRealizations", s.ownedComponentRealizations.getEReference());
	//LogicalComponent.realizedComponents -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null) t.addNewReference("realizedComponents", s.realizedComponents.getEReference());
	//LogicalComponent.realizingComponents -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null) t.addNewReference("realizingComponents", s.realizingComponents.getEReference());
	//LogicalComponent.providedInterfaces -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//LogicalComponent.requiredInterfaces -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//LogicalComponent.containedComponentPorts -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null) t.addNewReference("containedComponentPorts", s.containedComponentPorts.getEReference());
	//LogicalComponent.containedParts -> EReference : containedParts
	if (s.containedParts.getEReference() != null) t.addNewReference("containedParts", s.containedParts.getEReference());
	//LogicalComponent.containedPhysicalPorts -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null) t.addNewReference("containedPhysicalPorts", s.containedPhysicalPorts.getEReference());
	//LogicalComponent.ownedPhysicalPath -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null) t.addNewReference("ownedPhysicalPath", s.ownedPhysicalPath.getEReference());
	//LogicalComponent.ownedPhysicalLinks -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//LogicalComponent.ownedPhysicalLinkCategories -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//LogicalComponent.representingParts -> EReference : representingParts
	if (s.representingParts.getEReference() != null) t.addNewReference("representingParts", s.representingParts.getEReference());
	//LogicalComponent.involvingInvolvements -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//LogicalComponent.capabilityRealizationInvolvements -> EReference : capabilityRealizationInvolvements
	if (s.capabilityRealizationInvolvements.getEReference() != null) t.addNewReference("capabilityRealizationInvolvements", s.capabilityRealizationInvolvements.getEReference());
	//LogicalComponent.involvingCapabilityRealizations -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null) t.addNewReference("involvingCapabilityRealizations", s.involvingCapabilityRealizations.getEReference());
	//LogicalComponent.ownedLogicalComponents -> EReference : ownedLogicalComponents
	if (s.ownedLogicalComponents.getEReference() != null) t.addNewReference("ownedLogicalComponents", s.ownedLogicalComponents.getEReference());
	//LogicalComponent.ownedLogicalArchitectures -> EReference : ownedLogicalArchitectures
	if (s.ownedLogicalArchitectures.getEReference() != null) t.addNewReference("ownedLogicalArchitectures", s.ownedLogicalArchitectures.getEReference());
	//LogicalComponent.ownedLogicalComponentPkgs -> EReference : ownedLogicalComponentPkgs
	if (s.ownedLogicalComponentPkgs.getEReference() != null) t.addNewReference("ownedLogicalComponentPkgs", s.ownedLogicalComponentPkgs.getEReference());
	//LogicalComponent.subLogicalComponents -> EReference : subLogicalComponents
	if (s.subLogicalComponents.getEReference() != null) t.addNewReference("subLogicalComponents", s.subLogicalComponents.getEReference());
	//LogicalComponent.allocatedLogicalFunctions -> EReference : allocatedLogicalFunctions
	if (s.allocatedLogicalFunctions.getEReference() != null) t.addNewReference("allocatedLogicalFunctions", s.allocatedLogicalFunctions.getEReference());
	//LogicalComponent.realizedSystemComponents -> EReference : realizedSystemComponents
	if (s.realizedSystemComponents.getEReference() != null) t.addNewReference("realizedSystemComponents", s.realizedSystemComponents.getEReference());
	//LogicalComponent.realizingPhysicalComponents -> EReference : realizingPhysicalComponents
	if (s.realizingPhysicalComponents.getEReference() != null) t.addNewReference("realizingPhysicalComponents", s.realizingPhysicalComponents.getEReference());
}

@lazy
rule LogicalComponentPkg
	transform s : DSL!LogicalComponentPkg //la.LogicalComponentPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalComponentPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//LogicalComponentPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//LogicalComponentPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//LogicalComponentPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//LogicalComponentPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//LogicalComponentPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//LogicalComponentPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//LogicalComponentPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//LogicalComponentPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//LogicalComponentPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//LogicalComponentPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//LogicalComponentPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//LogicalComponentPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//LogicalComponentPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//LogicalComponentPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//LogicalComponentPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//LogicalComponentPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//LogicalComponentPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//LogicalComponentPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//LogicalComponentPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//LogicalComponentPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//LogicalComponentPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//LogicalComponentPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//LogicalComponentPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//LogicalComponentPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//LogicalComponentPkg.ownedParts -> EReference : ownedParts
	if (s.ownedParts.getEReference() != null) t.addNewReference("ownedParts", s.ownedParts.getEReference());
	//LogicalComponentPkg.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//LogicalComponentPkg.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//LogicalComponentPkg.ownedFunctionalLinks -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//LogicalComponentPkg.ownedFunctionalAllocations -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//LogicalComponentPkg.ownedComponentExchangeRealizations -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//LogicalComponentPkg.ownedPhysicalLinks -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//LogicalComponentPkg.ownedPhysicalLinkCategories -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//LogicalComponentPkg.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//LogicalComponentPkg.ownedLogicalComponents -> EReference : ownedLogicalComponents
	if (s.ownedLogicalComponents.getEReference() != null) t.addNewReference("ownedLogicalComponents", s.ownedLogicalComponents.getEReference());
	//LogicalComponentPkg.ownedLogicalComponentPkgs -> EReference : ownedLogicalComponentPkgs
	if (s.ownedLogicalComponentPkgs.getEReference() != null) t.addNewReference("ownedLogicalComponentPkgs", s.ownedLogicalComponentPkgs.getEReference());
}

@lazy
rule CapabilityRealization
	transform s : DSL!CapabilityRealization //la.CapabilityRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//CapabilityRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CapabilityRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CapabilityRealization.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CapabilityRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CapabilityRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CapabilityRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CapabilityRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CapabilityRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CapabilityRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CapabilityRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CapabilityRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CapabilityRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CapabilityRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CapabilityRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CapabilityRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CapabilityRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CapabilityRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CapabilityRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CapabilityRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CapabilityRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CapabilityRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CapabilityRealization.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//CapabilityRealization.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//CapabilityRealization.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//CapabilityRealization.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//CapabilityRealization.involvedInvolvements -> EReference : involvedInvolvements
	if (s.involvedInvolvements.getEReference() != null) t.addNewReference("involvedInvolvements", s.involvedInvolvements.getEReference());
	//CapabilityRealization.ownedFunctionalChains -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null) t.addNewReference("ownedFunctionalChains", s.ownedFunctionalChains.getEReference());
	//CapabilityRealization.preCondition -> EReference : preCondition
	if (s.preCondition.getEReference() != null) t.addNewReference("preCondition", s.preCondition.getEReference());
	//CapabilityRealization.postCondition -> EReference : postCondition
	if (s.postCondition.getEReference() != null) t.addNewReference("postCondition", s.postCondition.getEReference());
	//CapabilityRealization.ownedScenarios -> EReference : ownedScenarios
	if (s.ownedScenarios.getEReference() != null) t.addNewReference("ownedScenarios", s.ownedScenarios.getEReference());
	//CapabilityRealization.incomingCapabilityAllocation -> EReference : incomingCapabilityAllocation
	if (s.incomingCapabilityAllocation.getEReference() != null) t.addNewReference("incomingCapabilityAllocation", s.incomingCapabilityAllocation.getEReference());
	//CapabilityRealization.outgoingCapabilityAllocation -> EReference : outgoingCapabilityAllocation
	if (s.outgoingCapabilityAllocation.getEReference() != null) t.addNewReference("outgoingCapabilityAllocation", s.outgoingCapabilityAllocation.getEReference());
	//CapabilityRealization.extends -> EReference : extends_
	if (s.`extends`.getEReference() != null) t.addNewReference("extends_", s.`extends`.getEReference());
	//CapabilityRealization.extending -> EReference : extending
	if (s.extending.getEReference() != null) t.addNewReference("extending", s.extending.getEReference());
	//CapabilityRealization.abstractCapabilityExtensionPoints -> EReference : abstractCapabilityExtensionPoints
	if (s.abstractCapabilityExtensionPoints.getEReference() != null) t.addNewReference("abstractCapabilityExtensionPoints", s.abstractCapabilityExtensionPoints.getEReference());
	//CapabilityRealization.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//CapabilityRealization.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//CapabilityRealization.includes -> EReference : includes
	if (s.includes.getEReference() != null) t.addNewReference("includes", s.includes.getEReference());
	//CapabilityRealization.including -> EReference : including
	if (s.including.getEReference() != null) t.addNewReference("including", s.including.getEReference());
	//CapabilityRealization.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//CapabilityRealization.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//CapabilityRealization.includedAbstractCapabilities -> EReference : includedAbstractCapabilities
	if (s.includedAbstractCapabilities.getEReference() != null) t.addNewReference("includedAbstractCapabilities", s.includedAbstractCapabilities.getEReference());
	//CapabilityRealization.includingAbstractCapabilities -> EReference : includingAbstractCapabilities
	if (s.includingAbstractCapabilities.getEReference() != null) t.addNewReference("includingAbstractCapabilities", s.includingAbstractCapabilities.getEReference());
	//CapabilityRealization.extendedAbstractCapabilities -> EReference : extendedAbstractCapabilities
	if (s.extendedAbstractCapabilities.getEReference() != null) t.addNewReference("extendedAbstractCapabilities", s.extendedAbstractCapabilities.getEReference());
	//CapabilityRealization.extendingAbstractCapabilities -> EReference : extendingAbstractCapabilities
	if (s.extendingAbstractCapabilities.getEReference() != null) t.addNewReference("extendingAbstractCapabilities", s.extendingAbstractCapabilities.getEReference());
	//CapabilityRealization.ownedFunctionalChainAbstractCapabilityInvolvements -> EReference : ownedFunctionalChainAbstractCapabilityInvolvements
	if (s.ownedFunctionalChainAbstractCapabilityInvolvements.getEReference() != null) t.addNewReference("ownedFunctionalChainAbstractCapabilityInvolvements", s.ownedFunctionalChainAbstractCapabilityInvolvements.getEReference());
	//CapabilityRealization.ownedAbstractFunctionAbstractCapabilityInvolvements -> EReference : ownedAbstractFunctionAbstractCapabilityInvolvements
	if (s.ownedAbstractFunctionAbstractCapabilityInvolvements.getEReference() != null) t.addNewReference("ownedAbstractFunctionAbstractCapabilityInvolvements", s.ownedAbstractFunctionAbstractCapabilityInvolvements.getEReference());
	//CapabilityRealization.availableInStates -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null) t.addNewReference("availableInStates", s.availableInStates.getEReference());
	//CapabilityRealization.ownedAbstractCapabilityRealizations -> EReference : ownedAbstractCapabilityRealizations
	if (s.ownedAbstractCapabilityRealizations.getEReference() != null) t.addNewReference("ownedAbstractCapabilityRealizations", s.ownedAbstractCapabilityRealizations.getEReference());
	//CapabilityRealization.involvedAbstractFunctions -> EReference : involvedAbstractFunctions
	if (s.involvedAbstractFunctions.getEReference() != null) t.addNewReference("involvedAbstractFunctions", s.involvedAbstractFunctions.getEReference());
	//CapabilityRealization.involvedFunctionalChains -> EReference : involvedFunctionalChains
	if (s.involvedFunctionalChains.getEReference() != null) t.addNewReference("involvedFunctionalChains", s.involvedFunctionalChains.getEReference());
	//CapabilityRealization.ownedCapabilityRealizationInvolvements -> EReference : ownedCapabilityRealizationInvolvements
	if (s.ownedCapabilityRealizationInvolvements.getEReference() != null) t.addNewReference("ownedCapabilityRealizationInvolvements", s.ownedCapabilityRealizationInvolvements.getEReference());
	//CapabilityRealization.involvedComponents -> EReference : involvedComponents
	if (s.involvedComponents.getEReference() != null) t.addNewReference("involvedComponents", s.involvedComponents.getEReference());
	//CapabilityRealization.realizedCapabilities -> EReference : realizedCapabilities
	if (s.realizedCapabilities.getEReference() != null) t.addNewReference("realizedCapabilities", s.realizedCapabilities.getEReference());
	//CapabilityRealization.realizedCapabilityRealizations -> EReference : realizedCapabilityRealizations
	if (s.realizedCapabilityRealizations.getEReference() != null) t.addNewReference("realizedCapabilityRealizations", s.realizedCapabilityRealizations.getEReference());
	//CapabilityRealization.realizingCapabilityRealizations -> EReference : realizingCapabilityRealizations
	if (s.realizingCapabilityRealizations.getEReference() != null) t.addNewReference("realizingCapabilityRealizations", s.realizingCapabilityRealizations.getEReference());
}

@lazy
rule CapabilityRealizationPkg
	transform s : DSL!CapabilityRealizationPkg //la.CapabilityRealizationPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//CapabilityRealizationPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CapabilityRealizationPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CapabilityRealizationPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CapabilityRealizationPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CapabilityRealizationPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CapabilityRealizationPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CapabilityRealizationPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CapabilityRealizationPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CapabilityRealizationPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CapabilityRealizationPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CapabilityRealizationPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CapabilityRealizationPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CapabilityRealizationPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CapabilityRealizationPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CapabilityRealizationPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CapabilityRealizationPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CapabilityRealizationPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CapabilityRealizationPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CapabilityRealizationPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CapabilityRealizationPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CapabilityRealizationPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CapabilityRealizationPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//CapabilityRealizationPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//CapabilityRealizationPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//CapabilityRealizationPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//CapabilityRealizationPkg.ownedCapabilityRealizations -> EReference : ownedCapabilityRealizations
	if (s.ownedCapabilityRealizations.getEReference() != null) t.addNewReference("ownedCapabilityRealizations", s.ownedCapabilityRealizations.getEReference());
	//CapabilityRealizationPkg.ownedCapabilityRealizationPkgs -> EReference : ownedCapabilityRealizationPkgs
	if (s.ownedCapabilityRealizationPkgs.getEReference() != null) t.addNewReference("ownedCapabilityRealizationPkgs", s.ownedCapabilityRealizationPkgs.getEReference());
}

@lazy
rule SystemAnalysisRealization
	transform s : DSL!SystemAnalysisRealization //la.SystemAnalysisRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemAnalysisRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SystemAnalysisRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SystemAnalysisRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SystemAnalysisRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SystemAnalysisRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SystemAnalysisRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SystemAnalysisRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SystemAnalysisRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SystemAnalysisRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SystemAnalysisRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SystemAnalysisRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SystemAnalysisRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//SystemAnalysisRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SystemAnalysisRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SystemAnalysisRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SystemAnalysisRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SystemAnalysisRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SystemAnalysisRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SystemAnalysisRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SystemAnalysisRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SystemAnalysisRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SystemAnalysisRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//SystemAnalysisRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//SystemAnalysisRealization.allocatedArchitecture -> EReference : allocatedArchitecture
	if (s.allocatedArchitecture.getEReference() != null) t.addNewReference("allocatedArchitecture", s.allocatedArchitecture.getEReference());
	//SystemAnalysisRealization.allocatingArchitecture -> EReference : allocatingArchitecture
	if (s.allocatingArchitecture.getEReference() != null) t.addNewReference("allocatingArchitecture", s.allocatingArchitecture.getEReference());
}

@lazy
rule ContextInterfaceRealization
	transform s : DSL!ContextInterfaceRealization //la.ContextInterfaceRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//ContextInterfaceRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ContextInterfaceRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ContextInterfaceRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ContextInterfaceRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ContextInterfaceRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ContextInterfaceRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ContextInterfaceRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ContextInterfaceRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ContextInterfaceRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ContextInterfaceRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ContextInterfaceRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ContextInterfaceRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ContextInterfaceRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ContextInterfaceRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ContextInterfaceRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ContextInterfaceRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ContextInterfaceRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ContextInterfaceRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ContextInterfaceRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ContextInterfaceRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ContextInterfaceRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ContextInterfaceRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//ContextInterfaceRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//ContextInterfaceRealization.allocatedInterface -> EReference : allocatedInterface
	if (s.allocatedInterface.getEReference() != null) t.addNewReference("allocatedInterface", s.allocatedInterface.getEReference());
	//ContextInterfaceRealization.allocatingInterfaceAllocator -> EReference : allocatingInterfaceAllocator
	if (s.allocatingInterfaceAllocator.getEReference() != null) t.addNewReference("allocatingInterfaceAllocator", s.allocatingInterfaceAllocator.getEReference());
}


// pa.ecore
@lazy
rule PhysicalArchitecturePkg
	transform s : DSL!PhysicalArchitecturePkg //pa.PhysicalArchitecturePkg
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalArchitecturePkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalArchitecturePkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalArchitecturePkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PhysicalArchitecturePkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalArchitecturePkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalArchitecturePkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalArchitecturePkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalArchitecturePkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalArchitecturePkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalArchitecturePkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalArchitecturePkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalArchitecturePkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalArchitecturePkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalArchitecturePkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalArchitecturePkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalArchitecturePkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalArchitecturePkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalArchitecturePkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalArchitecturePkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalArchitecturePkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalArchitecturePkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalArchitecturePkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//PhysicalArchitecturePkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//PhysicalArchitecturePkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//PhysicalArchitecturePkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//PhysicalArchitecturePkg.ownedPhysicalArchitecturePkgs -> EReference : ownedPhysicalArchitecturePkgs
	if (s.ownedPhysicalArchitecturePkgs.getEReference() != null) t.addNewReference("ownedPhysicalArchitecturePkgs", s.ownedPhysicalArchitecturePkgs.getEReference());
	//PhysicalArchitecturePkg.ownedPhysicalArchitectures -> EReference : ownedPhysicalArchitectures
	if (s.ownedPhysicalArchitectures.getEReference() != null) t.addNewReference("ownedPhysicalArchitectures", s.ownedPhysicalArchitectures.getEReference());
}

@lazy
rule PhysicalArchitecture
	transform s : DSL!PhysicalArchitecture //pa.PhysicalArchitecture
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalArchitecture.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalArchitecture.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalArchitecture.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PhysicalArchitecture.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalArchitecture.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalArchitecture.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalArchitecture.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalArchitecture.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalArchitecture.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalArchitecture.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalArchitecture.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalArchitecture.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalArchitecture.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalArchitecture.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalArchitecture.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalArchitecture.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalArchitecture.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalArchitecture.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalArchitecture.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalArchitecture.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalArchitecture.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalArchitecture.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//PhysicalArchitecture.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//PhysicalArchitecture.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//PhysicalArchitecture.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//PhysicalArchitecture.ownedFunctionPkg -> EReference : ownedFunctionPkg
	if (s.ownedFunctionPkg.getEReference() != null) t.addNewReference("ownedFunctionPkg", s.ownedFunctionPkg.getEReference());
	//PhysicalArchitecture.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//PhysicalArchitecture.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//PhysicalArchitecture.ownedFunctionalLinks -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//PhysicalArchitecture.ownedFunctionalAllocations -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//PhysicalArchitecture.ownedComponentExchangeRealizations -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//PhysicalArchitecture.ownedAbstractCapabilityPkg -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//PhysicalArchitecture.ownedInterfacePkg -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//PhysicalArchitecture.ownedDataPkg -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//PhysicalArchitecture.provisionedArchitectureAllocations -> EReference : provisionedArchitectureAllocations
	if (s.provisionedArchitectureAllocations.getEReference() != null) t.addNewReference("provisionedArchitectureAllocations", s.provisionedArchitectureAllocations.getEReference());
	//PhysicalArchitecture.provisioningArchitectureAllocations -> EReference : provisioningArchitectureAllocations
	if (s.provisioningArchitectureAllocations.getEReference() != null) t.addNewReference("provisioningArchitectureAllocations", s.provisioningArchitectureAllocations.getEReference());
	//PhysicalArchitecture.allocatedArchitectures -> EReference : allocatedArchitectures
	if (s.allocatedArchitectures.getEReference() != null) t.addNewReference("allocatedArchitectures", s.allocatedArchitectures.getEReference());
	//PhysicalArchitecture.allocatingArchitectures -> EReference : allocatingArchitectures
	if (s.allocatingArchitectures.getEReference() != null) t.addNewReference("allocatingArchitectures", s.allocatingArchitectures.getEReference());
	//PhysicalArchitecture.system -> EReference : system
	if (s.system.getEReference() != null) t.addNewReference("system", s.system.getEReference());
	//PhysicalArchitecture.ownedPhysicalComponentPkg -> EReference : ownedPhysicalComponentPkg
	if (s.ownedPhysicalComponentPkg.getEReference() != null) t.addNewReference("ownedPhysicalComponentPkg", s.ownedPhysicalComponentPkg.getEReference());
	//PhysicalArchitecture.containedCapabilityRealizationPkg -> EReference : containedCapabilityRealizationPkg
	if (s.containedCapabilityRealizationPkg.getEReference() != null) t.addNewReference("containedCapabilityRealizationPkg", s.containedCapabilityRealizationPkg.getEReference());
	//PhysicalArchitecture.containedPhysicalFunctionPkg -> EReference : containedPhysicalFunctionPkg
	if (s.containedPhysicalFunctionPkg.getEReference() != null) t.addNewReference("containedPhysicalFunctionPkg", s.containedPhysicalFunctionPkg.getEReference());
	//PhysicalArchitecture.ownedDeployments -> EReference : ownedDeployments
	if (s.ownedDeployments.getEReference() != null) t.addNewReference("ownedDeployments", s.ownedDeployments.getEReference());
	//PhysicalArchitecture.ownedLogicalArchitectureRealizations -> EReference : ownedLogicalArchitectureRealizations
	if (s.ownedLogicalArchitectureRealizations.getEReference() != null) t.addNewReference("ownedLogicalArchitectureRealizations", s.ownedLogicalArchitectureRealizations.getEReference());
	//PhysicalArchitecture.allocatedLogicalArchitectureRealizations -> EReference : allocatedLogicalArchitectureRealizations
	if (s.allocatedLogicalArchitectureRealizations.getEReference() != null) t.addNewReference("allocatedLogicalArchitectureRealizations", s.allocatedLogicalArchitectureRealizations.getEReference());
	//PhysicalArchitecture.allocatedLogicalArchitectures -> EReference : allocatedLogicalArchitectures
	if (s.allocatedLogicalArchitectures.getEReference() != null) t.addNewReference("allocatedLogicalArchitectures", s.allocatedLogicalArchitectures.getEReference());
	//PhysicalArchitecture.allocatingEpbsArchitectures -> EReference : allocatingEpbsArchitectures
	if (s.allocatingEpbsArchitectures.getEReference() != null) t.addNewReference("allocatingEpbsArchitectures", s.allocatingEpbsArchitectures.getEReference());
}

@lazy
rule PhysicalFunction
	transform s : DSL!PhysicalFunction //pa.PhysicalFunction
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalFunction.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalFunction.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalFunction.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PhysicalFunction.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalFunction.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalFunction.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalFunction.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalFunction.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalFunction.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//PhysicalFunction.isStatic -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//PhysicalFunction.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//PhysicalFunction.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//PhysicalFunction.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//PhysicalFunction.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//PhysicalFunction.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//PhysicalFunction.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//PhysicalFunction.aggregationKind -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null) t.addNewAttribute("aggregationKind", s.aggregationKind.getEAttribute());
	//PhysicalFunction.isDerived -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null) t.addNewAttribute("isDerived", s.isDerived.getEAttribute());
	//PhysicalFunction.isReadOnly -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null) t.addNewAttribute("isReadOnly", s.isReadOnly.getEAttribute());
	//PhysicalFunction.isPartOfKey -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null) t.addNewAttribute("isPartOfKey", s.isPartOfKey.getEAttribute());
	//PhysicalFunction.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//PhysicalFunction.condition -> EAttribute : condition
	if (s.condition.getEAttribute() != null) t.addNewAttribute("condition", s.condition.getEAttribute());
	//PhysicalFunction.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalFunction.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalFunction.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalFunction.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalFunction.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalFunction.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalFunction.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalFunction.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalFunction.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalFunction.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalFunction.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalFunction.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalFunction.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalFunction.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//PhysicalFunction.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//PhysicalFunction.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//PhysicalFunction.involvingInvolvements -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//PhysicalFunction.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//PhysicalFunction.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//PhysicalFunction.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//PhysicalFunction.ownedMinValue -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//PhysicalFunction.ownedMaxValue -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//PhysicalFunction.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//PhysicalFunction.ownedMinCard -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//PhysicalFunction.ownedMinLength -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//PhysicalFunction.ownedMaxCard -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//PhysicalFunction.ownedMaxLength -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//PhysicalFunction.association -> EReference : association
	if (s.association.getEReference() != null) t.addNewReference("association", s.association.getEReference());
	//PhysicalFunction.representingInstanceRoles -> EReference : representingInstanceRoles
	if (s.representingInstanceRoles.getEReference() != null) t.addNewReference("representingInstanceRoles", s.representingInstanceRoles.getEReference());
	//PhysicalFunction.ownedFunctionalChains -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null) t.addNewReference("ownedFunctionalChains", s.ownedFunctionalChains.getEReference());
	//PhysicalFunction.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//PhysicalFunction.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//PhysicalFunction.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//PhysicalFunction.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//PhysicalFunction.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//PhysicalFunction.ownedHandlers -> EReference : ownedHandlers
	if (s.ownedHandlers.getEReference() != null) t.addNewReference("ownedHandlers", s.ownedHandlers.getEReference());
	//PhysicalFunction.localPrecondition -> EReference : localPrecondition
	if (s.localPrecondition.getEReference() != null) t.addNewReference("localPrecondition", s.localPrecondition.getEReference());
	//PhysicalFunction.localPostcondition -> EReference : localPostcondition
	if (s.localPostcondition.getEReference() != null) t.addNewReference("localPostcondition", s.localPostcondition.getEReference());
	//PhysicalFunction.context -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context", s.context.getEReference());
	//PhysicalFunction.inputs -> EReference : inputs
	if (s.inputs.getEReference() != null) t.addNewReference("inputs", s.inputs.getEReference());
	//PhysicalFunction.outputs -> EReference : outputs
	if (s.outputs.getEReference() != null) t.addNewReference("outputs", s.outputs.getEReference());
	//PhysicalFunction.arguments -> EReference : arguments
	if (s.arguments.getEReference() != null) t.addNewReference("arguments", s.arguments.getEReference());
	//PhysicalFunction.results -> EReference : results
	if (s.results.getEReference() != null) t.addNewReference("results", s.results.getEReference());
	//PhysicalFunction.behavior -> EReference : behavior
	if (s.behavior.getEReference() != null) t.addNewReference("behavior", s.behavior.getEReference());
	//PhysicalFunction.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//PhysicalFunction.ownedFunctions -> EReference : ownedFunctions
	if (s.ownedFunctions.getEReference() != null) t.addNewReference("ownedFunctions", s.ownedFunctions.getEReference());
	//PhysicalFunction.ownedFunctionRealizations -> EReference : ownedFunctionRealizations
	if (s.ownedFunctionRealizations.getEReference() != null) t.addNewReference("ownedFunctionRealizations", s.ownedFunctionRealizations.getEReference());
	//PhysicalFunction.ownedFunctionalExchanges -> EReference : ownedFunctionalExchanges
	if (s.ownedFunctionalExchanges.getEReference() != null) t.addNewReference("ownedFunctionalExchanges", s.ownedFunctionalExchanges.getEReference());
	//PhysicalFunction.subFunctions -> EReference : subFunctions
	if (s.subFunctions.getEReference() != null) t.addNewReference("subFunctions", s.subFunctions.getEReference());
	//PhysicalFunction.outFunctionRealizations -> EReference : outFunctionRealizations
	if (s.outFunctionRealizations.getEReference() != null) t.addNewReference("outFunctionRealizations", s.outFunctionRealizations.getEReference());
	//PhysicalFunction.inFunctionRealizations -> EReference : inFunctionRealizations
	if (s.inFunctionRealizations.getEReference() != null) t.addNewReference("inFunctionRealizations", s.inFunctionRealizations.getEReference());
	//PhysicalFunction.componentFunctionalAllocations -> EReference : componentFunctionalAllocations
	if (s.componentFunctionalAllocations.getEReference() != null) t.addNewReference("componentFunctionalAllocations", s.componentFunctionalAllocations.getEReference());
	//PhysicalFunction.allocationBlocks -> EReference : allocationBlocks
	if (s.allocationBlocks.getEReference() != null) t.addNewReference("allocationBlocks", s.allocationBlocks.getEReference());
	//PhysicalFunction.availableInStates -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null) t.addNewReference("availableInStates", s.availableInStates.getEReference());
	//PhysicalFunction.involvingCapabilities -> EReference : involvingCapabilities
	if (s.involvingCapabilities.getEReference() != null) t.addNewReference("involvingCapabilities", s.involvingCapabilities.getEReference());
	//PhysicalFunction.involvingCapabilityRealizations -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null) t.addNewReference("involvingCapabilityRealizations", s.involvingCapabilityRealizations.getEReference());
	//PhysicalFunction.involvingFunctionalChains -> EReference : involvingFunctionalChains
	if (s.involvingFunctionalChains.getEReference() != null) t.addNewReference("involvingFunctionalChains", s.involvingFunctionalChains.getEReference());
	//PhysicalFunction.linkedStateMachine -> EReference : linkedStateMachine
	if (s.linkedStateMachine.getEReference() != null) t.addNewReference("linkedStateMachine", s.linkedStateMachine.getEReference());
	//PhysicalFunction.linkedFunctionSpecification -> EReference : linkedFunctionSpecification
	if (s.linkedFunctionSpecification.getEReference() != null) t.addNewReference("linkedFunctionSpecification", s.linkedFunctionSpecification.getEReference());
	//PhysicalFunction.ownedPhysicalFunctionPkgs -> EReference : ownedPhysicalFunctionPkgs
	if (s.ownedPhysicalFunctionPkgs.getEReference() != null) t.addNewReference("ownedPhysicalFunctionPkgs", s.ownedPhysicalFunctionPkgs.getEReference());
	//PhysicalFunction.allocatingPhysicalComponents -> EReference : allocatingPhysicalComponents
	if (s.allocatingPhysicalComponents.getEReference() != null) t.addNewReference("allocatingPhysicalComponents", s.allocatingPhysicalComponents.getEReference());
	//PhysicalFunction.realizedLogicalFunctions -> EReference : realizedLogicalFunctions
	if (s.realizedLogicalFunctions.getEReference() != null) t.addNewReference("realizedLogicalFunctions", s.realizedLogicalFunctions.getEReference());
	//PhysicalFunction.containedPhysicalFunctions -> EReference : containedPhysicalFunctions
	if (s.containedPhysicalFunctions.getEReference() != null) t.addNewReference("containedPhysicalFunctions", s.containedPhysicalFunctions.getEReference());
	//PhysicalFunction.childrenPhysicalFunctions -> EReference : childrenPhysicalFunctions
	if (s.childrenPhysicalFunctions.getEReference() != null) t.addNewReference("childrenPhysicalFunctions", s.childrenPhysicalFunctions.getEReference());
}

@lazy
rule PhysicalFunctionPkg
	transform s : DSL!PhysicalFunctionPkg //pa.PhysicalFunctionPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalFunctionPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalFunctionPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalFunctionPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PhysicalFunctionPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalFunctionPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalFunctionPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalFunctionPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalFunctionPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalFunctionPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalFunctionPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalFunctionPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalFunctionPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalFunctionPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalFunctionPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalFunctionPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalFunctionPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalFunctionPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalFunctionPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalFunctionPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalFunctionPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalFunctionPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalFunctionPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//PhysicalFunctionPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//PhysicalFunctionPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//PhysicalFunctionPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//PhysicalFunctionPkg.ownedFunctionalLinks -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//PhysicalFunctionPkg.ownedExchanges -> EReference : ownedExchanges
	if (s.ownedExchanges.getEReference() != null) t.addNewReference("ownedExchanges", s.ownedExchanges.getEReference());
	//PhysicalFunctionPkg.ownedExchangeSpecificationRealizations -> EReference : ownedExchangeSpecificationRealizations
	if (s.ownedExchangeSpecificationRealizations.getEReference() != null) t.addNewReference("ownedExchangeSpecificationRealizations", s.ownedExchangeSpecificationRealizations.getEReference());
	//PhysicalFunctionPkg.ownedCategories -> EReference : ownedCategories
	if (s.ownedCategories.getEReference() != null) t.addNewReference("ownedCategories", s.ownedCategories.getEReference());
	//PhysicalFunctionPkg.ownedFunctionSpecifications -> EReference : ownedFunctionSpecifications
	if (s.ownedFunctionSpecifications.getEReference() != null) t.addNewReference("ownedFunctionSpecifications", s.ownedFunctionSpecifications.getEReference());
	//PhysicalFunctionPkg.ownedPhysicalFunctions -> EReference : ownedPhysicalFunctions
	if (s.ownedPhysicalFunctions.getEReference() != null) t.addNewReference("ownedPhysicalFunctions", s.ownedPhysicalFunctions.getEReference());
	//PhysicalFunctionPkg.ownedPhysicalFunctionPkgs -> EReference : ownedPhysicalFunctionPkgs
	if (s.ownedPhysicalFunctionPkgs.getEReference() != null) t.addNewReference("ownedPhysicalFunctionPkgs", s.ownedPhysicalFunctionPkgs.getEReference());
}

@lazy
rule PhysicalComponent
	transform s : DSL!PhysicalComponent //pa.PhysicalComponent
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalComponent.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalComponent.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalComponent.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalComponent.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalComponent.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalComponent.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalComponent.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalComponent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PhysicalComponent.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//PhysicalComponent.actor -> EAttribute : actor
	if (s.actor.getEAttribute() != null) t.addNewAttribute("actor", s.actor.getEAttribute());
	//PhysicalComponent.human -> EAttribute : human
	if (s.human.getEAttribute() != null) t.addNewAttribute("human", s.human.getEAttribute());
	//PhysicalComponent.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//PhysicalComponent.nature -> EAttribute : nature
	if (s.nature.getEAttribute() != null) t.addNewAttribute("nature", s.nature.getEAttribute());
	//PhysicalComponent.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalComponent.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalComponent.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalComponent.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalComponent.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalComponent.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalComponent.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalComponent.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalComponent.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalComponent.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalComponent.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalComponent.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalComponent.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalComponent.allocatorConfigurationItems -> EReference : allocatorConfigurationItems
	if (s.allocatorConfigurationItems.getEReference() != null) t.addNewReference("allocatorConfigurationItems", s.allocatorConfigurationItems.getEReference());
	//PhysicalComponent.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//PhysicalComponent.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//PhysicalComponent.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//PhysicalComponent.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//PhysicalComponent.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//PhysicalComponent.ownedFunctionalAllocation -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null) t.addNewReference("ownedFunctionalAllocation", s.ownedFunctionalAllocation.getEReference());
	//PhysicalComponent.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//PhysicalComponent.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//PhysicalComponent.functionalAllocations -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null) t.addNewReference("functionalAllocations", s.functionalAllocations.getEReference());
	//PhysicalComponent.allocatedFunctions -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null) t.addNewReference("allocatedFunctions", s.allocatedFunctions.getEReference());
	//PhysicalComponent.inExchangeLinks -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//PhysicalComponent.outExchangeLinks -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
	//PhysicalComponent.ownedAbstractCapabilityPkg -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//PhysicalComponent.ownedInterfacePkg -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//PhysicalComponent.ownedDataPkg -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//PhysicalComponent.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//PhysicalComponent.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//PhysicalComponent.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//PhysicalComponent.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//PhysicalComponent.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//PhysicalComponent.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//PhysicalComponent.ownedFeatures -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//PhysicalComponent.containedProperties -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//PhysicalComponent.ownedInterfaceAllocations -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null) t.addNewReference("ownedInterfaceAllocations", s.ownedInterfaceAllocations.getEReference());
	//PhysicalComponent.provisionedInterfaceAllocations -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null) t.addNewReference("provisionedInterfaceAllocations", s.provisionedInterfaceAllocations.getEReference());
	//PhysicalComponent.allocatedInterfaces -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null) t.addNewReference("allocatedInterfaces", s.allocatedInterfaces.getEReference());
	//PhysicalComponent.ownedCommunicationLinks -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null) t.addNewReference("ownedCommunicationLinks", s.ownedCommunicationLinks.getEReference());
	//PhysicalComponent.produce -> EReference : produce
	if (s.produce.getEReference() != null) t.addNewReference("produce", s.produce.getEReference());
	//PhysicalComponent.consume -> EReference : consume
	if (s.consume.getEReference() != null) t.addNewReference("consume", s.consume.getEReference());
	//PhysicalComponent.send -> EReference : send
	if (s.send.getEReference() != null) t.addNewReference("send", s.send.getEReference());
	//PhysicalComponent.receive -> EReference : receive
	if (s.receive.getEReference() != null) t.addNewReference("receive", s.receive.getEReference());
	//PhysicalComponent.call -> EReference : call
	if (s.call.getEReference() != null) t.addNewReference("call", s.call.getEReference());
	//PhysicalComponent.execute -> EReference : execute
	if (s.execute.getEReference() != null) t.addNewReference("execute", s.execute.getEReference());
	//PhysicalComponent.write -> EReference : write
	if (s.write.getEReference() != null) t.addNewReference("write", s.write.getEReference());
	//PhysicalComponent.access -> EReference : access
	if (s.access.getEReference() != null) t.addNewReference("access", s.access.getEReference());
	//PhysicalComponent.acquire -> EReference : acquire
	if (s.acquire.getEReference() != null) t.addNewReference("acquire", s.acquire.getEReference());
	//PhysicalComponent.transmit -> EReference : transmit
	if (s.transmit.getEReference() != null) t.addNewReference("transmit", s.transmit.getEReference());
	//PhysicalComponent.ownedInterfaceUses -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null) t.addNewReference("ownedInterfaceUses", s.ownedInterfaceUses.getEReference());
	//PhysicalComponent.usedInterfaceLinks -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null) t.addNewReference("usedInterfaceLinks", s.usedInterfaceLinks.getEReference());
	//PhysicalComponent.usedInterfaces -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null) t.addNewReference("usedInterfaces", s.usedInterfaces.getEReference());
	//PhysicalComponent.ownedInterfaceImplementations -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null) t.addNewReference("ownedInterfaceImplementations", s.ownedInterfaceImplementations.getEReference());
	//PhysicalComponent.implementedInterfaceLinks -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null) t.addNewReference("implementedInterfaceLinks", s.implementedInterfaceLinks.getEReference());
	//PhysicalComponent.implementedInterfaces -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null) t.addNewReference("implementedInterfaces", s.implementedInterfaces.getEReference());
	//PhysicalComponent.ownedComponentRealizations -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null) t.addNewReference("ownedComponentRealizations", s.ownedComponentRealizations.getEReference());
	//PhysicalComponent.realizedComponents -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null) t.addNewReference("realizedComponents", s.realizedComponents.getEReference());
	//PhysicalComponent.realizingComponents -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null) t.addNewReference("realizingComponents", s.realizingComponents.getEReference());
	//PhysicalComponent.providedInterfaces -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//PhysicalComponent.requiredInterfaces -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//PhysicalComponent.containedComponentPorts -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null) t.addNewReference("containedComponentPorts", s.containedComponentPorts.getEReference());
	//PhysicalComponent.containedParts -> EReference : containedParts
	if (s.containedParts.getEReference() != null) t.addNewReference("containedParts", s.containedParts.getEReference());
	//PhysicalComponent.containedPhysicalPorts -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null) t.addNewReference("containedPhysicalPorts", s.containedPhysicalPorts.getEReference());
	//PhysicalComponent.ownedPhysicalPath -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null) t.addNewReference("ownedPhysicalPath", s.ownedPhysicalPath.getEReference());
	//PhysicalComponent.ownedPhysicalLinks -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//PhysicalComponent.ownedPhysicalLinkCategories -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//PhysicalComponent.representingParts -> EReference : representingParts
	if (s.representingParts.getEReference() != null) t.addNewReference("representingParts", s.representingParts.getEReference());
	//PhysicalComponent.involvingInvolvements -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//PhysicalComponent.capabilityRealizationInvolvements -> EReference : capabilityRealizationInvolvements
	if (s.capabilityRealizationInvolvements.getEReference() != null) t.addNewReference("capabilityRealizationInvolvements", s.capabilityRealizationInvolvements.getEReference());
	//PhysicalComponent.involvingCapabilityRealizations -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null) t.addNewReference("involvingCapabilityRealizations", s.involvingCapabilityRealizations.getEReference());
	//PhysicalComponent.deployingLinks -> EReference : deployingLinks
	if (s.deployingLinks.getEReference() != null) t.addNewReference("deployingLinks", s.deployingLinks.getEReference());
	//PhysicalComponent.deploymentLinks -> EReference : deploymentLinks
	if (s.deploymentLinks.getEReference() != null) t.addNewReference("deploymentLinks", s.deploymentLinks.getEReference());
	//PhysicalComponent.ownedDeploymentLinks -> EReference : ownedDeploymentLinks
	if (s.ownedDeploymentLinks.getEReference() != null) t.addNewReference("ownedDeploymentLinks", s.ownedDeploymentLinks.getEReference());
	//PhysicalComponent.ownedPhysicalComponents -> EReference : ownedPhysicalComponents
	if (s.ownedPhysicalComponents.getEReference() != null) t.addNewReference("ownedPhysicalComponents", s.ownedPhysicalComponents.getEReference());
	//PhysicalComponent.ownedPhysicalComponentPkgs -> EReference : ownedPhysicalComponentPkgs
	if (s.ownedPhysicalComponentPkgs.getEReference() != null) t.addNewReference("ownedPhysicalComponentPkgs", s.ownedPhysicalComponentPkgs.getEReference());
	//PhysicalComponent.logicalInterfaceRealizations -> EReference : logicalInterfaceRealizations
	if (s.logicalInterfaceRealizations.getEReference() != null) t.addNewReference("logicalInterfaceRealizations", s.logicalInterfaceRealizations.getEReference());
	//PhysicalComponent.subPhysicalComponents -> EReference : subPhysicalComponents
	if (s.subPhysicalComponents.getEReference() != null) t.addNewReference("subPhysicalComponents", s.subPhysicalComponents.getEReference());
	//PhysicalComponent.realizedLogicalComponents -> EReference : realizedLogicalComponents
	if (s.realizedLogicalComponents.getEReference() != null) t.addNewReference("realizedLogicalComponents", s.realizedLogicalComponents.getEReference());
	//PhysicalComponent.allocatedPhysicalFunctions -> EReference : allocatedPhysicalFunctions
	if (s.allocatedPhysicalFunctions.getEReference() != null) t.addNewReference("allocatedPhysicalFunctions", s.allocatedPhysicalFunctions.getEReference());
	//PhysicalComponent.deployedPhysicalComponents -> EReference : deployedPhysicalComponents
	if (s.deployedPhysicalComponents.getEReference() != null) t.addNewReference("deployedPhysicalComponents", s.deployedPhysicalComponents.getEReference());
	//PhysicalComponent.deployingPhysicalComponents -> EReference : deployingPhysicalComponents
	if (s.deployingPhysicalComponents.getEReference() != null) t.addNewReference("deployingPhysicalComponents", s.deployingPhysicalComponents.getEReference());
}

@lazy
rule PhysicalComponentPkg
	transform s : DSL!PhysicalComponentPkg //pa.PhysicalComponentPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalComponentPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalComponentPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalComponentPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PhysicalComponentPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalComponentPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalComponentPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalComponentPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalComponentPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalComponentPkg.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//PhysicalComponentPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalComponentPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalComponentPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalComponentPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalComponentPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalComponentPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalComponentPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalComponentPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalComponentPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalComponentPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalComponentPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalComponentPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalComponentPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalComponentPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//PhysicalComponentPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//PhysicalComponentPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//PhysicalComponentPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//PhysicalComponentPkg.ownedParts -> EReference : ownedParts
	if (s.ownedParts.getEReference() != null) t.addNewReference("ownedParts", s.ownedParts.getEReference());
	//PhysicalComponentPkg.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//PhysicalComponentPkg.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//PhysicalComponentPkg.ownedFunctionalLinks -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//PhysicalComponentPkg.ownedFunctionalAllocations -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//PhysicalComponentPkg.ownedComponentExchangeRealizations -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//PhysicalComponentPkg.ownedPhysicalLinks -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//PhysicalComponentPkg.ownedPhysicalLinkCategories -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//PhysicalComponentPkg.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//PhysicalComponentPkg.ownedAssociations -> EReference : ownedAssociations
	if (s.ownedAssociations.getEReference() != null) t.addNewReference("ownedAssociations", s.ownedAssociations.getEReference());
	//PhysicalComponentPkg.ownedPhysicalComponents -> EReference : ownedPhysicalComponents
	if (s.ownedPhysicalComponents.getEReference() != null) t.addNewReference("ownedPhysicalComponents", s.ownedPhysicalComponents.getEReference());
	//PhysicalComponentPkg.ownedPhysicalComponentPkgs -> EReference : ownedPhysicalComponentPkgs
	if (s.ownedPhysicalComponentPkgs.getEReference() != null) t.addNewReference("ownedPhysicalComponentPkgs", s.ownedPhysicalComponentPkgs.getEReference());
	//PhysicalComponentPkg.ownedKeyParts -> EReference : ownedKeyParts
	if (s.ownedKeyParts.getEReference() != null) t.addNewReference("ownedKeyParts", s.ownedKeyParts.getEReference());
	//PhysicalComponentPkg.ownedDeployments -> EReference : ownedDeployments
	if (s.ownedDeployments.getEReference() != null) t.addNewReference("ownedDeployments", s.ownedDeployments.getEReference());
}

@lazy
rule PhysicalNode
	transform s : DSL!PhysicalNode //pa.PhysicalNode
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalNode.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalNode.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalNode.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalNode.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalNode.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalNode.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalNode.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalNode.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PhysicalNode.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//PhysicalNode.actor -> EAttribute : actor
	if (s.actor.getEAttribute() != null) t.addNewAttribute("actor", s.actor.getEAttribute());
	//PhysicalNode.human -> EAttribute : human
	if (s.human.getEAttribute() != null) t.addNewAttribute("human", s.human.getEAttribute());
	//PhysicalNode.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//PhysicalNode.nature -> EAttribute : nature
	if (s.nature.getEAttribute() != null) t.addNewAttribute("nature", s.nature.getEAttribute());
	//PhysicalNode.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalNode.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalNode.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalNode.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalNode.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalNode.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalNode.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalNode.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalNode.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalNode.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalNode.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalNode.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalNode.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalNode.allocatorConfigurationItems -> EReference : allocatorConfigurationItems
	if (s.allocatorConfigurationItems.getEReference() != null) t.addNewReference("allocatorConfigurationItems", s.allocatorConfigurationItems.getEReference());
	//PhysicalNode.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//PhysicalNode.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//PhysicalNode.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//PhysicalNode.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//PhysicalNode.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//PhysicalNode.ownedFunctionalAllocation -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null) t.addNewReference("ownedFunctionalAllocation", s.ownedFunctionalAllocation.getEReference());
	//PhysicalNode.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//PhysicalNode.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//PhysicalNode.functionalAllocations -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null) t.addNewReference("functionalAllocations", s.functionalAllocations.getEReference());
	//PhysicalNode.allocatedFunctions -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null) t.addNewReference("allocatedFunctions", s.allocatedFunctions.getEReference());
	//PhysicalNode.inExchangeLinks -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//PhysicalNode.outExchangeLinks -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
	//PhysicalNode.ownedAbstractCapabilityPkg -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//PhysicalNode.ownedInterfacePkg -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//PhysicalNode.ownedDataPkg -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//PhysicalNode.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//PhysicalNode.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//PhysicalNode.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//PhysicalNode.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//PhysicalNode.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//PhysicalNode.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//PhysicalNode.ownedFeatures -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//PhysicalNode.containedProperties -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//PhysicalNode.ownedInterfaceAllocations -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null) t.addNewReference("ownedInterfaceAllocations", s.ownedInterfaceAllocations.getEReference());
	//PhysicalNode.provisionedInterfaceAllocations -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null) t.addNewReference("provisionedInterfaceAllocations", s.provisionedInterfaceAllocations.getEReference());
	//PhysicalNode.allocatedInterfaces -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null) t.addNewReference("allocatedInterfaces", s.allocatedInterfaces.getEReference());
	//PhysicalNode.ownedCommunicationLinks -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null) t.addNewReference("ownedCommunicationLinks", s.ownedCommunicationLinks.getEReference());
	//PhysicalNode.produce -> EReference : produce
	if (s.produce.getEReference() != null) t.addNewReference("produce", s.produce.getEReference());
	//PhysicalNode.consume -> EReference : consume
	if (s.consume.getEReference() != null) t.addNewReference("consume", s.consume.getEReference());
	//PhysicalNode.send -> EReference : send
	if (s.send.getEReference() != null) t.addNewReference("send", s.send.getEReference());
	//PhysicalNode.receive -> EReference : receive
	if (s.receive.getEReference() != null) t.addNewReference("receive", s.receive.getEReference());
	//PhysicalNode.call -> EReference : call
	if (s.call.getEReference() != null) t.addNewReference("call", s.call.getEReference());
	//PhysicalNode.execute -> EReference : execute
	if (s.execute.getEReference() != null) t.addNewReference("execute", s.execute.getEReference());
	//PhysicalNode.write -> EReference : write
	if (s.write.getEReference() != null) t.addNewReference("write", s.write.getEReference());
	//PhysicalNode.access -> EReference : access
	if (s.access.getEReference() != null) t.addNewReference("access", s.access.getEReference());
	//PhysicalNode.acquire -> EReference : acquire
	if (s.acquire.getEReference() != null) t.addNewReference("acquire", s.acquire.getEReference());
	//PhysicalNode.transmit -> EReference : transmit
	if (s.transmit.getEReference() != null) t.addNewReference("transmit", s.transmit.getEReference());
	//PhysicalNode.ownedInterfaceUses -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null) t.addNewReference("ownedInterfaceUses", s.ownedInterfaceUses.getEReference());
	//PhysicalNode.usedInterfaceLinks -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null) t.addNewReference("usedInterfaceLinks", s.usedInterfaceLinks.getEReference());
	//PhysicalNode.usedInterfaces -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null) t.addNewReference("usedInterfaces", s.usedInterfaces.getEReference());
	//PhysicalNode.ownedInterfaceImplementations -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null) t.addNewReference("ownedInterfaceImplementations", s.ownedInterfaceImplementations.getEReference());
	//PhysicalNode.implementedInterfaceLinks -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null) t.addNewReference("implementedInterfaceLinks", s.implementedInterfaceLinks.getEReference());
	//PhysicalNode.implementedInterfaces -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null) t.addNewReference("implementedInterfaces", s.implementedInterfaces.getEReference());
	//PhysicalNode.ownedComponentRealizations -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null) t.addNewReference("ownedComponentRealizations", s.ownedComponentRealizations.getEReference());
	//PhysicalNode.realizedComponents -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null) t.addNewReference("realizedComponents", s.realizedComponents.getEReference());
	//PhysicalNode.realizingComponents -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null) t.addNewReference("realizingComponents", s.realizingComponents.getEReference());
	//PhysicalNode.providedInterfaces -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//PhysicalNode.requiredInterfaces -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//PhysicalNode.containedComponentPorts -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null) t.addNewReference("containedComponentPorts", s.containedComponentPorts.getEReference());
	//PhysicalNode.containedParts -> EReference : containedParts
	if (s.containedParts.getEReference() != null) t.addNewReference("containedParts", s.containedParts.getEReference());
	//PhysicalNode.containedPhysicalPorts -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null) t.addNewReference("containedPhysicalPorts", s.containedPhysicalPorts.getEReference());
	//PhysicalNode.ownedPhysicalPath -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null) t.addNewReference("ownedPhysicalPath", s.ownedPhysicalPath.getEReference());
	//PhysicalNode.ownedPhysicalLinks -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//PhysicalNode.ownedPhysicalLinkCategories -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//PhysicalNode.representingParts -> EReference : representingParts
	if (s.representingParts.getEReference() != null) t.addNewReference("representingParts", s.representingParts.getEReference());
	//PhysicalNode.involvingInvolvements -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//PhysicalNode.capabilityRealizationInvolvements -> EReference : capabilityRealizationInvolvements
	if (s.capabilityRealizationInvolvements.getEReference() != null) t.addNewReference("capabilityRealizationInvolvements", s.capabilityRealizationInvolvements.getEReference());
	//PhysicalNode.involvingCapabilityRealizations -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null) t.addNewReference("involvingCapabilityRealizations", s.involvingCapabilityRealizations.getEReference());
	//PhysicalNode.deployingLinks -> EReference : deployingLinks
	if (s.deployingLinks.getEReference() != null) t.addNewReference("deployingLinks", s.deployingLinks.getEReference());
	//PhysicalNode.deploymentLinks -> EReference : deploymentLinks
	if (s.deploymentLinks.getEReference() != null) t.addNewReference("deploymentLinks", s.deploymentLinks.getEReference());
	//PhysicalNode.ownedDeploymentLinks -> EReference : ownedDeploymentLinks
	if (s.ownedDeploymentLinks.getEReference() != null) t.addNewReference("ownedDeploymentLinks", s.ownedDeploymentLinks.getEReference());
	//PhysicalNode.ownedPhysicalComponents -> EReference : ownedPhysicalComponents
	if (s.ownedPhysicalComponents.getEReference() != null) t.addNewReference("ownedPhysicalComponents", s.ownedPhysicalComponents.getEReference());
	//PhysicalNode.ownedPhysicalComponentPkgs -> EReference : ownedPhysicalComponentPkgs
	if (s.ownedPhysicalComponentPkgs.getEReference() != null) t.addNewReference("ownedPhysicalComponentPkgs", s.ownedPhysicalComponentPkgs.getEReference());
	//PhysicalNode.logicalInterfaceRealizations -> EReference : logicalInterfaceRealizations
	if (s.logicalInterfaceRealizations.getEReference() != null) t.addNewReference("logicalInterfaceRealizations", s.logicalInterfaceRealizations.getEReference());
	//PhysicalNode.subPhysicalComponents -> EReference : subPhysicalComponents
	if (s.subPhysicalComponents.getEReference() != null) t.addNewReference("subPhysicalComponents", s.subPhysicalComponents.getEReference());
	//PhysicalNode.realizedLogicalComponents -> EReference : realizedLogicalComponents
	if (s.realizedLogicalComponents.getEReference() != null) t.addNewReference("realizedLogicalComponents", s.realizedLogicalComponents.getEReference());
	//PhysicalNode.allocatedPhysicalFunctions -> EReference : allocatedPhysicalFunctions
	if (s.allocatedPhysicalFunctions.getEReference() != null) t.addNewReference("allocatedPhysicalFunctions", s.allocatedPhysicalFunctions.getEReference());
	//PhysicalNode.deployedPhysicalComponents -> EReference : deployedPhysicalComponents
	if (s.deployedPhysicalComponents.getEReference() != null) t.addNewReference("deployedPhysicalComponents", s.deployedPhysicalComponents.getEReference());
	//PhysicalNode.deployingPhysicalComponents -> EReference : deployingPhysicalComponents
	if (s.deployingPhysicalComponents.getEReference() != null) t.addNewReference("deployingPhysicalComponents", s.deployingPhysicalComponents.getEReference());
	//PhysicalNode.subPhysicalNodes -> EReference : subPhysicalNodes
	if (s.subPhysicalNodes.getEReference() != null) t.addNewReference("subPhysicalNodes", s.subPhysicalNodes.getEReference());
}

@lazy
rule LogicalArchitectureRealization
	transform s : DSL!LogicalArchitectureRealization //pa.LogicalArchitectureRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalArchitectureRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//LogicalArchitectureRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//LogicalArchitectureRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//LogicalArchitectureRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//LogicalArchitectureRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//LogicalArchitectureRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//LogicalArchitectureRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//LogicalArchitectureRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//LogicalArchitectureRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//LogicalArchitectureRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//LogicalArchitectureRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//LogicalArchitectureRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//LogicalArchitectureRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//LogicalArchitectureRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//LogicalArchitectureRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//LogicalArchitectureRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//LogicalArchitectureRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//LogicalArchitectureRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//LogicalArchitectureRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//LogicalArchitectureRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//LogicalArchitectureRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//LogicalArchitectureRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//LogicalArchitectureRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//LogicalArchitectureRealization.allocatedArchitecture -> EReference : allocatedArchitecture
	if (s.allocatedArchitecture.getEReference() != null) t.addNewReference("allocatedArchitecture", s.allocatedArchitecture.getEReference());
	//LogicalArchitectureRealization.allocatingArchitecture -> EReference : allocatingArchitecture
	if (s.allocatingArchitecture.getEReference() != null) t.addNewReference("allocatingArchitecture", s.allocatingArchitecture.getEReference());
}

@lazy
rule LogicalInterfaceRealization
	transform s : DSL!LogicalInterfaceRealization //pa.LogicalInterfaceRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalInterfaceRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//LogicalInterfaceRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//LogicalInterfaceRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//LogicalInterfaceRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//LogicalInterfaceRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//LogicalInterfaceRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//LogicalInterfaceRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//LogicalInterfaceRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//LogicalInterfaceRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//LogicalInterfaceRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//LogicalInterfaceRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//LogicalInterfaceRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//LogicalInterfaceRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//LogicalInterfaceRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//LogicalInterfaceRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//LogicalInterfaceRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//LogicalInterfaceRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//LogicalInterfaceRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//LogicalInterfaceRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//LogicalInterfaceRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//LogicalInterfaceRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//LogicalInterfaceRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//LogicalInterfaceRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//LogicalInterfaceRealization.allocatedInterface -> EReference : allocatedInterface
	if (s.allocatedInterface.getEReference() != null) t.addNewReference("allocatedInterface", s.allocatedInterface.getEReference());
	//LogicalInterfaceRealization.allocatingInterfaceAllocator -> EReference : allocatingInterfaceAllocator
	if (s.allocatingInterfaceAllocator.getEReference() != null) t.addNewReference("allocatingInterfaceAllocator", s.allocatingInterfaceAllocator.getEReference());
}


// deployment.ecore
@lazy
rule ComponentInstance
	transform s : DSL!ComponentInstance //deployment.ComponentInstance
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentInstance.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ComponentInstance.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ComponentInstance.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ComponentInstance.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ComponentInstance.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ComponentInstance.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ComponentInstance.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ComponentInstance.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ComponentInstance.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ComponentInstance.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ComponentInstance.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ComponentInstance.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ComponentInstance.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ComponentInstance.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ComponentInstance.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ComponentInstance.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ComponentInstance.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ComponentInstance.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ComponentInstance.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ComponentInstance.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ComponentInstance.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ComponentInstance.deployingLinks -> EReference : deployingLinks
	if (s.deployingLinks.getEReference() != null) t.addNewReference("deployingLinks", s.deployingLinks.getEReference());
	//ComponentInstance.deploymentLinks -> EReference : deploymentLinks
	if (s.deploymentLinks.getEReference() != null) t.addNewReference("deploymentLinks", s.deploymentLinks.getEReference());
	//ComponentInstance.portInstances -> EReference : portInstances
	if (s.portInstances.getEReference() != null) t.addNewReference("portInstances", s.portInstances.getEReference());
	//ComponentInstance.ownedAbstractPhysicalInstances -> EReference : ownedAbstractPhysicalInstances
	if (s.ownedAbstractPhysicalInstances.getEReference() != null) t.addNewReference("ownedAbstractPhysicalInstances", s.ownedAbstractPhysicalInstances.getEReference());
	//ComponentInstance.ownedInstanceDeploymentLinks -> EReference : ownedInstanceDeploymentLinks
	if (s.ownedInstanceDeploymentLinks.getEReference() != null) t.addNewReference("ownedInstanceDeploymentLinks", s.ownedInstanceDeploymentLinks.getEReference());
	//ComponentInstance.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
}

@lazy
rule ConnectionInstance
	transform s : DSL!ConnectionInstance //deployment.ConnectionInstance
	to t : SysMLine!ItemUsage
	extends Base{
	//ConnectionInstance.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ConnectionInstance.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ConnectionInstance.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ConnectionInstance.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ConnectionInstance.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ConnectionInstance.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ConnectionInstance.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ConnectionInstance.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ConnectionInstance.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ConnectionInstance.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ConnectionInstance.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ConnectionInstance.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ConnectionInstance.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ConnectionInstance.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ConnectionInstance.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ConnectionInstance.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ConnectionInstance.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ConnectionInstance.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ConnectionInstance.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ConnectionInstance.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ConnectionInstance.connectionEnds -> EReference : connectionEnds
	if (s.connectionEnds.getEReference() != null) t.addNewReference("connectionEnds", s.connectionEnds.getEReference());
	//ConnectionInstance.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
}

@lazy
rule DeploymentAspect
	transform s : DSL!DeploymentAspect //deployment.DeploymentAspect
	to t : SysMLine!ItemUsage
	extends Base{
	//DeploymentAspect.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//DeploymentAspect.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//DeploymentAspect.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//DeploymentAspect.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//DeploymentAspect.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//DeploymentAspect.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//DeploymentAspect.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//DeploymentAspect.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//DeploymentAspect.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//DeploymentAspect.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//DeploymentAspect.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//DeploymentAspect.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//DeploymentAspect.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//DeploymentAspect.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//DeploymentAspect.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//DeploymentAspect.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//DeploymentAspect.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//DeploymentAspect.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//DeploymentAspect.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//DeploymentAspect.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//DeploymentAspect.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//DeploymentAspect.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//DeploymentAspect.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//DeploymentAspect.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//DeploymentAspect.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//DeploymentAspect.ownedConfigurations -> EReference : ownedConfigurations
	if (s.ownedConfigurations.getEReference() != null) t.addNewReference("ownedConfigurations", s.ownedConfigurations.getEReference());
	//DeploymentAspect.ownedDeploymentAspects -> EReference : ownedDeploymentAspects
	if (s.ownedDeploymentAspects.getEReference() != null) t.addNewReference("ownedDeploymentAspects", s.ownedDeploymentAspects.getEReference());
}

@lazy
rule DeploymentConfiguration
	transform s : DSL!DeploymentConfiguration //deployment.DeploymentConfiguration
	to t : SysMLine!ItemUsage
	extends Base{
	//DeploymentConfiguration.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//DeploymentConfiguration.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//DeploymentConfiguration.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//DeploymentConfiguration.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//DeploymentConfiguration.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//DeploymentConfiguration.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//DeploymentConfiguration.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//DeploymentConfiguration.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//DeploymentConfiguration.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//DeploymentConfiguration.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//DeploymentConfiguration.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//DeploymentConfiguration.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//DeploymentConfiguration.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//DeploymentConfiguration.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//DeploymentConfiguration.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//DeploymentConfiguration.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//DeploymentConfiguration.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//DeploymentConfiguration.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//DeploymentConfiguration.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//DeploymentConfiguration.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//DeploymentConfiguration.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//DeploymentConfiguration.ownedDeploymentLinks -> EReference : ownedDeploymentLinks
	if (s.ownedDeploymentLinks.getEReference() != null) t.addNewReference("ownedDeploymentLinks", s.ownedDeploymentLinks.getEReference());
	//DeploymentConfiguration.ownedPhysicalInstances -> EReference : ownedPhysicalInstances
	if (s.ownedPhysicalInstances.getEReference() != null) t.addNewReference("ownedPhysicalInstances", s.ownedPhysicalInstances.getEReference());
}

@lazy
rule InstanceDeploymentLink
	transform s : DSL!InstanceDeploymentLink //deployment.InstanceDeploymentLink
	to t : SysMLine!ItemUsage
	extends Base{
	//InstanceDeploymentLink.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InstanceDeploymentLink.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InstanceDeploymentLink.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//InstanceDeploymentLink.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//InstanceDeploymentLink.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//InstanceDeploymentLink.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//InstanceDeploymentLink.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//InstanceDeploymentLink.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InstanceDeploymentLink.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InstanceDeploymentLink.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InstanceDeploymentLink.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InstanceDeploymentLink.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//InstanceDeploymentLink.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//InstanceDeploymentLink.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//InstanceDeploymentLink.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//InstanceDeploymentLink.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//InstanceDeploymentLink.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//InstanceDeploymentLink.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//InstanceDeploymentLink.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//InstanceDeploymentLink.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//InstanceDeploymentLink.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//InstanceDeploymentLink.deployedElement -> EReference : deployedElement
	if (s.deployedElement.getEReference() != null) t.addNewReference("deployedElement", s.deployedElement.getEReference());
	//InstanceDeploymentLink.location -> EReference : location
	if (s.location.getEReference() != null) t.addNewReference("location", s.location.getEReference());
}

@lazy
rule PartDeploymentLink
	transform s : DSL!PartDeploymentLink //deployment.PartDeploymentLink
	to t : SysMLine!ItemUsage
	extends Base{
	//PartDeploymentLink.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PartDeploymentLink.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PartDeploymentLink.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PartDeploymentLink.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PartDeploymentLink.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PartDeploymentLink.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PartDeploymentLink.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PartDeploymentLink.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PartDeploymentLink.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PartDeploymentLink.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PartDeploymentLink.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PartDeploymentLink.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//PartDeploymentLink.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PartDeploymentLink.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PartDeploymentLink.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PartDeploymentLink.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PartDeploymentLink.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PartDeploymentLink.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PartDeploymentLink.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PartDeploymentLink.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PartDeploymentLink.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PartDeploymentLink.deployedElement -> EReference : deployedElement
	if (s.deployedElement.getEReference() != null) t.addNewReference("deployedElement", s.deployedElement.getEReference());
	//PartDeploymentLink.location -> EReference : location
	if (s.location.getEReference() != null) t.addNewReference("location", s.location.getEReference());
}

@lazy
rule AbstractPhysicalInstance
	transform s : DSL!AbstractPhysicalInstance //deployment.AbstractPhysicalInstance
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractPhysicalInstance.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractPhysicalInstance.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractPhysicalInstance.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractPhysicalInstance.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractPhysicalInstance.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractPhysicalInstance.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractPhysicalInstance.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractPhysicalInstance.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractPhysicalInstance.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractPhysicalInstance.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractPhysicalInstance.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractPhysicalInstance.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractPhysicalInstance.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractPhysicalInstance.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractPhysicalInstance.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractPhysicalInstance.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractPhysicalInstance.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractPhysicalInstance.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractPhysicalInstance.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractPhysicalInstance.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule PortInstance
	transform s : DSL!PortInstance //deployment.PortInstance
	to t : SysMLine!ItemUsage
	extends Base{
	//PortInstance.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PortInstance.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PortInstance.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PortInstance.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PortInstance.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PortInstance.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PortInstance.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PortInstance.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PortInstance.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PortInstance.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PortInstance.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PortInstance.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PortInstance.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PortInstance.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PortInstance.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PortInstance.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PortInstance.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PortInstance.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PortInstance.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PortInstance.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PortInstance.connections -> EReference : connections
	if (s.connections.getEReference() != null) t.addNewReference("connections", s.connections.getEReference());
	//PortInstance.component -> EReference : component
	if (s.component.getEReference() != null) t.addNewReference("component", s.component.getEReference());
	//PortInstance.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
}

@lazy
rule TypeDeploymentLink
	transform s : DSL!TypeDeploymentLink //deployment.TypeDeploymentLink
	to t : SysMLine!ItemUsage
	extends Base{
	//TypeDeploymentLink.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//TypeDeploymentLink.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//TypeDeploymentLink.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//TypeDeploymentLink.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//TypeDeploymentLink.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//TypeDeploymentLink.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//TypeDeploymentLink.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//TypeDeploymentLink.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//TypeDeploymentLink.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//TypeDeploymentLink.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//TypeDeploymentLink.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//TypeDeploymentLink.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//TypeDeploymentLink.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//TypeDeploymentLink.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//TypeDeploymentLink.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//TypeDeploymentLink.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//TypeDeploymentLink.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//TypeDeploymentLink.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//TypeDeploymentLink.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//TypeDeploymentLink.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//TypeDeploymentLink.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//TypeDeploymentLink.deployedElement -> EReference : deployedElement
	if (s.deployedElement.getEReference() != null) t.addNewReference("deployedElement", s.deployedElement.getEReference());
	//TypeDeploymentLink.location -> EReference : location
	if (s.location.getEReference() != null) t.addNewReference("location", s.location.getEReference());
}


// epbs.ecore
@lazy
rule EPBSArchitecturePkg
	transform s : DSL!EPBSArchitecturePkg //epbs.EPBSArchitecturePkg
	to t : SysMLine!ItemUsage
	extends Base{
	//EPBSArchitecturePkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//EPBSArchitecturePkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//EPBSArchitecturePkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//EPBSArchitecturePkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//EPBSArchitecturePkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//EPBSArchitecturePkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//EPBSArchitecturePkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//EPBSArchitecturePkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//EPBSArchitecturePkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//EPBSArchitecturePkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//EPBSArchitecturePkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//EPBSArchitecturePkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//EPBSArchitecturePkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//EPBSArchitecturePkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//EPBSArchitecturePkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//EPBSArchitecturePkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//EPBSArchitecturePkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//EPBSArchitecturePkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//EPBSArchitecturePkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//EPBSArchitecturePkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//EPBSArchitecturePkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//EPBSArchitecturePkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//EPBSArchitecturePkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//EPBSArchitecturePkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//EPBSArchitecturePkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//EPBSArchitecturePkg.ownedEPBSArchitectures -> EReference : ownedEPBSArchitectures
	if (s.ownedEPBSArchitectures.getEReference() != null) t.addNewReference("ownedEPBSArchitectures", s.ownedEPBSArchitectures.getEReference());
}

@lazy
rule EPBSArchitecture
	transform s : DSL!EPBSArchitecture //epbs.EPBSArchitecture
	to t : SysMLine!ItemUsage
	extends Base{
	//EPBSArchitecture.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//EPBSArchitecture.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//EPBSArchitecture.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//EPBSArchitecture.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//EPBSArchitecture.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//EPBSArchitecture.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//EPBSArchitecture.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//EPBSArchitecture.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//EPBSArchitecture.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//EPBSArchitecture.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//EPBSArchitecture.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//EPBSArchitecture.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//EPBSArchitecture.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//EPBSArchitecture.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//EPBSArchitecture.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//EPBSArchitecture.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//EPBSArchitecture.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//EPBSArchitecture.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//EPBSArchitecture.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//EPBSArchitecture.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//EPBSArchitecture.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//EPBSArchitecture.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//EPBSArchitecture.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//EPBSArchitecture.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//EPBSArchitecture.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//EPBSArchitecture.ownedFunctionPkg -> EReference : ownedFunctionPkg
	if (s.ownedFunctionPkg.getEReference() != null) t.addNewReference("ownedFunctionPkg", s.ownedFunctionPkg.getEReference());
	//EPBSArchitecture.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//EPBSArchitecture.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//EPBSArchitecture.ownedFunctionalLinks -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//EPBSArchitecture.ownedFunctionalAllocations -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//EPBSArchitecture.ownedComponentExchangeRealizations -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//EPBSArchitecture.ownedAbstractCapabilityPkg -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//EPBSArchitecture.ownedInterfacePkg -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//EPBSArchitecture.ownedDataPkg -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//EPBSArchitecture.provisionedArchitectureAllocations -> EReference : provisionedArchitectureAllocations
	if (s.provisionedArchitectureAllocations.getEReference() != null) t.addNewReference("provisionedArchitectureAllocations", s.provisionedArchitectureAllocations.getEReference());
	//EPBSArchitecture.provisioningArchitectureAllocations -> EReference : provisioningArchitectureAllocations
	if (s.provisioningArchitectureAllocations.getEReference() != null) t.addNewReference("provisioningArchitectureAllocations", s.provisioningArchitectureAllocations.getEReference());
	//EPBSArchitecture.allocatedArchitectures -> EReference : allocatedArchitectures
	if (s.allocatedArchitectures.getEReference() != null) t.addNewReference("allocatedArchitectures", s.allocatedArchitectures.getEReference());
	//EPBSArchitecture.allocatingArchitectures -> EReference : allocatingArchitectures
	if (s.allocatingArchitectures.getEReference() != null) t.addNewReference("allocatingArchitectures", s.allocatingArchitectures.getEReference());
	//EPBSArchitecture.system -> EReference : system
	if (s.system.getEReference() != null) t.addNewReference("system", s.system.getEReference());
	//EPBSArchitecture.ownedConfigurationItemPkg -> EReference : ownedConfigurationItemPkg
	if (s.ownedConfigurationItemPkg.getEReference() != null) t.addNewReference("ownedConfigurationItemPkg", s.ownedConfigurationItemPkg.getEReference());
	//EPBSArchitecture.containedCapabilityRealizationPkg -> EReference : containedCapabilityRealizationPkg
	if (s.containedCapabilityRealizationPkg.getEReference() != null) t.addNewReference("containedCapabilityRealizationPkg", s.containedCapabilityRealizationPkg.getEReference());
	//EPBSArchitecture.ownedPhysicalArchitectureRealizations -> EReference : ownedPhysicalArchitectureRealizations
	if (s.ownedPhysicalArchitectureRealizations.getEReference() != null) t.addNewReference("ownedPhysicalArchitectureRealizations", s.ownedPhysicalArchitectureRealizations.getEReference());
	//EPBSArchitecture.allocatedPhysicalArchitectureRealizations -> EReference : allocatedPhysicalArchitectureRealizations
	if (s.allocatedPhysicalArchitectureRealizations.getEReference() != null) t.addNewReference("allocatedPhysicalArchitectureRealizations", s.allocatedPhysicalArchitectureRealizations.getEReference());
	//EPBSArchitecture.allocatedPhysicalArchitectures -> EReference : allocatedPhysicalArchitectures
	if (s.allocatedPhysicalArchitectures.getEReference() != null) t.addNewReference("allocatedPhysicalArchitectures", s.allocatedPhysicalArchitectures.getEReference());
}

@lazy
rule ConfigurationItemPkg
	transform s : DSL!ConfigurationItemPkg //epbs.ConfigurationItemPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//ConfigurationItemPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ConfigurationItemPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ConfigurationItemPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ConfigurationItemPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ConfigurationItemPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ConfigurationItemPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ConfigurationItemPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ConfigurationItemPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ConfigurationItemPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ConfigurationItemPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ConfigurationItemPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ConfigurationItemPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ConfigurationItemPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ConfigurationItemPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ConfigurationItemPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ConfigurationItemPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ConfigurationItemPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ConfigurationItemPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ConfigurationItemPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ConfigurationItemPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ConfigurationItemPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ConfigurationItemPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//ConfigurationItemPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//ConfigurationItemPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//ConfigurationItemPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//ConfigurationItemPkg.ownedParts -> EReference : ownedParts
	if (s.ownedParts.getEReference() != null) t.addNewReference("ownedParts", s.ownedParts.getEReference());
	//ConfigurationItemPkg.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//ConfigurationItemPkg.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//ConfigurationItemPkg.ownedFunctionalLinks -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//ConfigurationItemPkg.ownedFunctionalAllocations -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//ConfigurationItemPkg.ownedComponentExchangeRealizations -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//ConfigurationItemPkg.ownedPhysicalLinks -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//ConfigurationItemPkg.ownedPhysicalLinkCategories -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//ConfigurationItemPkg.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//ConfigurationItemPkg.ownedConfigurationItems -> EReference : ownedConfigurationItems
	if (s.ownedConfigurationItems.getEReference() != null) t.addNewReference("ownedConfigurationItems", s.ownedConfigurationItems.getEReference());
	//ConfigurationItemPkg.ownedConfigurationItemPkgs -> EReference : ownedConfigurationItemPkgs
	if (s.ownedConfigurationItemPkgs.getEReference() != null) t.addNewReference("ownedConfigurationItemPkgs", s.ownedConfigurationItemPkgs.getEReference());
}

@lazy
rule ConfigurationItem
	transform s : DSL!ConfigurationItem //epbs.ConfigurationItem
	to t : SysMLine!ItemUsage
	extends Base{
	//ConfigurationItem.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ConfigurationItem.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ConfigurationItem.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ConfigurationItem.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ConfigurationItem.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ConfigurationItem.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ConfigurationItem.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ConfigurationItem.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ConfigurationItem.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//ConfigurationItem.actor -> EAttribute : actor
	if (s.actor.getEAttribute() != null) t.addNewAttribute("actor", s.actor.getEAttribute());
	//ConfigurationItem.human -> EAttribute : human
	if (s.human.getEAttribute() != null) t.addNewAttribute("human", s.human.getEAttribute());
	//ConfigurationItem.itemIdentifier -> EAttribute : itemIdentifier
	if (s.itemIdentifier.getEAttribute() != null) t.addNewAttribute("itemIdentifier", s.itemIdentifier.getEAttribute());
	//ConfigurationItem.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//ConfigurationItem.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ConfigurationItem.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ConfigurationItem.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ConfigurationItem.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ConfigurationItem.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ConfigurationItem.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ConfigurationItem.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ConfigurationItem.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ConfigurationItem.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ConfigurationItem.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ConfigurationItem.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ConfigurationItem.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ConfigurationItem.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ConfigurationItem.involvingInvolvements -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//ConfigurationItem.capabilityRealizationInvolvements -> EReference : capabilityRealizationInvolvements
	if (s.capabilityRealizationInvolvements.getEReference() != null) t.addNewReference("capabilityRealizationInvolvements", s.capabilityRealizationInvolvements.getEReference());
	//ConfigurationItem.involvingCapabilityRealizations -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null) t.addNewReference("involvingCapabilityRealizations", s.involvingCapabilityRealizations.getEReference());
	//ConfigurationItem.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//ConfigurationItem.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//ConfigurationItem.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//ConfigurationItem.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//ConfigurationItem.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//ConfigurationItem.ownedFunctionalAllocation -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null) t.addNewReference("ownedFunctionalAllocation", s.ownedFunctionalAllocation.getEReference());
	//ConfigurationItem.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//ConfigurationItem.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//ConfigurationItem.functionalAllocations -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null) t.addNewReference("functionalAllocations", s.functionalAllocations.getEReference());
	//ConfigurationItem.allocatedFunctions -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null) t.addNewReference("allocatedFunctions", s.allocatedFunctions.getEReference());
	//ConfigurationItem.inExchangeLinks -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//ConfigurationItem.outExchangeLinks -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
	//ConfigurationItem.ownedAbstractCapabilityPkg -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//ConfigurationItem.ownedInterfacePkg -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//ConfigurationItem.ownedDataPkg -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//ConfigurationItem.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//ConfigurationItem.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//ConfigurationItem.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//ConfigurationItem.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//ConfigurationItem.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//ConfigurationItem.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//ConfigurationItem.ownedFeatures -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//ConfigurationItem.containedProperties -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//ConfigurationItem.ownedInterfaceAllocations -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null) t.addNewReference("ownedInterfaceAllocations", s.ownedInterfaceAllocations.getEReference());
	//ConfigurationItem.provisionedInterfaceAllocations -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null) t.addNewReference("provisionedInterfaceAllocations", s.provisionedInterfaceAllocations.getEReference());
	//ConfigurationItem.allocatedInterfaces -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null) t.addNewReference("allocatedInterfaces", s.allocatedInterfaces.getEReference());
	//ConfigurationItem.ownedCommunicationLinks -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null) t.addNewReference("ownedCommunicationLinks", s.ownedCommunicationLinks.getEReference());
	//ConfigurationItem.produce -> EReference : produce
	if (s.produce.getEReference() != null) t.addNewReference("produce", s.produce.getEReference());
	//ConfigurationItem.consume -> EReference : consume
	if (s.consume.getEReference() != null) t.addNewReference("consume", s.consume.getEReference());
	//ConfigurationItem.send -> EReference : send
	if (s.send.getEReference() != null) t.addNewReference("send", s.send.getEReference());
	//ConfigurationItem.receive -> EReference : receive
	if (s.receive.getEReference() != null) t.addNewReference("receive", s.receive.getEReference());
	//ConfigurationItem.call -> EReference : call
	if (s.call.getEReference() != null) t.addNewReference("call", s.call.getEReference());
	//ConfigurationItem.execute -> EReference : execute
	if (s.execute.getEReference() != null) t.addNewReference("execute", s.execute.getEReference());
	//ConfigurationItem.write -> EReference : write
	if (s.write.getEReference() != null) t.addNewReference("write", s.write.getEReference());
	//ConfigurationItem.access -> EReference : access
	if (s.access.getEReference() != null) t.addNewReference("access", s.access.getEReference());
	//ConfigurationItem.acquire -> EReference : acquire
	if (s.acquire.getEReference() != null) t.addNewReference("acquire", s.acquire.getEReference());
	//ConfigurationItem.transmit -> EReference : transmit
	if (s.transmit.getEReference() != null) t.addNewReference("transmit", s.transmit.getEReference());
	//ConfigurationItem.ownedInterfaceUses -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null) t.addNewReference("ownedInterfaceUses", s.ownedInterfaceUses.getEReference());
	//ConfigurationItem.usedInterfaceLinks -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null) t.addNewReference("usedInterfaceLinks", s.usedInterfaceLinks.getEReference());
	//ConfigurationItem.usedInterfaces -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null) t.addNewReference("usedInterfaces", s.usedInterfaces.getEReference());
	//ConfigurationItem.ownedInterfaceImplementations -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null) t.addNewReference("ownedInterfaceImplementations", s.ownedInterfaceImplementations.getEReference());
	//ConfigurationItem.implementedInterfaceLinks -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null) t.addNewReference("implementedInterfaceLinks", s.implementedInterfaceLinks.getEReference());
	//ConfigurationItem.implementedInterfaces -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null) t.addNewReference("implementedInterfaces", s.implementedInterfaces.getEReference());
	//ConfigurationItem.ownedComponentRealizations -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null) t.addNewReference("ownedComponentRealizations", s.ownedComponentRealizations.getEReference());
	//ConfigurationItem.realizedComponents -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null) t.addNewReference("realizedComponents", s.realizedComponents.getEReference());
	//ConfigurationItem.realizingComponents -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null) t.addNewReference("realizingComponents", s.realizingComponents.getEReference());
	//ConfigurationItem.providedInterfaces -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//ConfigurationItem.requiredInterfaces -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//ConfigurationItem.containedComponentPorts -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null) t.addNewReference("containedComponentPorts", s.containedComponentPorts.getEReference());
	//ConfigurationItem.containedParts -> EReference : containedParts
	if (s.containedParts.getEReference() != null) t.addNewReference("containedParts", s.containedParts.getEReference());
	//ConfigurationItem.containedPhysicalPorts -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null) t.addNewReference("containedPhysicalPorts", s.containedPhysicalPorts.getEReference());
	//ConfigurationItem.ownedPhysicalPath -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null) t.addNewReference("ownedPhysicalPath", s.ownedPhysicalPath.getEReference());
	//ConfigurationItem.ownedPhysicalLinks -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//ConfigurationItem.ownedPhysicalLinkCategories -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//ConfigurationItem.representingParts -> EReference : representingParts
	if (s.representingParts.getEReference() != null) t.addNewReference("representingParts", s.representingParts.getEReference());
	//ConfigurationItem.ownedConfigurationItems -> EReference : ownedConfigurationItems
	if (s.ownedConfigurationItems.getEReference() != null) t.addNewReference("ownedConfigurationItems", s.ownedConfigurationItems.getEReference());
	//ConfigurationItem.ownedConfigurationItemPkgs -> EReference : ownedConfigurationItemPkgs
	if (s.ownedConfigurationItemPkgs.getEReference() != null) t.addNewReference("ownedConfigurationItemPkgs", s.ownedConfigurationItemPkgs.getEReference());
	//ConfigurationItem.ownedPhysicalArtifactRealizations -> EReference : ownedPhysicalArtifactRealizations
	if (s.ownedPhysicalArtifactRealizations.getEReference() != null) t.addNewReference("ownedPhysicalArtifactRealizations", s.ownedPhysicalArtifactRealizations.getEReference());
	//ConfigurationItem.allocatedPhysicalArtifacts -> EReference : allocatedPhysicalArtifacts
	if (s.allocatedPhysicalArtifacts.getEReference() != null) t.addNewReference("allocatedPhysicalArtifacts", s.allocatedPhysicalArtifacts.getEReference());
}

@lazy
rule PhysicalArchitectureRealization
	transform s : DSL!PhysicalArchitectureRealization //epbs.PhysicalArchitectureRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalArchitectureRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalArchitectureRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalArchitectureRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalArchitectureRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalArchitectureRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalArchitectureRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalArchitectureRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalArchitectureRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalArchitectureRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalArchitectureRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalArchitectureRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalArchitectureRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//PhysicalArchitectureRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalArchitectureRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalArchitectureRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalArchitectureRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalArchitectureRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalArchitectureRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalArchitectureRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalArchitectureRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalArchitectureRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalArchitectureRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//PhysicalArchitectureRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//PhysicalArchitectureRealization.allocatedArchitecture -> EReference : allocatedArchitecture
	if (s.allocatedArchitecture.getEReference() != null) t.addNewReference("allocatedArchitecture", s.allocatedArchitecture.getEReference());
	//PhysicalArchitectureRealization.allocatingArchitecture -> EReference : allocatingArchitecture
	if (s.allocatingArchitecture.getEReference() != null) t.addNewReference("allocatingArchitecture", s.allocatingArchitecture.getEReference());
}

@lazy
rule PhysicalArtifactRealization
	transform s : DSL!PhysicalArtifactRealization //epbs.PhysicalArtifactRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalArtifactRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalArtifactRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalArtifactRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalArtifactRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalArtifactRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalArtifactRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalArtifactRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalArtifactRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalArtifactRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalArtifactRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalArtifactRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalArtifactRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//PhysicalArtifactRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalArtifactRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalArtifactRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalArtifactRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalArtifactRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalArtifactRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalArtifactRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalArtifactRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalArtifactRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalArtifactRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//PhysicalArtifactRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//PhysicalArtifactRealization.realizedPhysicalArtifact -> EReference : realizedPhysicalArtifact
	if (s.realizedPhysicalArtifact.getEReference() != null) t.addNewReference("realizedPhysicalArtifact", s.realizedPhysicalArtifact.getEReference());
	//PhysicalArtifactRealization.realizingConfigurationItem -> EReference : realizingConfigurationItem
	if (s.realizingConfigurationItem.getEReference() != null) t.addNewReference("realizingConfigurationItem", s.realizingConfigurationItem.getEReference());
}


// sharedmodel.ecore
@lazy
rule SharedPkg
	transform s : DSL!SharedPkg //sharedmodel.SharedPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//SharedPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SharedPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SharedPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//SharedPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SharedPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SharedPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SharedPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SharedPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SharedPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SharedPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SharedPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SharedPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SharedPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SharedPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SharedPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SharedPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SharedPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SharedPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SharedPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SharedPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SharedPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SharedPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//SharedPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//SharedPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//SharedPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//SharedPkg.reuseLinks -> EReference : reuseLinks
	if (s.reuseLinks.getEReference() != null) t.addNewReference("reuseLinks", s.reuseLinks.getEReference());
	//SharedPkg.ownedDataPkg -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//SharedPkg.ownedGenericPkg -> EReference : ownedGenericPkg
	if (s.ownedGenericPkg.getEReference() != null) t.addNewReference("ownedGenericPkg", s.ownedGenericPkg.getEReference());
}

@lazy
rule GenericPkg
	transform s : DSL!GenericPkg //sharedmodel.GenericPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//GenericPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//GenericPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//GenericPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//GenericPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//GenericPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//GenericPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//GenericPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//GenericPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//GenericPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//GenericPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//GenericPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//GenericPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//GenericPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//GenericPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//GenericPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//GenericPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//GenericPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//GenericPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//GenericPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//GenericPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//GenericPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//GenericPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//GenericPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//GenericPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//GenericPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//GenericPkg.subGenericPkgs -> EReference : subGenericPkgs
	if (s.subGenericPkgs.getEReference() != null) t.addNewReference("subGenericPkgs", s.subGenericPkgs.getEReference());
	//GenericPkg.capellaElements -> EReference : capellaElements
	if (s.capellaElements.getEReference() != null) t.addNewReference("capellaElements", s.capellaElements.getEReference());
}


// activity.ecore
@lazy
rule AbstractActivity
	transform s : DSL!AbstractActivity //activity.AbstractActivity
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractActivity.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractActivity.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractActivity.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractActivity.isControlOperator -> EAttribute : isControlOperator
	if (s.isControlOperator.getEAttribute() != null) t.addNewAttribute("isControlOperator", s.isControlOperator.getEAttribute());
	//AbstractActivity.isReadOnly -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null) t.addNewAttribute("isReadOnly", s.isReadOnly.getEAttribute());
	//AbstractActivity.isSingleExecution -> EAttribute : isSingleExecution
	if (s.isSingleExecution.getEAttribute() != null) t.addNewAttribute("isSingleExecution", s.isSingleExecution.getEAttribute());
	//AbstractActivity.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractActivity.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractActivity.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractActivity.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractActivity.ownedParameterSet -> EReference : ownedParameterSet
	if (s.ownedParameterSet.getEReference() != null) t.addNewReference("ownedParameterSet", s.ownedParameterSet.getEReference());
	//AbstractActivity.ownedParameter -> EReference : ownedParameter
	if (s.ownedParameter.getEReference() != null) t.addNewReference("ownedParameter", s.ownedParameter.getEReference());
	//AbstractActivity.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractActivity.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractActivity.ownedNodes -> EReference : ownedNodes
	if (s.ownedNodes.getEReference() != null) t.addNewReference("ownedNodes", s.ownedNodes.getEReference());
	//AbstractActivity.ownedEdges -> EReference : ownedEdges
	if (s.ownedEdges.getEReference() != null) t.addNewReference("ownedEdges", s.ownedEdges.getEReference());
	//AbstractActivity.ownedGroups -> EReference : ownedGroups
	if (s.ownedGroups.getEReference() != null) t.addNewReference("ownedGroups", s.ownedGroups.getEReference());
	//AbstractActivity.ownedStructuredNodes -> EReference : ownedStructuredNodes
	if (s.ownedStructuredNodes.getEReference() != null) t.addNewReference("ownedStructuredNodes", s.ownedStructuredNodes.getEReference());
}

@lazy
rule ExceptionHandler
	transform s : DSL!ExceptionHandler //activity.ExceptionHandler
	to t : SysMLine!ItemUsage
	extends Base{
	//ExceptionHandler.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ExceptionHandler.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ExceptionHandler.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ExceptionHandler.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ExceptionHandler.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ExceptionHandler.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ExceptionHandler.protectedNode -> EReference : protectedNode
	if (s.protectedNode.getEReference() != null) t.addNewReference("protectedNode", s.protectedNode.getEReference());
	//ExceptionHandler.handlerBody -> EReference : handlerBody
	if (s.handlerBody.getEReference() != null) t.addNewReference("handlerBody", s.handlerBody.getEReference());
	//ExceptionHandler.exceptionInput -> EReference : exceptionInput
	if (s.exceptionInput.getEReference() != null) t.addNewReference("exceptionInput", s.exceptionInput.getEReference());
	//ExceptionHandler.exceptionTypes -> EReference : exceptionTypes
	if (s.exceptionTypes.getEReference() != null) t.addNewReference("exceptionTypes", s.exceptionTypes.getEReference());
}

@lazy
rule ActivityGroup
	transform s : DSL!ActivityGroup //activity.ActivityGroup
	to t : SysMLine!ItemUsage
	extends Base{
	//ActivityGroup.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ActivityGroup.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ActivityGroup.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ActivityGroup.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ActivityGroup.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ActivityGroup.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ActivityGroup.superGroup -> EReference : superGroup
	if (s.superGroup.getEReference() != null) t.addNewReference("superGroup", s.superGroup.getEReference());
	//ActivityGroup.subGroups -> EReference : subGroups
	if (s.subGroups.getEReference() != null) t.addNewReference("subGroups", s.subGroups.getEReference());
	//ActivityGroup.ownedNodes -> EReference : ownedNodes
	if (s.ownedNodes.getEReference() != null) t.addNewReference("ownedNodes", s.ownedNodes.getEReference());
	//ActivityGroup.ownedEdges -> EReference : ownedEdges
	if (s.ownedEdges.getEReference() != null) t.addNewReference("ownedEdges", s.ownedEdges.getEReference());
}

@lazy
rule InterruptibleActivityRegion
	transform s : DSL!InterruptibleActivityRegion //activity.InterruptibleActivityRegion
	to t : SysMLine!ItemUsage
	extends Base{
	//InterruptibleActivityRegion.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InterruptibleActivityRegion.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InterruptibleActivityRegion.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InterruptibleActivityRegion.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InterruptibleActivityRegion.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InterruptibleActivityRegion.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InterruptibleActivityRegion.superGroup -> EReference : superGroup
	if (s.superGroup.getEReference() != null) t.addNewReference("superGroup", s.superGroup.getEReference());
	//InterruptibleActivityRegion.subGroups -> EReference : subGroups
	if (s.subGroups.getEReference() != null) t.addNewReference("subGroups", s.subGroups.getEReference());
	//InterruptibleActivityRegion.ownedNodes -> EReference : ownedNodes
	if (s.ownedNodes.getEReference() != null) t.addNewReference("ownedNodes", s.ownedNodes.getEReference());
	//InterruptibleActivityRegion.ownedEdges -> EReference : ownedEdges
	if (s.ownedEdges.getEReference() != null) t.addNewReference("ownedEdges", s.ownedEdges.getEReference());
	//InterruptibleActivityRegion.interruptingEdges -> EReference : interruptingEdges
	if (s.interruptingEdges.getEReference() != null) t.addNewReference("interruptingEdges", s.interruptingEdges.getEReference());
}

@lazy
rule ActivityEdge
	transform s : DSL!ActivityEdge //activity.ActivityEdge
	to t : SysMLine!ItemUsage
	extends Base{
	//ActivityEdge.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ActivityEdge.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ActivityEdge.kindOfRate -> EAttribute : kindOfRate
	if (s.kindOfRate.getEAttribute() != null) t.addNewAttribute("kindOfRate", s.kindOfRate.getEAttribute());
	//ActivityEdge.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ActivityEdge.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ActivityEdge.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ActivityEdge.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ActivityEdge.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ActivityEdge.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//ActivityEdge.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//ActivityEdge.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//ActivityEdge.rate -> EReference : rate
	if (s.rate.getEReference() != null) t.addNewReference("rate", s.rate.getEReference());
	//ActivityEdge.probability -> EReference : probability
	if (s.probability.getEReference() != null) t.addNewReference("probability", s.probability.getEReference());
	//ActivityEdge.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//ActivityEdge.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//ActivityEdge.guard -> EReference : guard_
	if (s.`guard`.getEReference() != null) t.addNewReference("guard_", s.`guard`.getEReference());
	//ActivityEdge.weight -> EReference : weight
	if (s.weight.getEReference() != null) t.addNewReference("weight", s.weight.getEReference());
	//ActivityEdge.interrupts -> EReference : interrupts
	if (s.interrupts.getEReference() != null) t.addNewReference("interrupts", s.interrupts.getEReference());
}

@lazy
rule ControlFlow
	transform s : DSL!ControlFlow //activity.ControlFlow
	to t : SysMLine!ItemUsage
	extends Base{
	//ControlFlow.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ControlFlow.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ControlFlow.kindOfRate -> EAttribute : kindOfRate
	if (s.kindOfRate.getEAttribute() != null) t.addNewAttribute("kindOfRate", s.kindOfRate.getEAttribute());
	//ControlFlow.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ControlFlow.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ControlFlow.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ControlFlow.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ControlFlow.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ControlFlow.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//ControlFlow.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//ControlFlow.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//ControlFlow.rate -> EReference : rate
	if (s.rate.getEReference() != null) t.addNewReference("rate", s.rate.getEReference());
	//ControlFlow.probability -> EReference : probability
	if (s.probability.getEReference() != null) t.addNewReference("probability", s.probability.getEReference());
	//ControlFlow.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//ControlFlow.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//ControlFlow.guard -> EReference : guard_
	if (s.`guard`.getEReference() != null) t.addNewReference("guard_", s.`guard`.getEReference());
	//ControlFlow.weight -> EReference : weight
	if (s.weight.getEReference() != null) t.addNewReference("weight", s.weight.getEReference());
	//ControlFlow.interrupts -> EReference : interrupts
	if (s.interrupts.getEReference() != null) t.addNewReference("interrupts", s.interrupts.getEReference());
}

@lazy
rule ObjectFlow
	transform s : DSL!ObjectFlow //activity.ObjectFlow
	to t : SysMLine!ItemUsage
	extends Base{
	//ObjectFlow.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ObjectFlow.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ObjectFlow.kindOfRate -> EAttribute : kindOfRate
	if (s.kindOfRate.getEAttribute() != null) t.addNewAttribute("kindOfRate", s.kindOfRate.getEAttribute());
	//ObjectFlow.isMulticast -> EAttribute : isMulticast
	if (s.isMulticast.getEAttribute() != null) t.addNewAttribute("isMulticast", s.isMulticast.getEAttribute());
	//ObjectFlow.isMultireceive -> EAttribute : isMultireceive
	if (s.isMultireceive.getEAttribute() != null) t.addNewAttribute("isMultireceive", s.isMultireceive.getEAttribute());
	//ObjectFlow.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ObjectFlow.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ObjectFlow.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ObjectFlow.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ObjectFlow.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ObjectFlow.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//ObjectFlow.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//ObjectFlow.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//ObjectFlow.rate -> EReference : rate
	if (s.rate.getEReference() != null) t.addNewReference("rate", s.rate.getEReference());
	//ObjectFlow.probability -> EReference : probability
	if (s.probability.getEReference() != null) t.addNewReference("probability", s.probability.getEReference());
	//ObjectFlow.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//ObjectFlow.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//ObjectFlow.guard -> EReference : guard_
	if (s.`guard`.getEReference() != null) t.addNewReference("guard_", s.`guard`.getEReference());
	//ObjectFlow.weight -> EReference : weight
	if (s.weight.getEReference() != null) t.addNewReference("weight", s.weight.getEReference());
	//ObjectFlow.interrupts -> EReference : interrupts
	if (s.interrupts.getEReference() != null) t.addNewReference("interrupts", s.interrupts.getEReference());
	//ObjectFlow.transformation -> EReference : transformation
	if (s.transformation.getEReference() != null) t.addNewReference("transformation", s.transformation.getEReference());
	//ObjectFlow.selection -> EReference : selection
	if (s.selection.getEReference() != null) t.addNewReference("selection", s.selection.getEReference());
}

@lazy
rule ActivityPartition
	transform s : DSL!ActivityPartition //activity.ActivityPartition
	to t : SysMLine!ItemUsage
	extends Base{
	//ActivityPartition.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ActivityPartition.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ActivityPartition.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ActivityPartition.isDimension -> EAttribute : isDimension
	if (s.isDimension.getEAttribute() != null) t.addNewAttribute("isDimension", s.isDimension.getEAttribute());
	//ActivityPartition.isExternal -> EAttribute : isExternal
	if (s.isExternal.getEAttribute() != null) t.addNewAttribute("isExternal", s.isExternal.getEAttribute());
	//ActivityPartition.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ActivityPartition.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ActivityPartition.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ActivityPartition.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ActivityPartition.superGroup -> EReference : superGroup
	if (s.superGroup.getEReference() != null) t.addNewReference("superGroup", s.superGroup.getEReference());
	//ActivityPartition.subGroups -> EReference : subGroups
	if (s.subGroups.getEReference() != null) t.addNewReference("subGroups", s.subGroups.getEReference());
	//ActivityPartition.ownedNodes -> EReference : ownedNodes
	if (s.ownedNodes.getEReference() != null) t.addNewReference("ownedNodes", s.ownedNodes.getEReference());
	//ActivityPartition.ownedEdges -> EReference : ownedEdges
	if (s.ownedEdges.getEReference() != null) t.addNewReference("ownedEdges", s.ownedEdges.getEReference());
	//ActivityPartition.representedElement -> EReference : representedElement
	if (s.representedElement.getEReference() != null) t.addNewReference("representedElement", s.representedElement.getEReference());
	//ActivityPartition.superPartition -> EReference : superPartition
	if (s.superPartition.getEReference() != null) t.addNewReference("superPartition", s.superPartition.getEReference());
	//ActivityPartition.subPartitions -> EReference : subPartitions
	if (s.subPartitions.getEReference() != null) t.addNewReference("subPartitions", s.subPartitions.getEReference());
}

@lazy
rule ActivityExchange
	transform s : DSL!ActivityExchange //activity.ActivityExchange
	to t : SysMLine!ItemUsage
	extends Base{
	//ActivityExchange.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ActivityExchange.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ActivityExchange.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ActivityExchange.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ActivityExchange.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ActivityExchange.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ActivityExchange.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ActivityExchange.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ActivityExchange.realizations -> EReference : realizations
	if (s.realizations.getEReference() != null) t.addNewReference("realizations", s.realizations.getEReference());
	//ActivityExchange.convoyedInformations -> EReference : convoyedInformations
	if (s.convoyedInformations.getEReference() != null) t.addNewReference("convoyedInformations", s.convoyedInformations.getEReference());
	//ActivityExchange.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//ActivityExchange.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//ActivityExchange.realizingActivityFlows -> EReference : realizingActivityFlows
	if (s.realizingActivityFlows.getEReference() != null) t.addNewReference("realizingActivityFlows", s.realizingActivityFlows.getEReference());
}

@lazy
rule ActivityNode
	transform s : DSL!ActivityNode //activity.ActivityNode
	to t : SysMLine!ItemUsage
	extends Base{
	//ActivityNode.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ActivityNode.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ActivityNode.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ActivityNode.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ActivityNode.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ActivityNode.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ActivityNode.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ActivityNode.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//ActivityNode.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//ActivityNode.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//ActivityNode.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//ActivityNode.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
}

@lazy
rule ExecutableNode
	transform s : DSL!ExecutableNode //activity.ExecutableNode
	to t : SysMLine!ItemUsage
	extends Base{
	//ExecutableNode.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ExecutableNode.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ExecutableNode.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ExecutableNode.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ExecutableNode.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ExecutableNode.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ExecutableNode.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ExecutableNode.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//ExecutableNode.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//ExecutableNode.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//ExecutableNode.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//ExecutableNode.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//ExecutableNode.ownedHandlers -> EReference : ownedHandlers
	if (s.ownedHandlers.getEReference() != null) t.addNewReference("ownedHandlers", s.ownedHandlers.getEReference());
}

@lazy
rule StructuredActivityNode
	transform s : DSL!StructuredActivityNode //activity.StructuredActivityNode
	to t : SysMLine!ItemUsage
	extends Base{
	//StructuredActivityNode.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//StructuredActivityNode.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//StructuredActivityNode.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//StructuredActivityNode.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//StructuredActivityNode.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//StructuredActivityNode.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//StructuredActivityNode.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//StructuredActivityNode.superGroup -> EReference : superGroup
	if (s.superGroup.getEReference() != null) t.addNewReference("superGroup", s.superGroup.getEReference());
	//StructuredActivityNode.subGroups -> EReference : subGroups
	if (s.subGroups.getEReference() != null) t.addNewReference("subGroups", s.subGroups.getEReference());
	//StructuredActivityNode.ownedNodes -> EReference : ownedNodes
	if (s.ownedNodes.getEReference() != null) t.addNewReference("ownedNodes", s.ownedNodes.getEReference());
	//StructuredActivityNode.ownedEdges -> EReference : ownedEdges
	if (s.ownedEdges.getEReference() != null) t.addNewReference("ownedEdges", s.ownedEdges.getEReference());
	//StructuredActivityNode.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//StructuredActivityNode.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//StructuredActivityNode.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//StructuredActivityNode.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//StructuredActivityNode.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//StructuredActivityNode.ownedHandlers -> EReference : ownedHandlers
	if (s.ownedHandlers.getEReference() != null) t.addNewReference("ownedHandlers", s.ownedHandlers.getEReference());
	//StructuredActivityNode.localPrecondition -> EReference : localPrecondition
	if (s.localPrecondition.getEReference() != null) t.addNewReference("localPrecondition", s.localPrecondition.getEReference());
	//StructuredActivityNode.localPostcondition -> EReference : localPostcondition
	if (s.localPostcondition.getEReference() != null) t.addNewReference("localPostcondition", s.localPostcondition.getEReference());
	//StructuredActivityNode.context -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context", s.context.getEReference());
	//StructuredActivityNode.inputs -> EReference : inputs
	if (s.inputs.getEReference() != null) t.addNewReference("inputs", s.inputs.getEReference());
	//StructuredActivityNode.outputs -> EReference : outputs
	if (s.outputs.getEReference() != null) t.addNewReference("outputs", s.outputs.getEReference());
}

@lazy
rule AbstractAction
	transform s : DSL!AbstractAction //activity.AbstractAction
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractAction.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractAction.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractAction.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractAction.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractAction.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractAction.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractAction.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractAction.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//AbstractAction.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//AbstractAction.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//AbstractAction.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//AbstractAction.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//AbstractAction.ownedHandlers -> EReference : ownedHandlers
	if (s.ownedHandlers.getEReference() != null) t.addNewReference("ownedHandlers", s.ownedHandlers.getEReference());
	//AbstractAction.localPrecondition -> EReference : localPrecondition
	if (s.localPrecondition.getEReference() != null) t.addNewReference("localPrecondition", s.localPrecondition.getEReference());
	//AbstractAction.localPostcondition -> EReference : localPostcondition
	if (s.localPostcondition.getEReference() != null) t.addNewReference("localPostcondition", s.localPostcondition.getEReference());
	//AbstractAction.context -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context", s.context.getEReference());
	//AbstractAction.inputs -> EReference : inputs
	if (s.inputs.getEReference() != null) t.addNewReference("inputs", s.inputs.getEReference());
	//AbstractAction.outputs -> EReference : outputs
	if (s.outputs.getEReference() != null) t.addNewReference("outputs", s.outputs.getEReference());
}

@lazy
rule AcceptEventAction
	transform s : DSL!AcceptEventAction //activity.AcceptEventAction
	to t : SysMLine!ItemUsage
	extends Base{
	//AcceptEventAction.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AcceptEventAction.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AcceptEventAction.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AcceptEventAction.isUnmarshall -> EAttribute : isUnmarshall
	if (s.isUnmarshall.getEAttribute() != null) t.addNewAttribute("isUnmarshall", s.isUnmarshall.getEAttribute());
	//AcceptEventAction.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AcceptEventAction.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AcceptEventAction.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AcceptEventAction.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AcceptEventAction.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//AcceptEventAction.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//AcceptEventAction.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//AcceptEventAction.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//AcceptEventAction.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//AcceptEventAction.ownedHandlers -> EReference : ownedHandlers
	if (s.ownedHandlers.getEReference() != null) t.addNewReference("ownedHandlers", s.ownedHandlers.getEReference());
	//AcceptEventAction.localPrecondition -> EReference : localPrecondition
	if (s.localPrecondition.getEReference() != null) t.addNewReference("localPrecondition", s.localPrecondition.getEReference());
	//AcceptEventAction.localPostcondition -> EReference : localPostcondition
	if (s.localPostcondition.getEReference() != null) t.addNewReference("localPostcondition", s.localPostcondition.getEReference());
	//AcceptEventAction.context -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context", s.context.getEReference());
	//AcceptEventAction.inputs -> EReference : inputs
	if (s.inputs.getEReference() != null) t.addNewReference("inputs", s.inputs.getEReference());
	//AcceptEventAction.outputs -> EReference : outputs
	if (s.outputs.getEReference() != null) t.addNewReference("outputs", s.outputs.getEReference());
	//AcceptEventAction.result -> EReference : result
	if (s.result.getEReference() != null) t.addNewReference("result", s.result.getEReference());
}

@lazy
rule InvocationAction
	transform s : DSL!InvocationAction //activity.InvocationAction
	to t : SysMLine!ItemUsage
	extends Base{
	//InvocationAction.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InvocationAction.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InvocationAction.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//InvocationAction.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InvocationAction.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InvocationAction.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InvocationAction.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InvocationAction.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//InvocationAction.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//InvocationAction.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//InvocationAction.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//InvocationAction.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//InvocationAction.ownedHandlers -> EReference : ownedHandlers
	if (s.ownedHandlers.getEReference() != null) t.addNewReference("ownedHandlers", s.ownedHandlers.getEReference());
	//InvocationAction.localPrecondition -> EReference : localPrecondition
	if (s.localPrecondition.getEReference() != null) t.addNewReference("localPrecondition", s.localPrecondition.getEReference());
	//InvocationAction.localPostcondition -> EReference : localPostcondition
	if (s.localPostcondition.getEReference() != null) t.addNewReference("localPostcondition", s.localPostcondition.getEReference());
	//InvocationAction.context -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context", s.context.getEReference());
	//InvocationAction.inputs -> EReference : inputs
	if (s.inputs.getEReference() != null) t.addNewReference("inputs", s.inputs.getEReference());
	//InvocationAction.outputs -> EReference : outputs
	if (s.outputs.getEReference() != null) t.addNewReference("outputs", s.outputs.getEReference());
	//InvocationAction.arguments -> EReference : arguments
	if (s.arguments.getEReference() != null) t.addNewReference("arguments", s.arguments.getEReference());
}

@lazy
rule SendSignalAction
	transform s : DSL!SendSignalAction //activity.SendSignalAction
	to t : SysMLine!ItemUsage
	extends Base{
	//SendSignalAction.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SendSignalAction.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SendSignalAction.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//SendSignalAction.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SendSignalAction.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SendSignalAction.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SendSignalAction.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SendSignalAction.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//SendSignalAction.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//SendSignalAction.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//SendSignalAction.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//SendSignalAction.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//SendSignalAction.ownedHandlers -> EReference : ownedHandlers
	if (s.ownedHandlers.getEReference() != null) t.addNewReference("ownedHandlers", s.ownedHandlers.getEReference());
	//SendSignalAction.localPrecondition -> EReference : localPrecondition
	if (s.localPrecondition.getEReference() != null) t.addNewReference("localPrecondition", s.localPrecondition.getEReference());
	//SendSignalAction.localPostcondition -> EReference : localPostcondition
	if (s.localPostcondition.getEReference() != null) t.addNewReference("localPostcondition", s.localPostcondition.getEReference());
	//SendSignalAction.context -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context", s.context.getEReference());
	//SendSignalAction.inputs -> EReference : inputs
	if (s.inputs.getEReference() != null) t.addNewReference("inputs", s.inputs.getEReference());
	//SendSignalAction.outputs -> EReference : outputs
	if (s.outputs.getEReference() != null) t.addNewReference("outputs", s.outputs.getEReference());
	//SendSignalAction.arguments -> EReference : arguments
	if (s.arguments.getEReference() != null) t.addNewReference("arguments", s.arguments.getEReference());
	//SendSignalAction.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//SendSignalAction.signal -> EReference : signal
	if (s.signal.getEReference() != null) t.addNewReference("signal", s.signal.getEReference());
}

@lazy
rule CallAction
	transform s : DSL!CallAction //activity.CallAction
	to t : SysMLine!ItemUsage
	extends Base{
	//CallAction.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CallAction.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CallAction.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CallAction.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CallAction.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CallAction.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CallAction.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CallAction.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//CallAction.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//CallAction.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//CallAction.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//CallAction.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//CallAction.ownedHandlers -> EReference : ownedHandlers
	if (s.ownedHandlers.getEReference() != null) t.addNewReference("ownedHandlers", s.ownedHandlers.getEReference());
	//CallAction.localPrecondition -> EReference : localPrecondition
	if (s.localPrecondition.getEReference() != null) t.addNewReference("localPrecondition", s.localPrecondition.getEReference());
	//CallAction.localPostcondition -> EReference : localPostcondition
	if (s.localPostcondition.getEReference() != null) t.addNewReference("localPostcondition", s.localPostcondition.getEReference());
	//CallAction.context -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context", s.context.getEReference());
	//CallAction.inputs -> EReference : inputs
	if (s.inputs.getEReference() != null) t.addNewReference("inputs", s.inputs.getEReference());
	//CallAction.outputs -> EReference : outputs
	if (s.outputs.getEReference() != null) t.addNewReference("outputs", s.outputs.getEReference());
	//CallAction.arguments -> EReference : arguments
	if (s.arguments.getEReference() != null) t.addNewReference("arguments", s.arguments.getEReference());
	//CallAction.results -> EReference : results
	if (s.results.getEReference() != null) t.addNewReference("results", s.results.getEReference());
}

@lazy
rule CallBehaviorAction
	transform s : DSL!CallBehaviorAction //activity.CallBehaviorAction
	to t : SysMLine!ItemUsage
	extends Base{
	//CallBehaviorAction.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CallBehaviorAction.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CallBehaviorAction.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CallBehaviorAction.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CallBehaviorAction.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CallBehaviorAction.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CallBehaviorAction.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CallBehaviorAction.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//CallBehaviorAction.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//CallBehaviorAction.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//CallBehaviorAction.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//CallBehaviorAction.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//CallBehaviorAction.ownedHandlers -> EReference : ownedHandlers
	if (s.ownedHandlers.getEReference() != null) t.addNewReference("ownedHandlers", s.ownedHandlers.getEReference());
	//CallBehaviorAction.localPrecondition -> EReference : localPrecondition
	if (s.localPrecondition.getEReference() != null) t.addNewReference("localPrecondition", s.localPrecondition.getEReference());
	//CallBehaviorAction.localPostcondition -> EReference : localPostcondition
	if (s.localPostcondition.getEReference() != null) t.addNewReference("localPostcondition", s.localPostcondition.getEReference());
	//CallBehaviorAction.context -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context", s.context.getEReference());
	//CallBehaviorAction.inputs -> EReference : inputs
	if (s.inputs.getEReference() != null) t.addNewReference("inputs", s.inputs.getEReference());
	//CallBehaviorAction.outputs -> EReference : outputs
	if (s.outputs.getEReference() != null) t.addNewReference("outputs", s.outputs.getEReference());
	//CallBehaviorAction.arguments -> EReference : arguments
	if (s.arguments.getEReference() != null) t.addNewReference("arguments", s.arguments.getEReference());
	//CallBehaviorAction.results -> EReference : results
	if (s.results.getEReference() != null) t.addNewReference("results", s.results.getEReference());
	//CallBehaviorAction.behavior -> EReference : behavior
	if (s.behavior.getEReference() != null) t.addNewReference("behavior", s.behavior.getEReference());
}

@lazy
rule ObjectNode
	transform s : DSL!ObjectNode //activity.ObjectNode
	to t : SysMLine!ItemUsage
	extends Base{
	//ObjectNode.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ObjectNode.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ObjectNode.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ObjectNode.isControlType -> EAttribute : isControlType
	if (s.isControlType.getEAttribute() != null) t.addNewAttribute("isControlType", s.isControlType.getEAttribute());
	//ObjectNode.kindOfNode -> EAttribute : kindOfNode
	if (s.kindOfNode.getEAttribute() != null) t.addNewAttribute("kindOfNode", s.kindOfNode.getEAttribute());
	//ObjectNode.ordering -> EAttribute : ordering
	if (s.ordering.getEAttribute() != null) t.addNewAttribute("ordering", s.ordering.getEAttribute());
	//ObjectNode.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ObjectNode.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ObjectNode.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ObjectNode.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ObjectNode.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//ObjectNode.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//ObjectNode.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//ObjectNode.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//ObjectNode.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//ObjectNode.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//ObjectNode.upperBound -> EReference : upperBound
	if (s.upperBound.getEReference() != null) t.addNewReference("upperBound", s.upperBound.getEReference());
	//ObjectNode.inState -> EReference : inState
	if (s.inState.getEReference() != null) t.addNewReference("inState", s.inState.getEReference());
	//ObjectNode.selection -> EReference : selection
	if (s.selection.getEReference() != null) t.addNewReference("selection", s.selection.getEReference());
}

@lazy
rule Pin
	transform s : DSL!Pin //activity.Pin
	to t : SysMLine!ItemUsage
	extends Base{
	//Pin.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Pin.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Pin.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Pin.isControlType -> EAttribute : isControlType
	if (s.isControlType.getEAttribute() != null) t.addNewAttribute("isControlType", s.isControlType.getEAttribute());
	//Pin.kindOfNode -> EAttribute : kindOfNode
	if (s.kindOfNode.getEAttribute() != null) t.addNewAttribute("kindOfNode", s.kindOfNode.getEAttribute());
	//Pin.ordering -> EAttribute : ordering
	if (s.ordering.getEAttribute() != null) t.addNewAttribute("ordering", s.ordering.getEAttribute());
	//Pin.isControl -> EAttribute : isControl
	if (s.isControl.getEAttribute() != null) t.addNewAttribute("isControl", s.isControl.getEAttribute());
	//Pin.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Pin.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Pin.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Pin.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Pin.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//Pin.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//Pin.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//Pin.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//Pin.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//Pin.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//Pin.upperBound -> EReference : upperBound
	if (s.upperBound.getEReference() != null) t.addNewReference("upperBound", s.upperBound.getEReference());
	//Pin.inState -> EReference : inState
	if (s.inState.getEReference() != null) t.addNewReference("inState", s.inState.getEReference());
	//Pin.selection -> EReference : selection
	if (s.selection.getEReference() != null) t.addNewReference("selection", s.selection.getEReference());
}

@lazy
rule InputPin
	transform s : DSL!InputPin //activity.InputPin
	to t : SysMLine!ItemUsage
	extends Base{
	//InputPin.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InputPin.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InputPin.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//InputPin.isControlType -> EAttribute : isControlType
	if (s.isControlType.getEAttribute() != null) t.addNewAttribute("isControlType", s.isControlType.getEAttribute());
	//InputPin.kindOfNode -> EAttribute : kindOfNode
	if (s.kindOfNode.getEAttribute() != null) t.addNewAttribute("kindOfNode", s.kindOfNode.getEAttribute());
	//InputPin.ordering -> EAttribute : ordering
	if (s.ordering.getEAttribute() != null) t.addNewAttribute("ordering", s.ordering.getEAttribute());
	//InputPin.isControl -> EAttribute : isControl
	if (s.isControl.getEAttribute() != null) t.addNewAttribute("isControl", s.isControl.getEAttribute());
	//InputPin.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InputPin.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InputPin.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InputPin.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InputPin.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//InputPin.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//InputPin.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//InputPin.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//InputPin.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//InputPin.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//InputPin.upperBound -> EReference : upperBound
	if (s.upperBound.getEReference() != null) t.addNewReference("upperBound", s.upperBound.getEReference());
	//InputPin.inState -> EReference : inState
	if (s.inState.getEReference() != null) t.addNewReference("inState", s.inState.getEReference());
	//InputPin.selection -> EReference : selection
	if (s.selection.getEReference() != null) t.addNewReference("selection", s.selection.getEReference());
	//InputPin.inputEvaluationAction -> EReference : inputEvaluationAction
	if (s.inputEvaluationAction.getEReference() != null) t.addNewReference("inputEvaluationAction", s.inputEvaluationAction.getEReference());
}

@lazy
rule ValuePin
	transform s : DSL!ValuePin //activity.ValuePin
	to t : SysMLine!ItemUsage
	extends Base{
	//ValuePin.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ValuePin.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ValuePin.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ValuePin.isControlType -> EAttribute : isControlType
	if (s.isControlType.getEAttribute() != null) t.addNewAttribute("isControlType", s.isControlType.getEAttribute());
	//ValuePin.kindOfNode -> EAttribute : kindOfNode
	if (s.kindOfNode.getEAttribute() != null) t.addNewAttribute("kindOfNode", s.kindOfNode.getEAttribute());
	//ValuePin.ordering -> EAttribute : ordering
	if (s.ordering.getEAttribute() != null) t.addNewAttribute("ordering", s.ordering.getEAttribute());
	//ValuePin.isControl -> EAttribute : isControl
	if (s.isControl.getEAttribute() != null) t.addNewAttribute("isControl", s.isControl.getEAttribute());
	//ValuePin.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ValuePin.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ValuePin.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ValuePin.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ValuePin.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//ValuePin.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//ValuePin.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//ValuePin.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//ValuePin.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//ValuePin.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//ValuePin.upperBound -> EReference : upperBound
	if (s.upperBound.getEReference() != null) t.addNewReference("upperBound", s.upperBound.getEReference());
	//ValuePin.inState -> EReference : inState
	if (s.inState.getEReference() != null) t.addNewReference("inState", s.inState.getEReference());
	//ValuePin.selection -> EReference : selection
	if (s.selection.getEReference() != null) t.addNewReference("selection", s.selection.getEReference());
	//ValuePin.inputEvaluationAction -> EReference : inputEvaluationAction
	if (s.inputEvaluationAction.getEReference() != null) t.addNewReference("inputEvaluationAction", s.inputEvaluationAction.getEReference());
	//ValuePin.value -> EReference : value
	if (s.value.getEReference() != null) t.addNewReference("value", s.value.getEReference());
}

@lazy
rule OutputPin
	transform s : DSL!OutputPin //activity.OutputPin
	to t : SysMLine!ItemUsage
	extends Base{
	//OutputPin.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OutputPin.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OutputPin.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//OutputPin.isControlType -> EAttribute : isControlType
	if (s.isControlType.getEAttribute() != null) t.addNewAttribute("isControlType", s.isControlType.getEAttribute());
	//OutputPin.kindOfNode -> EAttribute : kindOfNode
	if (s.kindOfNode.getEAttribute() != null) t.addNewAttribute("kindOfNode", s.kindOfNode.getEAttribute());
	//OutputPin.ordering -> EAttribute : ordering
	if (s.ordering.getEAttribute() != null) t.addNewAttribute("ordering", s.ordering.getEAttribute());
	//OutputPin.isControl -> EAttribute : isControl
	if (s.isControl.getEAttribute() != null) t.addNewAttribute("isControl", s.isControl.getEAttribute());
	//OutputPin.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OutputPin.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OutputPin.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OutputPin.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OutputPin.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//OutputPin.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//OutputPin.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//OutputPin.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//OutputPin.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//OutputPin.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//OutputPin.upperBound -> EReference : upperBound
	if (s.upperBound.getEReference() != null) t.addNewReference("upperBound", s.upperBound.getEReference());
	//OutputPin.inState -> EReference : inState
	if (s.inState.getEReference() != null) t.addNewReference("inState", s.inState.getEReference());
	//OutputPin.selection -> EReference : selection
	if (s.selection.getEReference() != null) t.addNewReference("selection", s.selection.getEReference());
}


// behavior.ecore
@lazy
rule AbstractBehavior
	transform s : DSL!AbstractBehavior //behavior.AbstractBehavior
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractBehavior.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractBehavior.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractBehavior.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractBehavior.isControlOperator -> EAttribute : isControlOperator
	if (s.isControlOperator.getEAttribute() != null) t.addNewAttribute("isControlOperator", s.isControlOperator.getEAttribute());
	//AbstractBehavior.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractBehavior.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractBehavior.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractBehavior.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractBehavior.ownedParameterSet -> EReference : ownedParameterSet
	if (s.ownedParameterSet.getEReference() != null) t.addNewReference("ownedParameterSet", s.ownedParameterSet.getEReference());
	//AbstractBehavior.ownedParameter -> EReference : ownedParameter
	if (s.ownedParameter.getEReference() != null) t.addNewReference("ownedParameter", s.ownedParameter.getEReference());
}

@lazy
rule AbstractSignal
	transform s : DSL!AbstractSignal //behavior.AbstractSignal
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractSignal.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractSignal.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractSignal.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractSignal.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractSignal.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractSignal.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractSignal.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractSignal.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
}

@lazy
rule AbstractEvent
	transform s : DSL!AbstractEvent //behavior.AbstractEvent
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractEvent.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractEvent.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractEvent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractEvent.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractEvent.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractEvent.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractEvent.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractEvent.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
}

@lazy
rule AbstractTimeEvent
	transform s : DSL!AbstractTimeEvent //behavior.AbstractTimeEvent
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractTimeEvent.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractTimeEvent.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractTimeEvent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractTimeEvent.isRelative -> EAttribute : isRelative
	if (s.isRelative.getEAttribute() != null) t.addNewAttribute("isRelative", s.isRelative.getEAttribute());
	//AbstractTimeEvent.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractTimeEvent.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractTimeEvent.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractTimeEvent.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractTimeEvent.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//AbstractTimeEvent.when -> EReference : when
	if (s.when.getEReference() != null) t.addNewReference("when", s.when.getEReference());
}

@lazy
rule AbstractMessageEvent
	transform s : DSL!AbstractMessageEvent //behavior.AbstractMessageEvent
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractMessageEvent.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractMessageEvent.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractMessageEvent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractMessageEvent.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractMessageEvent.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractMessageEvent.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractMessageEvent.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractMessageEvent.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
}

@lazy
rule AbstractSignalEvent
	transform s : DSL!AbstractSignalEvent //behavior.AbstractSignalEvent
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractSignalEvent.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractSignalEvent.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractSignalEvent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractSignalEvent.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractSignalEvent.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractSignalEvent.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractSignalEvent.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractSignalEvent.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//AbstractSignalEvent.signal -> EReference : signal
	if (s.signal.getEReference() != null) t.addNewReference("signal", s.signal.getEReference());
}

@lazy
rule TimeExpression
	transform s : DSL!TimeExpression //behavior.TimeExpression
	to t : SysMLine!ItemUsage
	extends Base{
	//TimeExpression.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//TimeExpression.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//TimeExpression.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//TimeExpression.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//TimeExpression.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//TimeExpression.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//TimeExpression.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//TimeExpression.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//TimeExpression.observations -> EReference : observations
	if (s.observations.getEReference() != null) t.addNewReference("observations", s.observations.getEReference());
	//TimeExpression.expression -> EReference : expression
	if (s.expression.getEReference() != null) t.addNewReference("expression", s.expression.getEReference());
}


// capellacommon.ecore
@lazy
rule AbstractCapabilityPkg
	transform s : DSL!AbstractCapabilityPkg //capellacommon.AbstractCapabilityPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractCapabilityPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractCapabilityPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractCapabilityPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractCapabilityPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractCapabilityPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractCapabilityPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractCapabilityPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractCapabilityPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractCapabilityPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractCapabilityPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractCapabilityPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractCapabilityPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractCapabilityPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractCapabilityPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractCapabilityPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractCapabilityPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractCapabilityPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractCapabilityPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractCapabilityPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractCapabilityPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractCapabilityPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractCapabilityPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//AbstractCapabilityPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//AbstractCapabilityPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//AbstractCapabilityPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
}

@lazy
rule GenericTrace
	transform s : DSL!GenericTrace //capellacommon.GenericTrace
	to t : SysMLine!ItemUsage
	extends Base{
	//GenericTrace.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//GenericTrace.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//GenericTrace.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//GenericTrace.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//GenericTrace.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//GenericTrace.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//GenericTrace.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//GenericTrace.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//GenericTrace.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//GenericTrace.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//GenericTrace.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//GenericTrace.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//GenericTrace.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//GenericTrace.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//GenericTrace.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//GenericTrace.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//GenericTrace.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//GenericTrace.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//GenericTrace.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//GenericTrace.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//GenericTrace.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//GenericTrace.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//GenericTrace.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//GenericTrace.keyValuePairs -> EReference : keyValuePairs
	if (s.keyValuePairs.getEReference() != null) t.addNewReference("keyValuePairs", s.keyValuePairs.getEReference());
	//GenericTrace.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//GenericTrace.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
}

@lazy
rule TransfoLink
	transform s : DSL!TransfoLink //capellacommon.TransfoLink
	to t : SysMLine!ItemUsage
	extends Base{
	//TransfoLink.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//TransfoLink.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//TransfoLink.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//TransfoLink.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//TransfoLink.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//TransfoLink.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//TransfoLink.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//TransfoLink.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//TransfoLink.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//TransfoLink.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//TransfoLink.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//TransfoLink.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//TransfoLink.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//TransfoLink.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//TransfoLink.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//TransfoLink.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//TransfoLink.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//TransfoLink.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//TransfoLink.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//TransfoLink.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//TransfoLink.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//TransfoLink.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//TransfoLink.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//TransfoLink.keyValuePairs -> EReference : keyValuePairs
	if (s.keyValuePairs.getEReference() != null) t.addNewReference("keyValuePairs", s.keyValuePairs.getEReference());
	//TransfoLink.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//TransfoLink.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
}

@lazy
rule JustificationLink
	transform s : DSL!JustificationLink //capellacommon.JustificationLink
	to t : SysMLine!ItemUsage
	extends Base{
	//JustificationLink.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//JustificationLink.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//JustificationLink.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//JustificationLink.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//JustificationLink.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//JustificationLink.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//JustificationLink.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//JustificationLink.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//JustificationLink.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//JustificationLink.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//JustificationLink.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//JustificationLink.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//JustificationLink.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//JustificationLink.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//JustificationLink.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//JustificationLink.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//JustificationLink.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//JustificationLink.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//JustificationLink.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//JustificationLink.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//JustificationLink.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//JustificationLink.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//JustificationLink.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//JustificationLink.keyValuePairs -> EReference : keyValuePairs
	if (s.keyValuePairs.getEReference() != null) t.addNewReference("keyValuePairs", s.keyValuePairs.getEReference());
	//JustificationLink.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//JustificationLink.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
}

@lazy
rule CapabilityRealizationInvolvement
	transform s : DSL!CapabilityRealizationInvolvement //capellacommon.CapabilityRealizationInvolvement
	to t : SysMLine!ItemUsage
	extends Base{
	//CapabilityRealizationInvolvement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CapabilityRealizationInvolvement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CapabilityRealizationInvolvement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CapabilityRealizationInvolvement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CapabilityRealizationInvolvement.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CapabilityRealizationInvolvement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CapabilityRealizationInvolvement.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CapabilityRealizationInvolvement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CapabilityRealizationInvolvement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CapabilityRealizationInvolvement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CapabilityRealizationInvolvement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CapabilityRealizationInvolvement.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//CapabilityRealizationInvolvement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CapabilityRealizationInvolvement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CapabilityRealizationInvolvement.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CapabilityRealizationInvolvement.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CapabilityRealizationInvolvement.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CapabilityRealizationInvolvement.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CapabilityRealizationInvolvement.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CapabilityRealizationInvolvement.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CapabilityRealizationInvolvement.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CapabilityRealizationInvolvement.involver -> EReference : involver
	if (s.involver.getEReference() != null) t.addNewReference("involver", s.involver.getEReference());
	//CapabilityRealizationInvolvement.involved -> EReference : involved
	if (s.involved.getEReference() != null) t.addNewReference("involved", s.involved.getEReference());
	//CapabilityRealizationInvolvement.involvedCapabilityRealizationInvolvedElement -> EReference : involvedCapabilityRealizationInvolvedElement
	if (s.involvedCapabilityRealizationInvolvedElement.getEReference() != null) t.addNewReference("involvedCapabilityRealizationInvolvedElement", s.involvedCapabilityRealizationInvolvedElement.getEReference());
}

@lazy
rule CapabilityRealizationInvolvedElement
	transform s : DSL!CapabilityRealizationInvolvedElement //capellacommon.CapabilityRealizationInvolvedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//CapabilityRealizationInvolvedElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CapabilityRealizationInvolvedElement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CapabilityRealizationInvolvedElement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CapabilityRealizationInvolvedElement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CapabilityRealizationInvolvedElement.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CapabilityRealizationInvolvedElement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CapabilityRealizationInvolvedElement.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CapabilityRealizationInvolvedElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CapabilityRealizationInvolvedElement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CapabilityRealizationInvolvedElement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CapabilityRealizationInvolvedElement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CapabilityRealizationInvolvedElement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CapabilityRealizationInvolvedElement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CapabilityRealizationInvolvedElement.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CapabilityRealizationInvolvedElement.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CapabilityRealizationInvolvedElement.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CapabilityRealizationInvolvedElement.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CapabilityRealizationInvolvedElement.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CapabilityRealizationInvolvedElement.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CapabilityRealizationInvolvedElement.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CapabilityRealizationInvolvedElement.involvingInvolvements -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//CapabilityRealizationInvolvedElement.capabilityRealizationInvolvements -> EReference : capabilityRealizationInvolvements
	if (s.capabilityRealizationInvolvements.getEReference() != null) t.addNewReference("capabilityRealizationInvolvements", s.capabilityRealizationInvolvements.getEReference());
	//CapabilityRealizationInvolvedElement.involvingCapabilityRealizations -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null) t.addNewReference("involvingCapabilityRealizations", s.involvingCapabilityRealizations.getEReference());
}

@lazy
rule StateMachine
	transform s : DSL!StateMachine //capellacommon.StateMachine
	to t : SysMLine!ItemUsage
	extends Base{
	//StateMachine.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//StateMachine.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//StateMachine.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//StateMachine.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//StateMachine.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//StateMachine.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//StateMachine.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//StateMachine.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//StateMachine.isControlOperator -> EAttribute : isControlOperator
	if (s.isControlOperator.getEAttribute() != null) t.addNewAttribute("isControlOperator", s.isControlOperator.getEAttribute());
	//StateMachine.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//StateMachine.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//StateMachine.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//StateMachine.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//StateMachine.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//StateMachine.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//StateMachine.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//StateMachine.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//StateMachine.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//StateMachine.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//StateMachine.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//StateMachine.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//StateMachine.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//StateMachine.ownedParameterSet -> EReference : ownedParameterSet
	if (s.ownedParameterSet.getEReference() != null) t.addNewReference("ownedParameterSet", s.ownedParameterSet.getEReference());
	//StateMachine.ownedParameter -> EReference : ownedParameter
	if (s.ownedParameter.getEReference() != null) t.addNewReference("ownedParameter", s.ownedParameter.getEReference());
	//StateMachine.ownedRegions -> EReference : ownedRegions
	if (s.ownedRegions.getEReference() != null) t.addNewReference("ownedRegions", s.ownedRegions.getEReference());
	//StateMachine.ownedConnectionPoints -> EReference : ownedConnectionPoints
	if (s.ownedConnectionPoints.getEReference() != null) t.addNewReference("ownedConnectionPoints", s.ownedConnectionPoints.getEReference());
}

@lazy
rule Region
	transform s : DSL!Region //capellacommon.Region
	to t : SysMLine!ItemUsage
	extends Base{
	//Region.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Region.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Region.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Region.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Region.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Region.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Region.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Region.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Region.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Region.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Region.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Region.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Region.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Region.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Region.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Region.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Region.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Region.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Region.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Region.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Region.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Region.ownedStates -> EReference : ownedStates
	if (s.ownedStates.getEReference() != null) t.addNewReference("ownedStates", s.ownedStates.getEReference());
	//Region.ownedTransitions -> EReference : ownedTransitions
	if (s.ownedTransitions.getEReference() != null) t.addNewReference("ownedTransitions", s.ownedTransitions.getEReference());
	//Region.involvedStates -> EReference : involvedStates
	if (s.involvedStates.getEReference() != null) t.addNewReference("involvedStates", s.involvedStates.getEReference());
}

@lazy
rule State
	transform s : DSL!State //capellacommon.State
	to t : SysMLine!ItemUsage
	extends Base{
	//State.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//State.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//State.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//State.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//State.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//State.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//State.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//State.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//State.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//State.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//State.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//State.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//State.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//State.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//State.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//State.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//State.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//State.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//State.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//State.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//State.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//State.referencedStates -> EReference : referencedStates
	if (s.referencedStates.getEReference() != null) t.addNewReference("referencedStates", s.referencedStates.getEReference());
	//State.exploitedStates -> EReference : exploitedStates
	if (s.exploitedStates.getEReference() != null) t.addNewReference("exploitedStates", s.exploitedStates.getEReference());
	//State.ownedAbstractStateRealizations -> EReference : ownedAbstractStateRealizations
	if (s.ownedAbstractStateRealizations.getEReference() != null) t.addNewReference("ownedAbstractStateRealizations", s.ownedAbstractStateRealizations.getEReference());
	//State.realizedAbstractStates -> EReference : realizedAbstractStates
	if (s.realizedAbstractStates.getEReference() != null) t.addNewReference("realizedAbstractStates", s.realizedAbstractStates.getEReference());
	//State.realizingAbstractStates -> EReference : realizingAbstractStates
	if (s.realizingAbstractStates.getEReference() != null) t.addNewReference("realizingAbstractStates", s.realizingAbstractStates.getEReference());
	//State.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//State.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//State.involverRegions -> EReference : involverRegions
	if (s.involverRegions.getEReference() != null) t.addNewReference("involverRegions", s.involverRegions.getEReference());
	//State.ownedRegions -> EReference : ownedRegions
	if (s.ownedRegions.getEReference() != null) t.addNewReference("ownedRegions", s.ownedRegions.getEReference());
	//State.ownedConnectionPoints -> EReference : ownedConnectionPoints
	if (s.ownedConnectionPoints.getEReference() != null) t.addNewReference("ownedConnectionPoints", s.ownedConnectionPoints.getEReference());
	//State.availableAbstractFunctions -> EReference : availableAbstractFunctions
	if (s.availableAbstractFunctions.getEReference() != null) t.addNewReference("availableAbstractFunctions", s.availableAbstractFunctions.getEReference());
	//State.availableFunctionalChains -> EReference : availableFunctionalChains
	if (s.availableFunctionalChains.getEReference() != null) t.addNewReference("availableFunctionalChains", s.availableFunctionalChains.getEReference());
	//State.availableAbstractCapabilities -> EReference : availableAbstractCapabilities
	if (s.availableAbstractCapabilities.getEReference() != null) t.addNewReference("availableAbstractCapabilities", s.availableAbstractCapabilities.getEReference());
	//State.entry -> EReference : entry
	if (s.entry.getEReference() != null) t.addNewReference("entry", s.entry.getEReference());
	//State.doActivity -> EReference : doActivity
	if (s.doActivity.getEReference() != null) t.addNewReference("doActivity", s.doActivity.getEReference());
	//State.exit -> EReference : exit
	if (s.exit.getEReference() != null) t.addNewReference("exit", s.exit.getEReference());
	//State.stateInvariant -> EReference : stateInvariant
	if (s.stateInvariant.getEReference() != null) t.addNewReference("stateInvariant", s.stateInvariant.getEReference());
}

@lazy
rule Mode
	transform s : DSL!Mode //capellacommon.Mode
	to t : SysMLine!ItemUsage
	extends Base{
	//Mode.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Mode.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Mode.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Mode.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Mode.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Mode.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Mode.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Mode.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Mode.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Mode.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Mode.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Mode.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Mode.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Mode.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Mode.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Mode.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Mode.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Mode.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Mode.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Mode.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Mode.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Mode.referencedStates -> EReference : referencedStates
	if (s.referencedStates.getEReference() != null) t.addNewReference("referencedStates", s.referencedStates.getEReference());
	//Mode.exploitedStates -> EReference : exploitedStates
	if (s.exploitedStates.getEReference() != null) t.addNewReference("exploitedStates", s.exploitedStates.getEReference());
	//Mode.ownedAbstractStateRealizations -> EReference : ownedAbstractStateRealizations
	if (s.ownedAbstractStateRealizations.getEReference() != null) t.addNewReference("ownedAbstractStateRealizations", s.ownedAbstractStateRealizations.getEReference());
	//Mode.realizedAbstractStates -> EReference : realizedAbstractStates
	if (s.realizedAbstractStates.getEReference() != null) t.addNewReference("realizedAbstractStates", s.realizedAbstractStates.getEReference());
	//Mode.realizingAbstractStates -> EReference : realizingAbstractStates
	if (s.realizingAbstractStates.getEReference() != null) t.addNewReference("realizingAbstractStates", s.realizingAbstractStates.getEReference());
	//Mode.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//Mode.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//Mode.involverRegions -> EReference : involverRegions
	if (s.involverRegions.getEReference() != null) t.addNewReference("involverRegions", s.involverRegions.getEReference());
	//Mode.ownedRegions -> EReference : ownedRegions
	if (s.ownedRegions.getEReference() != null) t.addNewReference("ownedRegions", s.ownedRegions.getEReference());
	//Mode.ownedConnectionPoints -> EReference : ownedConnectionPoints
	if (s.ownedConnectionPoints.getEReference() != null) t.addNewReference("ownedConnectionPoints", s.ownedConnectionPoints.getEReference());
	//Mode.availableAbstractFunctions -> EReference : availableAbstractFunctions
	if (s.availableAbstractFunctions.getEReference() != null) t.addNewReference("availableAbstractFunctions", s.availableAbstractFunctions.getEReference());
	//Mode.availableFunctionalChains -> EReference : availableFunctionalChains
	if (s.availableFunctionalChains.getEReference() != null) t.addNewReference("availableFunctionalChains", s.availableFunctionalChains.getEReference());
	//Mode.availableAbstractCapabilities -> EReference : availableAbstractCapabilities
	if (s.availableAbstractCapabilities.getEReference() != null) t.addNewReference("availableAbstractCapabilities", s.availableAbstractCapabilities.getEReference());
	//Mode.entry -> EReference : entry
	if (s.entry.getEReference() != null) t.addNewReference("entry", s.entry.getEReference());
	//Mode.doActivity -> EReference : doActivity
	if (s.doActivity.getEReference() != null) t.addNewReference("doActivity", s.doActivity.getEReference());
	//Mode.exit -> EReference : exit
	if (s.exit.getEReference() != null) t.addNewReference("exit", s.exit.getEReference());
	//Mode.stateInvariant -> EReference : stateInvariant
	if (s.stateInvariant.getEReference() != null) t.addNewReference("stateInvariant", s.stateInvariant.getEReference());
}

@lazy
rule FinalState
	transform s : DSL!FinalState //capellacommon.FinalState
	to t : SysMLine!ItemUsage
	extends Base{
	//FinalState.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FinalState.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FinalState.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//FinalState.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//FinalState.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//FinalState.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//FinalState.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//FinalState.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//FinalState.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FinalState.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FinalState.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FinalState.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//FinalState.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//FinalState.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//FinalState.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//FinalState.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//FinalState.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//FinalState.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//FinalState.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//FinalState.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//FinalState.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//FinalState.referencedStates -> EReference : referencedStates
	if (s.referencedStates.getEReference() != null) t.addNewReference("referencedStates", s.referencedStates.getEReference());
	//FinalState.exploitedStates -> EReference : exploitedStates
	if (s.exploitedStates.getEReference() != null) t.addNewReference("exploitedStates", s.exploitedStates.getEReference());
	//FinalState.ownedAbstractStateRealizations -> EReference : ownedAbstractStateRealizations
	if (s.ownedAbstractStateRealizations.getEReference() != null) t.addNewReference("ownedAbstractStateRealizations", s.ownedAbstractStateRealizations.getEReference());
	//FinalState.realizedAbstractStates -> EReference : realizedAbstractStates
	if (s.realizedAbstractStates.getEReference() != null) t.addNewReference("realizedAbstractStates", s.realizedAbstractStates.getEReference());
	//FinalState.realizingAbstractStates -> EReference : realizingAbstractStates
	if (s.realizingAbstractStates.getEReference() != null) t.addNewReference("realizingAbstractStates", s.realizingAbstractStates.getEReference());
	//FinalState.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//FinalState.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//FinalState.involverRegions -> EReference : involverRegions
	if (s.involverRegions.getEReference() != null) t.addNewReference("involverRegions", s.involverRegions.getEReference());
	//FinalState.ownedRegions -> EReference : ownedRegions
	if (s.ownedRegions.getEReference() != null) t.addNewReference("ownedRegions", s.ownedRegions.getEReference());
	//FinalState.ownedConnectionPoints -> EReference : ownedConnectionPoints
	if (s.ownedConnectionPoints.getEReference() != null) t.addNewReference("ownedConnectionPoints", s.ownedConnectionPoints.getEReference());
	//FinalState.availableAbstractFunctions -> EReference : availableAbstractFunctions
	if (s.availableAbstractFunctions.getEReference() != null) t.addNewReference("availableAbstractFunctions", s.availableAbstractFunctions.getEReference());
	//FinalState.availableFunctionalChains -> EReference : availableFunctionalChains
	if (s.availableFunctionalChains.getEReference() != null) t.addNewReference("availableFunctionalChains", s.availableFunctionalChains.getEReference());
	//FinalState.availableAbstractCapabilities -> EReference : availableAbstractCapabilities
	if (s.availableAbstractCapabilities.getEReference() != null) t.addNewReference("availableAbstractCapabilities", s.availableAbstractCapabilities.getEReference());
	//FinalState.entry -> EReference : entry
	if (s.entry.getEReference() != null) t.addNewReference("entry", s.entry.getEReference());
	//FinalState.doActivity -> EReference : doActivity
	if (s.doActivity.getEReference() != null) t.addNewReference("doActivity", s.doActivity.getEReference());
	//FinalState.exit -> EReference : exit
	if (s.exit.getEReference() != null) t.addNewReference("exit", s.exit.getEReference());
	//FinalState.stateInvariant -> EReference : stateInvariant
	if (s.stateInvariant.getEReference() != null) t.addNewReference("stateInvariant", s.stateInvariant.getEReference());
}

@lazy
rule AbstractState
	transform s : DSL!AbstractState //capellacommon.AbstractState
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractState.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractState.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractState.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractState.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractState.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractState.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractState.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractState.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractState.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractState.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractState.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractState.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractState.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractState.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractState.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractState.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractState.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractState.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractState.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractState.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractState.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractState.referencedStates -> EReference : referencedStates
	if (s.referencedStates.getEReference() != null) t.addNewReference("referencedStates", s.referencedStates.getEReference());
	//AbstractState.exploitedStates -> EReference : exploitedStates
	if (s.exploitedStates.getEReference() != null) t.addNewReference("exploitedStates", s.exploitedStates.getEReference());
	//AbstractState.ownedAbstractStateRealizations -> EReference : ownedAbstractStateRealizations
	if (s.ownedAbstractStateRealizations.getEReference() != null) t.addNewReference("ownedAbstractStateRealizations", s.ownedAbstractStateRealizations.getEReference());
	//AbstractState.realizedAbstractStates -> EReference : realizedAbstractStates
	if (s.realizedAbstractStates.getEReference() != null) t.addNewReference("realizedAbstractStates", s.realizedAbstractStates.getEReference());
	//AbstractState.realizingAbstractStates -> EReference : realizingAbstractStates
	if (s.realizingAbstractStates.getEReference() != null) t.addNewReference("realizingAbstractStates", s.realizingAbstractStates.getEReference());
	//AbstractState.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//AbstractState.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//AbstractState.involverRegions -> EReference : involverRegions
	if (s.involverRegions.getEReference() != null) t.addNewReference("involverRegions", s.involverRegions.getEReference());
}

@lazy
rule StateTransition
	transform s : DSL!StateTransition //capellacommon.StateTransition
	to t : SysMLine!ItemUsage
	extends Base{
	//StateTransition.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//StateTransition.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//StateTransition.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//StateTransition.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//StateTransition.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//StateTransition.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//StateTransition.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//StateTransition.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//StateTransition.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//StateTransition.triggerDescription -> EAttribute : triggerDescription
	if (s.triggerDescription.getEAttribute() != null) t.addNewAttribute("triggerDescription", s.triggerDescription.getEAttribute());
	//StateTransition.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//StateTransition.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//StateTransition.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//StateTransition.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//StateTransition.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//StateTransition.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//StateTransition.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//StateTransition.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//StateTransition.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//StateTransition.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//StateTransition.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//StateTransition.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//StateTransition.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//StateTransition.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//StateTransition.guard -> EReference : guard_
	if (s.`guard`.getEReference() != null) t.addNewReference("guard_", s.`guard`.getEReference());
	//StateTransition.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//StateTransition.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//StateTransition.effect -> EReference : effect
	if (s.effect.getEReference() != null) t.addNewReference("effect", s.effect.getEReference());
	//StateTransition.triggers -> EReference : triggers
	if (s.triggers.getEReference() != null) t.addNewReference("triggers", s.triggers.getEReference());
	//StateTransition.ownedStateTransitionRealizations -> EReference : ownedStateTransitionRealizations
	if (s.ownedStateTransitionRealizations.getEReference() != null) t.addNewReference("ownedStateTransitionRealizations", s.ownedStateTransitionRealizations.getEReference());
	//StateTransition.realizedStateTransitions -> EReference : realizedStateTransitions
	if (s.realizedStateTransitions.getEReference() != null) t.addNewReference("realizedStateTransitions", s.realizedStateTransitions.getEReference());
	//StateTransition.realizingStateTransitions -> EReference : realizingStateTransitions
	if (s.realizingStateTransitions.getEReference() != null) t.addNewReference("realizingStateTransitions", s.realizingStateTransitions.getEReference());
}

@lazy
rule Pseudostate
	transform s : DSL!Pseudostate //capellacommon.Pseudostate
	to t : SysMLine!ItemUsage
	extends Base{
	//Pseudostate.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Pseudostate.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Pseudostate.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Pseudostate.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Pseudostate.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Pseudostate.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Pseudostate.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Pseudostate.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Pseudostate.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Pseudostate.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Pseudostate.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Pseudostate.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Pseudostate.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Pseudostate.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Pseudostate.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Pseudostate.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Pseudostate.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Pseudostate.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Pseudostate.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Pseudostate.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Pseudostate.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Pseudostate.referencedStates -> EReference : referencedStates
	if (s.referencedStates.getEReference() != null) t.addNewReference("referencedStates", s.referencedStates.getEReference());
	//Pseudostate.exploitedStates -> EReference : exploitedStates
	if (s.exploitedStates.getEReference() != null) t.addNewReference("exploitedStates", s.exploitedStates.getEReference());
	//Pseudostate.ownedAbstractStateRealizations -> EReference : ownedAbstractStateRealizations
	if (s.ownedAbstractStateRealizations.getEReference() != null) t.addNewReference("ownedAbstractStateRealizations", s.ownedAbstractStateRealizations.getEReference());
	//Pseudostate.realizedAbstractStates -> EReference : realizedAbstractStates
	if (s.realizedAbstractStates.getEReference() != null) t.addNewReference("realizedAbstractStates", s.realizedAbstractStates.getEReference());
	//Pseudostate.realizingAbstractStates -> EReference : realizingAbstractStates
	if (s.realizingAbstractStates.getEReference() != null) t.addNewReference("realizingAbstractStates", s.realizingAbstractStates.getEReference());
	//Pseudostate.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//Pseudostate.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//Pseudostate.involverRegions -> EReference : involverRegions
	if (s.involverRegions.getEReference() != null) t.addNewReference("involverRegions", s.involverRegions.getEReference());
}

@lazy
rule InitialPseudoState
	transform s : DSL!InitialPseudoState //capellacommon.InitialPseudoState
	to t : SysMLine!ItemUsage
	extends Base{
	//InitialPseudoState.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InitialPseudoState.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InitialPseudoState.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//InitialPseudoState.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//InitialPseudoState.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//InitialPseudoState.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//InitialPseudoState.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//InitialPseudoState.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//InitialPseudoState.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InitialPseudoState.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InitialPseudoState.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InitialPseudoState.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InitialPseudoState.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//InitialPseudoState.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//InitialPseudoState.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//InitialPseudoState.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//InitialPseudoState.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//InitialPseudoState.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//InitialPseudoState.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//InitialPseudoState.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//InitialPseudoState.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//InitialPseudoState.referencedStates -> EReference : referencedStates
	if (s.referencedStates.getEReference() != null) t.addNewReference("referencedStates", s.referencedStates.getEReference());
	//InitialPseudoState.exploitedStates -> EReference : exploitedStates
	if (s.exploitedStates.getEReference() != null) t.addNewReference("exploitedStates", s.exploitedStates.getEReference());
	//InitialPseudoState.ownedAbstractStateRealizations -> EReference : ownedAbstractStateRealizations
	if (s.ownedAbstractStateRealizations.getEReference() != null) t.addNewReference("ownedAbstractStateRealizations", s.ownedAbstractStateRealizations.getEReference());
	//InitialPseudoState.realizedAbstractStates -> EReference : realizedAbstractStates
	if (s.realizedAbstractStates.getEReference() != null) t.addNewReference("realizedAbstractStates", s.realizedAbstractStates.getEReference());
	//InitialPseudoState.realizingAbstractStates -> EReference : realizingAbstractStates
	if (s.realizingAbstractStates.getEReference() != null) t.addNewReference("realizingAbstractStates", s.realizingAbstractStates.getEReference());
	//InitialPseudoState.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//InitialPseudoState.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//InitialPseudoState.involverRegions -> EReference : involverRegions
	if (s.involverRegions.getEReference() != null) t.addNewReference("involverRegions", s.involverRegions.getEReference());
}

@lazy
rule JoinPseudoState
	transform s : DSL!JoinPseudoState //capellacommon.JoinPseudoState
	to t : SysMLine!ItemUsage
	extends Base{
	//JoinPseudoState.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//JoinPseudoState.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//JoinPseudoState.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//JoinPseudoState.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//JoinPseudoState.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//JoinPseudoState.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//JoinPseudoState.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//JoinPseudoState.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//JoinPseudoState.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//JoinPseudoState.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//JoinPseudoState.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//JoinPseudoState.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//JoinPseudoState.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//JoinPseudoState.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//JoinPseudoState.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//JoinPseudoState.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//JoinPseudoState.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//JoinPseudoState.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//JoinPseudoState.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//JoinPseudoState.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//JoinPseudoState.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//JoinPseudoState.referencedStates -> EReference : referencedStates
	if (s.referencedStates.getEReference() != null) t.addNewReference("referencedStates", s.referencedStates.getEReference());
	//JoinPseudoState.exploitedStates -> EReference : exploitedStates
	if (s.exploitedStates.getEReference() != null) t.addNewReference("exploitedStates", s.exploitedStates.getEReference());
	//JoinPseudoState.ownedAbstractStateRealizations -> EReference : ownedAbstractStateRealizations
	if (s.ownedAbstractStateRealizations.getEReference() != null) t.addNewReference("ownedAbstractStateRealizations", s.ownedAbstractStateRealizations.getEReference());
	//JoinPseudoState.realizedAbstractStates -> EReference : realizedAbstractStates
	if (s.realizedAbstractStates.getEReference() != null) t.addNewReference("realizedAbstractStates", s.realizedAbstractStates.getEReference());
	//JoinPseudoState.realizingAbstractStates -> EReference : realizingAbstractStates
	if (s.realizingAbstractStates.getEReference() != null) t.addNewReference("realizingAbstractStates", s.realizingAbstractStates.getEReference());
	//JoinPseudoState.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//JoinPseudoState.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//JoinPseudoState.involverRegions -> EReference : involverRegions
	if (s.involverRegions.getEReference() != null) t.addNewReference("involverRegions", s.involverRegions.getEReference());
}

@lazy
rule ForkPseudoState
	transform s : DSL!ForkPseudoState //capellacommon.ForkPseudoState
	to t : SysMLine!ItemUsage
	extends Base{
	//ForkPseudoState.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ForkPseudoState.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ForkPseudoState.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ForkPseudoState.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ForkPseudoState.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ForkPseudoState.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ForkPseudoState.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ForkPseudoState.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ForkPseudoState.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ForkPseudoState.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ForkPseudoState.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ForkPseudoState.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ForkPseudoState.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ForkPseudoState.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ForkPseudoState.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ForkPseudoState.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ForkPseudoState.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ForkPseudoState.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ForkPseudoState.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ForkPseudoState.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ForkPseudoState.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ForkPseudoState.referencedStates -> EReference : referencedStates
	if (s.referencedStates.getEReference() != null) t.addNewReference("referencedStates", s.referencedStates.getEReference());
	//ForkPseudoState.exploitedStates -> EReference : exploitedStates
	if (s.exploitedStates.getEReference() != null) t.addNewReference("exploitedStates", s.exploitedStates.getEReference());
	//ForkPseudoState.ownedAbstractStateRealizations -> EReference : ownedAbstractStateRealizations
	if (s.ownedAbstractStateRealizations.getEReference() != null) t.addNewReference("ownedAbstractStateRealizations", s.ownedAbstractStateRealizations.getEReference());
	//ForkPseudoState.realizedAbstractStates -> EReference : realizedAbstractStates
	if (s.realizedAbstractStates.getEReference() != null) t.addNewReference("realizedAbstractStates", s.realizedAbstractStates.getEReference());
	//ForkPseudoState.realizingAbstractStates -> EReference : realizingAbstractStates
	if (s.realizingAbstractStates.getEReference() != null) t.addNewReference("realizingAbstractStates", s.realizingAbstractStates.getEReference());
	//ForkPseudoState.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//ForkPseudoState.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//ForkPseudoState.involverRegions -> EReference : involverRegions
	if (s.involverRegions.getEReference() != null) t.addNewReference("involverRegions", s.involverRegions.getEReference());
}

@lazy
rule ChoicePseudoState
	transform s : DSL!ChoicePseudoState //capellacommon.ChoicePseudoState
	to t : SysMLine!ItemUsage
	extends Base{
	//ChoicePseudoState.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ChoicePseudoState.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ChoicePseudoState.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ChoicePseudoState.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ChoicePseudoState.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ChoicePseudoState.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ChoicePseudoState.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ChoicePseudoState.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ChoicePseudoState.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ChoicePseudoState.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ChoicePseudoState.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ChoicePseudoState.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ChoicePseudoState.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ChoicePseudoState.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ChoicePseudoState.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ChoicePseudoState.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ChoicePseudoState.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ChoicePseudoState.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ChoicePseudoState.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ChoicePseudoState.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ChoicePseudoState.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ChoicePseudoState.referencedStates -> EReference : referencedStates
	if (s.referencedStates.getEReference() != null) t.addNewReference("referencedStates", s.referencedStates.getEReference());
	//ChoicePseudoState.exploitedStates -> EReference : exploitedStates
	if (s.exploitedStates.getEReference() != null) t.addNewReference("exploitedStates", s.exploitedStates.getEReference());
	//ChoicePseudoState.ownedAbstractStateRealizations -> EReference : ownedAbstractStateRealizations
	if (s.ownedAbstractStateRealizations.getEReference() != null) t.addNewReference("ownedAbstractStateRealizations", s.ownedAbstractStateRealizations.getEReference());
	//ChoicePseudoState.realizedAbstractStates -> EReference : realizedAbstractStates
	if (s.realizedAbstractStates.getEReference() != null) t.addNewReference("realizedAbstractStates", s.realizedAbstractStates.getEReference());
	//ChoicePseudoState.realizingAbstractStates -> EReference : realizingAbstractStates
	if (s.realizingAbstractStates.getEReference() != null) t.addNewReference("realizingAbstractStates", s.realizingAbstractStates.getEReference());
	//ChoicePseudoState.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//ChoicePseudoState.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//ChoicePseudoState.involverRegions -> EReference : involverRegions
	if (s.involverRegions.getEReference() != null) t.addNewReference("involverRegions", s.involverRegions.getEReference());
}

@lazy
rule TerminatePseudoState
	transform s : DSL!TerminatePseudoState //capellacommon.TerminatePseudoState
	to t : SysMLine!ItemUsage
	extends Base{
	//TerminatePseudoState.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//TerminatePseudoState.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//TerminatePseudoState.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//TerminatePseudoState.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//TerminatePseudoState.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//TerminatePseudoState.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//TerminatePseudoState.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//TerminatePseudoState.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//TerminatePseudoState.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//TerminatePseudoState.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//TerminatePseudoState.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//TerminatePseudoState.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//TerminatePseudoState.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//TerminatePseudoState.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//TerminatePseudoState.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//TerminatePseudoState.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//TerminatePseudoState.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//TerminatePseudoState.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//TerminatePseudoState.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//TerminatePseudoState.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//TerminatePseudoState.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//TerminatePseudoState.referencedStates -> EReference : referencedStates
	if (s.referencedStates.getEReference() != null) t.addNewReference("referencedStates", s.referencedStates.getEReference());
	//TerminatePseudoState.exploitedStates -> EReference : exploitedStates
	if (s.exploitedStates.getEReference() != null) t.addNewReference("exploitedStates", s.exploitedStates.getEReference());
	//TerminatePseudoState.ownedAbstractStateRealizations -> EReference : ownedAbstractStateRealizations
	if (s.ownedAbstractStateRealizations.getEReference() != null) t.addNewReference("ownedAbstractStateRealizations", s.ownedAbstractStateRealizations.getEReference());
	//TerminatePseudoState.realizedAbstractStates -> EReference : realizedAbstractStates
	if (s.realizedAbstractStates.getEReference() != null) t.addNewReference("realizedAbstractStates", s.realizedAbstractStates.getEReference());
	//TerminatePseudoState.realizingAbstractStates -> EReference : realizingAbstractStates
	if (s.realizingAbstractStates.getEReference() != null) t.addNewReference("realizingAbstractStates", s.realizingAbstractStates.getEReference());
	//TerminatePseudoState.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//TerminatePseudoState.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//TerminatePseudoState.involverRegions -> EReference : involverRegions
	if (s.involverRegions.getEReference() != null) t.addNewReference("involverRegions", s.involverRegions.getEReference());
}

@lazy
rule AbstractStateRealization
	transform s : DSL!AbstractStateRealization //capellacommon.AbstractStateRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractStateRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractStateRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractStateRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractStateRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractStateRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractStateRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractStateRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractStateRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractStateRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractStateRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractStateRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractStateRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//AbstractStateRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractStateRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractStateRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractStateRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractStateRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractStateRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractStateRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractStateRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractStateRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractStateRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//AbstractStateRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//AbstractStateRealization.realizedAbstractState -> EReference : realizedAbstractState
	if (s.realizedAbstractState.getEReference() != null) t.addNewReference("realizedAbstractState", s.realizedAbstractState.getEReference());
	//AbstractStateRealization.realizingAbstractState -> EReference : realizingAbstractState
	if (s.realizingAbstractState.getEReference() != null) t.addNewReference("realizingAbstractState", s.realizingAbstractState.getEReference());
}

@lazy
rule StateTransitionRealization
	transform s : DSL!StateTransitionRealization //capellacommon.StateTransitionRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//StateTransitionRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//StateTransitionRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//StateTransitionRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//StateTransitionRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//StateTransitionRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//StateTransitionRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//StateTransitionRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//StateTransitionRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//StateTransitionRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//StateTransitionRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//StateTransitionRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//StateTransitionRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//StateTransitionRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//StateTransitionRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//StateTransitionRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//StateTransitionRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//StateTransitionRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//StateTransitionRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//StateTransitionRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//StateTransitionRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//StateTransitionRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//StateTransitionRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//StateTransitionRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//StateTransitionRealization.realizedStateTransition -> EReference : realizedStateTransition
	if (s.realizedStateTransition.getEReference() != null) t.addNewReference("realizedStateTransition", s.realizedStateTransition.getEReference());
	//StateTransitionRealization.realizingStateTransition -> EReference : realizingStateTransition
	if (s.realizingStateTransition.getEReference() != null) t.addNewReference("realizingStateTransition", s.realizingStateTransition.getEReference());
}

@lazy
rule ShallowHistoryPseudoState
	transform s : DSL!ShallowHistoryPseudoState //capellacommon.ShallowHistoryPseudoState
	to t : SysMLine!ItemUsage
	extends Base{
	//ShallowHistoryPseudoState.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ShallowHistoryPseudoState.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ShallowHistoryPseudoState.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ShallowHistoryPseudoState.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ShallowHistoryPseudoState.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ShallowHistoryPseudoState.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ShallowHistoryPseudoState.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ShallowHistoryPseudoState.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ShallowHistoryPseudoState.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ShallowHistoryPseudoState.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ShallowHistoryPseudoState.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ShallowHistoryPseudoState.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ShallowHistoryPseudoState.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ShallowHistoryPseudoState.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ShallowHistoryPseudoState.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ShallowHistoryPseudoState.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ShallowHistoryPseudoState.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ShallowHistoryPseudoState.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ShallowHistoryPseudoState.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ShallowHistoryPseudoState.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ShallowHistoryPseudoState.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ShallowHistoryPseudoState.referencedStates -> EReference : referencedStates
	if (s.referencedStates.getEReference() != null) t.addNewReference("referencedStates", s.referencedStates.getEReference());
	//ShallowHistoryPseudoState.exploitedStates -> EReference : exploitedStates
	if (s.exploitedStates.getEReference() != null) t.addNewReference("exploitedStates", s.exploitedStates.getEReference());
	//ShallowHistoryPseudoState.ownedAbstractStateRealizations -> EReference : ownedAbstractStateRealizations
	if (s.ownedAbstractStateRealizations.getEReference() != null) t.addNewReference("ownedAbstractStateRealizations", s.ownedAbstractStateRealizations.getEReference());
	//ShallowHistoryPseudoState.realizedAbstractStates -> EReference : realizedAbstractStates
	if (s.realizedAbstractStates.getEReference() != null) t.addNewReference("realizedAbstractStates", s.realizedAbstractStates.getEReference());
	//ShallowHistoryPseudoState.realizingAbstractStates -> EReference : realizingAbstractStates
	if (s.realizingAbstractStates.getEReference() != null) t.addNewReference("realizingAbstractStates", s.realizingAbstractStates.getEReference());
	//ShallowHistoryPseudoState.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//ShallowHistoryPseudoState.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//ShallowHistoryPseudoState.involverRegions -> EReference : involverRegions
	if (s.involverRegions.getEReference() != null) t.addNewReference("involverRegions", s.involverRegions.getEReference());
}

@lazy
rule DeepHistoryPseudoState
	transform s : DSL!DeepHistoryPseudoState //capellacommon.DeepHistoryPseudoState
	to t : SysMLine!ItemUsage
	extends Base{
	//DeepHistoryPseudoState.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//DeepHistoryPseudoState.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//DeepHistoryPseudoState.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//DeepHistoryPseudoState.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//DeepHistoryPseudoState.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//DeepHistoryPseudoState.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//DeepHistoryPseudoState.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//DeepHistoryPseudoState.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//DeepHistoryPseudoState.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//DeepHistoryPseudoState.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//DeepHistoryPseudoState.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//DeepHistoryPseudoState.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//DeepHistoryPseudoState.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//DeepHistoryPseudoState.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//DeepHistoryPseudoState.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//DeepHistoryPseudoState.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//DeepHistoryPseudoState.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//DeepHistoryPseudoState.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//DeepHistoryPseudoState.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//DeepHistoryPseudoState.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//DeepHistoryPseudoState.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//DeepHistoryPseudoState.referencedStates -> EReference : referencedStates
	if (s.referencedStates.getEReference() != null) t.addNewReference("referencedStates", s.referencedStates.getEReference());
	//DeepHistoryPseudoState.exploitedStates -> EReference : exploitedStates
	if (s.exploitedStates.getEReference() != null) t.addNewReference("exploitedStates", s.exploitedStates.getEReference());
	//DeepHistoryPseudoState.ownedAbstractStateRealizations -> EReference : ownedAbstractStateRealizations
	if (s.ownedAbstractStateRealizations.getEReference() != null) t.addNewReference("ownedAbstractStateRealizations", s.ownedAbstractStateRealizations.getEReference());
	//DeepHistoryPseudoState.realizedAbstractStates -> EReference : realizedAbstractStates
	if (s.realizedAbstractStates.getEReference() != null) t.addNewReference("realizedAbstractStates", s.realizedAbstractStates.getEReference());
	//DeepHistoryPseudoState.realizingAbstractStates -> EReference : realizingAbstractStates
	if (s.realizingAbstractStates.getEReference() != null) t.addNewReference("realizingAbstractStates", s.realizingAbstractStates.getEReference());
	//DeepHistoryPseudoState.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//DeepHistoryPseudoState.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//DeepHistoryPseudoState.involverRegions -> EReference : involverRegions
	if (s.involverRegions.getEReference() != null) t.addNewReference("involverRegions", s.involverRegions.getEReference());
}

@lazy
rule EntryPointPseudoState
	transform s : DSL!EntryPointPseudoState //capellacommon.EntryPointPseudoState
	to t : SysMLine!ItemUsage
	extends Base{
	//EntryPointPseudoState.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//EntryPointPseudoState.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//EntryPointPseudoState.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//EntryPointPseudoState.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//EntryPointPseudoState.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//EntryPointPseudoState.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//EntryPointPseudoState.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//EntryPointPseudoState.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//EntryPointPseudoState.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//EntryPointPseudoState.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//EntryPointPseudoState.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//EntryPointPseudoState.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//EntryPointPseudoState.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//EntryPointPseudoState.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//EntryPointPseudoState.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//EntryPointPseudoState.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//EntryPointPseudoState.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//EntryPointPseudoState.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//EntryPointPseudoState.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//EntryPointPseudoState.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//EntryPointPseudoState.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//EntryPointPseudoState.referencedStates -> EReference : referencedStates
	if (s.referencedStates.getEReference() != null) t.addNewReference("referencedStates", s.referencedStates.getEReference());
	//EntryPointPseudoState.exploitedStates -> EReference : exploitedStates
	if (s.exploitedStates.getEReference() != null) t.addNewReference("exploitedStates", s.exploitedStates.getEReference());
	//EntryPointPseudoState.ownedAbstractStateRealizations -> EReference : ownedAbstractStateRealizations
	if (s.ownedAbstractStateRealizations.getEReference() != null) t.addNewReference("ownedAbstractStateRealizations", s.ownedAbstractStateRealizations.getEReference());
	//EntryPointPseudoState.realizedAbstractStates -> EReference : realizedAbstractStates
	if (s.realizedAbstractStates.getEReference() != null) t.addNewReference("realizedAbstractStates", s.realizedAbstractStates.getEReference());
	//EntryPointPseudoState.realizingAbstractStates -> EReference : realizingAbstractStates
	if (s.realizingAbstractStates.getEReference() != null) t.addNewReference("realizingAbstractStates", s.realizingAbstractStates.getEReference());
	//EntryPointPseudoState.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//EntryPointPseudoState.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//EntryPointPseudoState.involverRegions -> EReference : involverRegions
	if (s.involverRegions.getEReference() != null) t.addNewReference("involverRegions", s.involverRegions.getEReference());
}

@lazy
rule ExitPointPseudoState
	transform s : DSL!ExitPointPseudoState //capellacommon.ExitPointPseudoState
	to t : SysMLine!ItemUsage
	extends Base{
	//ExitPointPseudoState.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ExitPointPseudoState.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ExitPointPseudoState.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ExitPointPseudoState.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ExitPointPseudoState.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ExitPointPseudoState.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ExitPointPseudoState.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ExitPointPseudoState.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ExitPointPseudoState.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ExitPointPseudoState.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ExitPointPseudoState.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ExitPointPseudoState.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ExitPointPseudoState.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ExitPointPseudoState.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ExitPointPseudoState.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ExitPointPseudoState.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ExitPointPseudoState.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ExitPointPseudoState.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ExitPointPseudoState.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ExitPointPseudoState.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ExitPointPseudoState.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ExitPointPseudoState.referencedStates -> EReference : referencedStates
	if (s.referencedStates.getEReference() != null) t.addNewReference("referencedStates", s.referencedStates.getEReference());
	//ExitPointPseudoState.exploitedStates -> EReference : exploitedStates
	if (s.exploitedStates.getEReference() != null) t.addNewReference("exploitedStates", s.exploitedStates.getEReference());
	//ExitPointPseudoState.ownedAbstractStateRealizations -> EReference : ownedAbstractStateRealizations
	if (s.ownedAbstractStateRealizations.getEReference() != null) t.addNewReference("ownedAbstractStateRealizations", s.ownedAbstractStateRealizations.getEReference());
	//ExitPointPseudoState.realizedAbstractStates -> EReference : realizedAbstractStates
	if (s.realizedAbstractStates.getEReference() != null) t.addNewReference("realizedAbstractStates", s.realizedAbstractStates.getEReference());
	//ExitPointPseudoState.realizingAbstractStates -> EReference : realizingAbstractStates
	if (s.realizingAbstractStates.getEReference() != null) t.addNewReference("realizingAbstractStates", s.realizingAbstractStates.getEReference());
	//ExitPointPseudoState.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//ExitPointPseudoState.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//ExitPointPseudoState.involverRegions -> EReference : involverRegions
	if (s.involverRegions.getEReference() != null) t.addNewReference("involverRegions", s.involverRegions.getEReference());
}

@lazy
rule StateEventRealization
	transform s : DSL!StateEventRealization //capellacommon.StateEventRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//StateEventRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//StateEventRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//StateEventRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//StateEventRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//StateEventRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//StateEventRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//StateEventRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//StateEventRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//StateEventRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//StateEventRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//StateEventRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//StateEventRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//StateEventRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//StateEventRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//StateEventRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//StateEventRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//StateEventRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//StateEventRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//StateEventRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//StateEventRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//StateEventRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//StateEventRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//StateEventRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//StateEventRealization.realizedEvent -> EReference : realizedEvent
	if (s.realizedEvent.getEReference() != null) t.addNewReference("realizedEvent", s.realizedEvent.getEReference());
	//StateEventRealization.realizingEvent -> EReference : realizingEvent
	if (s.realizingEvent.getEReference() != null) t.addNewReference("realizingEvent", s.realizingEvent.getEReference());
}

@lazy
rule StateEvent
	transform s : DSL!StateEvent //capellacommon.StateEvent
	to t : SysMLine!ItemUsage
	extends Base{
	//StateEvent.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//StateEvent.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//StateEvent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//StateEvent.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//StateEvent.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//StateEvent.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//StateEvent.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//StateEvent.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//StateEvent.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//StateEvent.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//StateEvent.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//StateEvent.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//StateEvent.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//StateEvent.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//StateEvent.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//StateEvent.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//StateEvent.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//StateEvent.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//StateEvent.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//StateEvent.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//StateEvent.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//StateEvent.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//StateEvent.expression -> EReference : expression
	if (s.expression.getEReference() != null) t.addNewReference("expression", s.expression.getEReference());
	//StateEvent.ownedStateEventRealizations -> EReference : ownedStateEventRealizations
	if (s.ownedStateEventRealizations.getEReference() != null) t.addNewReference("ownedStateEventRealizations", s.ownedStateEventRealizations.getEReference());
}

@lazy
rule ChangeEvent
	transform s : DSL!ChangeEvent //capellacommon.ChangeEvent
	to t : SysMLine!ItemUsage
	extends Base{
	//ChangeEvent.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ChangeEvent.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ChangeEvent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ChangeEvent.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ChangeEvent.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ChangeEvent.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ChangeEvent.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ChangeEvent.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ChangeEvent.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//ChangeEvent.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ChangeEvent.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ChangeEvent.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ChangeEvent.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ChangeEvent.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ChangeEvent.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ChangeEvent.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ChangeEvent.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ChangeEvent.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ChangeEvent.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ChangeEvent.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ChangeEvent.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ChangeEvent.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ChangeEvent.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//ChangeEvent.expression -> EReference : expression
	if (s.expression.getEReference() != null) t.addNewReference("expression", s.expression.getEReference());
	//ChangeEvent.ownedStateEventRealizations -> EReference : ownedStateEventRealizations
	if (s.ownedStateEventRealizations.getEReference() != null) t.addNewReference("ownedStateEventRealizations", s.ownedStateEventRealizations.getEReference());
}

@lazy
rule TimeEvent
	transform s : DSL!TimeEvent //capellacommon.TimeEvent
	to t : SysMLine!ItemUsage
	extends Base{
	//TimeEvent.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//TimeEvent.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//TimeEvent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//TimeEvent.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//TimeEvent.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//TimeEvent.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//TimeEvent.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//TimeEvent.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//TimeEvent.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//TimeEvent.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//TimeEvent.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//TimeEvent.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//TimeEvent.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//TimeEvent.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//TimeEvent.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//TimeEvent.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//TimeEvent.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//TimeEvent.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//TimeEvent.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//TimeEvent.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//TimeEvent.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//TimeEvent.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//TimeEvent.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//TimeEvent.expression -> EReference : expression
	if (s.expression.getEReference() != null) t.addNewReference("expression", s.expression.getEReference());
	//TimeEvent.ownedStateEventRealizations -> EReference : ownedStateEventRealizations
	if (s.ownedStateEventRealizations.getEReference() != null) t.addNewReference("ownedStateEventRealizations", s.ownedStateEventRealizations.getEReference());
}


// fa.ecore
@lazy
rule AbstractFunctionalArchitecture
	transform s : DSL!AbstractFunctionalArchitecture //fa.AbstractFunctionalArchitecture
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractFunctionalArchitecture.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractFunctionalArchitecture.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractFunctionalArchitecture.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractFunctionalArchitecture.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractFunctionalArchitecture.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractFunctionalArchitecture.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractFunctionalArchitecture.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractFunctionalArchitecture.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractFunctionalArchitecture.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractFunctionalArchitecture.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractFunctionalArchitecture.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractFunctionalArchitecture.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractFunctionalArchitecture.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractFunctionalArchitecture.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractFunctionalArchitecture.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractFunctionalArchitecture.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractFunctionalArchitecture.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractFunctionalArchitecture.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractFunctionalArchitecture.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractFunctionalArchitecture.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractFunctionalArchitecture.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractFunctionalArchitecture.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//AbstractFunctionalArchitecture.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//AbstractFunctionalArchitecture.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//AbstractFunctionalArchitecture.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//AbstractFunctionalArchitecture.ownedFunctionPkg -> EReference : ownedFunctionPkg
	if (s.ownedFunctionPkg.getEReference() != null) t.addNewReference("ownedFunctionPkg", s.ownedFunctionPkg.getEReference());
	//AbstractFunctionalArchitecture.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//AbstractFunctionalArchitecture.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//AbstractFunctionalArchitecture.ownedFunctionalLinks -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//AbstractFunctionalArchitecture.ownedFunctionalAllocations -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//AbstractFunctionalArchitecture.ownedComponentExchangeRealizations -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
}

@lazy
rule AbstractFunctionalBlock
	transform s : DSL!AbstractFunctionalBlock //fa.AbstractFunctionalBlock
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractFunctionalBlock.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractFunctionalBlock.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractFunctionalBlock.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractFunctionalBlock.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractFunctionalBlock.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractFunctionalBlock.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractFunctionalBlock.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractFunctionalBlock.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractFunctionalBlock.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractFunctionalBlock.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractFunctionalBlock.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractFunctionalBlock.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractFunctionalBlock.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//AbstractFunctionalBlock.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractFunctionalBlock.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractFunctionalBlock.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractFunctionalBlock.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractFunctionalBlock.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractFunctionalBlock.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractFunctionalBlock.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractFunctionalBlock.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractFunctionalBlock.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractFunctionalBlock.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//AbstractFunctionalBlock.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//AbstractFunctionalBlock.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//AbstractFunctionalBlock.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//AbstractFunctionalBlock.ownedFunctionalAllocation -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null) t.addNewReference("ownedFunctionalAllocation", s.ownedFunctionalAllocation.getEReference());
	//AbstractFunctionalBlock.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//AbstractFunctionalBlock.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//AbstractFunctionalBlock.functionalAllocations -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null) t.addNewReference("functionalAllocations", s.functionalAllocations.getEReference());
	//AbstractFunctionalBlock.allocatedFunctions -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null) t.addNewReference("allocatedFunctions", s.allocatedFunctions.getEReference());
	//AbstractFunctionalBlock.inExchangeLinks -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//AbstractFunctionalBlock.outExchangeLinks -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
}

@lazy
rule FunctionPkg
	transform s : DSL!FunctionPkg //fa.FunctionPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//FunctionPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FunctionPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FunctionPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//FunctionPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//FunctionPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//FunctionPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//FunctionPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//FunctionPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//FunctionPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FunctionPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FunctionPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FunctionPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//FunctionPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//FunctionPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//FunctionPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//FunctionPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//FunctionPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//FunctionPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//FunctionPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//FunctionPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//FunctionPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//FunctionPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//FunctionPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//FunctionPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//FunctionPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//FunctionPkg.ownedFunctionalLinks -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//FunctionPkg.ownedExchanges -> EReference : ownedExchanges
	if (s.ownedExchanges.getEReference() != null) t.addNewReference("ownedExchanges", s.ownedExchanges.getEReference());
	//FunctionPkg.ownedExchangeSpecificationRealizations -> EReference : ownedExchangeSpecificationRealizations
	if (s.ownedExchangeSpecificationRealizations.getEReference() != null) t.addNewReference("ownedExchangeSpecificationRealizations", s.ownedExchangeSpecificationRealizations.getEReference());
	//FunctionPkg.ownedCategories -> EReference : ownedCategories
	if (s.ownedCategories.getEReference() != null) t.addNewReference("ownedCategories", s.ownedCategories.getEReference());
	//FunctionPkg.ownedFunctionSpecifications -> EReference : ownedFunctionSpecifications
	if (s.ownedFunctionSpecifications.getEReference() != null) t.addNewReference("ownedFunctionSpecifications", s.ownedFunctionSpecifications.getEReference());
}

@lazy
rule FunctionSpecification
	transform s : DSL!FunctionSpecification //fa.FunctionSpecification
	to t : SysMLine!ItemUsage
	extends Base{
	//FunctionSpecification.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FunctionSpecification.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FunctionSpecification.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//FunctionSpecification.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//FunctionSpecification.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//FunctionSpecification.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//FunctionSpecification.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//FunctionSpecification.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//FunctionSpecification.isControlOperator -> EAttribute : isControlOperator
	if (s.isControlOperator.getEAttribute() != null) t.addNewAttribute("isControlOperator", s.isControlOperator.getEAttribute());
	//FunctionSpecification.isReadOnly -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null) t.addNewAttribute("isReadOnly", s.isReadOnly.getEAttribute());
	//FunctionSpecification.isSingleExecution -> EAttribute : isSingleExecution
	if (s.isSingleExecution.getEAttribute() != null) t.addNewAttribute("isSingleExecution", s.isSingleExecution.getEAttribute());
	//FunctionSpecification.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FunctionSpecification.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FunctionSpecification.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FunctionSpecification.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//FunctionSpecification.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//FunctionSpecification.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//FunctionSpecification.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//FunctionSpecification.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//FunctionSpecification.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//FunctionSpecification.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//FunctionSpecification.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//FunctionSpecification.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//FunctionSpecification.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//FunctionSpecification.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//FunctionSpecification.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//FunctionSpecification.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//FunctionSpecification.ownedParameterSet -> EReference : ownedParameterSet
	if (s.ownedParameterSet.getEReference() != null) t.addNewReference("ownedParameterSet", s.ownedParameterSet.getEReference());
	//FunctionSpecification.ownedParameter -> EReference : ownedParameter
	if (s.ownedParameter.getEReference() != null) t.addNewReference("ownedParameter", s.ownedParameter.getEReference());
	//FunctionSpecification.ownedNodes -> EReference : ownedNodes
	if (s.ownedNodes.getEReference() != null) t.addNewReference("ownedNodes", s.ownedNodes.getEReference());
	//FunctionSpecification.ownedEdges -> EReference : ownedEdges
	if (s.ownedEdges.getEReference() != null) t.addNewReference("ownedEdges", s.ownedEdges.getEReference());
	//FunctionSpecification.ownedGroups -> EReference : ownedGroups
	if (s.ownedGroups.getEReference() != null) t.addNewReference("ownedGroups", s.ownedGroups.getEReference());
	//FunctionSpecification.ownedStructuredNodes -> EReference : ownedStructuredNodes
	if (s.ownedStructuredNodes.getEReference() != null) t.addNewReference("ownedStructuredNodes", s.ownedStructuredNodes.getEReference());
	//FunctionSpecification.inExchangeLinks -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//FunctionSpecification.outExchangeLinks -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
	//FunctionSpecification.ownedFunctionPorts -> EReference : ownedFunctionPorts
	if (s.ownedFunctionPorts.getEReference() != null) t.addNewReference("ownedFunctionPorts", s.ownedFunctionPorts.getEReference());
	//FunctionSpecification.subFunctionSpecifications -> EReference : subFunctionSpecifications
	if (s.subFunctionSpecifications.getEReference() != null) t.addNewReference("subFunctionSpecifications", s.subFunctionSpecifications.getEReference());
}

@lazy
rule ExchangeCategory
	transform s : DSL!ExchangeCategory //fa.ExchangeCategory
	to t : SysMLine!ItemUsage
	extends Base{
	//ExchangeCategory.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ExchangeCategory.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ExchangeCategory.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ExchangeCategory.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ExchangeCategory.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ExchangeCategory.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ExchangeCategory.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ExchangeCategory.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ExchangeCategory.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ExchangeCategory.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ExchangeCategory.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ExchangeCategory.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ExchangeCategory.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ExchangeCategory.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ExchangeCategory.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ExchangeCategory.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ExchangeCategory.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ExchangeCategory.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ExchangeCategory.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ExchangeCategory.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ExchangeCategory.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ExchangeCategory.exchanges -> EReference : exchanges
	if (s.exchanges.getEReference() != null) t.addNewReference("exchanges", s.exchanges.getEReference());
}

@lazy
rule ExchangeLink
	transform s : DSL!ExchangeLink //fa.ExchangeLink
	to t : SysMLine!ItemUsage
	extends Base{
	//ExchangeLink.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ExchangeLink.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ExchangeLink.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ExchangeLink.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ExchangeLink.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ExchangeLink.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ExchangeLink.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ExchangeLink.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ExchangeLink.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ExchangeLink.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ExchangeLink.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ExchangeLink.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ExchangeLink.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ExchangeLink.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ExchangeLink.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ExchangeLink.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ExchangeLink.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ExchangeLink.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ExchangeLink.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ExchangeLink.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ExchangeLink.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ExchangeLink.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ExchangeLink.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//ExchangeLink.exchanges -> EReference : exchanges
	if (s.exchanges.getEReference() != null) t.addNewReference("exchanges", s.exchanges.getEReference());
	//ExchangeLink.exchangeContainmentLinks -> EReference : exchangeContainmentLinks
	if (s.exchangeContainmentLinks.getEReference() != null) t.addNewReference("exchangeContainmentLinks", s.exchangeContainmentLinks.getEReference());
	//ExchangeLink.ownedExchangeContainments -> EReference : ownedExchangeContainments
	if (s.ownedExchangeContainments.getEReference() != null) t.addNewReference("ownedExchangeContainments", s.ownedExchangeContainments.getEReference());
	//ExchangeLink.sources -> EReference : sources
	if (s.sources.getEReference() != null) t.addNewReference("sources", s.sources.getEReference());
	//ExchangeLink.destinations -> EReference : destinations
	if (s.destinations.getEReference() != null) t.addNewReference("destinations", s.destinations.getEReference());
}

@lazy
rule ExchangeContainment
	transform s : DSL!ExchangeContainment //fa.ExchangeContainment
	to t : SysMLine!ItemUsage
	extends Base{
	//ExchangeContainment.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ExchangeContainment.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ExchangeContainment.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ExchangeContainment.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ExchangeContainment.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ExchangeContainment.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ExchangeContainment.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ExchangeContainment.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ExchangeContainment.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ExchangeContainment.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ExchangeContainment.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ExchangeContainment.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ExchangeContainment.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ExchangeContainment.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ExchangeContainment.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ExchangeContainment.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ExchangeContainment.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ExchangeContainment.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ExchangeContainment.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ExchangeContainment.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ExchangeContainment.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ExchangeContainment.exchange -> EReference : exchange
	if (s.exchange.getEReference() != null) t.addNewReference("exchange", s.exchange.getEReference());
	//ExchangeContainment.link -> EReference : link
	if (s.link.getEReference() != null) t.addNewReference("link", s.link.getEReference());
}

@lazy
rule ExchangeSpecification
	transform s : DSL!ExchangeSpecification //fa.ExchangeSpecification
	to t : SysMLine!ItemUsage
	extends Base{
	//ExchangeSpecification.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ExchangeSpecification.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ExchangeSpecification.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ExchangeSpecification.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ExchangeSpecification.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ExchangeSpecification.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ExchangeSpecification.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ExchangeSpecification.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ExchangeSpecification.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ExchangeSpecification.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ExchangeSpecification.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ExchangeSpecification.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ExchangeSpecification.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ExchangeSpecification.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ExchangeSpecification.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ExchangeSpecification.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ExchangeSpecification.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ExchangeSpecification.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ExchangeSpecification.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ExchangeSpecification.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ExchangeSpecification.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ExchangeSpecification.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ExchangeSpecification.realizations -> EReference : realizations
	if (s.realizations.getEReference() != null) t.addNewReference("realizations", s.realizations.getEReference());
	//ExchangeSpecification.convoyedInformations -> EReference : convoyedInformations
	if (s.convoyedInformations.getEReference() != null) t.addNewReference("convoyedInformations", s.convoyedInformations.getEReference());
	//ExchangeSpecification.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//ExchangeSpecification.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//ExchangeSpecification.realizingActivityFlows -> EReference : realizingActivityFlows
	if (s.realizingActivityFlows.getEReference() != null) t.addNewReference("realizingActivityFlows", s.realizingActivityFlows.getEReference());
	//ExchangeSpecification.containingLink -> EReference : containingLink
	if (s.containingLink.getEReference() != null) t.addNewReference("containingLink", s.containingLink.getEReference());
	//ExchangeSpecification.link -> EReference : link
	if (s.link.getEReference() != null) t.addNewReference("link", s.link.getEReference());
	//ExchangeSpecification.outgoingExchangeSpecificationRealizations -> EReference : outgoingExchangeSpecificationRealizations
	if (s.outgoingExchangeSpecificationRealizations.getEReference() != null) t.addNewReference("outgoingExchangeSpecificationRealizations", s.outgoingExchangeSpecificationRealizations.getEReference());
	//ExchangeSpecification.incomingExchangeSpecificationRealizations -> EReference : incomingExchangeSpecificationRealizations
	if (s.incomingExchangeSpecificationRealizations.getEReference() != null) t.addNewReference("incomingExchangeSpecificationRealizations", s.incomingExchangeSpecificationRealizations.getEReference());
}

@lazy
rule FunctionalExchangeSpecification
	transform s : DSL!FunctionalExchangeSpecification //fa.FunctionalExchangeSpecification
	to t : SysMLine!ItemUsage
	extends Base{
	//FunctionalExchangeSpecification.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FunctionalExchangeSpecification.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FunctionalExchangeSpecification.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//FunctionalExchangeSpecification.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//FunctionalExchangeSpecification.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//FunctionalExchangeSpecification.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//FunctionalExchangeSpecification.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//FunctionalExchangeSpecification.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//FunctionalExchangeSpecification.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FunctionalExchangeSpecification.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FunctionalExchangeSpecification.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FunctionalExchangeSpecification.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//FunctionalExchangeSpecification.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//FunctionalExchangeSpecification.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//FunctionalExchangeSpecification.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//FunctionalExchangeSpecification.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//FunctionalExchangeSpecification.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//FunctionalExchangeSpecification.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//FunctionalExchangeSpecification.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//FunctionalExchangeSpecification.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//FunctionalExchangeSpecification.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//FunctionalExchangeSpecification.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//FunctionalExchangeSpecification.realizations -> EReference : realizations
	if (s.realizations.getEReference() != null) t.addNewReference("realizations", s.realizations.getEReference());
	//FunctionalExchangeSpecification.convoyedInformations -> EReference : convoyedInformations
	if (s.convoyedInformations.getEReference() != null) t.addNewReference("convoyedInformations", s.convoyedInformations.getEReference());
	//FunctionalExchangeSpecification.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//FunctionalExchangeSpecification.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//FunctionalExchangeSpecification.realizingActivityFlows -> EReference : realizingActivityFlows
	if (s.realizingActivityFlows.getEReference() != null) t.addNewReference("realizingActivityFlows", s.realizingActivityFlows.getEReference());
	//FunctionalExchangeSpecification.containingLink -> EReference : containingLink
	if (s.containingLink.getEReference() != null) t.addNewReference("containingLink", s.containingLink.getEReference());
	//FunctionalExchangeSpecification.link -> EReference : link
	if (s.link.getEReference() != null) t.addNewReference("link", s.link.getEReference());
	//FunctionalExchangeSpecification.outgoingExchangeSpecificationRealizations -> EReference : outgoingExchangeSpecificationRealizations
	if (s.outgoingExchangeSpecificationRealizations.getEReference() != null) t.addNewReference("outgoingExchangeSpecificationRealizations", s.outgoingExchangeSpecificationRealizations.getEReference());
	//FunctionalExchangeSpecification.incomingExchangeSpecificationRealizations -> EReference : incomingExchangeSpecificationRealizations
	if (s.incomingExchangeSpecificationRealizations.getEReference() != null) t.addNewReference("incomingExchangeSpecificationRealizations", s.incomingExchangeSpecificationRealizations.getEReference());
	//FunctionalExchangeSpecification.functionalExchanges -> EReference : functionalExchanges
	if (s.functionalExchanges.getEReference() != null) t.addNewReference("functionalExchanges", s.functionalExchanges.getEReference());
}

@lazy
rule FunctionalChain
	transform s : DSL!FunctionalChain //fa.FunctionalChain
	to t : SysMLine!ItemUsage
	extends Base{
	//FunctionalChain.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FunctionalChain.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FunctionalChain.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//FunctionalChain.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//FunctionalChain.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//FunctionalChain.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//FunctionalChain.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//FunctionalChain.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//FunctionalChain.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//FunctionalChain.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FunctionalChain.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FunctionalChain.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FunctionalChain.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//FunctionalChain.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//FunctionalChain.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//FunctionalChain.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//FunctionalChain.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//FunctionalChain.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//FunctionalChain.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//FunctionalChain.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//FunctionalChain.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//FunctionalChain.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//FunctionalChain.involvedInvolvements -> EReference : involvedInvolvements
	if (s.involvedInvolvements.getEReference() != null) t.addNewReference("involvedInvolvements", s.involvedInvolvements.getEReference());
	//FunctionalChain.involvingInvolvements -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//FunctionalChain.ownedFunctionalChainInvolvements -> EReference : ownedFunctionalChainInvolvements
	if (s.ownedFunctionalChainInvolvements.getEReference() != null) t.addNewReference("ownedFunctionalChainInvolvements", s.ownedFunctionalChainInvolvements.getEReference());
	//FunctionalChain.ownedFunctionalChainRealizations -> EReference : ownedFunctionalChainRealizations
	if (s.ownedFunctionalChainRealizations.getEReference() != null) t.addNewReference("ownedFunctionalChainRealizations", s.ownedFunctionalChainRealizations.getEReference());
	//FunctionalChain.involvedFunctionalChainInvolvements -> EReference : involvedFunctionalChainInvolvements
	if (s.involvedFunctionalChainInvolvements.getEReference() != null) t.addNewReference("involvedFunctionalChainInvolvements", s.involvedFunctionalChainInvolvements.getEReference());
	//FunctionalChain.involvedFunctions -> EReference : involvedFunctions
	if (s.involvedFunctions.getEReference() != null) t.addNewReference("involvedFunctions", s.involvedFunctions.getEReference());
	//FunctionalChain.involvedFunctionalExchanges -> EReference : involvedFunctionalExchanges
	if (s.involvedFunctionalExchanges.getEReference() != null) t.addNewReference("involvedFunctionalExchanges", s.involvedFunctionalExchanges.getEReference());
	//FunctionalChain.involvedElements -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null) t.addNewReference("involvedElements", s.involvedElements.getEReference());
	//FunctionalChain.enactedFunctions -> EReference : enactedFunctions
	if (s.enactedFunctions.getEReference() != null) t.addNewReference("enactedFunctions", s.enactedFunctions.getEReference());
	//FunctionalChain.enactedFunctionalBlocks -> EReference : enactedFunctionalBlocks
	if (s.enactedFunctionalBlocks.getEReference() != null) t.addNewReference("enactedFunctionalBlocks", s.enactedFunctionalBlocks.getEReference());
	//FunctionalChain.availableInStates -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null) t.addNewReference("availableInStates", s.availableInStates.getEReference());
	//FunctionalChain.firstFunctionalChainInvolvements -> EReference : firstFunctionalChainInvolvements
	if (s.firstFunctionalChainInvolvements.getEReference() != null) t.addNewReference("firstFunctionalChainInvolvements", s.firstFunctionalChainInvolvements.getEReference());
	//FunctionalChain.involvingCapabilities -> EReference : involvingCapabilities
	if (s.involvingCapabilities.getEReference() != null) t.addNewReference("involvingCapabilities", s.involvingCapabilities.getEReference());
	//FunctionalChain.involvingCapabilityRealizations -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null) t.addNewReference("involvingCapabilityRealizations", s.involvingCapabilityRealizations.getEReference());
	//FunctionalChain.realizedFunctionalChains -> EReference : realizedFunctionalChains
	if (s.realizedFunctionalChains.getEReference() != null) t.addNewReference("realizedFunctionalChains", s.realizedFunctionalChains.getEReference());
	//FunctionalChain.realizingFunctionalChains -> EReference : realizingFunctionalChains
	if (s.realizingFunctionalChains.getEReference() != null) t.addNewReference("realizingFunctionalChains", s.realizingFunctionalChains.getEReference());
	//FunctionalChain.preCondition -> EReference : preCondition
	if (s.preCondition.getEReference() != null) t.addNewReference("preCondition", s.preCondition.getEReference());
	//FunctionalChain.postCondition -> EReference : postCondition
	if (s.postCondition.getEReference() != null) t.addNewReference("postCondition", s.postCondition.getEReference());
	//FunctionalChain.ownedSequenceNodes -> EReference : ownedSequenceNodes
	if (s.ownedSequenceNodes.getEReference() != null) t.addNewReference("ownedSequenceNodes", s.ownedSequenceNodes.getEReference());
	//FunctionalChain.ownedSequenceLinks -> EReference : ownedSequenceLinks
	if (s.ownedSequenceLinks.getEReference() != null) t.addNewReference("ownedSequenceLinks", s.ownedSequenceLinks.getEReference());
}

@lazy
rule AbstractFunctionalChainContainer
	transform s : DSL!AbstractFunctionalChainContainer //fa.AbstractFunctionalChainContainer
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractFunctionalChainContainer.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractFunctionalChainContainer.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractFunctionalChainContainer.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractFunctionalChainContainer.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractFunctionalChainContainer.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractFunctionalChainContainer.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractFunctionalChainContainer.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractFunctionalChainContainer.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractFunctionalChainContainer.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractFunctionalChainContainer.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractFunctionalChainContainer.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractFunctionalChainContainer.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractFunctionalChainContainer.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractFunctionalChainContainer.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractFunctionalChainContainer.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractFunctionalChainContainer.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractFunctionalChainContainer.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractFunctionalChainContainer.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractFunctionalChainContainer.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractFunctionalChainContainer.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractFunctionalChainContainer.ownedFunctionalChains -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null) t.addNewReference("ownedFunctionalChains", s.ownedFunctionalChains.getEReference());
}

@lazy
rule FunctionalChainInvolvement
	transform s : DSL!FunctionalChainInvolvement //fa.FunctionalChainInvolvement
	to t : SysMLine!ItemUsage
	extends Base{
	//FunctionalChainInvolvement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FunctionalChainInvolvement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FunctionalChainInvolvement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//FunctionalChainInvolvement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//FunctionalChainInvolvement.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//FunctionalChainInvolvement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//FunctionalChainInvolvement.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//FunctionalChainInvolvement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FunctionalChainInvolvement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FunctionalChainInvolvement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FunctionalChainInvolvement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//FunctionalChainInvolvement.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//FunctionalChainInvolvement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//FunctionalChainInvolvement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//FunctionalChainInvolvement.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//FunctionalChainInvolvement.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//FunctionalChainInvolvement.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//FunctionalChainInvolvement.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//FunctionalChainInvolvement.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//FunctionalChainInvolvement.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//FunctionalChainInvolvement.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//FunctionalChainInvolvement.involver -> EReference : involver
	if (s.involver.getEReference() != null) t.addNewReference("involver", s.involver.getEReference());
	//FunctionalChainInvolvement.involved -> EReference : involved
	if (s.involved.getEReference() != null) t.addNewReference("involved", s.involved.getEReference());
	//FunctionalChainInvolvement.nextFunctionalChainInvolvements -> EReference : nextFunctionalChainInvolvements
	if (s.nextFunctionalChainInvolvements.getEReference() != null) t.addNewReference("nextFunctionalChainInvolvements", s.nextFunctionalChainInvolvements.getEReference());
	//FunctionalChainInvolvement.previousFunctionalChainInvolvements -> EReference : previousFunctionalChainInvolvements
	if (s.previousFunctionalChainInvolvements.getEReference() != null) t.addNewReference("previousFunctionalChainInvolvements", s.previousFunctionalChainInvolvements.getEReference());
	//FunctionalChainInvolvement.involvedElement -> EReference : involvedElement
	if (s.involvedElement.getEReference() != null) t.addNewReference("involvedElement", s.involvedElement.getEReference());
}

@lazy
rule FunctionalChainReference
	transform s : DSL!FunctionalChainReference //fa.FunctionalChainReference
	to t : SysMLine!ItemUsage
	extends Base{
	//FunctionalChainReference.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FunctionalChainReference.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FunctionalChainReference.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//FunctionalChainReference.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//FunctionalChainReference.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//FunctionalChainReference.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//FunctionalChainReference.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//FunctionalChainReference.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FunctionalChainReference.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FunctionalChainReference.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FunctionalChainReference.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//FunctionalChainReference.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//FunctionalChainReference.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//FunctionalChainReference.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//FunctionalChainReference.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//FunctionalChainReference.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//FunctionalChainReference.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//FunctionalChainReference.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//FunctionalChainReference.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//FunctionalChainReference.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//FunctionalChainReference.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//FunctionalChainReference.involver -> EReference : involver
	if (s.involver.getEReference() != null) t.addNewReference("involver", s.involver.getEReference());
	//FunctionalChainReference.involved -> EReference : involved
	if (s.involved.getEReference() != null) t.addNewReference("involved", s.involved.getEReference());
	//FunctionalChainReference.nextFunctionalChainInvolvements -> EReference : nextFunctionalChainInvolvements
	if (s.nextFunctionalChainInvolvements.getEReference() != null) t.addNewReference("nextFunctionalChainInvolvements", s.nextFunctionalChainInvolvements.getEReference());
	//FunctionalChainReference.previousFunctionalChainInvolvements -> EReference : previousFunctionalChainInvolvements
	if (s.previousFunctionalChainInvolvements.getEReference() != null) t.addNewReference("previousFunctionalChainInvolvements", s.previousFunctionalChainInvolvements.getEReference());
	//FunctionalChainReference.involvedElement -> EReference : involvedElement
	if (s.involvedElement.getEReference() != null) t.addNewReference("involvedElement", s.involvedElement.getEReference());
	//FunctionalChainReference.referencedFunctionalChain -> EReference : referencedFunctionalChain
	if (s.referencedFunctionalChain.getEReference() != null) t.addNewReference("referencedFunctionalChain", s.referencedFunctionalChain.getEReference());
}

@lazy
rule FunctionInputPort
	transform s : DSL!FunctionInputPort //fa.FunctionInputPort
	to t : SysMLine!ItemUsage
	extends Base{
	//FunctionInputPort.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FunctionInputPort.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FunctionInputPort.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//FunctionInputPort.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//FunctionInputPort.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//FunctionInputPort.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//FunctionInputPort.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//FunctionInputPort.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//FunctionInputPort.isControlType -> EAttribute : isControlType
	if (s.isControlType.getEAttribute() != null) t.addNewAttribute("isControlType", s.isControlType.getEAttribute());
	//FunctionInputPort.kindOfNode -> EAttribute : kindOfNode
	if (s.kindOfNode.getEAttribute() != null) t.addNewAttribute("kindOfNode", s.kindOfNode.getEAttribute());
	//FunctionInputPort.ordering -> EAttribute : ordering
	if (s.ordering.getEAttribute() != null) t.addNewAttribute("ordering", s.ordering.getEAttribute());
	//FunctionInputPort.isControl -> EAttribute : isControl
	if (s.isControl.getEAttribute() != null) t.addNewAttribute("isControl", s.isControl.getEAttribute());
	//FunctionInputPort.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FunctionInputPort.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FunctionInputPort.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FunctionInputPort.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//FunctionInputPort.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//FunctionInputPort.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//FunctionInputPort.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//FunctionInputPort.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//FunctionInputPort.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//FunctionInputPort.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//FunctionInputPort.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//FunctionInputPort.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//FunctionInputPort.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//FunctionInputPort.incomingPortRealizations -> EReference : incomingPortRealizations
	if (s.incomingPortRealizations.getEReference() != null) t.addNewReference("incomingPortRealizations", s.incomingPortRealizations.getEReference());
	//FunctionInputPort.outgoingPortRealizations -> EReference : outgoingPortRealizations
	if (s.outgoingPortRealizations.getEReference() != null) t.addNewReference("outgoingPortRealizations", s.outgoingPortRealizations.getEReference());
	//FunctionInputPort.ownedProtocols -> EReference : ownedProtocols
	if (s.ownedProtocols.getEReference() != null) t.addNewReference("ownedProtocols", s.ownedProtocols.getEReference());
	//FunctionInputPort.incomingPortAllocations -> EReference : incomingPortAllocations
	if (s.incomingPortAllocations.getEReference() != null) t.addNewReference("incomingPortAllocations", s.incomingPortAllocations.getEReference());
	//FunctionInputPort.outgoingPortAllocations -> EReference : outgoingPortAllocations
	if (s.outgoingPortAllocations.getEReference() != null) t.addNewReference("outgoingPortAllocations", s.outgoingPortAllocations.getEReference());
	//FunctionInputPort.providedInterfaces -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//FunctionInputPort.requiredInterfaces -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//FunctionInputPort.ownedPortRealizations -> EReference : ownedPortRealizations
	if (s.ownedPortRealizations.getEReference() != null) t.addNewReference("ownedPortRealizations", s.ownedPortRealizations.getEReference());
	//FunctionInputPort.ownedPortAllocations -> EReference : ownedPortAllocations
	if (s.ownedPortAllocations.getEReference() != null) t.addNewReference("ownedPortAllocations", s.ownedPortAllocations.getEReference());
	//FunctionInputPort.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//FunctionInputPort.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//FunctionInputPort.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//FunctionInputPort.representedComponentPort -> EReference : representedComponentPort
	if (s.representedComponentPort.getEReference() != null) t.addNewReference("representedComponentPort", s.representedComponentPort.getEReference());
	//FunctionInputPort.allocatorComponentPorts -> EReference : allocatorComponentPorts
	if (s.allocatorComponentPorts.getEReference() != null) t.addNewReference("allocatorComponentPorts", s.allocatorComponentPorts.getEReference());
	//FunctionInputPort.realizedFunctionPorts -> EReference : realizedFunctionPorts
	if (s.realizedFunctionPorts.getEReference() != null) t.addNewReference("realizedFunctionPorts", s.realizedFunctionPorts.getEReference());
	//FunctionInputPort.realizingFunctionPorts -> EReference : realizingFunctionPorts
	if (s.realizingFunctionPorts.getEReference() != null) t.addNewReference("realizingFunctionPorts", s.realizingFunctionPorts.getEReference());
	//FunctionInputPort.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//FunctionInputPort.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//FunctionInputPort.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//FunctionInputPort.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//FunctionInputPort.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//FunctionInputPort.upperBound -> EReference : upperBound
	if (s.upperBound.getEReference() != null) t.addNewReference("upperBound", s.upperBound.getEReference());
	//FunctionInputPort.inState -> EReference : inState
	if (s.inState.getEReference() != null) t.addNewReference("inState", s.inState.getEReference());
	//FunctionInputPort.selection -> EReference : selection
	if (s.selection.getEReference() != null) t.addNewReference("selection", s.selection.getEReference());
	//FunctionInputPort.inputEvaluationAction -> EReference : inputEvaluationAction
	if (s.inputEvaluationAction.getEReference() != null) t.addNewReference("inputEvaluationAction", s.inputEvaluationAction.getEReference());
	//FunctionInputPort.incomingExchangeItems -> EReference : incomingExchangeItems
	if (s.incomingExchangeItems.getEReference() != null) t.addNewReference("incomingExchangeItems", s.incomingExchangeItems.getEReference());
	//FunctionInputPort.incomingFunctionalExchanges -> EReference : incomingFunctionalExchanges
	if (s.incomingFunctionalExchanges.getEReference() != null) t.addNewReference("incomingFunctionalExchanges", s.incomingFunctionalExchanges.getEReference());
}

@lazy
rule FunctionOutputPort
	transform s : DSL!FunctionOutputPort //fa.FunctionOutputPort
	to t : SysMLine!ItemUsage
	extends Base{
	//FunctionOutputPort.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FunctionOutputPort.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FunctionOutputPort.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//FunctionOutputPort.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//FunctionOutputPort.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//FunctionOutputPort.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//FunctionOutputPort.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//FunctionOutputPort.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//FunctionOutputPort.isControlType -> EAttribute : isControlType
	if (s.isControlType.getEAttribute() != null) t.addNewAttribute("isControlType", s.isControlType.getEAttribute());
	//FunctionOutputPort.kindOfNode -> EAttribute : kindOfNode
	if (s.kindOfNode.getEAttribute() != null) t.addNewAttribute("kindOfNode", s.kindOfNode.getEAttribute());
	//FunctionOutputPort.ordering -> EAttribute : ordering
	if (s.ordering.getEAttribute() != null) t.addNewAttribute("ordering", s.ordering.getEAttribute());
	//FunctionOutputPort.isControl -> EAttribute : isControl
	if (s.isControl.getEAttribute() != null) t.addNewAttribute("isControl", s.isControl.getEAttribute());
	//FunctionOutputPort.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FunctionOutputPort.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FunctionOutputPort.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FunctionOutputPort.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//FunctionOutputPort.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//FunctionOutputPort.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//FunctionOutputPort.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//FunctionOutputPort.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//FunctionOutputPort.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//FunctionOutputPort.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//FunctionOutputPort.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//FunctionOutputPort.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//FunctionOutputPort.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//FunctionOutputPort.incomingPortRealizations -> EReference : incomingPortRealizations
	if (s.incomingPortRealizations.getEReference() != null) t.addNewReference("incomingPortRealizations", s.incomingPortRealizations.getEReference());
	//FunctionOutputPort.outgoingPortRealizations -> EReference : outgoingPortRealizations
	if (s.outgoingPortRealizations.getEReference() != null) t.addNewReference("outgoingPortRealizations", s.outgoingPortRealizations.getEReference());
	//FunctionOutputPort.ownedProtocols -> EReference : ownedProtocols
	if (s.ownedProtocols.getEReference() != null) t.addNewReference("ownedProtocols", s.ownedProtocols.getEReference());
	//FunctionOutputPort.incomingPortAllocations -> EReference : incomingPortAllocations
	if (s.incomingPortAllocations.getEReference() != null) t.addNewReference("incomingPortAllocations", s.incomingPortAllocations.getEReference());
	//FunctionOutputPort.outgoingPortAllocations -> EReference : outgoingPortAllocations
	if (s.outgoingPortAllocations.getEReference() != null) t.addNewReference("outgoingPortAllocations", s.outgoingPortAllocations.getEReference());
	//FunctionOutputPort.providedInterfaces -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//FunctionOutputPort.requiredInterfaces -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//FunctionOutputPort.ownedPortRealizations -> EReference : ownedPortRealizations
	if (s.ownedPortRealizations.getEReference() != null) t.addNewReference("ownedPortRealizations", s.ownedPortRealizations.getEReference());
	//FunctionOutputPort.ownedPortAllocations -> EReference : ownedPortAllocations
	if (s.ownedPortAllocations.getEReference() != null) t.addNewReference("ownedPortAllocations", s.ownedPortAllocations.getEReference());
	//FunctionOutputPort.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//FunctionOutputPort.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//FunctionOutputPort.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//FunctionOutputPort.representedComponentPort -> EReference : representedComponentPort
	if (s.representedComponentPort.getEReference() != null) t.addNewReference("representedComponentPort", s.representedComponentPort.getEReference());
	//FunctionOutputPort.allocatorComponentPorts -> EReference : allocatorComponentPorts
	if (s.allocatorComponentPorts.getEReference() != null) t.addNewReference("allocatorComponentPorts", s.allocatorComponentPorts.getEReference());
	//FunctionOutputPort.realizedFunctionPorts -> EReference : realizedFunctionPorts
	if (s.realizedFunctionPorts.getEReference() != null) t.addNewReference("realizedFunctionPorts", s.realizedFunctionPorts.getEReference());
	//FunctionOutputPort.realizingFunctionPorts -> EReference : realizingFunctionPorts
	if (s.realizingFunctionPorts.getEReference() != null) t.addNewReference("realizingFunctionPorts", s.realizingFunctionPorts.getEReference());
	//FunctionOutputPort.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//FunctionOutputPort.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//FunctionOutputPort.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//FunctionOutputPort.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//FunctionOutputPort.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//FunctionOutputPort.upperBound -> EReference : upperBound
	if (s.upperBound.getEReference() != null) t.addNewReference("upperBound", s.upperBound.getEReference());
	//FunctionOutputPort.inState -> EReference : inState
	if (s.inState.getEReference() != null) t.addNewReference("inState", s.inState.getEReference());
	//FunctionOutputPort.selection -> EReference : selection
	if (s.selection.getEReference() != null) t.addNewReference("selection", s.selection.getEReference());
	//FunctionOutputPort.outgoingExchangeItems -> EReference : outgoingExchangeItems
	if (s.outgoingExchangeItems.getEReference() != null) t.addNewReference("outgoingExchangeItems", s.outgoingExchangeItems.getEReference());
	//FunctionOutputPort.outgoingFunctionalExchanges -> EReference : outgoingFunctionalExchanges
	if (s.outgoingFunctionalExchanges.getEReference() != null) t.addNewReference("outgoingFunctionalExchanges", s.outgoingFunctionalExchanges.getEReference());
}

@lazy
rule AbstractFunctionAllocation
	transform s : DSL!AbstractFunctionAllocation //fa.AbstractFunctionAllocation
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractFunctionAllocation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractFunctionAllocation.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractFunctionAllocation.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractFunctionAllocation.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractFunctionAllocation.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractFunctionAllocation.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractFunctionAllocation.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractFunctionAllocation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractFunctionAllocation.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractFunctionAllocation.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractFunctionAllocation.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractFunctionAllocation.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//AbstractFunctionAllocation.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractFunctionAllocation.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractFunctionAllocation.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractFunctionAllocation.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractFunctionAllocation.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractFunctionAllocation.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractFunctionAllocation.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractFunctionAllocation.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractFunctionAllocation.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractFunctionAllocation.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//AbstractFunctionAllocation.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
}

@lazy
rule ComponentFunctionalAllocation
	transform s : DSL!ComponentFunctionalAllocation //fa.ComponentFunctionalAllocation
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentFunctionalAllocation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ComponentFunctionalAllocation.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ComponentFunctionalAllocation.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ComponentFunctionalAllocation.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ComponentFunctionalAllocation.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ComponentFunctionalAllocation.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ComponentFunctionalAllocation.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ComponentFunctionalAllocation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ComponentFunctionalAllocation.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ComponentFunctionalAllocation.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ComponentFunctionalAllocation.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ComponentFunctionalAllocation.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ComponentFunctionalAllocation.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ComponentFunctionalAllocation.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ComponentFunctionalAllocation.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ComponentFunctionalAllocation.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ComponentFunctionalAllocation.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ComponentFunctionalAllocation.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ComponentFunctionalAllocation.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ComponentFunctionalAllocation.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ComponentFunctionalAllocation.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ComponentFunctionalAllocation.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//ComponentFunctionalAllocation.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//ComponentFunctionalAllocation.function -> EReference : function_
	if (s.`function`.getEReference() != null) t.addNewReference("function_", s.`function`.getEReference());
	//ComponentFunctionalAllocation.block -> EReference : block
	if (s.block.getEReference() != null) t.addNewReference("block", s.block.getEReference());
}

@lazy
rule FunctionalChainRealization
	transform s : DSL!FunctionalChainRealization //fa.FunctionalChainRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//FunctionalChainRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FunctionalChainRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FunctionalChainRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//FunctionalChainRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//FunctionalChainRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//FunctionalChainRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//FunctionalChainRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//FunctionalChainRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FunctionalChainRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FunctionalChainRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FunctionalChainRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//FunctionalChainRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//FunctionalChainRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//FunctionalChainRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//FunctionalChainRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//FunctionalChainRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//FunctionalChainRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//FunctionalChainRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//FunctionalChainRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//FunctionalChainRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//FunctionalChainRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//FunctionalChainRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//FunctionalChainRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
}

@lazy
rule ExchangeSpecificationRealization
	transform s : DSL!ExchangeSpecificationRealization //fa.ExchangeSpecificationRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//ExchangeSpecificationRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ExchangeSpecificationRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ExchangeSpecificationRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ExchangeSpecificationRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ExchangeSpecificationRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ExchangeSpecificationRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ExchangeSpecificationRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ExchangeSpecificationRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ExchangeSpecificationRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ExchangeSpecificationRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ExchangeSpecificationRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ExchangeSpecificationRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ExchangeSpecificationRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ExchangeSpecificationRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ExchangeSpecificationRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ExchangeSpecificationRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ExchangeSpecificationRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ExchangeSpecificationRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ExchangeSpecificationRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ExchangeSpecificationRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ExchangeSpecificationRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ExchangeSpecificationRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//ExchangeSpecificationRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//ExchangeSpecificationRealization.realizedExchangeSpecification -> EReference : realizedExchangeSpecification
	if (s.realizedExchangeSpecification.getEReference() != null) t.addNewReference("realizedExchangeSpecification", s.realizedExchangeSpecification.getEReference());
	//ExchangeSpecificationRealization.realizingExchangeSpecification -> EReference : realizingExchangeSpecification
	if (s.realizingExchangeSpecification.getEReference() != null) t.addNewReference("realizingExchangeSpecification", s.realizingExchangeSpecification.getEReference());
}

@lazy
rule FunctionalExchangeRealization
	transform s : DSL!FunctionalExchangeRealization //fa.FunctionalExchangeRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//FunctionalExchangeRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FunctionalExchangeRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FunctionalExchangeRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//FunctionalExchangeRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//FunctionalExchangeRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//FunctionalExchangeRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//FunctionalExchangeRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//FunctionalExchangeRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FunctionalExchangeRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FunctionalExchangeRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FunctionalExchangeRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//FunctionalExchangeRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//FunctionalExchangeRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//FunctionalExchangeRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//FunctionalExchangeRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//FunctionalExchangeRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//FunctionalExchangeRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//FunctionalExchangeRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//FunctionalExchangeRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//FunctionalExchangeRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//FunctionalExchangeRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//FunctionalExchangeRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//FunctionalExchangeRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//FunctionalExchangeRealization.realizedFunctionalExchange -> EReference : realizedFunctionalExchange
	if (s.realizedFunctionalExchange.getEReference() != null) t.addNewReference("realizedFunctionalExchange", s.realizedFunctionalExchange.getEReference());
	//FunctionalExchangeRealization.realizingFunctionalExchange -> EReference : realizingFunctionalExchange
	if (s.realizingFunctionalExchange.getEReference() != null) t.addNewReference("realizingFunctionalExchange", s.realizingFunctionalExchange.getEReference());
}

@lazy
rule FunctionRealization
	transform s : DSL!FunctionRealization //fa.FunctionRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//FunctionRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FunctionRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FunctionRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//FunctionRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//FunctionRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//FunctionRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//FunctionRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//FunctionRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FunctionRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FunctionRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FunctionRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//FunctionRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//FunctionRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//FunctionRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//FunctionRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//FunctionRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//FunctionRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//FunctionRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//FunctionRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//FunctionRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//FunctionRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//FunctionRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//FunctionRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//FunctionRealization.allocatedFunction -> EReference : allocatedFunction
	if (s.allocatedFunction.getEReference() != null) t.addNewReference("allocatedFunction", s.allocatedFunction.getEReference());
	//FunctionRealization.allocatingFunction -> EReference : allocatingFunction
	if (s.allocatingFunction.getEReference() != null) t.addNewReference("allocatingFunction", s.allocatingFunction.getEReference());
}

@lazy
rule FunctionalExchange
	transform s : DSL!FunctionalExchange //fa.FunctionalExchange
	to t : SysMLine!ItemUsage
	extends Base{
	//FunctionalExchange.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FunctionalExchange.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FunctionalExchange.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//FunctionalExchange.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//FunctionalExchange.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//FunctionalExchange.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//FunctionalExchange.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//FunctionalExchange.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//FunctionalExchange.kindOfRate -> EAttribute : kindOfRate
	if (s.kindOfRate.getEAttribute() != null) t.addNewAttribute("kindOfRate", s.kindOfRate.getEAttribute());
	//FunctionalExchange.isMulticast -> EAttribute : isMulticast
	if (s.isMulticast.getEAttribute() != null) t.addNewAttribute("isMulticast", s.isMulticast.getEAttribute());
	//FunctionalExchange.isMultireceive -> EAttribute : isMultireceive
	if (s.isMultireceive.getEAttribute() != null) t.addNewAttribute("isMultireceive", s.isMultireceive.getEAttribute());
	//FunctionalExchange.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FunctionalExchange.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FunctionalExchange.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FunctionalExchange.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//FunctionalExchange.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//FunctionalExchange.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//FunctionalExchange.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//FunctionalExchange.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//FunctionalExchange.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//FunctionalExchange.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//FunctionalExchange.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//FunctionalExchange.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//FunctionalExchange.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//FunctionalExchange.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//FunctionalExchange.involvingInvolvements -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//FunctionalExchange.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//FunctionalExchange.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//FunctionalExchange.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//FunctionalExchange.rate -> EReference : rate
	if (s.rate.getEReference() != null) t.addNewReference("rate", s.rate.getEReference());
	//FunctionalExchange.probability -> EReference : probability
	if (s.probability.getEReference() != null) t.addNewReference("probability", s.probability.getEReference());
	//FunctionalExchange.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//FunctionalExchange.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//FunctionalExchange.guard -> EReference : guard_
	if (s.`guard`.getEReference() != null) t.addNewReference("guard_", s.`guard`.getEReference());
	//FunctionalExchange.weight -> EReference : weight
	if (s.weight.getEReference() != null) t.addNewReference("weight", s.weight.getEReference());
	//FunctionalExchange.interrupts -> EReference : interrupts
	if (s.interrupts.getEReference() != null) t.addNewReference("interrupts", s.interrupts.getEReference());
	//FunctionalExchange.transformation -> EReference : transformation
	if (s.transformation.getEReference() != null) t.addNewReference("transformation", s.transformation.getEReference());
	//FunctionalExchange.selection -> EReference : selection
	if (s.selection.getEReference() != null) t.addNewReference("selection", s.selection.getEReference());
	//FunctionalExchange.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//FunctionalExchange.invokingSequenceMessages -> EReference : invokingSequenceMessages
	if (s.invokingSequenceMessages.getEReference() != null) t.addNewReference("invokingSequenceMessages", s.invokingSequenceMessages.getEReference());
	//FunctionalExchange.exchangeSpecifications -> EReference : exchangeSpecifications
	if (s.exchangeSpecifications.getEReference() != null) t.addNewReference("exchangeSpecifications", s.exchangeSpecifications.getEReference());
	//FunctionalExchange.involvingFunctionalChains -> EReference : involvingFunctionalChains
	if (s.involvingFunctionalChains.getEReference() != null) t.addNewReference("involvingFunctionalChains", s.involvingFunctionalChains.getEReference());
	//FunctionalExchange.exchangedItems -> EReference : exchangedItems
	if (s.exchangedItems.getEReference() != null) t.addNewReference("exchangedItems", s.exchangedItems.getEReference());
	//FunctionalExchange.allocatingComponentExchanges -> EReference : allocatingComponentExchanges
	if (s.allocatingComponentExchanges.getEReference() != null) t.addNewReference("allocatingComponentExchanges", s.allocatingComponentExchanges.getEReference());
	//FunctionalExchange.incomingComponentExchangeFunctionalExchangeRealizations -> EReference : incomingComponentExchangeFunctionalExchangeRealizations
	if (s.incomingComponentExchangeFunctionalExchangeRealizations.getEReference() != null) t.addNewReference("incomingComponentExchangeFunctionalExchangeRealizations", s.incomingComponentExchangeFunctionalExchangeRealizations.getEReference());
	//FunctionalExchange.incomingFunctionalExchangeRealizations -> EReference : incomingFunctionalExchangeRealizations
	if (s.incomingFunctionalExchangeRealizations.getEReference() != null) t.addNewReference("incomingFunctionalExchangeRealizations", s.incomingFunctionalExchangeRealizations.getEReference());
	//FunctionalExchange.outgoingFunctionalExchangeRealizations -> EReference : outgoingFunctionalExchangeRealizations
	if (s.outgoingFunctionalExchangeRealizations.getEReference() != null) t.addNewReference("outgoingFunctionalExchangeRealizations", s.outgoingFunctionalExchangeRealizations.getEReference());
	//FunctionalExchange.categories -> EReference : categories
	if (s.categories.getEReference() != null) t.addNewReference("categories", s.categories.getEReference());
	//FunctionalExchange.ownedFunctionalExchangeRealizations -> EReference : ownedFunctionalExchangeRealizations
	if (s.ownedFunctionalExchangeRealizations.getEReference() != null) t.addNewReference("ownedFunctionalExchangeRealizations", s.ownedFunctionalExchangeRealizations.getEReference());
	//FunctionalExchange.sourceFunctionOutputPort -> EReference : sourceFunctionOutputPort
	if (s.sourceFunctionOutputPort.getEReference() != null) t.addNewReference("sourceFunctionOutputPort", s.sourceFunctionOutputPort.getEReference());
	//FunctionalExchange.targetFunctionInputPort -> EReference : targetFunctionInputPort
	if (s.targetFunctionInputPort.getEReference() != null) t.addNewReference("targetFunctionInputPort", s.targetFunctionInputPort.getEReference());
	//FunctionalExchange.realizedFunctionalExchanges -> EReference : realizedFunctionalExchanges
	if (s.realizedFunctionalExchanges.getEReference() != null) t.addNewReference("realizedFunctionalExchanges", s.realizedFunctionalExchanges.getEReference());
	//FunctionalExchange.realizingFunctionalExchanges -> EReference : realizingFunctionalExchanges
	if (s.realizingFunctionalExchanges.getEReference() != null) t.addNewReference("realizingFunctionalExchanges", s.realizingFunctionalExchanges.getEReference());
}

@lazy
rule AbstractFunction
	transform s : DSL!AbstractFunction //fa.AbstractFunction
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractFunction.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractFunction.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractFunction.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractFunction.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractFunction.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractFunction.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractFunction.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractFunction.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractFunction.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//AbstractFunction.isStatic -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//AbstractFunction.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//AbstractFunction.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//AbstractFunction.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//AbstractFunction.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//AbstractFunction.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//AbstractFunction.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//AbstractFunction.aggregationKind -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null) t.addNewAttribute("aggregationKind", s.aggregationKind.getEAttribute());
	//AbstractFunction.isDerived -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null) t.addNewAttribute("isDerived", s.isDerived.getEAttribute());
	//AbstractFunction.isReadOnly -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null) t.addNewAttribute("isReadOnly", s.isReadOnly.getEAttribute());
	//AbstractFunction.isPartOfKey -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null) t.addNewAttribute("isPartOfKey", s.isPartOfKey.getEAttribute());
	//AbstractFunction.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//AbstractFunction.condition -> EAttribute : condition
	if (s.condition.getEAttribute() != null) t.addNewAttribute("condition", s.condition.getEAttribute());
	//AbstractFunction.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractFunction.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractFunction.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractFunction.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractFunction.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractFunction.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractFunction.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractFunction.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractFunction.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractFunction.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractFunction.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractFunction.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractFunction.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractFunction.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//AbstractFunction.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//AbstractFunction.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//AbstractFunction.involvingInvolvements -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//AbstractFunction.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//AbstractFunction.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//AbstractFunction.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//AbstractFunction.ownedMinValue -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//AbstractFunction.ownedMaxValue -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//AbstractFunction.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//AbstractFunction.ownedMinCard -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//AbstractFunction.ownedMinLength -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//AbstractFunction.ownedMaxCard -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//AbstractFunction.ownedMaxLength -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//AbstractFunction.association -> EReference : association
	if (s.association.getEReference() != null) t.addNewReference("association", s.association.getEReference());
	//AbstractFunction.representingInstanceRoles -> EReference : representingInstanceRoles
	if (s.representingInstanceRoles.getEReference() != null) t.addNewReference("representingInstanceRoles", s.representingInstanceRoles.getEReference());
	//AbstractFunction.ownedFunctionalChains -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null) t.addNewReference("ownedFunctionalChains", s.ownedFunctionalChains.getEReference());
	//AbstractFunction.inActivityPartition -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//AbstractFunction.inInterruptibleRegion -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//AbstractFunction.inStructuredNode -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//AbstractFunction.outgoing -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//AbstractFunction.incoming -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//AbstractFunction.ownedHandlers -> EReference : ownedHandlers
	if (s.ownedHandlers.getEReference() != null) t.addNewReference("ownedHandlers", s.ownedHandlers.getEReference());
	//AbstractFunction.localPrecondition -> EReference : localPrecondition
	if (s.localPrecondition.getEReference() != null) t.addNewReference("localPrecondition", s.localPrecondition.getEReference());
	//AbstractFunction.localPostcondition -> EReference : localPostcondition
	if (s.localPostcondition.getEReference() != null) t.addNewReference("localPostcondition", s.localPostcondition.getEReference());
	//AbstractFunction.context -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context", s.context.getEReference());
	//AbstractFunction.inputs -> EReference : inputs
	if (s.inputs.getEReference() != null) t.addNewReference("inputs", s.inputs.getEReference());
	//AbstractFunction.outputs -> EReference : outputs
	if (s.outputs.getEReference() != null) t.addNewReference("outputs", s.outputs.getEReference());
	//AbstractFunction.arguments -> EReference : arguments
	if (s.arguments.getEReference() != null) t.addNewReference("arguments", s.arguments.getEReference());
	//AbstractFunction.results -> EReference : results
	if (s.results.getEReference() != null) t.addNewReference("results", s.results.getEReference());
	//AbstractFunction.behavior -> EReference : behavior
	if (s.behavior.getEReference() != null) t.addNewReference("behavior", s.behavior.getEReference());
	//AbstractFunction.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//AbstractFunction.ownedFunctions -> EReference : ownedFunctions
	if (s.ownedFunctions.getEReference() != null) t.addNewReference("ownedFunctions", s.ownedFunctions.getEReference());
	//AbstractFunction.ownedFunctionRealizations -> EReference : ownedFunctionRealizations
	if (s.ownedFunctionRealizations.getEReference() != null) t.addNewReference("ownedFunctionRealizations", s.ownedFunctionRealizations.getEReference());
	//AbstractFunction.ownedFunctionalExchanges -> EReference : ownedFunctionalExchanges
	if (s.ownedFunctionalExchanges.getEReference() != null) t.addNewReference("ownedFunctionalExchanges", s.ownedFunctionalExchanges.getEReference());
	//AbstractFunction.subFunctions -> EReference : subFunctions
	if (s.subFunctions.getEReference() != null) t.addNewReference("subFunctions", s.subFunctions.getEReference());
	//AbstractFunction.outFunctionRealizations -> EReference : outFunctionRealizations
	if (s.outFunctionRealizations.getEReference() != null) t.addNewReference("outFunctionRealizations", s.outFunctionRealizations.getEReference());
	//AbstractFunction.inFunctionRealizations -> EReference : inFunctionRealizations
	if (s.inFunctionRealizations.getEReference() != null) t.addNewReference("inFunctionRealizations", s.inFunctionRealizations.getEReference());
	//AbstractFunction.componentFunctionalAllocations -> EReference : componentFunctionalAllocations
	if (s.componentFunctionalAllocations.getEReference() != null) t.addNewReference("componentFunctionalAllocations", s.componentFunctionalAllocations.getEReference());
	//AbstractFunction.allocationBlocks -> EReference : allocationBlocks
	if (s.allocationBlocks.getEReference() != null) t.addNewReference("allocationBlocks", s.allocationBlocks.getEReference());
	//AbstractFunction.availableInStates -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null) t.addNewReference("availableInStates", s.availableInStates.getEReference());
	//AbstractFunction.involvingCapabilities -> EReference : involvingCapabilities
	if (s.involvingCapabilities.getEReference() != null) t.addNewReference("involvingCapabilities", s.involvingCapabilities.getEReference());
	//AbstractFunction.involvingCapabilityRealizations -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null) t.addNewReference("involvingCapabilityRealizations", s.involvingCapabilityRealizations.getEReference());
	//AbstractFunction.involvingFunctionalChains -> EReference : involvingFunctionalChains
	if (s.involvingFunctionalChains.getEReference() != null) t.addNewReference("involvingFunctionalChains", s.involvingFunctionalChains.getEReference());
	//AbstractFunction.linkedStateMachine -> EReference : linkedStateMachine
	if (s.linkedStateMachine.getEReference() != null) t.addNewReference("linkedStateMachine", s.linkedStateMachine.getEReference());
	//AbstractFunction.linkedFunctionSpecification -> EReference : linkedFunctionSpecification
	if (s.linkedFunctionSpecification.getEReference() != null) t.addNewReference("linkedFunctionSpecification", s.linkedFunctionSpecification.getEReference());
}

@lazy
rule FunctionPort
	transform s : DSL!FunctionPort //fa.FunctionPort
	to t : SysMLine!ItemUsage
	extends Base{
	//FunctionPort.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FunctionPort.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FunctionPort.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//FunctionPort.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//FunctionPort.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//FunctionPort.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//FunctionPort.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//FunctionPort.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//FunctionPort.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FunctionPort.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FunctionPort.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FunctionPort.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//FunctionPort.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//FunctionPort.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//FunctionPort.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//FunctionPort.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//FunctionPort.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//FunctionPort.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//FunctionPort.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//FunctionPort.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//FunctionPort.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//FunctionPort.incomingPortRealizations -> EReference : incomingPortRealizations
	if (s.incomingPortRealizations.getEReference() != null) t.addNewReference("incomingPortRealizations", s.incomingPortRealizations.getEReference());
	//FunctionPort.outgoingPortRealizations -> EReference : outgoingPortRealizations
	if (s.outgoingPortRealizations.getEReference() != null) t.addNewReference("outgoingPortRealizations", s.outgoingPortRealizations.getEReference());
	//FunctionPort.ownedProtocols -> EReference : ownedProtocols
	if (s.ownedProtocols.getEReference() != null) t.addNewReference("ownedProtocols", s.ownedProtocols.getEReference());
	//FunctionPort.incomingPortAllocations -> EReference : incomingPortAllocations
	if (s.incomingPortAllocations.getEReference() != null) t.addNewReference("incomingPortAllocations", s.incomingPortAllocations.getEReference());
	//FunctionPort.outgoingPortAllocations -> EReference : outgoingPortAllocations
	if (s.outgoingPortAllocations.getEReference() != null) t.addNewReference("outgoingPortAllocations", s.outgoingPortAllocations.getEReference());
	//FunctionPort.providedInterfaces -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//FunctionPort.requiredInterfaces -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//FunctionPort.ownedPortRealizations -> EReference : ownedPortRealizations
	if (s.ownedPortRealizations.getEReference() != null) t.addNewReference("ownedPortRealizations", s.ownedPortRealizations.getEReference());
	//FunctionPort.ownedPortAllocations -> EReference : ownedPortAllocations
	if (s.ownedPortAllocations.getEReference() != null) t.addNewReference("ownedPortAllocations", s.ownedPortAllocations.getEReference());
	//FunctionPort.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//FunctionPort.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//FunctionPort.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//FunctionPort.representedComponentPort -> EReference : representedComponentPort
	if (s.representedComponentPort.getEReference() != null) t.addNewReference("representedComponentPort", s.representedComponentPort.getEReference());
	//FunctionPort.allocatorComponentPorts -> EReference : allocatorComponentPorts
	if (s.allocatorComponentPorts.getEReference() != null) t.addNewReference("allocatorComponentPorts", s.allocatorComponentPorts.getEReference());
	//FunctionPort.realizedFunctionPorts -> EReference : realizedFunctionPorts
	if (s.realizedFunctionPorts.getEReference() != null) t.addNewReference("realizedFunctionPorts", s.realizedFunctionPorts.getEReference());
	//FunctionPort.realizingFunctionPorts -> EReference : realizingFunctionPorts
	if (s.realizingFunctionPorts.getEReference() != null) t.addNewReference("realizingFunctionPorts", s.realizingFunctionPorts.getEReference());
}

@lazy
rule ComponentExchange
	transform s : DSL!ComponentExchange //fa.ComponentExchange
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentExchange.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ComponentExchange.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ComponentExchange.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ComponentExchange.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ComponentExchange.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ComponentExchange.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ComponentExchange.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ComponentExchange.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ComponentExchange.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//ComponentExchange.oriented -> EAttribute : oriented
	if (s.oriented.getEAttribute() != null) t.addNewAttribute("oriented", s.oriented.getEAttribute());
	//ComponentExchange.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ComponentExchange.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ComponentExchange.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ComponentExchange.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ComponentExchange.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//ComponentExchange.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ComponentExchange.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ComponentExchange.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ComponentExchange.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ComponentExchange.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ComponentExchange.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ComponentExchange.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ComponentExchange.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ComponentExchange.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ComponentExchange.invokingSequenceMessages -> EReference : invokingSequenceMessages
	if (s.invokingSequenceMessages.getEReference() != null) t.addNewReference("invokingSequenceMessages", s.invokingSequenceMessages.getEReference());
	//ComponentExchange.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ComponentExchange.realizations -> EReference : realizations
	if (s.realizations.getEReference() != null) t.addNewReference("realizations", s.realizations.getEReference());
	//ComponentExchange.convoyedInformations -> EReference : convoyedInformations
	if (s.convoyedInformations.getEReference() != null) t.addNewReference("convoyedInformations", s.convoyedInformations.getEReference());
	//ComponentExchange.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//ComponentExchange.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//ComponentExchange.realizingActivityFlows -> EReference : realizingActivityFlows
	if (s.realizingActivityFlows.getEReference() != null) t.addNewReference("realizingActivityFlows", s.realizingActivityFlows.getEReference());
	//ComponentExchange.containingLink -> EReference : containingLink
	if (s.containingLink.getEReference() != null) t.addNewReference("containingLink", s.containingLink.getEReference());
	//ComponentExchange.link -> EReference : link
	if (s.link.getEReference() != null) t.addNewReference("link", s.link.getEReference());
	//ComponentExchange.outgoingExchangeSpecificationRealizations -> EReference : outgoingExchangeSpecificationRealizations
	if (s.outgoingExchangeSpecificationRealizations.getEReference() != null) t.addNewReference("outgoingExchangeSpecificationRealizations", s.outgoingExchangeSpecificationRealizations.getEReference());
	//ComponentExchange.incomingExchangeSpecificationRealizations -> EReference : incomingExchangeSpecificationRealizations
	if (s.incomingExchangeSpecificationRealizations.getEReference() != null) t.addNewReference("incomingExchangeSpecificationRealizations", s.incomingExchangeSpecificationRealizations.getEReference());
	//ComponentExchange.allocatedFunctionalExchanges -> EReference : allocatedFunctionalExchanges
	if (s.allocatedFunctionalExchanges.getEReference() != null) t.addNewReference("allocatedFunctionalExchanges", s.allocatedFunctionalExchanges.getEReference());
	//ComponentExchange.incomingComponentExchangeRealizations -> EReference : incomingComponentExchangeRealizations
	if (s.incomingComponentExchangeRealizations.getEReference() != null) t.addNewReference("incomingComponentExchangeRealizations", s.incomingComponentExchangeRealizations.getEReference());
	//ComponentExchange.outgoingComponentExchangeRealizations -> EReference : outgoingComponentExchangeRealizations
	if (s.outgoingComponentExchangeRealizations.getEReference() != null) t.addNewReference("outgoingComponentExchangeRealizations", s.outgoingComponentExchangeRealizations.getEReference());
	//ComponentExchange.outgoingComponentExchangeFunctionalExchangeAllocations -> EReference : outgoingComponentExchangeFunctionalExchangeAllocations
	if (s.outgoingComponentExchangeFunctionalExchangeAllocations.getEReference() != null) t.addNewReference("outgoingComponentExchangeFunctionalExchangeAllocations", s.outgoingComponentExchangeFunctionalExchangeAllocations.getEReference());
	//ComponentExchange.ownedComponentExchangeFunctionalExchangeAllocations -> EReference : ownedComponentExchangeFunctionalExchangeAllocations
	if (s.ownedComponentExchangeFunctionalExchangeAllocations.getEReference() != null) t.addNewReference("ownedComponentExchangeFunctionalExchangeAllocations", s.ownedComponentExchangeFunctionalExchangeAllocations.getEReference());
	//ComponentExchange.ownedComponentExchangeRealizations -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//ComponentExchange.ownedComponentExchangeEnds -> EReference : ownedComponentExchangeEnds
	if (s.ownedComponentExchangeEnds.getEReference() != null) t.addNewReference("ownedComponentExchangeEnds", s.ownedComponentExchangeEnds.getEReference());
	//ComponentExchange.sourcePort -> EReference : sourcePort
	if (s.sourcePort.getEReference() != null) t.addNewReference("sourcePort", s.sourcePort.getEReference());
	//ComponentExchange.sourcePart -> EReference : sourcePart
	if (s.sourcePart.getEReference() != null) t.addNewReference("sourcePart", s.sourcePart.getEReference());
	//ComponentExchange.targetPort -> EReference : targetPort
	if (s.targetPort.getEReference() != null) t.addNewReference("targetPort", s.targetPort.getEReference());
	//ComponentExchange.targetPart -> EReference : targetPart
	if (s.targetPart.getEReference() != null) t.addNewReference("targetPart", s.targetPart.getEReference());
	//ComponentExchange.categories -> EReference : categories
	if (s.categories.getEReference() != null) t.addNewReference("categories", s.categories.getEReference());
	//ComponentExchange.allocatorPhysicalLinks -> EReference : allocatorPhysicalLinks
	if (s.allocatorPhysicalLinks.getEReference() != null) t.addNewReference("allocatorPhysicalLinks", s.allocatorPhysicalLinks.getEReference());
	//ComponentExchange.realizedComponentExchanges -> EReference : realizedComponentExchanges
	if (s.realizedComponentExchanges.getEReference() != null) t.addNewReference("realizedComponentExchanges", s.realizedComponentExchanges.getEReference());
	//ComponentExchange.realizingComponentExchanges -> EReference : realizingComponentExchanges
	if (s.realizingComponentExchanges.getEReference() != null) t.addNewReference("realizingComponentExchanges", s.realizingComponentExchanges.getEReference());
}

@lazy
rule ComponentExchangeAllocation
	transform s : DSL!ComponentExchangeAllocation //fa.ComponentExchangeAllocation
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentExchangeAllocation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ComponentExchangeAllocation.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ComponentExchangeAllocation.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ComponentExchangeAllocation.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ComponentExchangeAllocation.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ComponentExchangeAllocation.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ComponentExchangeAllocation.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ComponentExchangeAllocation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ComponentExchangeAllocation.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ComponentExchangeAllocation.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ComponentExchangeAllocation.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ComponentExchangeAllocation.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ComponentExchangeAllocation.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ComponentExchangeAllocation.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ComponentExchangeAllocation.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ComponentExchangeAllocation.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ComponentExchangeAllocation.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ComponentExchangeAllocation.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ComponentExchangeAllocation.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ComponentExchangeAllocation.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ComponentExchangeAllocation.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ComponentExchangeAllocation.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//ComponentExchangeAllocation.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//ComponentExchangeAllocation.componentExchangeAllocated -> EReference : componentExchangeAllocated
	if (s.componentExchangeAllocated.getEReference() != null) t.addNewReference("componentExchangeAllocated", s.componentExchangeAllocated.getEReference());
	//ComponentExchangeAllocation.componentExchangeAllocator -> EReference : componentExchangeAllocator
	if (s.componentExchangeAllocator.getEReference() != null) t.addNewReference("componentExchangeAllocator", s.componentExchangeAllocator.getEReference());
}

@lazy
rule ComponentExchangeAllocator
	transform s : DSL!ComponentExchangeAllocator //fa.ComponentExchangeAllocator
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentExchangeAllocator.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ComponentExchangeAllocator.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ComponentExchangeAllocator.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ComponentExchangeAllocator.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ComponentExchangeAllocator.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ComponentExchangeAllocator.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ComponentExchangeAllocator.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ComponentExchangeAllocator.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ComponentExchangeAllocator.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ComponentExchangeAllocator.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ComponentExchangeAllocator.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ComponentExchangeAllocator.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ComponentExchangeAllocator.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ComponentExchangeAllocator.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ComponentExchangeAllocator.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ComponentExchangeAllocator.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ComponentExchangeAllocator.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ComponentExchangeAllocator.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ComponentExchangeAllocator.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ComponentExchangeAllocator.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ComponentExchangeAllocator.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ComponentExchangeAllocator.ownedComponentExchangeAllocations -> EReference : ownedComponentExchangeAllocations
	if (s.ownedComponentExchangeAllocations.getEReference() != null) t.addNewReference("ownedComponentExchangeAllocations", s.ownedComponentExchangeAllocations.getEReference());
	//ComponentExchangeAllocator.allocatedComponentExchanges -> EReference : allocatedComponentExchanges
	if (s.allocatedComponentExchanges.getEReference() != null) t.addNewReference("allocatedComponentExchanges", s.allocatedComponentExchanges.getEReference());
}

@lazy
rule ComponentExchangeCategory
	transform s : DSL!ComponentExchangeCategory //fa.ComponentExchangeCategory
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentExchangeCategory.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ComponentExchangeCategory.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ComponentExchangeCategory.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ComponentExchangeCategory.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ComponentExchangeCategory.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ComponentExchangeCategory.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ComponentExchangeCategory.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ComponentExchangeCategory.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ComponentExchangeCategory.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ComponentExchangeCategory.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ComponentExchangeCategory.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ComponentExchangeCategory.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ComponentExchangeCategory.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ComponentExchangeCategory.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ComponentExchangeCategory.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ComponentExchangeCategory.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ComponentExchangeCategory.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ComponentExchangeCategory.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ComponentExchangeCategory.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ComponentExchangeCategory.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ComponentExchangeCategory.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ComponentExchangeCategory.exchanges -> EReference : exchanges
	if (s.exchanges.getEReference() != null) t.addNewReference("exchanges", s.exchanges.getEReference());
}

@lazy
rule ComponentExchangeEnd
	transform s : DSL!ComponentExchangeEnd //fa.ComponentExchangeEnd
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentExchangeEnd.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ComponentExchangeEnd.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ComponentExchangeEnd.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ComponentExchangeEnd.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ComponentExchangeEnd.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ComponentExchangeEnd.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ComponentExchangeEnd.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ComponentExchangeEnd.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ComponentExchangeEnd.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ComponentExchangeEnd.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ComponentExchangeEnd.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ComponentExchangeEnd.incomingInformationFlows -> EReference : incomingInformationFlows
	if (s.incomingInformationFlows.getEReference() != null) t.addNewReference("incomingInformationFlows", s.incomingInformationFlows.getEReference());
	//ComponentExchangeEnd.outgoingInformationFlows -> EReference : outgoingInformationFlows
	if (s.outgoingInformationFlows.getEReference() != null) t.addNewReference("outgoingInformationFlows", s.outgoingInformationFlows.getEReference());
	//ComponentExchangeEnd.informationFlows -> EReference : informationFlows
	if (s.informationFlows.getEReference() != null) t.addNewReference("informationFlows", s.informationFlows.getEReference());
	//ComponentExchangeEnd.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ComponentExchangeEnd.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ComponentExchangeEnd.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ComponentExchangeEnd.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ComponentExchangeEnd.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ComponentExchangeEnd.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ComponentExchangeEnd.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ComponentExchangeEnd.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ComponentExchangeEnd.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ComponentExchangeEnd.port -> EReference : port
	if (s.port.getEReference() != null) t.addNewReference("port", s.port.getEReference());
	//ComponentExchangeEnd.part -> EReference : part
	if (s.part.getEReference() != null) t.addNewReference("part", s.part.getEReference());
}

@lazy
rule ComponentExchangeFunctionalExchangeAllocation
	transform s : DSL!ComponentExchangeFunctionalExchangeAllocation //fa.ComponentExchangeFunctionalExchangeAllocation
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentExchangeFunctionalExchangeAllocation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ComponentExchangeFunctionalExchangeAllocation.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ComponentExchangeFunctionalExchangeAllocation.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ComponentExchangeFunctionalExchangeAllocation.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ComponentExchangeFunctionalExchangeAllocation.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ComponentExchangeFunctionalExchangeAllocation.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ComponentExchangeFunctionalExchangeAllocation.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ComponentExchangeFunctionalExchangeAllocation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ComponentExchangeFunctionalExchangeAllocation.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ComponentExchangeFunctionalExchangeAllocation.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ComponentExchangeFunctionalExchangeAllocation.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ComponentExchangeFunctionalExchangeAllocation.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ComponentExchangeFunctionalExchangeAllocation.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ComponentExchangeFunctionalExchangeAllocation.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ComponentExchangeFunctionalExchangeAllocation.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ComponentExchangeFunctionalExchangeAllocation.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ComponentExchangeFunctionalExchangeAllocation.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ComponentExchangeFunctionalExchangeAllocation.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ComponentExchangeFunctionalExchangeAllocation.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ComponentExchangeFunctionalExchangeAllocation.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ComponentExchangeFunctionalExchangeAllocation.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ComponentExchangeFunctionalExchangeAllocation.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//ComponentExchangeFunctionalExchangeAllocation.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//ComponentExchangeFunctionalExchangeAllocation.allocatedFunctionalExchange -> EReference : allocatedFunctionalExchange
	if (s.allocatedFunctionalExchange.getEReference() != null) t.addNewReference("allocatedFunctionalExchange", s.allocatedFunctionalExchange.getEReference());
	//ComponentExchangeFunctionalExchangeAllocation.allocatingComponentExchange -> EReference : allocatingComponentExchange
	if (s.allocatingComponentExchange.getEReference() != null) t.addNewReference("allocatingComponentExchange", s.allocatingComponentExchange.getEReference());
}

@lazy
rule ComponentExchangeRealization
	transform s : DSL!ComponentExchangeRealization //fa.ComponentExchangeRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentExchangeRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ComponentExchangeRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ComponentExchangeRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ComponentExchangeRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ComponentExchangeRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ComponentExchangeRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ComponentExchangeRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ComponentExchangeRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ComponentExchangeRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ComponentExchangeRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ComponentExchangeRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ComponentExchangeRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ComponentExchangeRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ComponentExchangeRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ComponentExchangeRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ComponentExchangeRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ComponentExchangeRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ComponentExchangeRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ComponentExchangeRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ComponentExchangeRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ComponentExchangeRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ComponentExchangeRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//ComponentExchangeRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//ComponentExchangeRealization.realizedExchangeSpecification -> EReference : realizedExchangeSpecification
	if (s.realizedExchangeSpecification.getEReference() != null) t.addNewReference("realizedExchangeSpecification", s.realizedExchangeSpecification.getEReference());
	//ComponentExchangeRealization.realizingExchangeSpecification -> EReference : realizingExchangeSpecification
	if (s.realizingExchangeSpecification.getEReference() != null) t.addNewReference("realizingExchangeSpecification", s.realizingExchangeSpecification.getEReference());
	//ComponentExchangeRealization.allocatedComponentExchange -> EReference : allocatedComponentExchange
	if (s.allocatedComponentExchange.getEReference() != null) t.addNewReference("allocatedComponentExchange", s.allocatedComponentExchange.getEReference());
	//ComponentExchangeRealization.allocatingComponentExchange -> EReference : allocatingComponentExchange
	if (s.allocatingComponentExchange.getEReference() != null) t.addNewReference("allocatingComponentExchange", s.allocatingComponentExchange.getEReference());
}

@lazy
rule ComponentPort
	transform s : DSL!ComponentPort //fa.ComponentPort
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentPort.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ComponentPort.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ComponentPort.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ComponentPort.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ComponentPort.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ComponentPort.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ComponentPort.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ComponentPort.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ComponentPort.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ComponentPort.isStatic -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//ComponentPort.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//ComponentPort.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//ComponentPort.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//ComponentPort.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//ComponentPort.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//ComponentPort.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//ComponentPort.aggregationKind -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null) t.addNewAttribute("aggregationKind", s.aggregationKind.getEAttribute());
	//ComponentPort.isDerived -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null) t.addNewAttribute("isDerived", s.isDerived.getEAttribute());
	//ComponentPort.isReadOnly -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null) t.addNewAttribute("isReadOnly", s.isReadOnly.getEAttribute());
	//ComponentPort.isPartOfKey -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null) t.addNewAttribute("isPartOfKey", s.isPartOfKey.getEAttribute());
	//ComponentPort.orientation -> EAttribute : orientation
	if (s.orientation.getEAttribute() != null) t.addNewAttribute("orientation", s.orientation.getEAttribute());
	//ComponentPort.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//ComponentPort.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ComponentPort.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ComponentPort.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ComponentPort.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ComponentPort.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ComponentPort.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ComponentPort.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ComponentPort.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ComponentPort.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ComponentPort.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ComponentPort.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ComponentPort.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ComponentPort.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ComponentPort.incomingPortRealizations -> EReference : incomingPortRealizations
	if (s.incomingPortRealizations.getEReference() != null) t.addNewReference("incomingPortRealizations", s.incomingPortRealizations.getEReference());
	//ComponentPort.outgoingPortRealizations -> EReference : outgoingPortRealizations
	if (s.outgoingPortRealizations.getEReference() != null) t.addNewReference("outgoingPortRealizations", s.outgoingPortRealizations.getEReference());
	//ComponentPort.ownedProtocols -> EReference : ownedProtocols
	if (s.ownedProtocols.getEReference() != null) t.addNewReference("ownedProtocols", s.ownedProtocols.getEReference());
	//ComponentPort.incomingPortAllocations -> EReference : incomingPortAllocations
	if (s.incomingPortAllocations.getEReference() != null) t.addNewReference("incomingPortAllocations", s.incomingPortAllocations.getEReference());
	//ComponentPort.outgoingPortAllocations -> EReference : outgoingPortAllocations
	if (s.outgoingPortAllocations.getEReference() != null) t.addNewReference("outgoingPortAllocations", s.outgoingPortAllocations.getEReference());
	//ComponentPort.providedInterfaces -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//ComponentPort.requiredInterfaces -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//ComponentPort.ownedPortRealizations -> EReference : ownedPortRealizations
	if (s.ownedPortRealizations.getEReference() != null) t.addNewReference("ownedPortRealizations", s.ownedPortRealizations.getEReference());
	//ComponentPort.ownedPortAllocations -> EReference : ownedPortAllocations
	if (s.ownedPortAllocations.getEReference() != null) t.addNewReference("ownedPortAllocations", s.ownedPortAllocations.getEReference());
	//ComponentPort.incomingInformationFlows -> EReference : incomingInformationFlows
	if (s.incomingInformationFlows.getEReference() != null) t.addNewReference("incomingInformationFlows", s.incomingInformationFlows.getEReference());
	//ComponentPort.outgoingInformationFlows -> EReference : outgoingInformationFlows
	if (s.outgoingInformationFlows.getEReference() != null) t.addNewReference("outgoingInformationFlows", s.outgoingInformationFlows.getEReference());
	//ComponentPort.informationFlows -> EReference : informationFlows
	if (s.informationFlows.getEReference() != null) t.addNewReference("informationFlows", s.informationFlows.getEReference());
	//ComponentPort.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//ComponentPort.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//ComponentPort.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//ComponentPort.ownedMinValue -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//ComponentPort.ownedMaxValue -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//ComponentPort.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//ComponentPort.ownedMinCard -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//ComponentPort.ownedMinLength -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//ComponentPort.ownedMaxCard -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//ComponentPort.ownedMaxLength -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//ComponentPort.association -> EReference : association
	if (s.association.getEReference() != null) t.addNewReference("association", s.association.getEReference());
	//ComponentPort.componentExchanges -> EReference : componentExchanges
	if (s.componentExchanges.getEReference() != null) t.addNewReference("componentExchanges", s.componentExchanges.getEReference());
	//ComponentPort.allocatedFunctionPorts -> EReference : allocatedFunctionPorts
	if (s.allocatedFunctionPorts.getEReference() != null) t.addNewReference("allocatedFunctionPorts", s.allocatedFunctionPorts.getEReference());
	//ComponentPort.delegatedComponentPorts -> EReference : delegatedComponentPorts
	if (s.delegatedComponentPorts.getEReference() != null) t.addNewReference("delegatedComponentPorts", s.delegatedComponentPorts.getEReference());
	//ComponentPort.delegatingComponentPorts -> EReference : delegatingComponentPorts
	if (s.delegatingComponentPorts.getEReference() != null) t.addNewReference("delegatingComponentPorts", s.delegatingComponentPorts.getEReference());
	//ComponentPort.allocatingPhysicalPorts -> EReference : allocatingPhysicalPorts
	if (s.allocatingPhysicalPorts.getEReference() != null) t.addNewReference("allocatingPhysicalPorts", s.allocatingPhysicalPorts.getEReference());
	//ComponentPort.realizedComponentPorts -> EReference : realizedComponentPorts
	if (s.realizedComponentPorts.getEReference() != null) t.addNewReference("realizedComponentPorts", s.realizedComponentPorts.getEReference());
	//ComponentPort.realizingComponentPorts -> EReference : realizingComponentPorts
	if (s.realizingComponentPorts.getEReference() != null) t.addNewReference("realizingComponentPorts", s.realizingComponentPorts.getEReference());
}

@lazy
rule ComponentPortAllocation
	transform s : DSL!ComponentPortAllocation //fa.ComponentPortAllocation
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentPortAllocation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ComponentPortAllocation.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ComponentPortAllocation.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ComponentPortAllocation.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ComponentPortAllocation.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ComponentPortAllocation.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ComponentPortAllocation.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ComponentPortAllocation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ComponentPortAllocation.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ComponentPortAllocation.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ComponentPortAllocation.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ComponentPortAllocation.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ComponentPortAllocation.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ComponentPortAllocation.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ComponentPortAllocation.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ComponentPortAllocation.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ComponentPortAllocation.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ComponentPortAllocation.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ComponentPortAllocation.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ComponentPortAllocation.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ComponentPortAllocation.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ComponentPortAllocation.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//ComponentPortAllocation.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//ComponentPortAllocation.ownedComponentPortAllocationEnds -> EReference : ownedComponentPortAllocationEnds
	if (s.ownedComponentPortAllocationEnds.getEReference() != null) t.addNewReference("ownedComponentPortAllocationEnds", s.ownedComponentPortAllocationEnds.getEReference());
	//ComponentPortAllocation.allocatedPort -> EReference : allocatedPort
	if (s.allocatedPort.getEReference() != null) t.addNewReference("allocatedPort", s.allocatedPort.getEReference());
	//ComponentPortAllocation.allocatingPort -> EReference : allocatingPort
	if (s.allocatingPort.getEReference() != null) t.addNewReference("allocatingPort", s.allocatingPort.getEReference());
}

@lazy
rule ComponentPortAllocationEnd
	transform s : DSL!ComponentPortAllocationEnd //fa.ComponentPortAllocationEnd
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentPortAllocationEnd.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ComponentPortAllocationEnd.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ComponentPortAllocationEnd.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ComponentPortAllocationEnd.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ComponentPortAllocationEnd.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ComponentPortAllocationEnd.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ComponentPortAllocationEnd.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ComponentPortAllocationEnd.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ComponentPortAllocationEnd.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ComponentPortAllocationEnd.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ComponentPortAllocationEnd.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ComponentPortAllocationEnd.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ComponentPortAllocationEnd.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ComponentPortAllocationEnd.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ComponentPortAllocationEnd.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ComponentPortAllocationEnd.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ComponentPortAllocationEnd.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ComponentPortAllocationEnd.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ComponentPortAllocationEnd.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ComponentPortAllocationEnd.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ComponentPortAllocationEnd.port -> EReference : port
	if (s.port.getEReference() != null) t.addNewReference("port", s.port.getEReference());
	//ComponentPortAllocationEnd.part -> EReference : part
	if (s.part.getEReference() != null) t.addNewReference("part", s.part.getEReference());
	//ComponentPortAllocationEnd.owningComponentPortAllocation -> EReference : owningComponentPortAllocation
	if (s.owningComponentPortAllocation.getEReference() != null) t.addNewReference("owningComponentPortAllocation", s.owningComponentPortAllocation.getEReference());
}

@lazy
rule FunctionalChainInvolvementLink
	transform s : DSL!FunctionalChainInvolvementLink //fa.FunctionalChainInvolvementLink
	to t : SysMLine!ItemUsage
	extends Base{
	//FunctionalChainInvolvementLink.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FunctionalChainInvolvementLink.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FunctionalChainInvolvementLink.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//FunctionalChainInvolvementLink.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//FunctionalChainInvolvementLink.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//FunctionalChainInvolvementLink.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//FunctionalChainInvolvementLink.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//FunctionalChainInvolvementLink.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FunctionalChainInvolvementLink.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FunctionalChainInvolvementLink.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FunctionalChainInvolvementLink.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//FunctionalChainInvolvementLink.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//FunctionalChainInvolvementLink.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//FunctionalChainInvolvementLink.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//FunctionalChainInvolvementLink.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//FunctionalChainInvolvementLink.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//FunctionalChainInvolvementLink.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//FunctionalChainInvolvementLink.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//FunctionalChainInvolvementLink.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//FunctionalChainInvolvementLink.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//FunctionalChainInvolvementLink.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//FunctionalChainInvolvementLink.involver -> EReference : involver
	if (s.involver.getEReference() != null) t.addNewReference("involver", s.involver.getEReference());
	//FunctionalChainInvolvementLink.involved -> EReference : involved
	if (s.involved.getEReference() != null) t.addNewReference("involved", s.involved.getEReference());
	//FunctionalChainInvolvementLink.nextFunctionalChainInvolvements -> EReference : nextFunctionalChainInvolvements
	if (s.nextFunctionalChainInvolvements.getEReference() != null) t.addNewReference("nextFunctionalChainInvolvements", s.nextFunctionalChainInvolvements.getEReference());
	//FunctionalChainInvolvementLink.previousFunctionalChainInvolvements -> EReference : previousFunctionalChainInvolvements
	if (s.previousFunctionalChainInvolvements.getEReference() != null) t.addNewReference("previousFunctionalChainInvolvements", s.previousFunctionalChainInvolvements.getEReference());
	//FunctionalChainInvolvementLink.involvedElement -> EReference : involvedElement
	if (s.involvedElement.getEReference() != null) t.addNewReference("involvedElement", s.involvedElement.getEReference());
	//FunctionalChainInvolvementLink.sourceReferenceHierarchy -> EReference : sourceReferenceHierarchy
	if (s.sourceReferenceHierarchy.getEReference() != null) t.addNewReference("sourceReferenceHierarchy", s.sourceReferenceHierarchy.getEReference());
	//FunctionalChainInvolvementLink.targetReferenceHierarchy -> EReference : targetReferenceHierarchy
	if (s.targetReferenceHierarchy.getEReference() != null) t.addNewReference("targetReferenceHierarchy", s.targetReferenceHierarchy.getEReference());
	//FunctionalChainInvolvementLink.exchangeContext -> EReference : exchangeContext
	if (s.exchangeContext.getEReference() != null) t.addNewReference("exchangeContext", s.exchangeContext.getEReference());
	//FunctionalChainInvolvementLink.exchangedItems -> EReference : exchangedItems
	if (s.exchangedItems.getEReference() != null) t.addNewReference("exchangedItems", s.exchangedItems.getEReference());
	//FunctionalChainInvolvementLink.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//FunctionalChainInvolvementLink.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
}

@lazy
rule SequenceLink
	transform s : DSL!SequenceLink //fa.SequenceLink
	to t : SysMLine!ItemUsage
	extends Base{
	//SequenceLink.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SequenceLink.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SequenceLink.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SequenceLink.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SequenceLink.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SequenceLink.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SequenceLink.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SequenceLink.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SequenceLink.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SequenceLink.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SequenceLink.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SequenceLink.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SequenceLink.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SequenceLink.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SequenceLink.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SequenceLink.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SequenceLink.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SequenceLink.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SequenceLink.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SequenceLink.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SequenceLink.sourceReferenceHierarchy -> EReference : sourceReferenceHierarchy
	if (s.sourceReferenceHierarchy.getEReference() != null) t.addNewReference("sourceReferenceHierarchy", s.sourceReferenceHierarchy.getEReference());
	//SequenceLink.targetReferenceHierarchy -> EReference : targetReferenceHierarchy
	if (s.targetReferenceHierarchy.getEReference() != null) t.addNewReference("targetReferenceHierarchy", s.targetReferenceHierarchy.getEReference());
	//SequenceLink.condition -> EReference : condition
	if (s.condition.getEReference() != null) t.addNewReference("condition", s.condition.getEReference());
	//SequenceLink.links -> EReference : links
	if (s.links.getEReference() != null) t.addNewReference("links", s.links.getEReference());
	//SequenceLink.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//SequenceLink.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
}

@lazy
rule SequenceLinkEnd
	transform s : DSL!SequenceLinkEnd //fa.SequenceLinkEnd
	to t : SysMLine!ItemUsage
	extends Base{
	//SequenceLinkEnd.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SequenceLinkEnd.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SequenceLinkEnd.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SequenceLinkEnd.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SequenceLinkEnd.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SequenceLinkEnd.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SequenceLinkEnd.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SequenceLinkEnd.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SequenceLinkEnd.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SequenceLinkEnd.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SequenceLinkEnd.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SequenceLinkEnd.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SequenceLinkEnd.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SequenceLinkEnd.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SequenceLinkEnd.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SequenceLinkEnd.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SequenceLinkEnd.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SequenceLinkEnd.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SequenceLinkEnd.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SequenceLinkEnd.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule FunctionalChainInvolvementFunction
	transform s : DSL!FunctionalChainInvolvementFunction //fa.FunctionalChainInvolvementFunction
	to t : SysMLine!ItemUsage
	extends Base{
	//FunctionalChainInvolvementFunction.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FunctionalChainInvolvementFunction.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FunctionalChainInvolvementFunction.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//FunctionalChainInvolvementFunction.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//FunctionalChainInvolvementFunction.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//FunctionalChainInvolvementFunction.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//FunctionalChainInvolvementFunction.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//FunctionalChainInvolvementFunction.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FunctionalChainInvolvementFunction.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FunctionalChainInvolvementFunction.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FunctionalChainInvolvementFunction.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//FunctionalChainInvolvementFunction.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//FunctionalChainInvolvementFunction.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//FunctionalChainInvolvementFunction.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//FunctionalChainInvolvementFunction.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//FunctionalChainInvolvementFunction.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//FunctionalChainInvolvementFunction.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//FunctionalChainInvolvementFunction.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//FunctionalChainInvolvementFunction.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//FunctionalChainInvolvementFunction.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//FunctionalChainInvolvementFunction.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//FunctionalChainInvolvementFunction.involver -> EReference : involver
	if (s.involver.getEReference() != null) t.addNewReference("involver", s.involver.getEReference());
	//FunctionalChainInvolvementFunction.involved -> EReference : involved
	if (s.involved.getEReference() != null) t.addNewReference("involved", s.involved.getEReference());
	//FunctionalChainInvolvementFunction.nextFunctionalChainInvolvements -> EReference : nextFunctionalChainInvolvements
	if (s.nextFunctionalChainInvolvements.getEReference() != null) t.addNewReference("nextFunctionalChainInvolvements", s.nextFunctionalChainInvolvements.getEReference());
	//FunctionalChainInvolvementFunction.previousFunctionalChainInvolvements -> EReference : previousFunctionalChainInvolvements
	if (s.previousFunctionalChainInvolvements.getEReference() != null) t.addNewReference("previousFunctionalChainInvolvements", s.previousFunctionalChainInvolvements.getEReference());
	//FunctionalChainInvolvementFunction.involvedElement -> EReference : involvedElement
	if (s.involvedElement.getEReference() != null) t.addNewReference("involvedElement", s.involvedElement.getEReference());
	//FunctionalChainInvolvementFunction.outgoingInvolvementLinks -> EReference : outgoingInvolvementLinks
	if (s.outgoingInvolvementLinks.getEReference() != null) t.addNewReference("outgoingInvolvementLinks", s.outgoingInvolvementLinks.getEReference());
	//FunctionalChainInvolvementFunction.incomingInvolvementLinks -> EReference : incomingInvolvementLinks
	if (s.incomingInvolvementLinks.getEReference() != null) t.addNewReference("incomingInvolvementLinks", s.incomingInvolvementLinks.getEReference());
}

@lazy
rule ControlNode
	transform s : DSL!ControlNode //fa.ControlNode
	to t : SysMLine!ItemUsage
	extends Base{
	//ControlNode.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ControlNode.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ControlNode.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ControlNode.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ControlNode.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ControlNode.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ControlNode.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ControlNode.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//ControlNode.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ControlNode.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ControlNode.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ControlNode.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ControlNode.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ControlNode.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ControlNode.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ControlNode.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ControlNode.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ControlNode.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ControlNode.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ControlNode.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ControlNode.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule ReferenceHierarchyContext
	transform s : DSL!ReferenceHierarchyContext //fa.ReferenceHierarchyContext
	to t : SysMLine!ItemUsage
	extends Base{
	//ReferenceHierarchyContext.sourceReferenceHierarchy -> EReference : sourceReferenceHierarchy
	if (s.sourceReferenceHierarchy.getEReference() != null) t.addNewReference("sourceReferenceHierarchy", s.sourceReferenceHierarchy.getEReference());
	//ReferenceHierarchyContext.targetReferenceHierarchy -> EReference : targetReferenceHierarchy
	if (s.targetReferenceHierarchy.getEReference() != null) t.addNewReference("targetReferenceHierarchy", s.targetReferenceHierarchy.getEReference());
}


// interaction.ecore
@lazy
rule SequenceMessage
	transform s : DSL!SequenceMessage //interaction.SequenceMessage
	to t : SysMLine!ItemUsage
	extends Base{
	//SequenceMessage.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SequenceMessage.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SequenceMessage.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//SequenceMessage.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SequenceMessage.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SequenceMessage.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SequenceMessage.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SequenceMessage.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SequenceMessage.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//SequenceMessage.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SequenceMessage.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SequenceMessage.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SequenceMessage.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SequenceMessage.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SequenceMessage.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SequenceMessage.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SequenceMessage.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SequenceMessage.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SequenceMessage.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SequenceMessage.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SequenceMessage.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SequenceMessage.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SequenceMessage.exchangeContext -> EReference : exchangeContext
	if (s.exchangeContext.getEReference() != null) t.addNewReference("exchangeContext", s.exchangeContext.getEReference());
	//SequenceMessage.sendingEnd -> EReference : sendingEnd
	if (s.sendingEnd.getEReference() != null) t.addNewReference("sendingEnd", s.sendingEnd.getEReference());
	//SequenceMessage.receivingEnd -> EReference : receivingEnd
	if (s.receivingEnd.getEReference() != null) t.addNewReference("receivingEnd", s.receivingEnd.getEReference());
	//SequenceMessage.invokedOperation -> EReference : invokedOperation
	if (s.invokedOperation.getEReference() != null) t.addNewReference("invokedOperation", s.invokedOperation.getEReference());
	//SequenceMessage.exchangedItems -> EReference : exchangedItems
	if (s.exchangedItems.getEReference() != null) t.addNewReference("exchangedItems", s.exchangedItems.getEReference());
	//SequenceMessage.sendingPart -> EReference : sendingPart
	if (s.sendingPart.getEReference() != null) t.addNewReference("sendingPart", s.sendingPart.getEReference());
	//SequenceMessage.receivingPart -> EReference : receivingPart
	if (s.receivingPart.getEReference() != null) t.addNewReference("receivingPart", s.receivingPart.getEReference());
	//SequenceMessage.sendingFunction -> EReference : sendingFunction
	if (s.sendingFunction.getEReference() != null) t.addNewReference("sendingFunction", s.sendingFunction.getEReference());
	//SequenceMessage.receivingFunction -> EReference : receivingFunction
	if (s.receivingFunction.getEReference() != null) t.addNewReference("receivingFunction", s.receivingFunction.getEReference());
	//SequenceMessage.ownedSequenceMessageValuations -> EReference : ownedSequenceMessageValuations
	if (s.ownedSequenceMessageValuations.getEReference() != null) t.addNewReference("ownedSequenceMessageValuations", s.ownedSequenceMessageValuations.getEReference());
}

@lazy
rule Scenario
	transform s : DSL!Scenario //interaction.Scenario
	to t : SysMLine!ItemUsage
	extends Base{
	//Scenario.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Scenario.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Scenario.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Scenario.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Scenario.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Scenario.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Scenario.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Scenario.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Scenario.isControlOperator -> EAttribute : isControlOperator
	if (s.isControlOperator.getEAttribute() != null) t.addNewAttribute("isControlOperator", s.isControlOperator.getEAttribute());
	//Scenario.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//Scenario.merged -> EAttribute : merged
	if (s.merged.getEAttribute() != null) t.addNewAttribute("merged", s.merged.getEAttribute());
	//Scenario.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Scenario.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Scenario.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Scenario.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Scenario.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Scenario.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Scenario.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Scenario.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Scenario.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Scenario.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Scenario.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Scenario.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Scenario.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Scenario.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Scenario.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Scenario.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Scenario.ownedParameterSet -> EReference : ownedParameterSet
	if (s.ownedParameterSet.getEReference() != null) t.addNewReference("ownedParameterSet", s.ownedParameterSet.getEReference());
	//Scenario.ownedParameter -> EReference : ownedParameter
	if (s.ownedParameter.getEReference() != null) t.addNewReference("ownedParameter", s.ownedParameter.getEReference());
	//Scenario.preCondition -> EReference : preCondition
	if (s.preCondition.getEReference() != null) t.addNewReference("preCondition", s.preCondition.getEReference());
	//Scenario.postCondition -> EReference : postCondition
	if (s.postCondition.getEReference() != null) t.addNewReference("postCondition", s.postCondition.getEReference());
	//Scenario.ownedInstanceRoles -> EReference : ownedInstanceRoles
	if (s.ownedInstanceRoles.getEReference() != null) t.addNewReference("ownedInstanceRoles", s.ownedInstanceRoles.getEReference());
	//Scenario.ownedMessages -> EReference : ownedMessages
	if (s.ownedMessages.getEReference() != null) t.addNewReference("ownedMessages", s.ownedMessages.getEReference());
	//Scenario.ownedInteractionFragments -> EReference : ownedInteractionFragments
	if (s.ownedInteractionFragments.getEReference() != null) t.addNewReference("ownedInteractionFragments", s.ownedInteractionFragments.getEReference());
	//Scenario.ownedTimeLapses -> EReference : ownedTimeLapses
	if (s.ownedTimeLapses.getEReference() != null) t.addNewReference("ownedTimeLapses", s.ownedTimeLapses.getEReference());
	//Scenario.ownedEvents -> EReference : ownedEvents
	if (s.ownedEvents.getEReference() != null) t.addNewReference("ownedEvents", s.ownedEvents.getEReference());
	//Scenario.ownedFormalGates -> EReference : ownedFormalGates
	if (s.ownedFormalGates.getEReference() != null) t.addNewReference("ownedFormalGates", s.ownedFormalGates.getEReference());
	//Scenario.ownedScenarioRealization -> EReference : ownedScenarioRealization
	if (s.ownedScenarioRealization.getEReference() != null) t.addNewReference("ownedScenarioRealization", s.ownedScenarioRealization.getEReference());
	//Scenario.ownedConstraintDurations -> EReference : ownedConstraintDurations
	if (s.ownedConstraintDurations.getEReference() != null) t.addNewReference("ownedConstraintDurations", s.ownedConstraintDurations.getEReference());
	//Scenario.containedFunctions -> EReference : containedFunctions
	if (s.containedFunctions.getEReference() != null) t.addNewReference("containedFunctions", s.containedFunctions.getEReference());
	//Scenario.containedParts -> EReference : containedParts
	if (s.containedParts.getEReference() != null) t.addNewReference("containedParts", s.containedParts.getEReference());
	//Scenario.referencedScenarios -> EReference : referencedScenarios
	if (s.referencedScenarios.getEReference() != null) t.addNewReference("referencedScenarios", s.referencedScenarios.getEReference());
	//Scenario.realizedScenarios -> EReference : realizedScenarios
	if (s.realizedScenarios.getEReference() != null) t.addNewReference("realizedScenarios", s.realizedScenarios.getEReference());
	//Scenario.realizingScenarios -> EReference : realizingScenarios
	if (s.realizingScenarios.getEReference() != null) t.addNewReference("realizingScenarios", s.realizingScenarios.getEReference());
}

@lazy
rule MessageEnd
	transform s : DSL!MessageEnd //interaction.MessageEnd
	to t : SysMLine!ItemUsage
	extends Base{
	//MessageEnd.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//MessageEnd.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//MessageEnd.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//MessageEnd.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//MessageEnd.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//MessageEnd.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//MessageEnd.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//MessageEnd.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//MessageEnd.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//MessageEnd.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//MessageEnd.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//MessageEnd.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//MessageEnd.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//MessageEnd.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//MessageEnd.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//MessageEnd.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//MessageEnd.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//MessageEnd.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//MessageEnd.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//MessageEnd.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//MessageEnd.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//MessageEnd.coveredInstanceRoles -> EReference : coveredInstanceRoles
	if (s.coveredInstanceRoles.getEReference() != null) t.addNewReference("coveredInstanceRoles", s.coveredInstanceRoles.getEReference());
	//MessageEnd.event -> EReference : event
	if (s.event.getEReference() != null) t.addNewReference("event", s.event.getEReference());
	//MessageEnd.covered -> EReference : covered
	if (s.covered.getEReference() != null) t.addNewReference("covered", s.covered.getEReference());
	//MessageEnd.message -> EReference : message
	if (s.message.getEReference() != null) t.addNewReference("message", s.message.getEReference());
}

@lazy
rule Execution
	transform s : DSL!Execution //interaction.Execution
	to t : SysMLine!ItemUsage
	extends Base{
	//Execution.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Execution.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Execution.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Execution.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Execution.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Execution.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Execution.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Execution.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Execution.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Execution.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Execution.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Execution.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Execution.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Execution.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Execution.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Execution.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Execution.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Execution.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Execution.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Execution.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Execution.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Execution.start -> EReference : start
	if (s.start.getEReference() != null) t.addNewReference("start", s.start.getEReference());
	//Execution.finish -> EReference : finish
	if (s.finish.getEReference() != null) t.addNewReference("finish", s.finish.getEReference());
	//Execution.covered -> EReference : covered
	if (s.covered.getEReference() != null) t.addNewReference("covered", s.covered.getEReference());
}

@lazy
rule ExecutionEnd
	transform s : DSL!ExecutionEnd //interaction.ExecutionEnd
	to t : SysMLine!ItemUsage
	extends Base{
	//ExecutionEnd.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ExecutionEnd.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ExecutionEnd.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ExecutionEnd.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ExecutionEnd.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ExecutionEnd.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ExecutionEnd.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ExecutionEnd.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ExecutionEnd.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ExecutionEnd.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ExecutionEnd.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ExecutionEnd.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ExecutionEnd.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ExecutionEnd.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ExecutionEnd.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ExecutionEnd.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ExecutionEnd.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ExecutionEnd.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ExecutionEnd.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ExecutionEnd.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ExecutionEnd.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ExecutionEnd.coveredInstanceRoles -> EReference : coveredInstanceRoles
	if (s.coveredInstanceRoles.getEReference() != null) t.addNewReference("coveredInstanceRoles", s.coveredInstanceRoles.getEReference());
	//ExecutionEnd.event -> EReference : event
	if (s.event.getEReference() != null) t.addNewReference("event", s.event.getEReference());
	//ExecutionEnd.covered -> EReference : covered
	if (s.covered.getEReference() != null) t.addNewReference("covered", s.covered.getEReference());
	//ExecutionEnd.execution -> EReference : execution
	if (s.execution.getEReference() != null) t.addNewReference("execution", s.execution.getEReference());
}

@lazy
rule CreationEvent
	transform s : DSL!CreationEvent //interaction.CreationEvent
	to t : SysMLine!ItemUsage
	extends Base{
	//CreationEvent.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CreationEvent.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CreationEvent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CreationEvent.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CreationEvent.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CreationEvent.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CreationEvent.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CreationEvent.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CreationEvent.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CreationEvent.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CreationEvent.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CreationEvent.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CreationEvent.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CreationEvent.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CreationEvent.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CreationEvent.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CreationEvent.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CreationEvent.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CreationEvent.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CreationEvent.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CreationEvent.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CreationEvent.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
}

@lazy
rule DestructionEvent
	transform s : DSL!DestructionEvent //interaction.DestructionEvent
	to t : SysMLine!ItemUsage
	extends Base{
	//DestructionEvent.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//DestructionEvent.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//DestructionEvent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//DestructionEvent.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//DestructionEvent.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//DestructionEvent.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//DestructionEvent.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//DestructionEvent.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//DestructionEvent.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//DestructionEvent.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//DestructionEvent.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//DestructionEvent.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//DestructionEvent.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//DestructionEvent.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//DestructionEvent.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//DestructionEvent.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//DestructionEvent.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//DestructionEvent.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//DestructionEvent.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//DestructionEvent.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//DestructionEvent.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//DestructionEvent.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
}

@lazy
rule ExecutionEvent
	transform s : DSL!ExecutionEvent //interaction.ExecutionEvent
	to t : SysMLine!ItemUsage
	extends Base{
	//ExecutionEvent.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ExecutionEvent.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ExecutionEvent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ExecutionEvent.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ExecutionEvent.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ExecutionEvent.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ExecutionEvent.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ExecutionEvent.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ExecutionEvent.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ExecutionEvent.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ExecutionEvent.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ExecutionEvent.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ExecutionEvent.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ExecutionEvent.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ExecutionEvent.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ExecutionEvent.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ExecutionEvent.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ExecutionEvent.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ExecutionEvent.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ExecutionEvent.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ExecutionEvent.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ExecutionEvent.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
}

@lazy
rule InstanceRole
	transform s : DSL!InstanceRole //interaction.InstanceRole
	to t : SysMLine!ItemUsage
	extends Base{
	//InstanceRole.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InstanceRole.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InstanceRole.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//InstanceRole.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//InstanceRole.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//InstanceRole.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//InstanceRole.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//InstanceRole.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//InstanceRole.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InstanceRole.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InstanceRole.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InstanceRole.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InstanceRole.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//InstanceRole.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//InstanceRole.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//InstanceRole.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//InstanceRole.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//InstanceRole.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//InstanceRole.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//InstanceRole.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//InstanceRole.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//InstanceRole.abstractEnds -> EReference : abstractEnds
	if (s.abstractEnds.getEReference() != null) t.addNewReference("abstractEnds", s.abstractEnds.getEReference());
	//InstanceRole.representedInstance -> EReference : representedInstance
	if (s.representedInstance.getEReference() != null) t.addNewReference("representedInstance", s.representedInstance.getEReference());
}

@lazy
rule AbstractEnd
	transform s : DSL!AbstractEnd //interaction.AbstractEnd
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractEnd.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractEnd.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractEnd.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractEnd.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractEnd.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractEnd.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractEnd.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractEnd.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractEnd.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractEnd.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractEnd.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractEnd.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractEnd.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractEnd.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractEnd.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractEnd.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractEnd.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractEnd.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractEnd.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractEnd.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractEnd.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractEnd.coveredInstanceRoles -> EReference : coveredInstanceRoles
	if (s.coveredInstanceRoles.getEReference() != null) t.addNewReference("coveredInstanceRoles", s.coveredInstanceRoles.getEReference());
	//AbstractEnd.event -> EReference : event
	if (s.event.getEReference() != null) t.addNewReference("event", s.event.getEReference());
	//AbstractEnd.covered -> EReference : covered
	if (s.covered.getEReference() != null) t.addNewReference("covered", s.covered.getEReference());
}

@lazy
rule Event
	transform s : DSL!Event //interaction.Event
	to t : SysMLine!ItemUsage
	extends Base{
	//Event.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Event.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Event.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Event.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Event.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Event.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Event.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Event.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Event.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Event.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Event.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Event.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Event.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Event.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Event.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Event.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Event.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Event.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Event.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Event.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Event.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Event.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
}

@lazy
rule EventReceiptOperation
	transform s : DSL!EventReceiptOperation //interaction.EventReceiptOperation
	to t : SysMLine!ItemUsage
	extends Base{
	//EventReceiptOperation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//EventReceiptOperation.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//EventReceiptOperation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//EventReceiptOperation.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//EventReceiptOperation.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//EventReceiptOperation.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//EventReceiptOperation.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//EventReceiptOperation.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//EventReceiptOperation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//EventReceiptOperation.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//EventReceiptOperation.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//EventReceiptOperation.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//EventReceiptOperation.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//EventReceiptOperation.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//EventReceiptOperation.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//EventReceiptOperation.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//EventReceiptOperation.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//EventReceiptOperation.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//EventReceiptOperation.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//EventReceiptOperation.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//EventReceiptOperation.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//EventReceiptOperation.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//EventReceiptOperation.operation -> EReference : operation_
	if (s.`operation`.getEReference() != null) t.addNewReference("operation_", s.`operation`.getEReference());
}

@lazy
rule EventSentOperation
	transform s : DSL!EventSentOperation //interaction.EventSentOperation
	to t : SysMLine!ItemUsage
	extends Base{
	//EventSentOperation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//EventSentOperation.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//EventSentOperation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//EventSentOperation.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//EventSentOperation.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//EventSentOperation.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//EventSentOperation.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//EventSentOperation.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//EventSentOperation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//EventSentOperation.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//EventSentOperation.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//EventSentOperation.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//EventSentOperation.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//EventSentOperation.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//EventSentOperation.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//EventSentOperation.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//EventSentOperation.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//EventSentOperation.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//EventSentOperation.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//EventSentOperation.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//EventSentOperation.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//EventSentOperation.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//EventSentOperation.operation -> EReference : operation_
	if (s.`operation`.getEReference() != null) t.addNewReference("operation_", s.`operation`.getEReference());
}

@lazy
rule MergeLink
	transform s : DSL!MergeLink //interaction.MergeLink
	to t : SysMLine!ItemUsage
	extends Base{
	//MergeLink.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//MergeLink.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//MergeLink.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//MergeLink.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//MergeLink.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//MergeLink.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//MergeLink.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//MergeLink.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//MergeLink.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//MergeLink.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//MergeLink.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//MergeLink.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//MergeLink.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//MergeLink.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//MergeLink.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//MergeLink.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//MergeLink.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//MergeLink.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//MergeLink.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//MergeLink.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//MergeLink.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//MergeLink.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//MergeLink.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
}

@lazy
rule RefinementLink
	transform s : DSL!RefinementLink //interaction.RefinementLink
	to t : SysMLine!ItemUsage
	extends Base{
	//RefinementLink.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//RefinementLink.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//RefinementLink.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//RefinementLink.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//RefinementLink.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//RefinementLink.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//RefinementLink.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//RefinementLink.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//RefinementLink.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//RefinementLink.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//RefinementLink.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//RefinementLink.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//RefinementLink.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//RefinementLink.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//RefinementLink.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//RefinementLink.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//RefinementLink.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//RefinementLink.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//RefinementLink.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//RefinementLink.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//RefinementLink.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//RefinementLink.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//RefinementLink.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
}

@lazy
rule AbstractCapabilityRealization
	transform s : DSL!AbstractCapabilityRealization //interaction.AbstractCapabilityRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractCapabilityRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractCapabilityRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractCapabilityRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractCapabilityRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractCapabilityRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractCapabilityRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractCapabilityRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractCapabilityRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractCapabilityRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractCapabilityRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractCapabilityRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractCapabilityRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//AbstractCapabilityRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractCapabilityRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractCapabilityRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractCapabilityRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractCapabilityRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractCapabilityRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractCapabilityRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractCapabilityRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractCapabilityRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractCapabilityRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//AbstractCapabilityRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//AbstractCapabilityRealization.realizedCapability -> EReference : realizedCapability
	if (s.realizedCapability.getEReference() != null) t.addNewReference("realizedCapability", s.realizedCapability.getEReference());
	//AbstractCapabilityRealization.realizingCapability -> EReference : realizingCapability
	if (s.realizingCapability.getEReference() != null) t.addNewReference("realizingCapability", s.realizingCapability.getEReference());
}

@lazy
rule AbstractCapability
	transform s : DSL!AbstractCapability //interaction.AbstractCapability
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractCapability.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractCapability.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractCapability.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractCapability.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractCapability.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractCapability.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractCapability.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractCapability.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractCapability.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractCapability.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractCapability.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractCapability.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractCapability.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractCapability.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractCapability.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractCapability.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractCapability.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractCapability.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractCapability.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractCapability.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractCapability.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractCapability.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//AbstractCapability.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//AbstractCapability.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//AbstractCapability.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//AbstractCapability.involvedInvolvements -> EReference : involvedInvolvements
	if (s.involvedInvolvements.getEReference() != null) t.addNewReference("involvedInvolvements", s.involvedInvolvements.getEReference());
	//AbstractCapability.ownedFunctionalChains -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null) t.addNewReference("ownedFunctionalChains", s.ownedFunctionalChains.getEReference());
	//AbstractCapability.preCondition -> EReference : preCondition
	if (s.preCondition.getEReference() != null) t.addNewReference("preCondition", s.preCondition.getEReference());
	//AbstractCapability.postCondition -> EReference : postCondition
	if (s.postCondition.getEReference() != null) t.addNewReference("postCondition", s.postCondition.getEReference());
	//AbstractCapability.ownedScenarios -> EReference : ownedScenarios
	if (s.ownedScenarios.getEReference() != null) t.addNewReference("ownedScenarios", s.ownedScenarios.getEReference());
	//AbstractCapability.incomingCapabilityAllocation -> EReference : incomingCapabilityAllocation
	if (s.incomingCapabilityAllocation.getEReference() != null) t.addNewReference("incomingCapabilityAllocation", s.incomingCapabilityAllocation.getEReference());
	//AbstractCapability.outgoingCapabilityAllocation -> EReference : outgoingCapabilityAllocation
	if (s.outgoingCapabilityAllocation.getEReference() != null) t.addNewReference("outgoingCapabilityAllocation", s.outgoingCapabilityAllocation.getEReference());
	//AbstractCapability.extends -> EReference : extends_
	if (s.`extends`.getEReference() != null) t.addNewReference("extends_", s.`extends`.getEReference());
	//AbstractCapability.extending -> EReference : extending
	if (s.extending.getEReference() != null) t.addNewReference("extending", s.extending.getEReference());
	//AbstractCapability.abstractCapabilityExtensionPoints -> EReference : abstractCapabilityExtensionPoints
	if (s.abstractCapabilityExtensionPoints.getEReference() != null) t.addNewReference("abstractCapabilityExtensionPoints", s.abstractCapabilityExtensionPoints.getEReference());
	//AbstractCapability.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//AbstractCapability.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//AbstractCapability.includes -> EReference : includes
	if (s.includes.getEReference() != null) t.addNewReference("includes", s.includes.getEReference());
	//AbstractCapability.including -> EReference : including
	if (s.including.getEReference() != null) t.addNewReference("including", s.including.getEReference());
	//AbstractCapability.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//AbstractCapability.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//AbstractCapability.includedAbstractCapabilities -> EReference : includedAbstractCapabilities
	if (s.includedAbstractCapabilities.getEReference() != null) t.addNewReference("includedAbstractCapabilities", s.includedAbstractCapabilities.getEReference());
	//AbstractCapability.includingAbstractCapabilities -> EReference : includingAbstractCapabilities
	if (s.includingAbstractCapabilities.getEReference() != null) t.addNewReference("includingAbstractCapabilities", s.includingAbstractCapabilities.getEReference());
	//AbstractCapability.extendedAbstractCapabilities -> EReference : extendedAbstractCapabilities
	if (s.extendedAbstractCapabilities.getEReference() != null) t.addNewReference("extendedAbstractCapabilities", s.extendedAbstractCapabilities.getEReference());
	//AbstractCapability.extendingAbstractCapabilities -> EReference : extendingAbstractCapabilities
	if (s.extendingAbstractCapabilities.getEReference() != null) t.addNewReference("extendingAbstractCapabilities", s.extendingAbstractCapabilities.getEReference());
	//AbstractCapability.ownedFunctionalChainAbstractCapabilityInvolvements -> EReference : ownedFunctionalChainAbstractCapabilityInvolvements
	if (s.ownedFunctionalChainAbstractCapabilityInvolvements.getEReference() != null) t.addNewReference("ownedFunctionalChainAbstractCapabilityInvolvements", s.ownedFunctionalChainAbstractCapabilityInvolvements.getEReference());
	//AbstractCapability.ownedAbstractFunctionAbstractCapabilityInvolvements -> EReference : ownedAbstractFunctionAbstractCapabilityInvolvements
	if (s.ownedAbstractFunctionAbstractCapabilityInvolvements.getEReference() != null) t.addNewReference("ownedAbstractFunctionAbstractCapabilityInvolvements", s.ownedAbstractFunctionAbstractCapabilityInvolvements.getEReference());
	//AbstractCapability.availableInStates -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null) t.addNewReference("availableInStates", s.availableInStates.getEReference());
	//AbstractCapability.ownedAbstractCapabilityRealizations -> EReference : ownedAbstractCapabilityRealizations
	if (s.ownedAbstractCapabilityRealizations.getEReference() != null) t.addNewReference("ownedAbstractCapabilityRealizations", s.ownedAbstractCapabilityRealizations.getEReference());
	//AbstractCapability.involvedAbstractFunctions -> EReference : involvedAbstractFunctions
	if (s.involvedAbstractFunctions.getEReference() != null) t.addNewReference("involvedAbstractFunctions", s.involvedAbstractFunctions.getEReference());
	//AbstractCapability.involvedFunctionalChains -> EReference : involvedFunctionalChains
	if (s.involvedFunctionalChains.getEReference() != null) t.addNewReference("involvedFunctionalChains", s.involvedFunctionalChains.getEReference());
}

@lazy
rule AbstractCapabilityExtend
	transform s : DSL!AbstractCapabilityExtend //interaction.AbstractCapabilityExtend
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractCapabilityExtend.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractCapabilityExtend.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractCapabilityExtend.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractCapabilityExtend.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractCapabilityExtend.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractCapabilityExtend.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractCapabilityExtend.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractCapabilityExtend.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractCapabilityExtend.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractCapabilityExtend.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractCapabilityExtend.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractCapabilityExtend.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//AbstractCapabilityExtend.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractCapabilityExtend.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractCapabilityExtend.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractCapabilityExtend.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractCapabilityExtend.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractCapabilityExtend.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractCapabilityExtend.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractCapabilityExtend.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractCapabilityExtend.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractCapabilityExtend.extended -> EReference : extended
	if (s.extended.getEReference() != null) t.addNewReference("extended", s.extended.getEReference());
	//AbstractCapabilityExtend.extension -> EReference : extension
	if (s.extension.getEReference() != null) t.addNewReference("extension", s.extension.getEReference());
	//AbstractCapabilityExtend.extensionLocation -> EReference : extensionLocation
	if (s.extensionLocation.getEReference() != null) t.addNewReference("extensionLocation", s.extensionLocation.getEReference());
}

@lazy
rule AbstractCapabilityExtensionPoint
	transform s : DSL!AbstractCapabilityExtensionPoint //interaction.AbstractCapabilityExtensionPoint
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractCapabilityExtensionPoint.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractCapabilityExtensionPoint.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractCapabilityExtensionPoint.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractCapabilityExtensionPoint.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractCapabilityExtensionPoint.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractCapabilityExtensionPoint.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractCapabilityExtensionPoint.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractCapabilityExtensionPoint.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractCapabilityExtensionPoint.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractCapabilityExtensionPoint.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractCapabilityExtensionPoint.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractCapabilityExtensionPoint.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractCapabilityExtensionPoint.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//AbstractCapabilityExtensionPoint.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractCapabilityExtensionPoint.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractCapabilityExtensionPoint.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractCapabilityExtensionPoint.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractCapabilityExtensionPoint.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractCapabilityExtensionPoint.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractCapabilityExtensionPoint.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractCapabilityExtensionPoint.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractCapabilityExtensionPoint.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractCapabilityExtensionPoint.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//AbstractCapabilityExtensionPoint.abstractCapability -> EReference : abstractCapability
	if (s.abstractCapability.getEReference() != null) t.addNewReference("abstractCapability", s.abstractCapability.getEReference());
	//AbstractCapabilityExtensionPoint.extendLinks -> EReference : extendLinks
	if (s.extendLinks.getEReference() != null) t.addNewReference("extendLinks", s.extendLinks.getEReference());
}

@lazy
rule AbstractCapabilityGeneralization
	transform s : DSL!AbstractCapabilityGeneralization //interaction.AbstractCapabilityGeneralization
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractCapabilityGeneralization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractCapabilityGeneralization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractCapabilityGeneralization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractCapabilityGeneralization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractCapabilityGeneralization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractCapabilityGeneralization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractCapabilityGeneralization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractCapabilityGeneralization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractCapabilityGeneralization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractCapabilityGeneralization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractCapabilityGeneralization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractCapabilityGeneralization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//AbstractCapabilityGeneralization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractCapabilityGeneralization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractCapabilityGeneralization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractCapabilityGeneralization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractCapabilityGeneralization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractCapabilityGeneralization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractCapabilityGeneralization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractCapabilityGeneralization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractCapabilityGeneralization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractCapabilityGeneralization.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//AbstractCapabilityGeneralization.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
}

@lazy
rule AbstractCapabilityInclude
	transform s : DSL!AbstractCapabilityInclude //interaction.AbstractCapabilityInclude
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractCapabilityInclude.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractCapabilityInclude.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractCapabilityInclude.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractCapabilityInclude.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractCapabilityInclude.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractCapabilityInclude.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractCapabilityInclude.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractCapabilityInclude.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractCapabilityInclude.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractCapabilityInclude.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractCapabilityInclude.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractCapabilityInclude.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//AbstractCapabilityInclude.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractCapabilityInclude.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractCapabilityInclude.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractCapabilityInclude.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractCapabilityInclude.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractCapabilityInclude.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractCapabilityInclude.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractCapabilityInclude.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractCapabilityInclude.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractCapabilityInclude.included -> EReference : included
	if (s.included.getEReference() != null) t.addNewReference("included", s.included.getEReference());
	//AbstractCapabilityInclude.inclusion -> EReference : inclusion
	if (s.inclusion.getEReference() != null) t.addNewReference("inclusion", s.inclusion.getEReference());
}

@lazy
rule InteractionFragment
	transform s : DSL!InteractionFragment //interaction.InteractionFragment
	to t : SysMLine!ItemUsage
	extends Base{
	//InteractionFragment.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InteractionFragment.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InteractionFragment.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//InteractionFragment.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//InteractionFragment.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//InteractionFragment.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//InteractionFragment.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//InteractionFragment.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//InteractionFragment.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InteractionFragment.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InteractionFragment.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InteractionFragment.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InteractionFragment.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//InteractionFragment.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//InteractionFragment.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//InteractionFragment.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//InteractionFragment.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//InteractionFragment.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//InteractionFragment.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//InteractionFragment.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//InteractionFragment.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//InteractionFragment.coveredInstanceRoles -> EReference : coveredInstanceRoles
	if (s.coveredInstanceRoles.getEReference() != null) t.addNewReference("coveredInstanceRoles", s.coveredInstanceRoles.getEReference());
}

@lazy
rule InteractionState
	transform s : DSL!InteractionState //interaction.InteractionState
	to t : SysMLine!ItemUsage
	extends Base{
	//InteractionState.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InteractionState.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InteractionState.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//InteractionState.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//InteractionState.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//InteractionState.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//InteractionState.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//InteractionState.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//InteractionState.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InteractionState.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InteractionState.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InteractionState.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InteractionState.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//InteractionState.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//InteractionState.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//InteractionState.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//InteractionState.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//InteractionState.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//InteractionState.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//InteractionState.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//InteractionState.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//InteractionState.coveredInstanceRoles -> EReference : coveredInstanceRoles
	if (s.coveredInstanceRoles.getEReference() != null) t.addNewReference("coveredInstanceRoles", s.coveredInstanceRoles.getEReference());
	//InteractionState.relatedAbstractState -> EReference : relatedAbstractState
	if (s.relatedAbstractState.getEReference() != null) t.addNewReference("relatedAbstractState", s.relatedAbstractState.getEReference());
	//InteractionState.relatedAbstractFunction -> EReference : relatedAbstractFunction
	if (s.relatedAbstractFunction.getEReference() != null) t.addNewReference("relatedAbstractFunction", s.relatedAbstractFunction.getEReference());
	//InteractionState.covered -> EReference : covered
	if (s.covered.getEReference() != null) t.addNewReference("covered", s.covered.getEReference());
}

@lazy
rule InteractionUse
	transform s : DSL!InteractionUse //interaction.InteractionUse
	to t : SysMLine!ItemUsage
	extends Base{
	//InteractionUse.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InteractionUse.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InteractionUse.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//InteractionUse.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//InteractionUse.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//InteractionUse.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//InteractionUse.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//InteractionUse.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//InteractionUse.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InteractionUse.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InteractionUse.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InteractionUse.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InteractionUse.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//InteractionUse.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//InteractionUse.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//InteractionUse.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//InteractionUse.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//InteractionUse.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//InteractionUse.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//InteractionUse.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//InteractionUse.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//InteractionUse.start -> EReference : start
	if (s.start.getEReference() != null) t.addNewReference("start", s.start.getEReference());
	//InteractionUse.finish -> EReference : finish
	if (s.finish.getEReference() != null) t.addNewReference("finish", s.finish.getEReference());
	//InteractionUse.ownedGates -> EReference : ownedGates
	if (s.ownedGates.getEReference() != null) t.addNewReference("ownedGates", s.ownedGates.getEReference());
	//InteractionUse.referencedScenario -> EReference : referencedScenario
	if (s.referencedScenario.getEReference() != null) t.addNewReference("referencedScenario", s.referencedScenario.getEReference());
	//InteractionUse.actualGates -> EReference : actualGates
	if (s.actualGates.getEReference() != null) t.addNewReference("actualGates", s.actualGates.getEReference());
}

@lazy
rule CombinedFragment
	transform s : DSL!CombinedFragment //interaction.CombinedFragment
	to t : SysMLine!ItemUsage
	extends Base{
	//CombinedFragment.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CombinedFragment.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CombinedFragment.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CombinedFragment.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CombinedFragment.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CombinedFragment.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CombinedFragment.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CombinedFragment.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CombinedFragment.operator -> EAttribute : operator
	if (s.operator.getEAttribute() != null) t.addNewAttribute("operator", s.operator.getEAttribute());
	//CombinedFragment.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CombinedFragment.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CombinedFragment.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CombinedFragment.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CombinedFragment.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CombinedFragment.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CombinedFragment.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CombinedFragment.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CombinedFragment.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CombinedFragment.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CombinedFragment.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CombinedFragment.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CombinedFragment.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CombinedFragment.start -> EReference : start
	if (s.start.getEReference() != null) t.addNewReference("start", s.start.getEReference());
	//CombinedFragment.finish -> EReference : finish
	if (s.finish.getEReference() != null) t.addNewReference("finish", s.finish.getEReference());
	//CombinedFragment.ownedGates -> EReference : ownedGates
	if (s.ownedGates.getEReference() != null) t.addNewReference("ownedGates", s.ownedGates.getEReference());
	//CombinedFragment.referencedOperands -> EReference : referencedOperands
	if (s.referencedOperands.getEReference() != null) t.addNewReference("referencedOperands", s.referencedOperands.getEReference());
	//CombinedFragment.expressionGates -> EReference : expressionGates
	if (s.expressionGates.getEReference() != null) t.addNewReference("expressionGates", s.expressionGates.getEReference());
}

@lazy
rule Gate
	transform s : DSL!Gate //interaction.Gate
	to t : SysMLine!ItemUsage
	extends Base{
	//Gate.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Gate.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Gate.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Gate.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Gate.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Gate.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Gate.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Gate.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Gate.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Gate.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Gate.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Gate.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Gate.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Gate.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Gate.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Gate.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Gate.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Gate.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Gate.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Gate.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Gate.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Gate.coveredInstanceRoles -> EReference : coveredInstanceRoles
	if (s.coveredInstanceRoles.getEReference() != null) t.addNewReference("coveredInstanceRoles", s.coveredInstanceRoles.getEReference());
	//Gate.event -> EReference : event
	if (s.event.getEReference() != null) t.addNewReference("event", s.event.getEReference());
	//Gate.covered -> EReference : covered
	if (s.covered.getEReference() != null) t.addNewReference("covered", s.covered.getEReference());
	//Gate.message -> EReference : message
	if (s.message.getEReference() != null) t.addNewReference("message", s.message.getEReference());
}

@lazy
rule InteractionOperand
	transform s : DSL!InteractionOperand //interaction.InteractionOperand
	to t : SysMLine!ItemUsage
	extends Base{
	//InteractionOperand.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InteractionOperand.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InteractionOperand.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//InteractionOperand.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//InteractionOperand.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//InteractionOperand.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//InteractionOperand.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//InteractionOperand.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//InteractionOperand.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InteractionOperand.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InteractionOperand.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InteractionOperand.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InteractionOperand.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//InteractionOperand.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//InteractionOperand.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//InteractionOperand.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//InteractionOperand.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//InteractionOperand.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//InteractionOperand.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//InteractionOperand.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//InteractionOperand.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//InteractionOperand.coveredInstanceRoles -> EReference : coveredInstanceRoles
	if (s.coveredInstanceRoles.getEReference() != null) t.addNewReference("coveredInstanceRoles", s.coveredInstanceRoles.getEReference());
	//InteractionOperand.referencedInteractionFragments -> EReference : referencedInteractionFragments
	if (s.referencedInteractionFragments.getEReference() != null) t.addNewReference("referencedInteractionFragments", s.referencedInteractionFragments.getEReference());
	//InteractionOperand.guard -> EReference : guard_
	if (s.`guard`.getEReference() != null) t.addNewReference("guard_", s.`guard`.getEReference());
}

@lazy
rule TimeLapse
	transform s : DSL!TimeLapse //interaction.TimeLapse
	to t : SysMLine!ItemUsage
	extends Base{
	//TimeLapse.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//TimeLapse.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//TimeLapse.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//TimeLapse.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//TimeLapse.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//TimeLapse.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//TimeLapse.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//TimeLapse.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//TimeLapse.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//TimeLapse.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//TimeLapse.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//TimeLapse.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//TimeLapse.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//TimeLapse.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//TimeLapse.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//TimeLapse.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//TimeLapse.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//TimeLapse.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//TimeLapse.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//TimeLapse.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//TimeLapse.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//TimeLapse.start -> EReference : start
	if (s.start.getEReference() != null) t.addNewReference("start", s.start.getEReference());
	//TimeLapse.finish -> EReference : finish
	if (s.finish.getEReference() != null) t.addNewReference("finish", s.finish.getEReference());
}

@lazy
rule AbstractFragment
	transform s : DSL!AbstractFragment //interaction.AbstractFragment
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractFragment.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractFragment.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractFragment.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractFragment.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractFragment.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractFragment.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractFragment.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractFragment.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractFragment.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractFragment.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractFragment.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractFragment.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractFragment.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractFragment.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractFragment.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractFragment.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractFragment.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractFragment.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractFragment.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractFragment.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractFragment.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractFragment.start -> EReference : start
	if (s.start.getEReference() != null) t.addNewReference("start", s.start.getEReference());
	//AbstractFragment.finish -> EReference : finish
	if (s.finish.getEReference() != null) t.addNewReference("finish", s.finish.getEReference());
	//AbstractFragment.ownedGates -> EReference : ownedGates
	if (s.ownedGates.getEReference() != null) t.addNewReference("ownedGates", s.ownedGates.getEReference());
}

@lazy
rule FragmentEnd
	transform s : DSL!FragmentEnd //interaction.FragmentEnd
	to t : SysMLine!ItemUsage
	extends Base{
	//FragmentEnd.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FragmentEnd.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FragmentEnd.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//FragmentEnd.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//FragmentEnd.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//FragmentEnd.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//FragmentEnd.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//FragmentEnd.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//FragmentEnd.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FragmentEnd.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FragmentEnd.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FragmentEnd.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//FragmentEnd.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//FragmentEnd.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//FragmentEnd.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//FragmentEnd.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//FragmentEnd.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//FragmentEnd.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//FragmentEnd.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//FragmentEnd.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//FragmentEnd.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//FragmentEnd.coveredInstanceRoles -> EReference : coveredInstanceRoles
	if (s.coveredInstanceRoles.getEReference() != null) t.addNewReference("coveredInstanceRoles", s.coveredInstanceRoles.getEReference());
	//FragmentEnd.abstractFragment -> EReference : abstractFragment
	if (s.abstractFragment.getEReference() != null) t.addNewReference("abstractFragment", s.abstractFragment.getEReference());
}

@lazy
rule FunctionalChainAbstractCapabilityInvolvement
	transform s : DSL!FunctionalChainAbstractCapabilityInvolvement //interaction.FunctionalChainAbstractCapabilityInvolvement
	to t : SysMLine!ItemUsage
	extends Base{
	//FunctionalChainAbstractCapabilityInvolvement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FunctionalChainAbstractCapabilityInvolvement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FunctionalChainAbstractCapabilityInvolvement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//FunctionalChainAbstractCapabilityInvolvement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//FunctionalChainAbstractCapabilityInvolvement.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//FunctionalChainAbstractCapabilityInvolvement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//FunctionalChainAbstractCapabilityInvolvement.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//FunctionalChainAbstractCapabilityInvolvement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FunctionalChainAbstractCapabilityInvolvement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FunctionalChainAbstractCapabilityInvolvement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FunctionalChainAbstractCapabilityInvolvement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//FunctionalChainAbstractCapabilityInvolvement.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//FunctionalChainAbstractCapabilityInvolvement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//FunctionalChainAbstractCapabilityInvolvement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//FunctionalChainAbstractCapabilityInvolvement.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//FunctionalChainAbstractCapabilityInvolvement.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//FunctionalChainAbstractCapabilityInvolvement.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//FunctionalChainAbstractCapabilityInvolvement.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//FunctionalChainAbstractCapabilityInvolvement.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//FunctionalChainAbstractCapabilityInvolvement.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//FunctionalChainAbstractCapabilityInvolvement.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//FunctionalChainAbstractCapabilityInvolvement.involver -> EReference : involver
	if (s.involver.getEReference() != null) t.addNewReference("involver", s.involver.getEReference());
	//FunctionalChainAbstractCapabilityInvolvement.involved -> EReference : involved
	if (s.involved.getEReference() != null) t.addNewReference("involved", s.involved.getEReference());
	//FunctionalChainAbstractCapabilityInvolvement.capability -> EReference : capability
	if (s.capability.getEReference() != null) t.addNewReference("capability", s.capability.getEReference());
	//FunctionalChainAbstractCapabilityInvolvement.functionalChain -> EReference : functionalChain
	if (s.functionalChain.getEReference() != null) t.addNewReference("functionalChain", s.functionalChain.getEReference());
}

@lazy
rule AbstractFunctionAbstractCapabilityInvolvement
	transform s : DSL!AbstractFunctionAbstractCapabilityInvolvement //interaction.AbstractFunctionAbstractCapabilityInvolvement
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractFunctionAbstractCapabilityInvolvement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractFunctionAbstractCapabilityInvolvement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractFunctionAbstractCapabilityInvolvement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractFunctionAbstractCapabilityInvolvement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractFunctionAbstractCapabilityInvolvement.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractFunctionAbstractCapabilityInvolvement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractFunctionAbstractCapabilityInvolvement.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractFunctionAbstractCapabilityInvolvement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractFunctionAbstractCapabilityInvolvement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractFunctionAbstractCapabilityInvolvement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractFunctionAbstractCapabilityInvolvement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractFunctionAbstractCapabilityInvolvement.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//AbstractFunctionAbstractCapabilityInvolvement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractFunctionAbstractCapabilityInvolvement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractFunctionAbstractCapabilityInvolvement.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractFunctionAbstractCapabilityInvolvement.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractFunctionAbstractCapabilityInvolvement.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractFunctionAbstractCapabilityInvolvement.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractFunctionAbstractCapabilityInvolvement.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractFunctionAbstractCapabilityInvolvement.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractFunctionAbstractCapabilityInvolvement.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractFunctionAbstractCapabilityInvolvement.involver -> EReference : involver
	if (s.involver.getEReference() != null) t.addNewReference("involver", s.involver.getEReference());
	//AbstractFunctionAbstractCapabilityInvolvement.involved -> EReference : involved
	if (s.involved.getEReference() != null) t.addNewReference("involved", s.involved.getEReference());
	//AbstractFunctionAbstractCapabilityInvolvement.capability -> EReference : capability
	if (s.capability.getEReference() != null) t.addNewReference("capability", s.capability.getEReference());
	//AbstractFunctionAbstractCapabilityInvolvement.function -> EReference : function_
	if (s.`function`.getEReference() != null) t.addNewReference("function_", s.`function`.getEReference());
}

@lazy
rule ScenarioRealization
	transform s : DSL!ScenarioRealization //interaction.ScenarioRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//ScenarioRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ScenarioRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ScenarioRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ScenarioRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ScenarioRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ScenarioRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ScenarioRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ScenarioRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ScenarioRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ScenarioRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ScenarioRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ScenarioRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ScenarioRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ScenarioRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ScenarioRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ScenarioRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ScenarioRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ScenarioRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ScenarioRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ScenarioRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ScenarioRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ScenarioRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//ScenarioRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//ScenarioRealization.realizedScenario -> EReference : realizedScenario
	if (s.realizedScenario.getEReference() != null) t.addNewReference("realizedScenario", s.realizedScenario.getEReference());
	//ScenarioRealization.realizingScenario -> EReference : realizingScenario
	if (s.realizingScenario.getEReference() != null) t.addNewReference("realizingScenario", s.realizingScenario.getEReference());
}

@lazy
rule StateFragment
	transform s : DSL!StateFragment //interaction.StateFragment
	to t : SysMLine!ItemUsage
	extends Base{
	//StateFragment.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//StateFragment.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//StateFragment.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//StateFragment.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//StateFragment.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//StateFragment.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//StateFragment.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//StateFragment.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//StateFragment.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//StateFragment.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//StateFragment.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//StateFragment.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//StateFragment.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//StateFragment.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//StateFragment.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//StateFragment.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//StateFragment.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//StateFragment.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//StateFragment.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//StateFragment.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//StateFragment.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//StateFragment.start -> EReference : start
	if (s.start.getEReference() != null) t.addNewReference("start", s.start.getEReference());
	//StateFragment.finish -> EReference : finish
	if (s.finish.getEReference() != null) t.addNewReference("finish", s.finish.getEReference());
	//StateFragment.relatedAbstractState -> EReference : relatedAbstractState
	if (s.relatedAbstractState.getEReference() != null) t.addNewReference("relatedAbstractState", s.relatedAbstractState.getEReference());
	//StateFragment.relatedAbstractFunction -> EReference : relatedAbstractFunction
	if (s.relatedAbstractFunction.getEReference() != null) t.addNewReference("relatedAbstractFunction", s.relatedAbstractFunction.getEReference());
}

@lazy
rule ArmTimerEvent
	transform s : DSL!ArmTimerEvent //interaction.ArmTimerEvent
	to t : SysMLine!ItemUsage
	extends Base{
	//ArmTimerEvent.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ArmTimerEvent.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ArmTimerEvent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ArmTimerEvent.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ArmTimerEvent.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ArmTimerEvent.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ArmTimerEvent.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ArmTimerEvent.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ArmTimerEvent.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ArmTimerEvent.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ArmTimerEvent.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ArmTimerEvent.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ArmTimerEvent.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ArmTimerEvent.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ArmTimerEvent.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ArmTimerEvent.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ArmTimerEvent.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ArmTimerEvent.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ArmTimerEvent.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ArmTimerEvent.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ArmTimerEvent.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ArmTimerEvent.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
}

@lazy
rule CancelTimerEvent
	transform s : DSL!CancelTimerEvent //interaction.CancelTimerEvent
	to t : SysMLine!ItemUsage
	extends Base{
	//CancelTimerEvent.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CancelTimerEvent.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CancelTimerEvent.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CancelTimerEvent.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CancelTimerEvent.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CancelTimerEvent.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CancelTimerEvent.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CancelTimerEvent.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CancelTimerEvent.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CancelTimerEvent.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CancelTimerEvent.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CancelTimerEvent.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CancelTimerEvent.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CancelTimerEvent.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CancelTimerEvent.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CancelTimerEvent.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CancelTimerEvent.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CancelTimerEvent.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CancelTimerEvent.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CancelTimerEvent.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CancelTimerEvent.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CancelTimerEvent.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
}

@lazy
rule ConstraintDuration
	transform s : DSL!ConstraintDuration //interaction.ConstraintDuration
	to t : SysMLine!ItemUsage
	extends Base{
	//ConstraintDuration.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ConstraintDuration.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ConstraintDuration.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ConstraintDuration.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ConstraintDuration.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ConstraintDuration.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ConstraintDuration.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ConstraintDuration.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ConstraintDuration.duration -> EAttribute : duration
	if (s.duration.getEAttribute() != null) t.addNewAttribute("duration", s.duration.getEAttribute());
	//ConstraintDuration.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ConstraintDuration.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ConstraintDuration.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ConstraintDuration.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ConstraintDuration.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ConstraintDuration.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ConstraintDuration.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ConstraintDuration.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ConstraintDuration.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ConstraintDuration.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ConstraintDuration.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ConstraintDuration.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ConstraintDuration.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ConstraintDuration.start -> EReference : start
	if (s.start.getEReference() != null) t.addNewReference("start", s.start.getEReference());
	//ConstraintDuration.finish -> EReference : finish
	if (s.finish.getEReference() != null) t.addNewReference("finish", s.finish.getEReference());
}

@lazy
rule SequenceMessageValuation
	transform s : DSL!SequenceMessageValuation //interaction.SequenceMessageValuation
	to t : SysMLine!ItemUsage
	extends Base{
	//SequenceMessageValuation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SequenceMessageValuation.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SequenceMessageValuation.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SequenceMessageValuation.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SequenceMessageValuation.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SequenceMessageValuation.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SequenceMessageValuation.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SequenceMessageValuation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SequenceMessageValuation.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SequenceMessageValuation.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SequenceMessageValuation.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SequenceMessageValuation.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SequenceMessageValuation.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SequenceMessageValuation.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SequenceMessageValuation.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SequenceMessageValuation.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SequenceMessageValuation.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SequenceMessageValuation.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SequenceMessageValuation.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SequenceMessageValuation.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SequenceMessageValuation.exchangeItemElement -> EReference : exchangeItemElement
	if (s.exchangeItemElement.getEReference() != null) t.addNewReference("exchangeItemElement", s.exchangeItemElement.getEReference());
	//SequenceMessageValuation.value -> EReference : value
	if (s.value.getEReference() != null) t.addNewReference("value", s.value.getEReference());
}


// cs.ecore
@lazy
rule BlockArchitecturePkg
	transform s : DSL!BlockArchitecturePkg //cs.BlockArchitecturePkg
	to t : SysMLine!ItemUsage
	extends Base{
	//BlockArchitecturePkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//BlockArchitecturePkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//BlockArchitecturePkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//BlockArchitecturePkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//BlockArchitecturePkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//BlockArchitecturePkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//BlockArchitecturePkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//BlockArchitecturePkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//BlockArchitecturePkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//BlockArchitecturePkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//BlockArchitecturePkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//BlockArchitecturePkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//BlockArchitecturePkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//BlockArchitecturePkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//BlockArchitecturePkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//BlockArchitecturePkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//BlockArchitecturePkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//BlockArchitecturePkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//BlockArchitecturePkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//BlockArchitecturePkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//BlockArchitecturePkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//BlockArchitecturePkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//BlockArchitecturePkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//BlockArchitecturePkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//BlockArchitecturePkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
}

@lazy
rule BlockArchitecture
	transform s : DSL!BlockArchitecture //cs.BlockArchitecture
	to t : SysMLine!ItemUsage
	extends Base{
	//BlockArchitecture.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//BlockArchitecture.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//BlockArchitecture.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//BlockArchitecture.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//BlockArchitecture.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//BlockArchitecture.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//BlockArchitecture.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//BlockArchitecture.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//BlockArchitecture.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//BlockArchitecture.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//BlockArchitecture.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//BlockArchitecture.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//BlockArchitecture.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//BlockArchitecture.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//BlockArchitecture.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//BlockArchitecture.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//BlockArchitecture.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//BlockArchitecture.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//BlockArchitecture.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//BlockArchitecture.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//BlockArchitecture.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//BlockArchitecture.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//BlockArchitecture.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//BlockArchitecture.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//BlockArchitecture.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//BlockArchitecture.ownedFunctionPkg -> EReference : ownedFunctionPkg
	if (s.ownedFunctionPkg.getEReference() != null) t.addNewReference("ownedFunctionPkg", s.ownedFunctionPkg.getEReference());
	//BlockArchitecture.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//BlockArchitecture.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//BlockArchitecture.ownedFunctionalLinks -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//BlockArchitecture.ownedFunctionalAllocations -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//BlockArchitecture.ownedComponentExchangeRealizations -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//BlockArchitecture.ownedAbstractCapabilityPkg -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//BlockArchitecture.ownedInterfacePkg -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//BlockArchitecture.ownedDataPkg -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//BlockArchitecture.provisionedArchitectureAllocations -> EReference : provisionedArchitectureAllocations
	if (s.provisionedArchitectureAllocations.getEReference() != null) t.addNewReference("provisionedArchitectureAllocations", s.provisionedArchitectureAllocations.getEReference());
	//BlockArchitecture.provisioningArchitectureAllocations -> EReference : provisioningArchitectureAllocations
	if (s.provisioningArchitectureAllocations.getEReference() != null) t.addNewReference("provisioningArchitectureAllocations", s.provisioningArchitectureAllocations.getEReference());
	//BlockArchitecture.allocatedArchitectures -> EReference : allocatedArchitectures
	if (s.allocatedArchitectures.getEReference() != null) t.addNewReference("allocatedArchitectures", s.allocatedArchitectures.getEReference());
	//BlockArchitecture.allocatingArchitectures -> EReference : allocatingArchitectures
	if (s.allocatingArchitectures.getEReference() != null) t.addNewReference("allocatingArchitectures", s.allocatingArchitectures.getEReference());
	//BlockArchitecture.system -> EReference : system
	if (s.system.getEReference() != null) t.addNewReference("system", s.system.getEReference());
}

@lazy
rule Block
	transform s : DSL!Block //cs.Block
	to t : SysMLine!ItemUsage
	extends Base{
	//Block.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Block.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Block.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Block.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Block.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Block.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Block.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Block.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Block.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Block.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Block.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Block.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Block.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//Block.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Block.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Block.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Block.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Block.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Block.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Block.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Block.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Block.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Block.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Block.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Block.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Block.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//Block.ownedFunctionalAllocation -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null) t.addNewReference("ownedFunctionalAllocation", s.ownedFunctionalAllocation.getEReference());
	//Block.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//Block.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//Block.functionalAllocations -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null) t.addNewReference("functionalAllocations", s.functionalAllocations.getEReference());
	//Block.allocatedFunctions -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null) t.addNewReference("allocatedFunctions", s.allocatedFunctions.getEReference());
	//Block.inExchangeLinks -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//Block.outExchangeLinks -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
	//Block.ownedAbstractCapabilityPkg -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//Block.ownedInterfacePkg -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//Block.ownedDataPkg -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//Block.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
}

@lazy
rule ComponentArchitecture
	transform s : DSL!ComponentArchitecture //cs.ComponentArchitecture
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentArchitecture.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ComponentArchitecture.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ComponentArchitecture.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ComponentArchitecture.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ComponentArchitecture.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ComponentArchitecture.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ComponentArchitecture.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ComponentArchitecture.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ComponentArchitecture.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ComponentArchitecture.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ComponentArchitecture.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ComponentArchitecture.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ComponentArchitecture.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ComponentArchitecture.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ComponentArchitecture.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ComponentArchitecture.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ComponentArchitecture.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ComponentArchitecture.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ComponentArchitecture.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ComponentArchitecture.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ComponentArchitecture.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ComponentArchitecture.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//ComponentArchitecture.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//ComponentArchitecture.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//ComponentArchitecture.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//ComponentArchitecture.ownedFunctionPkg -> EReference : ownedFunctionPkg
	if (s.ownedFunctionPkg.getEReference() != null) t.addNewReference("ownedFunctionPkg", s.ownedFunctionPkg.getEReference());
	//ComponentArchitecture.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//ComponentArchitecture.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//ComponentArchitecture.ownedFunctionalLinks -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//ComponentArchitecture.ownedFunctionalAllocations -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//ComponentArchitecture.ownedComponentExchangeRealizations -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//ComponentArchitecture.ownedAbstractCapabilityPkg -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//ComponentArchitecture.ownedInterfacePkg -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//ComponentArchitecture.ownedDataPkg -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//ComponentArchitecture.provisionedArchitectureAllocations -> EReference : provisionedArchitectureAllocations
	if (s.provisionedArchitectureAllocations.getEReference() != null) t.addNewReference("provisionedArchitectureAllocations", s.provisionedArchitectureAllocations.getEReference());
	//ComponentArchitecture.provisioningArchitectureAllocations -> EReference : provisioningArchitectureAllocations
	if (s.provisioningArchitectureAllocations.getEReference() != null) t.addNewReference("provisioningArchitectureAllocations", s.provisioningArchitectureAllocations.getEReference());
	//ComponentArchitecture.allocatedArchitectures -> EReference : allocatedArchitectures
	if (s.allocatedArchitectures.getEReference() != null) t.addNewReference("allocatedArchitectures", s.allocatedArchitectures.getEReference());
	//ComponentArchitecture.allocatingArchitectures -> EReference : allocatingArchitectures
	if (s.allocatingArchitectures.getEReference() != null) t.addNewReference("allocatingArchitectures", s.allocatingArchitectures.getEReference());
	//ComponentArchitecture.system -> EReference : system
	if (s.system.getEReference() != null) t.addNewReference("system", s.system.getEReference());
}

@lazy
rule Component
	transform s : DSL!Component //cs.Component
	to t : SysMLine!ItemUsage
	extends Base{
	//Component.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Component.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Component.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Component.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Component.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Component.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Component.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Component.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Component.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//Component.actor -> EAttribute : actor
	if (s.actor.getEAttribute() != null) t.addNewAttribute("actor", s.actor.getEAttribute());
	//Component.human -> EAttribute : human
	if (s.human.getEAttribute() != null) t.addNewAttribute("human", s.human.getEAttribute());
	//Component.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Component.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Component.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Component.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Component.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//Component.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Component.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Component.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Component.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Component.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Component.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Component.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Component.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Component.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Component.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Component.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Component.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Component.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//Component.ownedFunctionalAllocation -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null) t.addNewReference("ownedFunctionalAllocation", s.ownedFunctionalAllocation.getEReference());
	//Component.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//Component.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//Component.functionalAllocations -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null) t.addNewReference("functionalAllocations", s.functionalAllocations.getEReference());
	//Component.allocatedFunctions -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null) t.addNewReference("allocatedFunctions", s.allocatedFunctions.getEReference());
	//Component.inExchangeLinks -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//Component.outExchangeLinks -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
	//Component.ownedAbstractCapabilityPkg -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//Component.ownedInterfacePkg -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//Component.ownedDataPkg -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//Component.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//Component.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//Component.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//Component.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//Component.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//Component.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//Component.ownedFeatures -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//Component.containedProperties -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//Component.ownedInterfaceAllocations -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null) t.addNewReference("ownedInterfaceAllocations", s.ownedInterfaceAllocations.getEReference());
	//Component.provisionedInterfaceAllocations -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null) t.addNewReference("provisionedInterfaceAllocations", s.provisionedInterfaceAllocations.getEReference());
	//Component.allocatedInterfaces -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null) t.addNewReference("allocatedInterfaces", s.allocatedInterfaces.getEReference());
	//Component.ownedCommunicationLinks -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null) t.addNewReference("ownedCommunicationLinks", s.ownedCommunicationLinks.getEReference());
	//Component.produce -> EReference : produce
	if (s.produce.getEReference() != null) t.addNewReference("produce", s.produce.getEReference());
	//Component.consume -> EReference : consume
	if (s.consume.getEReference() != null) t.addNewReference("consume", s.consume.getEReference());
	//Component.send -> EReference : send
	if (s.send.getEReference() != null) t.addNewReference("send", s.send.getEReference());
	//Component.receive -> EReference : receive
	if (s.receive.getEReference() != null) t.addNewReference("receive", s.receive.getEReference());
	//Component.call -> EReference : call
	if (s.call.getEReference() != null) t.addNewReference("call", s.call.getEReference());
	//Component.execute -> EReference : execute
	if (s.execute.getEReference() != null) t.addNewReference("execute", s.execute.getEReference());
	//Component.write -> EReference : write
	if (s.write.getEReference() != null) t.addNewReference("write", s.write.getEReference());
	//Component.access -> EReference : access
	if (s.access.getEReference() != null) t.addNewReference("access", s.access.getEReference());
	//Component.acquire -> EReference : acquire
	if (s.acquire.getEReference() != null) t.addNewReference("acquire", s.acquire.getEReference());
	//Component.transmit -> EReference : transmit
	if (s.transmit.getEReference() != null) t.addNewReference("transmit", s.transmit.getEReference());
	//Component.ownedInterfaceUses -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null) t.addNewReference("ownedInterfaceUses", s.ownedInterfaceUses.getEReference());
	//Component.usedInterfaceLinks -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null) t.addNewReference("usedInterfaceLinks", s.usedInterfaceLinks.getEReference());
	//Component.usedInterfaces -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null) t.addNewReference("usedInterfaces", s.usedInterfaces.getEReference());
	//Component.ownedInterfaceImplementations -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null) t.addNewReference("ownedInterfaceImplementations", s.ownedInterfaceImplementations.getEReference());
	//Component.implementedInterfaceLinks -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null) t.addNewReference("implementedInterfaceLinks", s.implementedInterfaceLinks.getEReference());
	//Component.implementedInterfaces -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null) t.addNewReference("implementedInterfaces", s.implementedInterfaces.getEReference());
	//Component.ownedComponentRealizations -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null) t.addNewReference("ownedComponentRealizations", s.ownedComponentRealizations.getEReference());
	//Component.realizedComponents -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null) t.addNewReference("realizedComponents", s.realizedComponents.getEReference());
	//Component.realizingComponents -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null) t.addNewReference("realizingComponents", s.realizingComponents.getEReference());
	//Component.providedInterfaces -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//Component.requiredInterfaces -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//Component.containedComponentPorts -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null) t.addNewReference("containedComponentPorts", s.containedComponentPorts.getEReference());
	//Component.containedParts -> EReference : containedParts
	if (s.containedParts.getEReference() != null) t.addNewReference("containedParts", s.containedParts.getEReference());
	//Component.containedPhysicalPorts -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null) t.addNewReference("containedPhysicalPorts", s.containedPhysicalPorts.getEReference());
	//Component.ownedPhysicalPath -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null) t.addNewReference("ownedPhysicalPath", s.ownedPhysicalPath.getEReference());
	//Component.ownedPhysicalLinks -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//Component.ownedPhysicalLinkCategories -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//Component.representingParts -> EReference : representingParts
	if (s.representingParts.getEReference() != null) t.addNewReference("representingParts", s.representingParts.getEReference());
}

@lazy
rule Part
	transform s : DSL!Part //cs.Part
	to t : SysMLine!ItemUsage
	extends Base{
	//Part.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Part.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Part.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Part.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Part.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Part.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Part.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Part.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Part.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Part.isStatic -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//Part.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//Part.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//Part.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//Part.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//Part.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//Part.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//Part.aggregationKind -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null) t.addNewAttribute("aggregationKind", s.aggregationKind.getEAttribute());
	//Part.isDerived -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null) t.addNewAttribute("isDerived", s.isDerived.getEAttribute());
	//Part.isReadOnly -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null) t.addNewAttribute("isReadOnly", s.isReadOnly.getEAttribute());
	//Part.isPartOfKey -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null) t.addNewAttribute("isPartOfKey", s.isPartOfKey.getEAttribute());
	//Part.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Part.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Part.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Part.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Part.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Part.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Part.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Part.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Part.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Part.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Part.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Part.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Part.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Part.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//Part.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//Part.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//Part.ownedMinValue -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//Part.ownedMaxValue -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//Part.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//Part.ownedMinCard -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//Part.ownedMinLength -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//Part.ownedMaxCard -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//Part.ownedMaxLength -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//Part.association -> EReference : association
	if (s.association.getEReference() != null) t.addNewReference("association", s.association.getEReference());
	//Part.representingInstanceRoles -> EReference : representingInstanceRoles
	if (s.representingInstanceRoles.getEReference() != null) t.addNewReference("representingInstanceRoles", s.representingInstanceRoles.getEReference());
	//Part.incomingInformationFlows -> EReference : incomingInformationFlows
	if (s.incomingInformationFlows.getEReference() != null) t.addNewReference("incomingInformationFlows", s.incomingInformationFlows.getEReference());
	//Part.outgoingInformationFlows -> EReference : outgoingInformationFlows
	if (s.outgoingInformationFlows.getEReference() != null) t.addNewReference("outgoingInformationFlows", s.outgoingInformationFlows.getEReference());
	//Part.informationFlows -> EReference : informationFlows
	if (s.informationFlows.getEReference() != null) t.addNewReference("informationFlows", s.informationFlows.getEReference());
	//Part.deployingLinks -> EReference : deployingLinks
	if (s.deployingLinks.getEReference() != null) t.addNewReference("deployingLinks", s.deployingLinks.getEReference());
	//Part.deploymentLinks -> EReference : deploymentLinks
	if (s.deploymentLinks.getEReference() != null) t.addNewReference("deploymentLinks", s.deploymentLinks.getEReference());
	//Part.involvingInvolvements -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//Part.providedInterfaces -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//Part.requiredInterfaces -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//Part.ownedDeploymentLinks -> EReference : ownedDeploymentLinks
	if (s.ownedDeploymentLinks.getEReference() != null) t.addNewReference("ownedDeploymentLinks", s.ownedDeploymentLinks.getEReference());
	//Part.deployedParts -> EReference : deployedParts
	if (s.deployedParts.getEReference() != null) t.addNewReference("deployedParts", s.deployedParts.getEReference());
	//Part.deployingParts -> EReference : deployingParts
	if (s.deployingParts.getEReference() != null) t.addNewReference("deployingParts", s.deployingParts.getEReference());
	//Part.ownedAbstractType -> EReference : ownedAbstractType
	if (s.ownedAbstractType.getEReference() != null) t.addNewReference("ownedAbstractType", s.ownedAbstractType.getEReference());
}

@lazy
rule ArchitectureAllocation
	transform s : DSL!ArchitectureAllocation //cs.ArchitectureAllocation
	to t : SysMLine!ItemUsage
	extends Base{
	//ArchitectureAllocation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ArchitectureAllocation.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ArchitectureAllocation.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ArchitectureAllocation.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ArchitectureAllocation.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ArchitectureAllocation.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ArchitectureAllocation.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ArchitectureAllocation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ArchitectureAllocation.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ArchitectureAllocation.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ArchitectureAllocation.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ArchitectureAllocation.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ArchitectureAllocation.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ArchitectureAllocation.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ArchitectureAllocation.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ArchitectureAllocation.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ArchitectureAllocation.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ArchitectureAllocation.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ArchitectureAllocation.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ArchitectureAllocation.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ArchitectureAllocation.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ArchitectureAllocation.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//ArchitectureAllocation.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//ArchitectureAllocation.allocatedArchitecture -> EReference : allocatedArchitecture
	if (s.allocatedArchitecture.getEReference() != null) t.addNewReference("allocatedArchitecture", s.allocatedArchitecture.getEReference());
	//ArchitectureAllocation.allocatingArchitecture -> EReference : allocatingArchitecture
	if (s.allocatingArchitecture.getEReference() != null) t.addNewReference("allocatingArchitecture", s.allocatingArchitecture.getEReference());
}

@lazy
rule ComponentRealization
	transform s : DSL!ComponentRealization //cs.ComponentRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ComponentRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ComponentRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ComponentRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ComponentRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ComponentRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ComponentRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ComponentRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ComponentRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ComponentRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ComponentRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ComponentRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ComponentRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ComponentRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ComponentRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ComponentRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ComponentRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ComponentRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ComponentRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ComponentRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ComponentRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ComponentRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//ComponentRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//ComponentRealization.realizedComponent -> EReference : realizedComponent
	if (s.realizedComponent.getEReference() != null) t.addNewReference("realizedComponent", s.realizedComponent.getEReference());
	//ComponentRealization.realizingComponent -> EReference : realizingComponent
	if (s.realizingComponent.getEReference() != null) t.addNewReference("realizingComponent", s.realizingComponent.getEReference());
}

@lazy
rule InterfacePkg
	transform s : DSL!InterfacePkg //cs.InterfacePkg
	to t : SysMLine!ItemUsage
	extends Base{
	//InterfacePkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InterfacePkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InterfacePkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//InterfacePkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//InterfacePkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//InterfacePkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//InterfacePkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//InterfacePkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//InterfacePkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InterfacePkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InterfacePkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InterfacePkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InterfacePkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//InterfacePkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//InterfacePkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//InterfacePkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//InterfacePkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//InterfacePkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//InterfacePkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//InterfacePkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//InterfacePkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//InterfacePkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//InterfacePkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//InterfacePkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//InterfacePkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//InterfacePkg.ownedMessageReferences -> EReference : ownedMessageReferences
	if (s.ownedMessageReferences.getEReference() != null) t.addNewReference("ownedMessageReferences", s.ownedMessageReferences.getEReference());
	//InterfacePkg.ownedExchangeItems -> EReference : ownedExchangeItems
	if (s.ownedExchangeItems.getEReference() != null) t.addNewReference("ownedExchangeItems", s.ownedExchangeItems.getEReference());
	//InterfacePkg.ownedInterfaces -> EReference : ownedInterfaces
	if (s.ownedInterfaces.getEReference() != null) t.addNewReference("ownedInterfaces", s.ownedInterfaces.getEReference());
	//InterfacePkg.ownedInterfacePkgs -> EReference : ownedInterfacePkgs
	if (s.ownedInterfacePkgs.getEReference() != null) t.addNewReference("ownedInterfacePkgs", s.ownedInterfacePkgs.getEReference());
}

@lazy
rule Interface
	transform s : DSL!Interface //cs.Interface
	to t : SysMLine!ItemUsage
	extends Base{
	//Interface.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Interface.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Interface.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Interface.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Interface.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Interface.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Interface.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Interface.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Interface.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//Interface.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//Interface.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//Interface.mechanism -> EAttribute : mechanism
	if (s.mechanism.getEAttribute() != null) t.addNewAttribute("mechanism", s.mechanism.getEAttribute());
	//Interface.structural -> EAttribute : structural
	if (s.structural.getEAttribute() != null) t.addNewAttribute("structural", s.structural.getEAttribute());
	//Interface.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Interface.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Interface.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Interface.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Interface.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//Interface.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Interface.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Interface.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Interface.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Interface.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Interface.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Interface.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Interface.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Interface.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Interface.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Interface.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Interface.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Interface.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//Interface.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//Interface.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//Interface.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//Interface.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//Interface.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//Interface.ownedFeatures -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//Interface.containedProperties -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//Interface.containedOperations -> EReference : containedOperations
	if (s.containedOperations.getEReference() != null) t.addNewReference("containedOperations", s.containedOperations.getEReference());
	//Interface.nestedGeneralClasses -> EReference : nestedGeneralClasses
	if (s.nestedGeneralClasses.getEReference() != null) t.addNewReference("nestedGeneralClasses", s.nestedGeneralClasses.getEReference());
	//Interface.ownedInterfaceAllocations -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null) t.addNewReference("ownedInterfaceAllocations", s.ownedInterfaceAllocations.getEReference());
	//Interface.provisionedInterfaceAllocations -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null) t.addNewReference("provisionedInterfaceAllocations", s.provisionedInterfaceAllocations.getEReference());
	//Interface.allocatedInterfaces -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null) t.addNewReference("allocatedInterfaces", s.allocatedInterfaces.getEReference());
	//Interface.implementorComponents -> EReference : implementorComponents
	if (s.implementorComponents.getEReference() != null) t.addNewReference("implementorComponents", s.implementorComponents.getEReference());
	//Interface.userComponents -> EReference : userComponents
	if (s.userComponents.getEReference() != null) t.addNewReference("userComponents", s.userComponents.getEReference());
	//Interface.interfaceImplementations -> EReference : interfaceImplementations
	if (s.interfaceImplementations.getEReference() != null) t.addNewReference("interfaceImplementations", s.interfaceImplementations.getEReference());
	//Interface.interfaceUses -> EReference : interfaceUses
	if (s.interfaceUses.getEReference() != null) t.addNewReference("interfaceUses", s.interfaceUses.getEReference());
	//Interface.provisioningInterfaceAllocations -> EReference : provisioningInterfaceAllocations
	if (s.provisioningInterfaceAllocations.getEReference() != null) t.addNewReference("provisioningInterfaceAllocations", s.provisioningInterfaceAllocations.getEReference());
	//Interface.allocatingInterfaces -> EReference : allocatingInterfaces
	if (s.allocatingInterfaces.getEReference() != null) t.addNewReference("allocatingInterfaces", s.allocatingInterfaces.getEReference());
	//Interface.allocatingComponents -> EReference : allocatingComponents
	if (s.allocatingComponents.getEReference() != null) t.addNewReference("allocatingComponents", s.allocatingComponents.getEReference());
	//Interface.exchangeItems -> EReference : exchangeItems
	if (s.exchangeItems.getEReference() != null) t.addNewReference("exchangeItems", s.exchangeItems.getEReference());
	//Interface.ownedExchangeItemAllocations -> EReference : ownedExchangeItemAllocations
	if (s.ownedExchangeItemAllocations.getEReference() != null) t.addNewReference("ownedExchangeItemAllocations", s.ownedExchangeItemAllocations.getEReference());
	//Interface.requiringComponents -> EReference : requiringComponents
	if (s.requiringComponents.getEReference() != null) t.addNewReference("requiringComponents", s.requiringComponents.getEReference());
	//Interface.requiringComponentPorts -> EReference : requiringComponentPorts
	if (s.requiringComponentPorts.getEReference() != null) t.addNewReference("requiringComponentPorts", s.requiringComponentPorts.getEReference());
	//Interface.providingComponents -> EReference : providingComponents
	if (s.providingComponents.getEReference() != null) t.addNewReference("providingComponents", s.providingComponents.getEReference());
	//Interface.providingComponentPorts -> EReference : providingComponentPorts
	if (s.providingComponentPorts.getEReference() != null) t.addNewReference("providingComponentPorts", s.providingComponentPorts.getEReference());
	//Interface.realizingLogicalInterfaces -> EReference : realizingLogicalInterfaces
	if (s.realizingLogicalInterfaces.getEReference() != null) t.addNewReference("realizingLogicalInterfaces", s.realizingLogicalInterfaces.getEReference());
	//Interface.realizedContextInterfaces -> EReference : realizedContextInterfaces
	if (s.realizedContextInterfaces.getEReference() != null) t.addNewReference("realizedContextInterfaces", s.realizedContextInterfaces.getEReference());
	//Interface.realizingPhysicalInterfaces -> EReference : realizingPhysicalInterfaces
	if (s.realizingPhysicalInterfaces.getEReference() != null) t.addNewReference("realizingPhysicalInterfaces", s.realizingPhysicalInterfaces.getEReference());
	//Interface.realizedLogicalInterfaces -> EReference : realizedLogicalInterfaces
	if (s.realizedLogicalInterfaces.getEReference() != null) t.addNewReference("realizedLogicalInterfaces", s.realizedLogicalInterfaces.getEReference());
}

@lazy
rule InterfaceImplementation
	transform s : DSL!InterfaceImplementation //cs.InterfaceImplementation
	to t : SysMLine!ItemUsage
	extends Base{
	//InterfaceImplementation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InterfaceImplementation.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InterfaceImplementation.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//InterfaceImplementation.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//InterfaceImplementation.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//InterfaceImplementation.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//InterfaceImplementation.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//InterfaceImplementation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InterfaceImplementation.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InterfaceImplementation.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InterfaceImplementation.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InterfaceImplementation.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//InterfaceImplementation.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//InterfaceImplementation.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//InterfaceImplementation.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//InterfaceImplementation.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//InterfaceImplementation.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//InterfaceImplementation.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//InterfaceImplementation.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//InterfaceImplementation.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//InterfaceImplementation.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//InterfaceImplementation.interfaceImplementor -> EReference : interfaceImplementor
	if (s.interfaceImplementor.getEReference() != null) t.addNewReference("interfaceImplementor", s.interfaceImplementor.getEReference());
	//InterfaceImplementation.implementedInterface -> EReference : implementedInterface
	if (s.implementedInterface.getEReference() != null) t.addNewReference("implementedInterface", s.implementedInterface.getEReference());
}

@lazy
rule InterfaceUse
	transform s : DSL!InterfaceUse //cs.InterfaceUse
	to t : SysMLine!ItemUsage
	extends Base{
	//InterfaceUse.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InterfaceUse.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InterfaceUse.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//InterfaceUse.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//InterfaceUse.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//InterfaceUse.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//InterfaceUse.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//InterfaceUse.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InterfaceUse.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InterfaceUse.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InterfaceUse.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InterfaceUse.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//InterfaceUse.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//InterfaceUse.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//InterfaceUse.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//InterfaceUse.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//InterfaceUse.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//InterfaceUse.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//InterfaceUse.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//InterfaceUse.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//InterfaceUse.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//InterfaceUse.interfaceUser -> EReference : interfaceUser
	if (s.interfaceUser.getEReference() != null) t.addNewReference("interfaceUser", s.interfaceUser.getEReference());
	//InterfaceUse.usedInterface -> EReference : usedInterface
	if (s.usedInterface.getEReference() != null) t.addNewReference("usedInterface", s.usedInterface.getEReference());
}

@lazy
rule ProvidedInterfaceLink
	transform s : DSL!ProvidedInterfaceLink //cs.ProvidedInterfaceLink
	to t : SysMLine!ItemUsage
	extends Base{
	//ProvidedInterfaceLink.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ProvidedInterfaceLink.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ProvidedInterfaceLink.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ProvidedInterfaceLink.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ProvidedInterfaceLink.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ProvidedInterfaceLink.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ProvidedInterfaceLink.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ProvidedInterfaceLink.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ProvidedInterfaceLink.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ProvidedInterfaceLink.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ProvidedInterfaceLink.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ProvidedInterfaceLink.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ProvidedInterfaceLink.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ProvidedInterfaceLink.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ProvidedInterfaceLink.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ProvidedInterfaceLink.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ProvidedInterfaceLink.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ProvidedInterfaceLink.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ProvidedInterfaceLink.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ProvidedInterfaceLink.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ProvidedInterfaceLink.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ProvidedInterfaceLink.interface -> EReference : interface
	if (s.interface.getEReference() != null) t.addNewReference("interface", s.interface.getEReference());
}

@lazy
rule RequiredInterfaceLink
	transform s : DSL!RequiredInterfaceLink //cs.RequiredInterfaceLink
	to t : SysMLine!ItemUsage
	extends Base{
	//RequiredInterfaceLink.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//RequiredInterfaceLink.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//RequiredInterfaceLink.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//RequiredInterfaceLink.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//RequiredInterfaceLink.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//RequiredInterfaceLink.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//RequiredInterfaceLink.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//RequiredInterfaceLink.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//RequiredInterfaceLink.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//RequiredInterfaceLink.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//RequiredInterfaceLink.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//RequiredInterfaceLink.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//RequiredInterfaceLink.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//RequiredInterfaceLink.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//RequiredInterfaceLink.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//RequiredInterfaceLink.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//RequiredInterfaceLink.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//RequiredInterfaceLink.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//RequiredInterfaceLink.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//RequiredInterfaceLink.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//RequiredInterfaceLink.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//RequiredInterfaceLink.interface -> EReference : interface
	if (s.interface.getEReference() != null) t.addNewReference("interface", s.interface.getEReference());
}

@lazy
rule InterfaceAllocation
	transform s : DSL!InterfaceAllocation //cs.InterfaceAllocation
	to t : SysMLine!ItemUsage
	extends Base{
	//InterfaceAllocation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InterfaceAllocation.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InterfaceAllocation.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//InterfaceAllocation.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//InterfaceAllocation.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//InterfaceAllocation.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//InterfaceAllocation.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//InterfaceAllocation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InterfaceAllocation.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InterfaceAllocation.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InterfaceAllocation.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InterfaceAllocation.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//InterfaceAllocation.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//InterfaceAllocation.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//InterfaceAllocation.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//InterfaceAllocation.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//InterfaceAllocation.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//InterfaceAllocation.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//InterfaceAllocation.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//InterfaceAllocation.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//InterfaceAllocation.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//InterfaceAllocation.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//InterfaceAllocation.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//InterfaceAllocation.allocatedInterface -> EReference : allocatedInterface
	if (s.allocatedInterface.getEReference() != null) t.addNewReference("allocatedInterface", s.allocatedInterface.getEReference());
	//InterfaceAllocation.allocatingInterfaceAllocator -> EReference : allocatingInterfaceAllocator
	if (s.allocatingInterfaceAllocator.getEReference() != null) t.addNewReference("allocatingInterfaceAllocator", s.allocatingInterfaceAllocator.getEReference());
}

@lazy
rule InterfaceAllocator
	transform s : DSL!InterfaceAllocator //cs.InterfaceAllocator
	to t : SysMLine!ItemUsage
	extends Base{
	//InterfaceAllocator.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InterfaceAllocator.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InterfaceAllocator.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//InterfaceAllocator.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//InterfaceAllocator.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//InterfaceAllocator.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//InterfaceAllocator.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//InterfaceAllocator.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InterfaceAllocator.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InterfaceAllocator.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InterfaceAllocator.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InterfaceAllocator.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//InterfaceAllocator.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//InterfaceAllocator.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//InterfaceAllocator.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//InterfaceAllocator.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//InterfaceAllocator.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//InterfaceAllocator.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//InterfaceAllocator.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//InterfaceAllocator.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//InterfaceAllocator.ownedInterfaceAllocations -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null) t.addNewReference("ownedInterfaceAllocations", s.ownedInterfaceAllocations.getEReference());
	//InterfaceAllocator.provisionedInterfaceAllocations -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null) t.addNewReference("provisionedInterfaceAllocations", s.provisionedInterfaceAllocations.getEReference());
	//InterfaceAllocator.allocatedInterfaces -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null) t.addNewReference("allocatedInterfaces", s.allocatedInterfaces.getEReference());
}

@lazy
rule ExchangeItemAllocation
	transform s : DSL!ExchangeItemAllocation //cs.ExchangeItemAllocation
	to t : SysMLine!ItemUsage
	extends Base{
	//ExchangeItemAllocation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ExchangeItemAllocation.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ExchangeItemAllocation.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ExchangeItemAllocation.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ExchangeItemAllocation.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ExchangeItemAllocation.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ExchangeItemAllocation.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ExchangeItemAllocation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ExchangeItemAllocation.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//ExchangeItemAllocation.sendProtocol -> EAttribute : sendProtocol
	if (s.sendProtocol.getEAttribute() != null) t.addNewAttribute("sendProtocol", s.sendProtocol.getEAttribute());
	//ExchangeItemAllocation.receiveProtocol -> EAttribute : receiveProtocol
	if (s.receiveProtocol.getEAttribute() != null) t.addNewAttribute("receiveProtocol", s.receiveProtocol.getEAttribute());
	//ExchangeItemAllocation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ExchangeItemAllocation.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ExchangeItemAllocation.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ExchangeItemAllocation.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ExchangeItemAllocation.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ExchangeItemAllocation.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ExchangeItemAllocation.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ExchangeItemAllocation.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ExchangeItemAllocation.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ExchangeItemAllocation.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ExchangeItemAllocation.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ExchangeItemAllocation.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ExchangeItemAllocation.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ExchangeItemAllocation.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ExchangeItemAllocation.invokingSequenceMessages -> EReference : invokingSequenceMessages
	if (s.invokingSequenceMessages.getEReference() != null) t.addNewReference("invokingSequenceMessages", s.invokingSequenceMessages.getEReference());
	//ExchangeItemAllocation.allocatedItem -> EReference : allocatedItem
	if (s.allocatedItem.getEReference() != null) t.addNewReference("allocatedItem", s.allocatedItem.getEReference());
	//ExchangeItemAllocation.allocatingInterface -> EReference : allocatingInterface
	if (s.allocatingInterface.getEReference() != null) t.addNewReference("allocatingInterface", s.allocatingInterface.getEReference());
}

@lazy
rule DeployableElement
	transform s : DSL!DeployableElement //cs.DeployableElement
	to t : SysMLine!ItemUsage
	extends Base{
	//DeployableElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//DeployableElement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//DeployableElement.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//DeployableElement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//DeployableElement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//DeployableElement.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//DeployableElement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//DeployableElement.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//DeployableElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//DeployableElement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//DeployableElement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//DeployableElement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//DeployableElement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//DeployableElement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//DeployableElement.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//DeployableElement.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//DeployableElement.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//DeployableElement.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//DeployableElement.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//DeployableElement.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//DeployableElement.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//DeployableElement.deployingLinks -> EReference : deployingLinks
	if (s.deployingLinks.getEReference() != null) t.addNewReference("deployingLinks", s.deployingLinks.getEReference());
}

@lazy
rule DeploymentTarget
	transform s : DSL!DeploymentTarget //cs.DeploymentTarget
	to t : SysMLine!ItemUsage
	extends Base{
	//DeploymentTarget.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//DeploymentTarget.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//DeploymentTarget.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//DeploymentTarget.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//DeploymentTarget.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//DeploymentTarget.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//DeploymentTarget.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//DeploymentTarget.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//DeploymentTarget.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//DeploymentTarget.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//DeploymentTarget.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//DeploymentTarget.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//DeploymentTarget.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//DeploymentTarget.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//DeploymentTarget.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//DeploymentTarget.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//DeploymentTarget.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//DeploymentTarget.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//DeploymentTarget.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//DeploymentTarget.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//DeploymentTarget.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//DeploymentTarget.deploymentLinks -> EReference : deploymentLinks
	if (s.deploymentLinks.getEReference() != null) t.addNewReference("deploymentLinks", s.deploymentLinks.getEReference());
}

@lazy
rule AbstractDeploymentLink
	transform s : DSL!AbstractDeploymentLink //cs.AbstractDeploymentLink
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractDeploymentLink.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractDeploymentLink.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractDeploymentLink.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractDeploymentLink.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractDeploymentLink.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractDeploymentLink.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractDeploymentLink.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractDeploymentLink.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractDeploymentLink.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractDeploymentLink.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractDeploymentLink.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractDeploymentLink.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//AbstractDeploymentLink.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractDeploymentLink.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractDeploymentLink.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractDeploymentLink.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractDeploymentLink.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractDeploymentLink.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractDeploymentLink.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractDeploymentLink.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractDeploymentLink.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractDeploymentLink.deployedElement -> EReference : deployedElement
	if (s.deployedElement.getEReference() != null) t.addNewReference("deployedElement", s.deployedElement.getEReference());
	//AbstractDeploymentLink.location -> EReference : location
	if (s.location.getEReference() != null) t.addNewReference("location", s.location.getEReference());
}

@lazy
rule AbstractPathInvolvedElement
	transform s : DSL!AbstractPathInvolvedElement //cs.AbstractPathInvolvedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractPathInvolvedElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractPathInvolvedElement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractPathInvolvedElement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractPathInvolvedElement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractPathInvolvedElement.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractPathInvolvedElement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractPathInvolvedElement.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractPathInvolvedElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractPathInvolvedElement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractPathInvolvedElement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractPathInvolvedElement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractPathInvolvedElement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractPathInvolvedElement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractPathInvolvedElement.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractPathInvolvedElement.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractPathInvolvedElement.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractPathInvolvedElement.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractPathInvolvedElement.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractPathInvolvedElement.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractPathInvolvedElement.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractPathInvolvedElement.involvingInvolvements -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
}

@lazy
rule AbstractPhysicalArtifact
	transform s : DSL!AbstractPhysicalArtifact //cs.AbstractPhysicalArtifact
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractPhysicalArtifact.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractPhysicalArtifact.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractPhysicalArtifact.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractPhysicalArtifact.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractPhysicalArtifact.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractPhysicalArtifact.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractPhysicalArtifact.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractPhysicalArtifact.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractPhysicalArtifact.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractPhysicalArtifact.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractPhysicalArtifact.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractPhysicalArtifact.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractPhysicalArtifact.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractPhysicalArtifact.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractPhysicalArtifact.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractPhysicalArtifact.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractPhysicalArtifact.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractPhysicalArtifact.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractPhysicalArtifact.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractPhysicalArtifact.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractPhysicalArtifact.allocatorConfigurationItems -> EReference : allocatorConfigurationItems
	if (s.allocatorConfigurationItems.getEReference() != null) t.addNewReference("allocatorConfigurationItems", s.allocatorConfigurationItems.getEReference());
}

@lazy
rule AbstractPhysicalLinkEnd
	transform s : DSL!AbstractPhysicalLinkEnd //cs.AbstractPhysicalLinkEnd
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractPhysicalLinkEnd.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractPhysicalLinkEnd.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractPhysicalLinkEnd.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractPhysicalLinkEnd.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractPhysicalLinkEnd.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractPhysicalLinkEnd.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractPhysicalLinkEnd.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractPhysicalLinkEnd.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractPhysicalLinkEnd.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractPhysicalLinkEnd.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractPhysicalLinkEnd.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractPhysicalLinkEnd.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractPhysicalLinkEnd.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractPhysicalLinkEnd.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractPhysicalLinkEnd.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractPhysicalLinkEnd.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractPhysicalLinkEnd.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractPhysicalLinkEnd.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractPhysicalLinkEnd.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractPhysicalLinkEnd.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractPhysicalLinkEnd.involvedLinks -> EReference : involvedLinks
	if (s.involvedLinks.getEReference() != null) t.addNewReference("involvedLinks", s.involvedLinks.getEReference());
}

@lazy
rule AbstractPhysicalPathLink
	transform s : DSL!AbstractPhysicalPathLink //cs.AbstractPhysicalPathLink
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractPhysicalPathLink.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractPhysicalPathLink.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractPhysicalPathLink.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractPhysicalPathLink.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractPhysicalPathLink.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractPhysicalPathLink.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractPhysicalPathLink.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractPhysicalPathLink.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractPhysicalPathLink.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractPhysicalPathLink.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractPhysicalPathLink.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractPhysicalPathLink.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractPhysicalPathLink.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractPhysicalPathLink.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractPhysicalPathLink.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractPhysicalPathLink.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractPhysicalPathLink.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractPhysicalPathLink.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractPhysicalPathLink.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractPhysicalPathLink.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractPhysicalPathLink.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractPhysicalPathLink.ownedComponentExchangeAllocations -> EReference : ownedComponentExchangeAllocations
	if (s.ownedComponentExchangeAllocations.getEReference() != null) t.addNewReference("ownedComponentExchangeAllocations", s.ownedComponentExchangeAllocations.getEReference());
	//AbstractPhysicalPathLink.allocatedComponentExchanges -> EReference : allocatedComponentExchanges
	if (s.allocatedComponentExchanges.getEReference() != null) t.addNewReference("allocatedComponentExchanges", s.allocatedComponentExchanges.getEReference());
}

@lazy
rule PhysicalLink
	transform s : DSL!PhysicalLink //cs.PhysicalLink
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalLink.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalLink.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalLink.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PhysicalLink.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalLink.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalLink.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalLink.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalLink.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalLink.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalLink.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalLink.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalLink.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalLink.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalLink.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalLink.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalLink.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalLink.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalLink.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalLink.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalLink.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalLink.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalLink.ownedComponentExchangeAllocations -> EReference : ownedComponentExchangeAllocations
	if (s.ownedComponentExchangeAllocations.getEReference() != null) t.addNewReference("ownedComponentExchangeAllocations", s.ownedComponentExchangeAllocations.getEReference());
	//PhysicalLink.allocatedComponentExchanges -> EReference : allocatedComponentExchanges
	if (s.allocatedComponentExchanges.getEReference() != null) t.addNewReference("allocatedComponentExchanges", s.allocatedComponentExchanges.getEReference());
	//PhysicalLink.allocatorConfigurationItems -> EReference : allocatorConfigurationItems
	if (s.allocatorConfigurationItems.getEReference() != null) t.addNewReference("allocatorConfigurationItems", s.allocatorConfigurationItems.getEReference());
	//PhysicalLink.involvingInvolvements -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//PhysicalLink.linkEnds -> EReference : linkEnds
	if (s.linkEnds.getEReference() != null) t.addNewReference("linkEnds", s.linkEnds.getEReference());
	//PhysicalLink.ownedComponentExchangeFunctionalExchangeAllocations -> EReference : ownedComponentExchangeFunctionalExchangeAllocations
	if (s.ownedComponentExchangeFunctionalExchangeAllocations.getEReference() != null) t.addNewReference("ownedComponentExchangeFunctionalExchangeAllocations", s.ownedComponentExchangeFunctionalExchangeAllocations.getEReference());
	//PhysicalLink.ownedPhysicalLinkEnds -> EReference : ownedPhysicalLinkEnds
	if (s.ownedPhysicalLinkEnds.getEReference() != null) t.addNewReference("ownedPhysicalLinkEnds", s.ownedPhysicalLinkEnds.getEReference());
	//PhysicalLink.ownedPhysicalLinkRealizations -> EReference : ownedPhysicalLinkRealizations
	if (s.ownedPhysicalLinkRealizations.getEReference() != null) t.addNewReference("ownedPhysicalLinkRealizations", s.ownedPhysicalLinkRealizations.getEReference());
	//PhysicalLink.categories -> EReference : categories
	if (s.categories.getEReference() != null) t.addNewReference("categories", s.categories.getEReference());
	//PhysicalLink.sourcePhysicalPort -> EReference : sourcePhysicalPort
	if (s.sourcePhysicalPort.getEReference() != null) t.addNewReference("sourcePhysicalPort", s.sourcePhysicalPort.getEReference());
	//PhysicalLink.targetPhysicalPort -> EReference : targetPhysicalPort
	if (s.targetPhysicalPort.getEReference() != null) t.addNewReference("targetPhysicalPort", s.targetPhysicalPort.getEReference());
	//PhysicalLink.realizedPhysicalLinks -> EReference : realizedPhysicalLinks
	if (s.realizedPhysicalLinks.getEReference() != null) t.addNewReference("realizedPhysicalLinks", s.realizedPhysicalLinks.getEReference());
	//PhysicalLink.realizingPhysicalLinks -> EReference : realizingPhysicalLinks
	if (s.realizingPhysicalLinks.getEReference() != null) t.addNewReference("realizingPhysicalLinks", s.realizingPhysicalLinks.getEReference());
}

@lazy
rule PhysicalLinkCategory
	transform s : DSL!PhysicalLinkCategory //cs.PhysicalLinkCategory
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalLinkCategory.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalLinkCategory.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalLinkCategory.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PhysicalLinkCategory.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalLinkCategory.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalLinkCategory.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalLinkCategory.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalLinkCategory.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalLinkCategory.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalLinkCategory.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalLinkCategory.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalLinkCategory.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalLinkCategory.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalLinkCategory.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalLinkCategory.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalLinkCategory.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalLinkCategory.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalLinkCategory.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalLinkCategory.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalLinkCategory.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalLinkCategory.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalLinkCategory.links -> EReference : links
	if (s.links.getEReference() != null) t.addNewReference("links", s.links.getEReference());
}

@lazy
rule PhysicalLinkEnd
	transform s : DSL!PhysicalLinkEnd //cs.PhysicalLinkEnd
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalLinkEnd.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalLinkEnd.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalLinkEnd.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalLinkEnd.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalLinkEnd.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalLinkEnd.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalLinkEnd.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalLinkEnd.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalLinkEnd.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalLinkEnd.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalLinkEnd.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalLinkEnd.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalLinkEnd.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalLinkEnd.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalLinkEnd.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalLinkEnd.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalLinkEnd.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalLinkEnd.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalLinkEnd.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalLinkEnd.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalLinkEnd.involvedLinks -> EReference : involvedLinks
	if (s.involvedLinks.getEReference() != null) t.addNewReference("involvedLinks", s.involvedLinks.getEReference());
	//PhysicalLinkEnd.port -> EReference : port
	if (s.port.getEReference() != null) t.addNewReference("port", s.port.getEReference());
	//PhysicalLinkEnd.part -> EReference : part
	if (s.part.getEReference() != null) t.addNewReference("part", s.part.getEReference());
}

@lazy
rule PhysicalLinkRealization
	transform s : DSL!PhysicalLinkRealization //cs.PhysicalLinkRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalLinkRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalLinkRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalLinkRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalLinkRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalLinkRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalLinkRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalLinkRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalLinkRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalLinkRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalLinkRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalLinkRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalLinkRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//PhysicalLinkRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalLinkRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalLinkRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalLinkRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalLinkRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalLinkRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalLinkRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalLinkRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalLinkRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalLinkRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//PhysicalLinkRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
}

@lazy
rule PhysicalPath
	transform s : DSL!PhysicalPath //cs.PhysicalPath
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalPath.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalPath.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalPath.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PhysicalPath.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalPath.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalPath.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalPath.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalPath.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalPath.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalPath.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalPath.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalPath.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalPath.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalPath.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalPath.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalPath.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalPath.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalPath.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalPath.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalPath.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalPath.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalPath.ownedComponentExchangeAllocations -> EReference : ownedComponentExchangeAllocations
	if (s.ownedComponentExchangeAllocations.getEReference() != null) t.addNewReference("ownedComponentExchangeAllocations", s.ownedComponentExchangeAllocations.getEReference());
	//PhysicalPath.allocatedComponentExchanges -> EReference : allocatedComponentExchanges
	if (s.allocatedComponentExchanges.getEReference() != null) t.addNewReference("allocatedComponentExchanges", s.allocatedComponentExchanges.getEReference());
	//PhysicalPath.involvingInvolvements -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//PhysicalPath.involvedInvolvements -> EReference : involvedInvolvements
	if (s.involvedInvolvements.getEReference() != null) t.addNewReference("involvedInvolvements", s.involvedInvolvements.getEReference());
	//PhysicalPath.involvedLinks -> EReference : involvedLinks
	if (s.involvedLinks.getEReference() != null) t.addNewReference("involvedLinks", s.involvedLinks.getEReference());
	//PhysicalPath.ownedPhysicalPathInvolvements -> EReference : ownedPhysicalPathInvolvements
	if (s.ownedPhysicalPathInvolvements.getEReference() != null) t.addNewReference("ownedPhysicalPathInvolvements", s.ownedPhysicalPathInvolvements.getEReference());
	//PhysicalPath.firstPhysicalPathInvolvements -> EReference : firstPhysicalPathInvolvements
	if (s.firstPhysicalPathInvolvements.getEReference() != null) t.addNewReference("firstPhysicalPathInvolvements", s.firstPhysicalPathInvolvements.getEReference());
	//PhysicalPath.ownedPhysicalPathRealizations -> EReference : ownedPhysicalPathRealizations
	if (s.ownedPhysicalPathRealizations.getEReference() != null) t.addNewReference("ownedPhysicalPathRealizations", s.ownedPhysicalPathRealizations.getEReference());
	//PhysicalPath.realizedPhysicalPaths -> EReference : realizedPhysicalPaths
	if (s.realizedPhysicalPaths.getEReference() != null) t.addNewReference("realizedPhysicalPaths", s.realizedPhysicalPaths.getEReference());
	//PhysicalPath.realizingPhysicalPaths -> EReference : realizingPhysicalPaths
	if (s.realizingPhysicalPaths.getEReference() != null) t.addNewReference("realizingPhysicalPaths", s.realizingPhysicalPaths.getEReference());
}

@lazy
rule PhysicalPathInvolvement
	transform s : DSL!PhysicalPathInvolvement //cs.PhysicalPathInvolvement
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalPathInvolvement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalPathInvolvement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalPathInvolvement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalPathInvolvement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalPathInvolvement.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalPathInvolvement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalPathInvolvement.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalPathInvolvement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalPathInvolvement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalPathInvolvement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalPathInvolvement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalPathInvolvement.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//PhysicalPathInvolvement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalPathInvolvement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalPathInvolvement.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalPathInvolvement.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalPathInvolvement.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalPathInvolvement.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalPathInvolvement.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalPathInvolvement.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalPathInvolvement.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalPathInvolvement.involver -> EReference : involver
	if (s.involver.getEReference() != null) t.addNewReference("involver", s.involver.getEReference());
	//PhysicalPathInvolvement.involved -> EReference : involved
	if (s.involved.getEReference() != null) t.addNewReference("involved", s.involved.getEReference());
	//PhysicalPathInvolvement.nextInvolvements -> EReference : nextInvolvements
	if (s.nextInvolvements.getEReference() != null) t.addNewReference("nextInvolvements", s.nextInvolvements.getEReference());
	//PhysicalPathInvolvement.previousInvolvements -> EReference : previousInvolvements
	if (s.previousInvolvements.getEReference() != null) t.addNewReference("previousInvolvements", s.previousInvolvements.getEReference());
	//PhysicalPathInvolvement.involvedElement -> EReference : involvedElement
	if (s.involvedElement.getEReference() != null) t.addNewReference("involvedElement", s.involvedElement.getEReference());
	//PhysicalPathInvolvement.involvedComponent -> EReference : involvedComponent
	if (s.involvedComponent.getEReference() != null) t.addNewReference("involvedComponent", s.involvedComponent.getEReference());
}

@lazy
rule PhysicalPathReference
	transform s : DSL!PhysicalPathReference //cs.PhysicalPathReference
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalPathReference.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalPathReference.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalPathReference.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalPathReference.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalPathReference.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalPathReference.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalPathReference.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalPathReference.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalPathReference.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalPathReference.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalPathReference.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalPathReference.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//PhysicalPathReference.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalPathReference.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalPathReference.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalPathReference.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalPathReference.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalPathReference.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalPathReference.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalPathReference.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalPathReference.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalPathReference.involver -> EReference : involver
	if (s.involver.getEReference() != null) t.addNewReference("involver", s.involver.getEReference());
	//PhysicalPathReference.involved -> EReference : involved
	if (s.involved.getEReference() != null) t.addNewReference("involved", s.involved.getEReference());
	//PhysicalPathReference.nextInvolvements -> EReference : nextInvolvements
	if (s.nextInvolvements.getEReference() != null) t.addNewReference("nextInvolvements", s.nextInvolvements.getEReference());
	//PhysicalPathReference.previousInvolvements -> EReference : previousInvolvements
	if (s.previousInvolvements.getEReference() != null) t.addNewReference("previousInvolvements", s.previousInvolvements.getEReference());
	//PhysicalPathReference.involvedElement -> EReference : involvedElement
	if (s.involvedElement.getEReference() != null) t.addNewReference("involvedElement", s.involvedElement.getEReference());
	//PhysicalPathReference.involvedComponent -> EReference : involvedComponent
	if (s.involvedComponent.getEReference() != null) t.addNewReference("involvedComponent", s.involvedComponent.getEReference());
	//PhysicalPathReference.referencedPhysicalPath -> EReference : referencedPhysicalPath
	if (s.referencedPhysicalPath.getEReference() != null) t.addNewReference("referencedPhysicalPath", s.referencedPhysicalPath.getEReference());
}

@lazy
rule PhysicalPathRealization
	transform s : DSL!PhysicalPathRealization //cs.PhysicalPathRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalPathRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalPathRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalPathRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalPathRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalPathRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalPathRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalPathRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalPathRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalPathRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalPathRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalPathRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalPathRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//PhysicalPathRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalPathRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalPathRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalPathRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalPathRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalPathRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalPathRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalPathRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalPathRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalPathRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//PhysicalPathRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
}

@lazy
rule PhysicalPort
	transform s : DSL!PhysicalPort //cs.PhysicalPort
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalPort.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalPort.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalPort.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PhysicalPort.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalPort.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalPort.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalPort.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalPort.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalPort.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//PhysicalPort.isStatic -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//PhysicalPort.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//PhysicalPort.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//PhysicalPort.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//PhysicalPort.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//PhysicalPort.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//PhysicalPort.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//PhysicalPort.aggregationKind -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null) t.addNewAttribute("aggregationKind", s.aggregationKind.getEAttribute());
	//PhysicalPort.isDerived -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null) t.addNewAttribute("isDerived", s.isDerived.getEAttribute());
	//PhysicalPort.isReadOnly -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null) t.addNewAttribute("isReadOnly", s.isReadOnly.getEAttribute());
	//PhysicalPort.isPartOfKey -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null) t.addNewAttribute("isPartOfKey", s.isPartOfKey.getEAttribute());
	//PhysicalPort.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalPort.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalPort.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalPort.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalPort.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalPort.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalPort.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalPort.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalPort.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalPort.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalPort.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalPort.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalPort.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalPort.incomingPortRealizations -> EReference : incomingPortRealizations
	if (s.incomingPortRealizations.getEReference() != null) t.addNewReference("incomingPortRealizations", s.incomingPortRealizations.getEReference());
	//PhysicalPort.outgoingPortRealizations -> EReference : outgoingPortRealizations
	if (s.outgoingPortRealizations.getEReference() != null) t.addNewReference("outgoingPortRealizations", s.outgoingPortRealizations.getEReference());
	//PhysicalPort.ownedProtocols -> EReference : ownedProtocols
	if (s.ownedProtocols.getEReference() != null) t.addNewReference("ownedProtocols", s.ownedProtocols.getEReference());
	//PhysicalPort.incomingPortAllocations -> EReference : incomingPortAllocations
	if (s.incomingPortAllocations.getEReference() != null) t.addNewReference("incomingPortAllocations", s.incomingPortAllocations.getEReference());
	//PhysicalPort.outgoingPortAllocations -> EReference : outgoingPortAllocations
	if (s.outgoingPortAllocations.getEReference() != null) t.addNewReference("outgoingPortAllocations", s.outgoingPortAllocations.getEReference());
	//PhysicalPort.providedInterfaces -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//PhysicalPort.requiredInterfaces -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//PhysicalPort.ownedPortRealizations -> EReference : ownedPortRealizations
	if (s.ownedPortRealizations.getEReference() != null) t.addNewReference("ownedPortRealizations", s.ownedPortRealizations.getEReference());
	//PhysicalPort.ownedPortAllocations -> EReference : ownedPortAllocations
	if (s.ownedPortAllocations.getEReference() != null) t.addNewReference("ownedPortAllocations", s.ownedPortAllocations.getEReference());
	//PhysicalPort.allocatorConfigurationItems -> EReference : allocatorConfigurationItems
	if (s.allocatorConfigurationItems.getEReference() != null) t.addNewReference("allocatorConfigurationItems", s.allocatorConfigurationItems.getEReference());
	//PhysicalPort.incomingInformationFlows -> EReference : incomingInformationFlows
	if (s.incomingInformationFlows.getEReference() != null) t.addNewReference("incomingInformationFlows", s.incomingInformationFlows.getEReference());
	//PhysicalPort.outgoingInformationFlows -> EReference : outgoingInformationFlows
	if (s.outgoingInformationFlows.getEReference() != null) t.addNewReference("outgoingInformationFlows", s.outgoingInformationFlows.getEReference());
	//PhysicalPort.informationFlows -> EReference : informationFlows
	if (s.informationFlows.getEReference() != null) t.addNewReference("informationFlows", s.informationFlows.getEReference());
	//PhysicalPort.involvedLinks -> EReference : involvedLinks
	if (s.involvedLinks.getEReference() != null) t.addNewReference("involvedLinks", s.involvedLinks.getEReference());
	//PhysicalPort.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//PhysicalPort.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//PhysicalPort.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//PhysicalPort.ownedMinValue -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//PhysicalPort.ownedMaxValue -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//PhysicalPort.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//PhysicalPort.ownedMinCard -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//PhysicalPort.ownedMinLength -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//PhysicalPort.ownedMaxCard -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//PhysicalPort.ownedMaxLength -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//PhysicalPort.association -> EReference : association
	if (s.association.getEReference() != null) t.addNewReference("association", s.association.getEReference());
	//PhysicalPort.ownedComponentPortAllocations -> EReference : ownedComponentPortAllocations
	if (s.ownedComponentPortAllocations.getEReference() != null) t.addNewReference("ownedComponentPortAllocations", s.ownedComponentPortAllocations.getEReference());
	//PhysicalPort.ownedPhysicalPortRealizations -> EReference : ownedPhysicalPortRealizations
	if (s.ownedPhysicalPortRealizations.getEReference() != null) t.addNewReference("ownedPhysicalPortRealizations", s.ownedPhysicalPortRealizations.getEReference());
	//PhysicalPort.allocatedComponentPorts -> EReference : allocatedComponentPorts
	if (s.allocatedComponentPorts.getEReference() != null) t.addNewReference("allocatedComponentPorts", s.allocatedComponentPorts.getEReference());
	//PhysicalPort.realizedPhysicalPorts -> EReference : realizedPhysicalPorts
	if (s.realizedPhysicalPorts.getEReference() != null) t.addNewReference("realizedPhysicalPorts", s.realizedPhysicalPorts.getEReference());
	//PhysicalPort.realizingPhysicalPorts -> EReference : realizingPhysicalPorts
	if (s.realizingPhysicalPorts.getEReference() != null) t.addNewReference("realizingPhysicalPorts", s.realizingPhysicalPorts.getEReference());
}

@lazy
rule PhysicalPortRealization
	transform s : DSL!PhysicalPortRealization //cs.PhysicalPortRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalPortRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalPortRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalPortRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalPortRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalPortRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalPortRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalPortRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalPortRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalPortRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalPortRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalPortRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalPortRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//PhysicalPortRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalPortRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalPortRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalPortRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalPortRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalPortRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalPortRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalPortRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalPortRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalPortRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//PhysicalPortRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
}

@lazy
rule ComponentPkg
	transform s : DSL!ComponentPkg //cs.ComponentPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ComponentPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ComponentPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ComponentPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ComponentPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ComponentPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ComponentPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ComponentPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ComponentPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ComponentPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ComponentPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ComponentPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ComponentPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ComponentPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ComponentPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ComponentPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ComponentPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ComponentPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ComponentPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ComponentPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ComponentPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ComponentPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//ComponentPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//ComponentPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//ComponentPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//ComponentPkg.ownedParts -> EReference : ownedParts
	if (s.ownedParts.getEReference() != null) t.addNewReference("ownedParts", s.ownedParts.getEReference());
	//ComponentPkg.ownedComponentExchanges -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//ComponentPkg.ownedComponentExchangeCategories -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//ComponentPkg.ownedFunctionalLinks -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//ComponentPkg.ownedFunctionalAllocations -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//ComponentPkg.ownedComponentExchangeRealizations -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//ComponentPkg.ownedPhysicalLinks -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//ComponentPkg.ownedPhysicalLinkCategories -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//ComponentPkg.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
}


// information.ecore
@lazy
rule AbstractInstance
	transform s : DSL!AbstractInstance //information.AbstractInstance
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractInstance.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractInstance.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractInstance.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractInstance.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractInstance.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractInstance.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractInstance.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractInstance.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractInstance.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//AbstractInstance.isStatic -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//AbstractInstance.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//AbstractInstance.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//AbstractInstance.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//AbstractInstance.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//AbstractInstance.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//AbstractInstance.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//AbstractInstance.aggregationKind -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null) t.addNewAttribute("aggregationKind", s.aggregationKind.getEAttribute());
	//AbstractInstance.isDerived -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null) t.addNewAttribute("isDerived", s.isDerived.getEAttribute());
	//AbstractInstance.isReadOnly -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null) t.addNewAttribute("isReadOnly", s.isReadOnly.getEAttribute());
	//AbstractInstance.isPartOfKey -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null) t.addNewAttribute("isPartOfKey", s.isPartOfKey.getEAttribute());
	//AbstractInstance.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractInstance.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractInstance.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractInstance.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractInstance.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractInstance.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractInstance.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractInstance.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractInstance.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractInstance.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractInstance.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractInstance.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractInstance.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractInstance.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//AbstractInstance.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//AbstractInstance.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//AbstractInstance.ownedMinValue -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//AbstractInstance.ownedMaxValue -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//AbstractInstance.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//AbstractInstance.ownedMinCard -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//AbstractInstance.ownedMinLength -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//AbstractInstance.ownedMaxCard -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//AbstractInstance.ownedMaxLength -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//AbstractInstance.association -> EReference : association
	if (s.association.getEReference() != null) t.addNewReference("association", s.association.getEReference());
	//AbstractInstance.representingInstanceRoles -> EReference : representingInstanceRoles
	if (s.representingInstanceRoles.getEReference() != null) t.addNewReference("representingInstanceRoles", s.representingInstanceRoles.getEReference());
}

@lazy
rule AssociationPkg
	transform s : DSL!AssociationPkg //information.AssociationPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//AssociationPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AssociationPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AssociationPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AssociationPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AssociationPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AssociationPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AssociationPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AssociationPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AssociationPkg.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//AssociationPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AssociationPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AssociationPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AssociationPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AssociationPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AssociationPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AssociationPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AssociationPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AssociationPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AssociationPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AssociationPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AssociationPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AssociationPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AssociationPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//AssociationPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//AssociationPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//AssociationPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//AssociationPkg.ownedAssociations -> EReference : ownedAssociations
	if (s.ownedAssociations.getEReference() != null) t.addNewReference("ownedAssociations", s.ownedAssociations.getEReference());
}

@lazy
rule Association
	transform s : DSL!Association //information.Association
	to t : SysMLine!ItemUsage
	extends Base{
	//Association.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Association.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Association.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Association.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Association.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Association.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Association.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Association.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Association.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Association.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Association.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Association.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Association.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//Association.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Association.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Association.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Association.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Association.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Association.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Association.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Association.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Association.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Association.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Association.ownedMembers -> EReference : ownedMembers
	if (s.ownedMembers.getEReference() != null) t.addNewReference("ownedMembers", s.ownedMembers.getEReference());
	//Association.navigableMembers -> EReference : navigableMembers
	if (s.navigableMembers.getEReference() != null) t.addNewReference("navigableMembers", s.navigableMembers.getEReference());
}

@lazy
rule Class
	transform s : DSL!Class //information.Class
	to t : SysMLine!ItemUsage
	extends Base{
	//Class.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Class.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Class.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Class.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Class.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Class.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Class.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Class.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Class.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//Class.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//Class.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//Class.isPrimitive -> EAttribute : isPrimitive
	if (s.isPrimitive.getEAttribute() != null) t.addNewAttribute("isPrimitive", s.isPrimitive.getEAttribute());
	//Class.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Class.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Class.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Class.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Class.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//Class.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Class.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Class.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Class.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Class.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Class.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Class.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Class.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Class.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Class.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Class.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Class.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Class.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//Class.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//Class.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//Class.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//Class.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//Class.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//Class.ownedFeatures -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//Class.containedProperties -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//Class.containedOperations -> EReference : containedOperations
	if (s.containedOperations.getEReference() != null) t.addNewReference("containedOperations", s.containedOperations.getEReference());
	//Class.nestedGeneralClasses -> EReference : nestedGeneralClasses
	if (s.nestedGeneralClasses.getEReference() != null) t.addNewReference("nestedGeneralClasses", s.nestedGeneralClasses.getEReference());
	//Class.keyParts -> EReference : keyParts
	if (s.keyParts.getEReference() != null) t.addNewReference("keyParts", s.keyParts.getEReference());
	//Class.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//Class.ownedDataValues -> EReference : ownedDataValues
	if (s.ownedDataValues.getEReference() != null) t.addNewReference("ownedDataValues", s.ownedDataValues.getEReference());
	//Class.ownedInformationRealizations -> EReference : ownedInformationRealizations
	if (s.ownedInformationRealizations.getEReference() != null) t.addNewReference("ownedInformationRealizations", s.ownedInformationRealizations.getEReference());
	//Class.realizedClasses -> EReference : realizedClasses
	if (s.realizedClasses.getEReference() != null) t.addNewReference("realizedClasses", s.realizedClasses.getEReference());
	//Class.realizingClasses -> EReference : realizingClasses
	if (s.realizingClasses.getEReference() != null) t.addNewReference("realizingClasses", s.realizingClasses.getEReference());
}

@lazy
rule `Collection`
	transform s : DSL!`Collection` //information.Collection
	to t : SysMLine!ItemUsage
	extends Base{
	//Collection.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Collection.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Collection.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Collection.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Collection.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Collection.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Collection.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Collection.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Collection.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//Collection.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//Collection.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//Collection.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//Collection.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//Collection.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//Collection.isPrimitive -> EAttribute : isPrimitive
	if (s.isPrimitive.getEAttribute() != null) t.addNewAttribute("isPrimitive", s.isPrimitive.getEAttribute());
	//Collection.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//Collection.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//Collection.aggregationKind -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null) t.addNewAttribute("aggregationKind", s.aggregationKind.getEAttribute());
	//Collection.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Collection.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Collection.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Collection.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Collection.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//Collection.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Collection.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Collection.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Collection.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Collection.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Collection.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Collection.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Collection.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Collection.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Collection.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Collection.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Collection.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Collection.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//Collection.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//Collection.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//Collection.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//Collection.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//Collection.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//Collection.ownedFeatures -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//Collection.containedProperties -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//Collection.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//Collection.ownedMinValue -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//Collection.ownedMaxValue -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//Collection.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//Collection.ownedMinCard -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//Collection.ownedMinLength -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//Collection.ownedMaxCard -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//Collection.ownedMaxLength -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//Collection.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//Collection.ownedDataValues -> EReference : ownedDataValues
	if (s.ownedDataValues.getEReference() != null) t.addNewReference("ownedDataValues", s.ownedDataValues.getEReference());
	//Collection.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//Collection.index -> EReference : index
	if (s.index.getEReference() != null) t.addNewReference("index", s.index.getEReference());
	//Collection.containedOperations -> EReference : containedOperations
	if (s.containedOperations.getEReference() != null) t.addNewReference("containedOperations", s.containedOperations.getEReference());
}

@lazy
rule AbstractCollectionValue
	transform s : DSL!AbstractCollectionValue //information.AbstractCollectionValue
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractCollectionValue.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractCollectionValue.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractCollectionValue.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractCollectionValue.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractCollectionValue.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractCollectionValue.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractCollectionValue.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractCollectionValue.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractCollectionValue.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//AbstractCollectionValue.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractCollectionValue.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractCollectionValue.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractCollectionValue.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractCollectionValue.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractCollectionValue.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractCollectionValue.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractCollectionValue.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractCollectionValue.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractCollectionValue.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractCollectionValue.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractCollectionValue.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractCollectionValue.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractCollectionValue.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//AbstractCollectionValue.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
}

@lazy
rule CollectionValue
	transform s : DSL!CollectionValue //information.CollectionValue
	to t : SysMLine!ItemUsage
	extends Base{
	//CollectionValue.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CollectionValue.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CollectionValue.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CollectionValue.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CollectionValue.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CollectionValue.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CollectionValue.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CollectionValue.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CollectionValue.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//CollectionValue.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CollectionValue.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CollectionValue.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CollectionValue.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CollectionValue.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CollectionValue.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CollectionValue.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CollectionValue.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CollectionValue.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CollectionValue.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CollectionValue.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CollectionValue.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CollectionValue.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CollectionValue.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//CollectionValue.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//CollectionValue.ownedElements -> EReference : ownedElements
	if (s.ownedElements.getEReference() != null) t.addNewReference("ownedElements", s.ownedElements.getEReference());
	//CollectionValue.ownedDefaultElement -> EReference : ownedDefaultElement
	if (s.ownedDefaultElement.getEReference() != null) t.addNewReference("ownedDefaultElement", s.ownedDefaultElement.getEReference());
}

@lazy
rule CollectionValueReference
	transform s : DSL!CollectionValueReference //information.CollectionValueReference
	to t : SysMLine!ItemUsage
	extends Base{
	//CollectionValueReference.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CollectionValueReference.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CollectionValueReference.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CollectionValueReference.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CollectionValueReference.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CollectionValueReference.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CollectionValueReference.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CollectionValueReference.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CollectionValueReference.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//CollectionValueReference.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CollectionValueReference.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CollectionValueReference.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CollectionValueReference.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CollectionValueReference.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CollectionValueReference.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CollectionValueReference.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CollectionValueReference.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CollectionValueReference.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CollectionValueReference.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CollectionValueReference.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CollectionValueReference.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CollectionValueReference.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CollectionValueReference.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//CollectionValueReference.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//CollectionValueReference.referencedValue -> EReference : referencedValue
	if (s.referencedValue.getEReference() != null) t.addNewReference("referencedValue", s.referencedValue.getEReference());
	//CollectionValueReference.referencedProperty -> EReference : referencedProperty
	if (s.referencedProperty.getEReference() != null) t.addNewReference("referencedProperty", s.referencedProperty.getEReference());
}

@lazy
rule DataPkg
	transform s : DSL!DataPkg //information.DataPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//DataPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//DataPkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//DataPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//DataPkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//DataPkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//DataPkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//DataPkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//DataPkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//DataPkg.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//DataPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//DataPkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//DataPkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//DataPkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//DataPkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//DataPkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//DataPkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//DataPkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//DataPkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//DataPkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//DataPkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//DataPkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//DataPkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//DataPkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//DataPkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//DataPkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//DataPkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//DataPkg.ownedExchangeItems -> EReference : ownedExchangeItems
	if (s.ownedExchangeItems.getEReference() != null) t.addNewReference("ownedExchangeItems", s.ownedExchangeItems.getEReference());
	//DataPkg.ownedAssociations -> EReference : ownedAssociations
	if (s.ownedAssociations.getEReference() != null) t.addNewReference("ownedAssociations", s.ownedAssociations.getEReference());
	//DataPkg.ownedDataValues -> EReference : ownedDataValues
	if (s.ownedDataValues.getEReference() != null) t.addNewReference("ownedDataValues", s.ownedDataValues.getEReference());
	//DataPkg.ownedMessageReferences -> EReference : ownedMessageReferences
	if (s.ownedMessageReferences.getEReference() != null) t.addNewReference("ownedMessageReferences", s.ownedMessageReferences.getEReference());
	//DataPkg.ownedDataPkgs -> EReference : ownedDataPkgs
	if (s.ownedDataPkgs.getEReference() != null) t.addNewReference("ownedDataPkgs", s.ownedDataPkgs.getEReference());
	//DataPkg.ownedClasses -> EReference : ownedClasses
	if (s.ownedClasses.getEReference() != null) t.addNewReference("ownedClasses", s.ownedClasses.getEReference());
	//DataPkg.ownedKeyParts -> EReference : ownedKeyParts
	if (s.ownedKeyParts.getEReference() != null) t.addNewReference("ownedKeyParts", s.ownedKeyParts.getEReference());
	//DataPkg.ownedCollections -> EReference : ownedCollections
	if (s.ownedCollections.getEReference() != null) t.addNewReference("ownedCollections", s.ownedCollections.getEReference());
	//DataPkg.ownedUnits -> EReference : ownedUnits
	if (s.ownedUnits.getEReference() != null) t.addNewReference("ownedUnits", s.ownedUnits.getEReference());
	//DataPkg.ownedDataTypes -> EReference : ownedDataTypes
	if (s.ownedDataTypes.getEReference() != null) t.addNewReference("ownedDataTypes", s.ownedDataTypes.getEReference());
	//DataPkg.ownedSignals -> EReference : ownedSignals
	if (s.ownedSignals.getEReference() != null) t.addNewReference("ownedSignals", s.ownedSignals.getEReference());
	//DataPkg.ownedMessages -> EReference : ownedMessages
	if (s.ownedMessages.getEReference() != null) t.addNewReference("ownedMessages", s.ownedMessages.getEReference());
	//DataPkg.ownedExceptions -> EReference : ownedExceptions
	if (s.ownedExceptions.getEReference() != null) t.addNewReference("ownedExceptions", s.ownedExceptions.getEReference());
	//DataPkg.ownedStateEvents -> EReference : ownedStateEvents
	if (s.ownedStateEvents.getEReference() != null) t.addNewReference("ownedStateEvents", s.ownedStateEvents.getEReference());
}

@lazy
rule DomainElement
	transform s : DSL!DomainElement //information.DomainElement
	to t : SysMLine!ItemUsage
	extends Base{
	//DomainElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//DomainElement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//DomainElement.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//DomainElement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//DomainElement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//DomainElement.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//DomainElement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//DomainElement.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//DomainElement.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//DomainElement.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//DomainElement.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//DomainElement.isPrimitive -> EAttribute : isPrimitive
	if (s.isPrimitive.getEAttribute() != null) t.addNewAttribute("isPrimitive", s.isPrimitive.getEAttribute());
	//DomainElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//DomainElement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//DomainElement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//DomainElement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//DomainElement.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//DomainElement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//DomainElement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//DomainElement.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//DomainElement.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//DomainElement.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//DomainElement.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//DomainElement.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//DomainElement.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//DomainElement.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//DomainElement.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//DomainElement.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//DomainElement.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//DomainElement.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//DomainElement.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//DomainElement.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//DomainElement.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//DomainElement.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//DomainElement.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//DomainElement.ownedFeatures -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//DomainElement.containedProperties -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//DomainElement.containedOperations -> EReference : containedOperations
	if (s.containedOperations.getEReference() != null) t.addNewReference("containedOperations", s.containedOperations.getEReference());
	//DomainElement.nestedGeneralClasses -> EReference : nestedGeneralClasses
	if (s.nestedGeneralClasses.getEReference() != null) t.addNewReference("nestedGeneralClasses", s.nestedGeneralClasses.getEReference());
	//DomainElement.keyParts -> EReference : keyParts
	if (s.keyParts.getEReference() != null) t.addNewReference("keyParts", s.keyParts.getEReference());
	//DomainElement.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//DomainElement.ownedDataValues -> EReference : ownedDataValues
	if (s.ownedDataValues.getEReference() != null) t.addNewReference("ownedDataValues", s.ownedDataValues.getEReference());
	//DomainElement.ownedInformationRealizations -> EReference : ownedInformationRealizations
	if (s.ownedInformationRealizations.getEReference() != null) t.addNewReference("ownedInformationRealizations", s.ownedInformationRealizations.getEReference());
	//DomainElement.realizedClasses -> EReference : realizedClasses
	if (s.realizedClasses.getEReference() != null) t.addNewReference("realizedClasses", s.realizedClasses.getEReference());
	//DomainElement.realizingClasses -> EReference : realizingClasses
	if (s.realizingClasses.getEReference() != null) t.addNewReference("realizingClasses", s.realizingClasses.getEReference());
}

@lazy
rule KeyPart
	transform s : DSL!KeyPart //information.KeyPart
	to t : SysMLine!ItemUsage
	extends Base{
	//KeyPart.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//KeyPart.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//KeyPart.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//KeyPart.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//KeyPart.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//KeyPart.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//KeyPart.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//KeyPart.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//KeyPart.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//KeyPart.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//KeyPart.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//KeyPart.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//KeyPart.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//KeyPart.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//KeyPart.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//KeyPart.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//KeyPart.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//KeyPart.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//KeyPart.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//KeyPart.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//KeyPart.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//KeyPart.property -> EReference : property
	if (s.property.getEReference() != null) t.addNewReference("property", s.property.getEReference());
}

@lazy
rule MultiplicityElement
	transform s : DSL!MultiplicityElement //information.MultiplicityElement
	to t : SysMLine!ItemUsage
	extends Base{
	//MultiplicityElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//MultiplicityElement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//MultiplicityElement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//MultiplicityElement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//MultiplicityElement.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//MultiplicityElement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//MultiplicityElement.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//MultiplicityElement.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//MultiplicityElement.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//MultiplicityElement.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//MultiplicityElement.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//MultiplicityElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//MultiplicityElement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//MultiplicityElement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//MultiplicityElement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//MultiplicityElement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//MultiplicityElement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//MultiplicityElement.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//MultiplicityElement.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//MultiplicityElement.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//MultiplicityElement.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//MultiplicityElement.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//MultiplicityElement.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//MultiplicityElement.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//MultiplicityElement.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//MultiplicityElement.ownedMinValue -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//MultiplicityElement.ownedMaxValue -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//MultiplicityElement.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//MultiplicityElement.ownedMinCard -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//MultiplicityElement.ownedMinLength -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//MultiplicityElement.ownedMaxCard -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//MultiplicityElement.ownedMaxLength -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
}

@lazy
rule Operation
	transform s : DSL!Operation //information.Operation
	to t : SysMLine!ItemUsage
	extends Base{
	//Operation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Operation.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Operation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Operation.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Operation.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Operation.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Operation.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Operation.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Operation.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Operation.isStatic -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//Operation.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//Operation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Operation.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Operation.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Operation.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Operation.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Operation.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Operation.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Operation.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Operation.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Operation.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Operation.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Operation.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Operation.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Operation.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//Operation.invokingSequenceMessages -> EReference : invokingSequenceMessages
	if (s.invokingSequenceMessages.getEReference() != null) t.addNewReference("invokingSequenceMessages", s.invokingSequenceMessages.getEReference());
	//Operation.ownedParameters -> EReference : ownedParameters
	if (s.ownedParameters.getEReference() != null) t.addNewReference("ownedParameters", s.ownedParameters.getEReference());
	//Operation.allocatingOperations -> EReference : allocatingOperations
	if (s.allocatingOperations.getEReference() != null) t.addNewReference("allocatingOperations", s.allocatingOperations.getEReference());
	//Operation.allocatedOperations -> EReference : allocatedOperations
	if (s.allocatedOperations.getEReference() != null) t.addNewReference("allocatedOperations", s.allocatedOperations.getEReference());
	//Operation.ownedOperationAllocation -> EReference : ownedOperationAllocation
	if (s.ownedOperationAllocation.getEReference() != null) t.addNewReference("ownedOperationAllocation", s.ownedOperationAllocation.getEReference());
	//Operation.ownedExchangeItemRealizations -> EReference : ownedExchangeItemRealizations
	if (s.ownedExchangeItemRealizations.getEReference() != null) t.addNewReference("ownedExchangeItemRealizations", s.ownedExchangeItemRealizations.getEReference());
	//Operation.realizedExchangeItems -> EReference : realizedExchangeItems
	if (s.realizedExchangeItems.getEReference() != null) t.addNewReference("realizedExchangeItems", s.realizedExchangeItems.getEReference());
}

@lazy
rule OperationAllocation
	transform s : DSL!OperationAllocation //information.OperationAllocation
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationAllocation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OperationAllocation.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OperationAllocation.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OperationAllocation.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OperationAllocation.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OperationAllocation.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OperationAllocation.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OperationAllocation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OperationAllocation.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OperationAllocation.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OperationAllocation.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OperationAllocation.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//OperationAllocation.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OperationAllocation.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OperationAllocation.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OperationAllocation.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OperationAllocation.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OperationAllocation.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OperationAllocation.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OperationAllocation.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OperationAllocation.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//OperationAllocation.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//OperationAllocation.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//OperationAllocation.allocatedOperation -> EReference : allocatedOperation
	if (s.allocatedOperation.getEReference() != null) t.addNewReference("allocatedOperation", s.allocatedOperation.getEReference());
	//OperationAllocation.allocatingOperation -> EReference : allocatingOperation
	if (s.allocatingOperation.getEReference() != null) t.addNewReference("allocatingOperation", s.allocatingOperation.getEReference());
}

@lazy
rule Parameter
	transform s : DSL!Parameter //information.Parameter
	to t : SysMLine!ItemUsage
	extends Base{
	//Parameter.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Parameter.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Parameter.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Parameter.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Parameter.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Parameter.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Parameter.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Parameter.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Parameter.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//Parameter.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//Parameter.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//Parameter.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//Parameter.isException -> EAttribute : isException
	if (s.isException.getEAttribute() != null) t.addNewAttribute("isException", s.isException.getEAttribute());
	//Parameter.isStream -> EAttribute : isStream
	if (s.isStream.getEAttribute() != null) t.addNewAttribute("isStream", s.isStream.getEAttribute());
	//Parameter.isOptional -> EAttribute : isOptional
	if (s.isOptional.getEAttribute() != null) t.addNewAttribute("isOptional", s.isOptional.getEAttribute());
	//Parameter.kindOfRate -> EAttribute : kindOfRate
	if (s.kindOfRate.getEAttribute() != null) t.addNewAttribute("kindOfRate", s.kindOfRate.getEAttribute());
	//Parameter.effect -> EAttribute : effect
	if (s.effect.getEAttribute() != null) t.addNewAttribute("effect", s.effect.getEAttribute());
	//Parameter.direction -> EAttribute : direction
	if (s.direction.getEAttribute() != null) t.addNewAttribute("direction", s.direction.getEAttribute());
	//Parameter.passingMode -> EAttribute : passingMode
	if (s.passingMode.getEAttribute() != null) t.addNewAttribute("passingMode", s.passingMode.getEAttribute());
	//Parameter.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Parameter.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Parameter.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Parameter.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Parameter.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//Parameter.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Parameter.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Parameter.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Parameter.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Parameter.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Parameter.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Parameter.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Parameter.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Parameter.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Parameter.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//Parameter.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//Parameter.ownedMinValue -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//Parameter.ownedMaxValue -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//Parameter.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//Parameter.ownedMinCard -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//Parameter.ownedMinLength -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//Parameter.ownedMaxCard -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//Parameter.ownedMaxLength -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//Parameter.rate -> EReference : rate
	if (s.rate.getEReference() != null) t.addNewReference("rate", s.rate.getEReference());
	//Parameter.probability -> EReference : probability
	if (s.probability.getEReference() != null) t.addNewReference("probability", s.probability.getEReference());
	//Parameter.parameterSet -> EReference : parameterSet
	if (s.parameterSet.getEReference() != null) t.addNewReference("parameterSet", s.parameterSet.getEReference());
}

@lazy
rule Property
	transform s : DSL!Property //information.Property
	to t : SysMLine!ItemUsage
	extends Base{
	//Property.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Property.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Property.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Property.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Property.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Property.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Property.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Property.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Property.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Property.isStatic -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//Property.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//Property.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//Property.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//Property.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//Property.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//Property.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//Property.aggregationKind -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null) t.addNewAttribute("aggregationKind", s.aggregationKind.getEAttribute());
	//Property.isDerived -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null) t.addNewAttribute("isDerived", s.isDerived.getEAttribute());
	//Property.isReadOnly -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null) t.addNewAttribute("isReadOnly", s.isReadOnly.getEAttribute());
	//Property.isPartOfKey -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null) t.addNewAttribute("isPartOfKey", s.isPartOfKey.getEAttribute());
	//Property.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Property.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Property.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Property.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Property.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Property.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Property.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Property.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Property.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Property.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Property.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Property.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Property.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Property.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//Property.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//Property.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//Property.ownedMinValue -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//Property.ownedMaxValue -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//Property.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//Property.ownedMinCard -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//Property.ownedMinLength -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//Property.ownedMaxCard -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//Property.ownedMaxLength -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//Property.association -> EReference : association
	if (s.association.getEReference() != null) t.addNewReference("association", s.association.getEReference());
}

@lazy
rule Service
	transform s : DSL!Service //information.Service
	to t : SysMLine!ItemUsage
	extends Base{
	//Service.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Service.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Service.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Service.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Service.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Service.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Service.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Service.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Service.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Service.isStatic -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//Service.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//Service.synchronismKind -> EAttribute : synchronismKind
	if (s.synchronismKind.getEAttribute() != null) t.addNewAttribute("synchronismKind", s.synchronismKind.getEAttribute());
	//Service.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Service.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Service.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Service.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Service.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Service.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Service.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Service.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Service.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Service.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Service.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Service.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Service.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Service.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//Service.invokingSequenceMessages -> EReference : invokingSequenceMessages
	if (s.invokingSequenceMessages.getEReference() != null) t.addNewReference("invokingSequenceMessages", s.invokingSequenceMessages.getEReference());
	//Service.ownedParameters -> EReference : ownedParameters
	if (s.ownedParameters.getEReference() != null) t.addNewReference("ownedParameters", s.ownedParameters.getEReference());
	//Service.allocatingOperations -> EReference : allocatingOperations
	if (s.allocatingOperations.getEReference() != null) t.addNewReference("allocatingOperations", s.allocatingOperations.getEReference());
	//Service.allocatedOperations -> EReference : allocatedOperations
	if (s.allocatedOperations.getEReference() != null) t.addNewReference("allocatedOperations", s.allocatedOperations.getEReference());
	//Service.ownedOperationAllocation -> EReference : ownedOperationAllocation
	if (s.ownedOperationAllocation.getEReference() != null) t.addNewReference("ownedOperationAllocation", s.ownedOperationAllocation.getEReference());
	//Service.ownedExchangeItemRealizations -> EReference : ownedExchangeItemRealizations
	if (s.ownedExchangeItemRealizations.getEReference() != null) t.addNewReference("ownedExchangeItemRealizations", s.ownedExchangeItemRealizations.getEReference());
	//Service.realizedExchangeItems -> EReference : realizedExchangeItems
	if (s.realizedExchangeItems.getEReference() != null) t.addNewReference("realizedExchangeItems", s.realizedExchangeItems.getEReference());
	//Service.thrownExceptions -> EReference : thrownExceptions
	if (s.thrownExceptions.getEReference() != null) t.addNewReference("thrownExceptions", s.thrownExceptions.getEReference());
	//Service.messages -> EReference : messages
	if (s.messages.getEReference() != null) t.addNewReference("messages", s.messages.getEReference());
	//Service.messageReferences -> EReference : messageReferences
	if (s.messageReferences.getEReference() != null) t.addNewReference("messageReferences", s.messageReferences.getEReference());
}

@lazy
rule Union
	transform s : DSL!Union //information.Union
	to t : SysMLine!ItemUsage
	extends Base{
	//Union.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Union.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Union.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Union.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Union.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Union.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Union.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Union.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Union.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//Union.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//Union.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//Union.isPrimitive -> EAttribute : isPrimitive
	if (s.isPrimitive.getEAttribute() != null) t.addNewAttribute("isPrimitive", s.isPrimitive.getEAttribute());
	//Union.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//Union.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Union.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Union.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Union.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Union.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//Union.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Union.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Union.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Union.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Union.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Union.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Union.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Union.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Union.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Union.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Union.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Union.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Union.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//Union.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//Union.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//Union.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//Union.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//Union.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//Union.ownedFeatures -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//Union.containedProperties -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//Union.containedOperations -> EReference : containedOperations
	if (s.containedOperations.getEReference() != null) t.addNewReference("containedOperations", s.containedOperations.getEReference());
	//Union.nestedGeneralClasses -> EReference : nestedGeneralClasses
	if (s.nestedGeneralClasses.getEReference() != null) t.addNewReference("nestedGeneralClasses", s.nestedGeneralClasses.getEReference());
	//Union.keyParts -> EReference : keyParts
	if (s.keyParts.getEReference() != null) t.addNewReference("keyParts", s.keyParts.getEReference());
	//Union.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//Union.ownedDataValues -> EReference : ownedDataValues
	if (s.ownedDataValues.getEReference() != null) t.addNewReference("ownedDataValues", s.ownedDataValues.getEReference());
	//Union.ownedInformationRealizations -> EReference : ownedInformationRealizations
	if (s.ownedInformationRealizations.getEReference() != null) t.addNewReference("ownedInformationRealizations", s.ownedInformationRealizations.getEReference());
	//Union.realizedClasses -> EReference : realizedClasses
	if (s.realizedClasses.getEReference() != null) t.addNewReference("realizedClasses", s.realizedClasses.getEReference());
	//Union.realizingClasses -> EReference : realizingClasses
	if (s.realizingClasses.getEReference() != null) t.addNewReference("realizingClasses", s.realizingClasses.getEReference());
	//Union.discriminant -> EReference : discriminant
	if (s.discriminant.getEReference() != null) t.addNewReference("discriminant", s.discriminant.getEReference());
	//Union.defaultProperty -> EReference : defaultProperty
	if (s.defaultProperty.getEReference() != null) t.addNewReference("defaultProperty", s.defaultProperty.getEReference());
	//Union.containedUnionProperties -> EReference : containedUnionProperties
	if (s.containedUnionProperties.getEReference() != null) t.addNewReference("containedUnionProperties", s.containedUnionProperties.getEReference());
}

@lazy
rule UnionProperty
	transform s : DSL!UnionProperty //information.UnionProperty
	to t : SysMLine!ItemUsage
	extends Base{
	//UnionProperty.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//UnionProperty.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//UnionProperty.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//UnionProperty.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//UnionProperty.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//UnionProperty.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//UnionProperty.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//UnionProperty.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//UnionProperty.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//UnionProperty.isStatic -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//UnionProperty.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//UnionProperty.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//UnionProperty.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//UnionProperty.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//UnionProperty.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//UnionProperty.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//UnionProperty.aggregationKind -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null) t.addNewAttribute("aggregationKind", s.aggregationKind.getEAttribute());
	//UnionProperty.isDerived -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null) t.addNewAttribute("isDerived", s.isDerived.getEAttribute());
	//UnionProperty.isReadOnly -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null) t.addNewAttribute("isReadOnly", s.isReadOnly.getEAttribute());
	//UnionProperty.isPartOfKey -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null) t.addNewAttribute("isPartOfKey", s.isPartOfKey.getEAttribute());
	//UnionProperty.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//UnionProperty.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//UnionProperty.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//UnionProperty.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//UnionProperty.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//UnionProperty.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//UnionProperty.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//UnionProperty.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//UnionProperty.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//UnionProperty.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//UnionProperty.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//UnionProperty.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//UnionProperty.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//UnionProperty.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//UnionProperty.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//UnionProperty.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//UnionProperty.ownedMinValue -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//UnionProperty.ownedMaxValue -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//UnionProperty.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//UnionProperty.ownedMinCard -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//UnionProperty.ownedMinLength -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//UnionProperty.ownedMaxCard -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//UnionProperty.ownedMaxLength -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//UnionProperty.association -> EReference : association
	if (s.association.getEReference() != null) t.addNewReference("association", s.association.getEReference());
	//UnionProperty.qualifier -> EReference : qualifier
	if (s.qualifier.getEReference() != null) t.addNewReference("qualifier", s.qualifier.getEReference());
}

@lazy
rule Unit
	transform s : DSL!Unit //information.Unit
	to t : SysMLine!ItemUsage
	extends Base{
	//Unit.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Unit.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Unit.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Unit.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Unit.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Unit.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Unit.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Unit.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Unit.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Unit.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Unit.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Unit.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Unit.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Unit.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Unit.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Unit.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Unit.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Unit.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Unit.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Unit.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Unit.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule Port
	transform s : DSL!Port //information.Port
	to t : SysMLine!ItemUsage
	extends Base{
	//Port.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Port.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Port.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Port.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Port.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Port.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Port.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Port.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Port.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Port.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Port.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Port.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Port.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Port.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Port.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Port.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Port.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Port.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Port.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Port.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Port.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Port.incomingPortRealizations -> EReference : incomingPortRealizations
	if (s.incomingPortRealizations.getEReference() != null) t.addNewReference("incomingPortRealizations", s.incomingPortRealizations.getEReference());
	//Port.outgoingPortRealizations -> EReference : outgoingPortRealizations
	if (s.outgoingPortRealizations.getEReference() != null) t.addNewReference("outgoingPortRealizations", s.outgoingPortRealizations.getEReference());
	//Port.ownedProtocols -> EReference : ownedProtocols
	if (s.ownedProtocols.getEReference() != null) t.addNewReference("ownedProtocols", s.ownedProtocols.getEReference());
	//Port.incomingPortAllocations -> EReference : incomingPortAllocations
	if (s.incomingPortAllocations.getEReference() != null) t.addNewReference("incomingPortAllocations", s.incomingPortAllocations.getEReference());
	//Port.outgoingPortAllocations -> EReference : outgoingPortAllocations
	if (s.outgoingPortAllocations.getEReference() != null) t.addNewReference("outgoingPortAllocations", s.outgoingPortAllocations.getEReference());
	//Port.providedInterfaces -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//Port.requiredInterfaces -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//Port.ownedPortRealizations -> EReference : ownedPortRealizations
	if (s.ownedPortRealizations.getEReference() != null) t.addNewReference("ownedPortRealizations", s.ownedPortRealizations.getEReference());
	//Port.ownedPortAllocations -> EReference : ownedPortAllocations
	if (s.ownedPortAllocations.getEReference() != null) t.addNewReference("ownedPortAllocations", s.ownedPortAllocations.getEReference());
}

@lazy
rule PortRealization
	transform s : DSL!PortRealization //information.PortRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//PortRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PortRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PortRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PortRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PortRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PortRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PortRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PortRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PortRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PortRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PortRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PortRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//PortRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PortRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PortRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PortRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PortRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PortRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PortRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PortRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PortRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PortRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//PortRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//PortRealization.realizedPort -> EReference : realizedPort
	if (s.realizedPort.getEReference() != null) t.addNewReference("realizedPort", s.realizedPort.getEReference());
	//PortRealization.realizingPort -> EReference : realizingPort
	if (s.realizingPort.getEReference() != null) t.addNewReference("realizingPort", s.realizingPort.getEReference());
}

@lazy
rule PortAllocation
	transform s : DSL!PortAllocation //information.PortAllocation
	to t : SysMLine!ItemUsage
	extends Base{
	//PortAllocation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PortAllocation.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PortAllocation.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PortAllocation.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PortAllocation.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PortAllocation.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PortAllocation.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PortAllocation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PortAllocation.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PortAllocation.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PortAllocation.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PortAllocation.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//PortAllocation.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PortAllocation.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PortAllocation.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PortAllocation.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PortAllocation.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PortAllocation.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PortAllocation.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PortAllocation.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PortAllocation.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PortAllocation.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//PortAllocation.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//PortAllocation.allocatedPort -> EReference : allocatedPort
	if (s.allocatedPort.getEReference() != null) t.addNewReference("allocatedPort", s.allocatedPort.getEReference());
	//PortAllocation.allocatingPort -> EReference : allocatingPort
	if (s.allocatingPort.getEReference() != null) t.addNewReference("allocatingPort", s.allocatingPort.getEReference());
}

@lazy
rule ExchangeItem
	transform s : DSL!ExchangeItem //information.ExchangeItem
	to t : SysMLine!ItemUsage
	extends Base{
	//ExchangeItem.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ExchangeItem.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ExchangeItem.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ExchangeItem.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//ExchangeItem.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ExchangeItem.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ExchangeItem.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ExchangeItem.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ExchangeItem.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ExchangeItem.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//ExchangeItem.exchangeMechanism -> EAttribute : exchangeMechanism
	if (s.exchangeMechanism.getEAttribute() != null) t.addNewAttribute("exchangeMechanism", s.exchangeMechanism.getEAttribute());
	//ExchangeItem.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ExchangeItem.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ExchangeItem.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ExchangeItem.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ExchangeItem.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//ExchangeItem.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ExchangeItem.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ExchangeItem.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ExchangeItem.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ExchangeItem.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ExchangeItem.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ExchangeItem.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ExchangeItem.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ExchangeItem.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ExchangeItem.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//ExchangeItem.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//ExchangeItem.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//ExchangeItem.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//ExchangeItem.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//ExchangeItem.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//ExchangeItem.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//ExchangeItem.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//ExchangeItem.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//ExchangeItem.ownedElements -> EReference : ownedElements
	if (s.ownedElements.getEReference() != null) t.addNewReference("ownedElements", s.ownedElements.getEReference());
	//ExchangeItem.ownedInformationRealizations -> EReference : ownedInformationRealizations
	if (s.ownedInformationRealizations.getEReference() != null) t.addNewReference("ownedInformationRealizations", s.ownedInformationRealizations.getEReference());
	//ExchangeItem.ownedExchangeItemInstances -> EReference : ownedExchangeItemInstances
	if (s.ownedExchangeItemInstances.getEReference() != null) t.addNewReference("ownedExchangeItemInstances", s.ownedExchangeItemInstances.getEReference());
	//ExchangeItem.allocatorInterfaces -> EReference : allocatorInterfaces
	if (s.allocatorInterfaces.getEReference() != null) t.addNewReference("allocatorInterfaces", s.allocatorInterfaces.getEReference());
	//ExchangeItem.realizedExchangeItems -> EReference : realizedExchangeItems
	if (s.realizedExchangeItems.getEReference() != null) t.addNewReference("realizedExchangeItems", s.realizedExchangeItems.getEReference());
	//ExchangeItem.realizingExchangeItems -> EReference : realizingExchangeItems
	if (s.realizingExchangeItems.getEReference() != null) t.addNewReference("realizingExchangeItems", s.realizingExchangeItems.getEReference());
	//ExchangeItem.realizingOperations -> EReference : realizingOperations
	if (s.realizingOperations.getEReference() != null) t.addNewReference("realizingOperations", s.realizingOperations.getEReference());
}

@lazy
rule ExchangeItemElement
	transform s : DSL!ExchangeItemElement //information.ExchangeItemElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ExchangeItemElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ExchangeItemElement.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ExchangeItemElement.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ExchangeItemElement.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ExchangeItemElement.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ExchangeItemElement.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ExchangeItemElement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ExchangeItemElement.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ExchangeItemElement.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//ExchangeItemElement.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//ExchangeItemElement.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//ExchangeItemElement.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//ExchangeItemElement.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//ExchangeItemElement.direction -> EAttribute : direction
	if (s.direction.getEAttribute() != null) t.addNewAttribute("direction", s.direction.getEAttribute());
	//ExchangeItemElement.composite -> EAttribute : composite
	if (s.composite.getEAttribute() != null) t.addNewAttribute("composite", s.composite.getEAttribute());
	//ExchangeItemElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ExchangeItemElement.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ExchangeItemElement.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ExchangeItemElement.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ExchangeItemElement.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ExchangeItemElement.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ExchangeItemElement.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ExchangeItemElement.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ExchangeItemElement.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ExchangeItemElement.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ExchangeItemElement.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ExchangeItemElement.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ExchangeItemElement.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ExchangeItemElement.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//ExchangeItemElement.ownedMinValue -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//ExchangeItemElement.ownedMaxValue -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//ExchangeItemElement.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//ExchangeItemElement.ownedMinCard -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//ExchangeItemElement.ownedMinLength -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//ExchangeItemElement.ownedMaxCard -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//ExchangeItemElement.ownedMaxLength -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//ExchangeItemElement.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//ExchangeItemElement.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//ExchangeItemElement.referencedProperties -> EReference : referencedProperties
	if (s.referencedProperties.getEReference() != null) t.addNewReference("referencedProperties", s.referencedProperties.getEReference());
}

@lazy
rule ExchangeItemInstance
	transform s : DSL!ExchangeItemInstance //information.ExchangeItemInstance
	to t : SysMLine!ItemUsage
	extends Base{
	//ExchangeItemInstance.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ExchangeItemInstance.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ExchangeItemInstance.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ExchangeItemInstance.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ExchangeItemInstance.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ExchangeItemInstance.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ExchangeItemInstance.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ExchangeItemInstance.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ExchangeItemInstance.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//ExchangeItemInstance.isStatic -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//ExchangeItemInstance.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//ExchangeItemInstance.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//ExchangeItemInstance.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//ExchangeItemInstance.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//ExchangeItemInstance.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//ExchangeItemInstance.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//ExchangeItemInstance.aggregationKind -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null) t.addNewAttribute("aggregationKind", s.aggregationKind.getEAttribute());
	//ExchangeItemInstance.isDerived -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null) t.addNewAttribute("isDerived", s.isDerived.getEAttribute());
	//ExchangeItemInstance.isReadOnly -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null) t.addNewAttribute("isReadOnly", s.isReadOnly.getEAttribute());
	//ExchangeItemInstance.isPartOfKey -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null) t.addNewAttribute("isPartOfKey", s.isPartOfKey.getEAttribute());
	//ExchangeItemInstance.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ExchangeItemInstance.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ExchangeItemInstance.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ExchangeItemInstance.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ExchangeItemInstance.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ExchangeItemInstance.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ExchangeItemInstance.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ExchangeItemInstance.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ExchangeItemInstance.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ExchangeItemInstance.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ExchangeItemInstance.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ExchangeItemInstance.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ExchangeItemInstance.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ExchangeItemInstance.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//ExchangeItemInstance.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//ExchangeItemInstance.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//ExchangeItemInstance.ownedMinValue -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//ExchangeItemInstance.ownedMaxValue -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//ExchangeItemInstance.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//ExchangeItemInstance.ownedMinCard -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//ExchangeItemInstance.ownedMinLength -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//ExchangeItemInstance.ownedMaxCard -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//ExchangeItemInstance.ownedMaxLength -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//ExchangeItemInstance.association -> EReference : association
	if (s.association.getEReference() != null) t.addNewReference("association", s.association.getEReference());
	//ExchangeItemInstance.representingInstanceRoles -> EReference : representingInstanceRoles
	if (s.representingInstanceRoles.getEReference() != null) t.addNewReference("representingInstanceRoles", s.representingInstanceRoles.getEReference());
}

@lazy
rule InformationRealization
	transform s : DSL!InformationRealization //information.InformationRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//InformationRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InformationRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InformationRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//InformationRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//InformationRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//InformationRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//InformationRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//InformationRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InformationRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InformationRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InformationRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InformationRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//InformationRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//InformationRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//InformationRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//InformationRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//InformationRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//InformationRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//InformationRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//InformationRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//InformationRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//InformationRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//InformationRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
}

@lazy
rule ExchangeItemRealization
	transform s : DSL!ExchangeItemRealization //information.ExchangeItemRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//ExchangeItemRealization.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ExchangeItemRealization.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ExchangeItemRealization.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ExchangeItemRealization.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ExchangeItemRealization.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ExchangeItemRealization.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ExchangeItemRealization.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ExchangeItemRealization.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ExchangeItemRealization.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ExchangeItemRealization.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ExchangeItemRealization.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ExchangeItemRealization.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ExchangeItemRealization.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ExchangeItemRealization.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ExchangeItemRealization.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ExchangeItemRealization.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ExchangeItemRealization.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ExchangeItemRealization.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ExchangeItemRealization.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ExchangeItemRealization.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ExchangeItemRealization.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ExchangeItemRealization.targetElement -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//ExchangeItemRealization.sourceElement -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//ExchangeItemRealization.realizedItem -> EReference : realizedItem
	if (s.realizedItem.getEReference() != null) t.addNewReference("realizedItem", s.realizedItem.getEReference());
	//ExchangeItemRealization.realizingOperation -> EReference : realizingOperation
	if (s.realizingOperation.getEReference() != null) t.addNewReference("realizingOperation", s.realizingOperation.getEReference());
}

@lazy
rule AbstractEventOperation
	transform s : DSL!AbstractEventOperation //information.AbstractEventOperation
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractEventOperation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractEventOperation.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractEventOperation.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractEventOperation.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractEventOperation.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractEventOperation.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractEventOperation.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractEventOperation.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractEventOperation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractEventOperation.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractEventOperation.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractEventOperation.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractEventOperation.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractEventOperation.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractEventOperation.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractEventOperation.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractEventOperation.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractEventOperation.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractEventOperation.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractEventOperation.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractEventOperation.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractEventOperation.invokingSequenceMessages -> EReference : invokingSequenceMessages
	if (s.invokingSequenceMessages.getEReference() != null) t.addNewReference("invokingSequenceMessages", s.invokingSequenceMessages.getEReference());
}


// communication.ecore
@lazy
rule CommunicationItem
	transform s : DSL!CommunicationItem //communication.CommunicationItem
	to t : SysMLine!ItemUsage
	extends Base{
	//CommunicationItem.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CommunicationItem.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CommunicationItem.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CommunicationItem.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CommunicationItem.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CommunicationItem.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CommunicationItem.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CommunicationItem.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CommunicationItem.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//CommunicationItem.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//CommunicationItem.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CommunicationItem.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CommunicationItem.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CommunicationItem.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CommunicationItem.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//CommunicationItem.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CommunicationItem.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CommunicationItem.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CommunicationItem.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CommunicationItem.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CommunicationItem.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CommunicationItem.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CommunicationItem.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CommunicationItem.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CommunicationItem.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//CommunicationItem.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//CommunicationItem.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//CommunicationItem.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//CommunicationItem.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//CommunicationItem.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//CommunicationItem.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//CommunicationItem.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//CommunicationItem.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//CommunicationItem.ownedFeatures -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//CommunicationItem.containedProperties -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//CommunicationItem.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//CommunicationItem.ownedDataValues -> EReference : ownedDataValues
	if (s.ownedDataValues.getEReference() != null) t.addNewReference("ownedDataValues", s.ownedDataValues.getEReference());
	//CommunicationItem.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//CommunicationItem.properties -> EReference : properties
	if (s.properties.getEReference() != null) t.addNewReference("properties", s.properties.getEReference());
}

@lazy
rule Exception
	transform s : DSL!Exception //communication.Exception
	to t : SysMLine!ItemUsage
	extends Base{
	//Exception.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Exception.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Exception.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Exception.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Exception.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Exception.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Exception.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Exception.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Exception.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//Exception.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//Exception.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Exception.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Exception.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Exception.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Exception.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//Exception.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Exception.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Exception.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Exception.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Exception.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Exception.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Exception.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Exception.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Exception.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Exception.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Exception.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Exception.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Exception.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//Exception.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//Exception.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//Exception.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//Exception.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//Exception.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//Exception.ownedFeatures -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//Exception.containedProperties -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//Exception.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//Exception.ownedDataValues -> EReference : ownedDataValues
	if (s.ownedDataValues.getEReference() != null) t.addNewReference("ownedDataValues", s.ownedDataValues.getEReference());
	//Exception.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//Exception.properties -> EReference : properties
	if (s.properties.getEReference() != null) t.addNewReference("properties", s.properties.getEReference());
}

@lazy
rule Message
	transform s : DSL!Message //communication.Message
	to t : SysMLine!ItemUsage
	extends Base{
	//Message.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Message.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Message.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Message.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Message.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Message.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Message.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Message.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Message.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//Message.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//Message.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Message.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Message.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Message.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Message.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//Message.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Message.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Message.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Message.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Message.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Message.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Message.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Message.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Message.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Message.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Message.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Message.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Message.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//Message.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//Message.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//Message.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//Message.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//Message.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//Message.ownedFeatures -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//Message.containedProperties -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//Message.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//Message.ownedDataValues -> EReference : ownedDataValues
	if (s.ownedDataValues.getEReference() != null) t.addNewReference("ownedDataValues", s.ownedDataValues.getEReference());
	//Message.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//Message.properties -> EReference : properties
	if (s.properties.getEReference() != null) t.addNewReference("properties", s.properties.getEReference());
}

@lazy
rule MessageReference
	transform s : DSL!MessageReference //communication.MessageReference
	to t : SysMLine!ItemUsage
	extends Base{
	//MessageReference.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//MessageReference.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//MessageReference.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//MessageReference.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//MessageReference.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//MessageReference.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//MessageReference.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//MessageReference.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//MessageReference.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//MessageReference.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//MessageReference.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//MessageReference.realizedFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//MessageReference.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//MessageReference.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//MessageReference.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//MessageReference.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//MessageReference.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//MessageReference.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//MessageReference.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//MessageReference.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//MessageReference.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//MessageReference.message -> EReference : message
	if (s.message.getEReference() != null) t.addNewReference("message", s.message.getEReference());
}

@lazy
rule MessageReferencePkg
	transform s : DSL!MessageReferencePkg //communication.MessageReferencePkg
	to t : SysMLine!ItemUsage
	extends Base{
	//MessageReferencePkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//MessageReferencePkg.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//MessageReferencePkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//MessageReferencePkg.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//MessageReferencePkg.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//MessageReferencePkg.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//MessageReferencePkg.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//MessageReferencePkg.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//MessageReferencePkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//MessageReferencePkg.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//MessageReferencePkg.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//MessageReferencePkg.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//MessageReferencePkg.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//MessageReferencePkg.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//MessageReferencePkg.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//MessageReferencePkg.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//MessageReferencePkg.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//MessageReferencePkg.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//MessageReferencePkg.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//MessageReferencePkg.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//MessageReferencePkg.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//MessageReferencePkg.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//MessageReferencePkg.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//MessageReferencePkg.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//MessageReferencePkg.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//MessageReferencePkg.ownedMessageReferences -> EReference : ownedMessageReferences
	if (s.ownedMessageReferences.getEReference() != null) t.addNewReference("ownedMessageReferences", s.ownedMessageReferences.getEReference());
}

@lazy
rule Signal
	transform s : DSL!Signal //communication.Signal
	to t : SysMLine!ItemUsage
	extends Base{
	//Signal.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Signal.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Signal.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Signal.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Signal.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Signal.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Signal.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Signal.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Signal.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//Signal.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//Signal.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Signal.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Signal.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Signal.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Signal.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//Signal.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Signal.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Signal.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Signal.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Signal.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Signal.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Signal.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Signal.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Signal.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Signal.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Signal.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Signal.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Signal.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//Signal.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//Signal.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//Signal.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//Signal.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//Signal.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//Signal.ownedFeatures -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//Signal.containedProperties -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//Signal.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//Signal.ownedDataValues -> EReference : ownedDataValues
	if (s.ownedDataValues.getEReference() != null) t.addNewReference("ownedDataValues", s.ownedDataValues.getEReference());
	//Signal.ownedStateMachines -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//Signal.properties -> EReference : properties
	if (s.properties.getEReference() != null) t.addNewReference("properties", s.properties.getEReference());
	//Signal.signalInstances -> EReference : signalInstances
	if (s.signalInstances.getEReference() != null) t.addNewReference("signalInstances", s.signalInstances.getEReference());
}

@lazy
rule SignalInstance
	transform s : DSL!SignalInstance //communication.SignalInstance
	to t : SysMLine!ItemUsage
	extends Base{
	//SignalInstance.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SignalInstance.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SignalInstance.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//SignalInstance.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SignalInstance.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SignalInstance.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SignalInstance.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SignalInstance.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SignalInstance.isAbstract -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//SignalInstance.isStatic -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//SignalInstance.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//SignalInstance.ordered -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//SignalInstance.unique -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//SignalInstance.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//SignalInstance.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//SignalInstance.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//SignalInstance.aggregationKind -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null) t.addNewAttribute("aggregationKind", s.aggregationKind.getEAttribute());
	//SignalInstance.isDerived -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null) t.addNewAttribute("isDerived", s.isDerived.getEAttribute());
	//SignalInstance.isReadOnly -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null) t.addNewAttribute("isReadOnly", s.isReadOnly.getEAttribute());
	//SignalInstance.isPartOfKey -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null) t.addNewAttribute("isPartOfKey", s.isPartOfKey.getEAttribute());
	//SignalInstance.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SignalInstance.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SignalInstance.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SignalInstance.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SignalInstance.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SignalInstance.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SignalInstance.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SignalInstance.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SignalInstance.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SignalInstance.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SignalInstance.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SignalInstance.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SignalInstance.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SignalInstance.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//SignalInstance.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//SignalInstance.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//SignalInstance.ownedMinValue -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//SignalInstance.ownedMaxValue -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//SignalInstance.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//SignalInstance.ownedMinCard -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//SignalInstance.ownedMinLength -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//SignalInstance.ownedMaxCard -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//SignalInstance.ownedMaxLength -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//SignalInstance.association -> EReference : association
	if (s.association.getEReference() != null) t.addNewReference("association", s.association.getEReference());
	//SignalInstance.representingInstanceRoles -> EReference : representingInstanceRoles
	if (s.representingInstanceRoles.getEReference() != null) t.addNewReference("representingInstanceRoles", s.representingInstanceRoles.getEReference());
}

@lazy
rule CommunicationLink
	transform s : DSL!CommunicationLink //communication.CommunicationLink
	to t : SysMLine!ItemUsage
	extends Base{
	//CommunicationLink.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CommunicationLink.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CommunicationLink.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CommunicationLink.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CommunicationLink.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CommunicationLink.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CommunicationLink.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CommunicationLink.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//CommunicationLink.protocol -> EAttribute : protocol
	if (s.protocol.getEAttribute() != null) t.addNewAttribute("protocol", s.protocol.getEAttribute());
	//CommunicationLink.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CommunicationLink.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CommunicationLink.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CommunicationLink.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CommunicationLink.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CommunicationLink.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CommunicationLink.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CommunicationLink.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CommunicationLink.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CommunicationLink.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CommunicationLink.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CommunicationLink.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CommunicationLink.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CommunicationLink.exchangeItem -> EReference : exchangeItem
	if (s.exchangeItem.getEReference() != null) t.addNewReference("exchangeItem", s.exchangeItem.getEReference());
}

@lazy
rule CommunicationLinkExchanger
	transform s : DSL!CommunicationLinkExchanger //communication.CommunicationLinkExchanger
	to t : SysMLine!ItemUsage
	extends Base{
	//CommunicationLinkExchanger.ownedCommunicationLinks -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null) t.addNewReference("ownedCommunicationLinks", s.ownedCommunicationLinks.getEReference());
	//CommunicationLinkExchanger.produce -> EReference : produce
	if (s.produce.getEReference() != null) t.addNewReference("produce", s.produce.getEReference());
	//CommunicationLinkExchanger.consume -> EReference : consume
	if (s.consume.getEReference() != null) t.addNewReference("consume", s.consume.getEReference());
	//CommunicationLinkExchanger.send -> EReference : send
	if (s.send.getEReference() != null) t.addNewReference("send", s.send.getEReference());
	//CommunicationLinkExchanger.receive -> EReference : receive
	if (s.receive.getEReference() != null) t.addNewReference("receive", s.receive.getEReference());
	//CommunicationLinkExchanger.call -> EReference : call
	if (s.call.getEReference() != null) t.addNewReference("call", s.call.getEReference());
	//CommunicationLinkExchanger.execute -> EReference : execute
	if (s.execute.getEReference() != null) t.addNewReference("execute", s.execute.getEReference());
	//CommunicationLinkExchanger.write -> EReference : write
	if (s.write.getEReference() != null) t.addNewReference("write", s.write.getEReference());
	//CommunicationLinkExchanger.access -> EReference : access
	if (s.access.getEReference() != null) t.addNewReference("access", s.access.getEReference());
	//CommunicationLinkExchanger.acquire -> EReference : acquire
	if (s.acquire.getEReference() != null) t.addNewReference("acquire", s.acquire.getEReference());
	//CommunicationLinkExchanger.transmit -> EReference : transmit
	if (s.transmit.getEReference() != null) t.addNewReference("transmit", s.transmit.getEReference());
}


// datatype.ecore
@lazy
rule DataType
	transform s : DSL!DataType //datatype.DataType
	to t : SysMLine!ItemUsage
	extends Base{
	//DataType.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//DataType.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//DataType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//DataType.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//DataType.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//DataType.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//DataType.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//DataType.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//DataType.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//DataType.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//DataType.discrete -> EAttribute : discrete
	if (s.discrete.getEAttribute() != null) t.addNewAttribute("discrete", s.discrete.getEAttribute());
	//DataType.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//DataType.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//DataType.pattern -> EAttribute : pattern
	if (s.pattern.getEAttribute() != null) t.addNewAttribute("pattern", s.pattern.getEAttribute());
	//DataType.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//DataType.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//DataType.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//DataType.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//DataType.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//DataType.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//DataType.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//DataType.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//DataType.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//DataType.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//DataType.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//DataType.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//DataType.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//DataType.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//DataType.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//DataType.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//DataType.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//DataType.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//DataType.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//DataType.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//DataType.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//DataType.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//DataType.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//DataType.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//DataType.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//DataType.ownedDataValues -> EReference : ownedDataValues
	if (s.ownedDataValues.getEReference() != null) t.addNewReference("ownedDataValues", s.ownedDataValues.getEReference());
	//DataType.defaultValue -> EReference : defaultValue
	if (s.defaultValue.getEReference() != null) t.addNewReference("defaultValue", s.defaultValue.getEReference());
	//DataType.nullValue -> EReference : nullValue
	if (s.nullValue.getEReference() != null) t.addNewReference("nullValue", s.nullValue.getEReference());
	//DataType.ownedInformationRealizations -> EReference : ownedInformationRealizations
	if (s.ownedInformationRealizations.getEReference() != null) t.addNewReference("ownedInformationRealizations", s.ownedInformationRealizations.getEReference());
	//DataType.realizedDataTypes -> EReference : realizedDataTypes
	if (s.realizedDataTypes.getEReference() != null) t.addNewReference("realizedDataTypes", s.realizedDataTypes.getEReference());
	//DataType.realizingDataTypes -> EReference : realizingDataTypes
	if (s.realizingDataTypes.getEReference() != null) t.addNewReference("realizingDataTypes", s.realizingDataTypes.getEReference());
}

@lazy
rule BooleanType
	transform s : DSL!BooleanType //datatype.BooleanType
	to t : SysMLine!ItemUsage
	extends Base{
	//BooleanType.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//BooleanType.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//BooleanType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//BooleanType.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//BooleanType.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//BooleanType.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//BooleanType.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//BooleanType.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//BooleanType.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//BooleanType.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//BooleanType.discrete -> EAttribute : discrete
	if (s.discrete.getEAttribute() != null) t.addNewAttribute("discrete", s.discrete.getEAttribute());
	//BooleanType.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//BooleanType.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//BooleanType.pattern -> EAttribute : pattern
	if (s.pattern.getEAttribute() != null) t.addNewAttribute("pattern", s.pattern.getEAttribute());
	//BooleanType.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//BooleanType.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//BooleanType.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//BooleanType.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//BooleanType.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//BooleanType.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//BooleanType.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//BooleanType.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//BooleanType.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//BooleanType.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//BooleanType.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//BooleanType.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//BooleanType.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//BooleanType.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//BooleanType.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//BooleanType.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//BooleanType.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//BooleanType.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//BooleanType.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//BooleanType.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//BooleanType.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//BooleanType.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//BooleanType.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//BooleanType.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//BooleanType.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//BooleanType.ownedDataValues -> EReference : ownedDataValues
	if (s.ownedDataValues.getEReference() != null) t.addNewReference("ownedDataValues", s.ownedDataValues.getEReference());
	//BooleanType.defaultValue -> EReference : defaultValue
	if (s.defaultValue.getEReference() != null) t.addNewReference("defaultValue", s.defaultValue.getEReference());
	//BooleanType.nullValue -> EReference : nullValue
	if (s.nullValue.getEReference() != null) t.addNewReference("nullValue", s.nullValue.getEReference());
	//BooleanType.ownedInformationRealizations -> EReference : ownedInformationRealizations
	if (s.ownedInformationRealizations.getEReference() != null) t.addNewReference("ownedInformationRealizations", s.ownedInformationRealizations.getEReference());
	//BooleanType.realizedDataTypes -> EReference : realizedDataTypes
	if (s.realizedDataTypes.getEReference() != null) t.addNewReference("realizedDataTypes", s.realizedDataTypes.getEReference());
	//BooleanType.realizingDataTypes -> EReference : realizingDataTypes
	if (s.realizingDataTypes.getEReference() != null) t.addNewReference("realizingDataTypes", s.realizingDataTypes.getEReference());
	//BooleanType.ownedLiterals -> EReference : ownedLiterals
	if (s.ownedLiterals.getEReference() != null) t.addNewReference("ownedLiterals", s.ownedLiterals.getEReference());
	//BooleanType.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
}

@lazy
rule Enumeration
	transform s : DSL!Enumeration //datatype.Enumeration
	to t : SysMLine!ItemUsage
	extends Base{
	//Enumeration.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Enumeration.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Enumeration.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Enumeration.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Enumeration.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Enumeration.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Enumeration.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Enumeration.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Enumeration.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//Enumeration.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//Enumeration.discrete -> EAttribute : discrete
	if (s.discrete.getEAttribute() != null) t.addNewAttribute("discrete", s.discrete.getEAttribute());
	//Enumeration.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//Enumeration.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//Enumeration.pattern -> EAttribute : pattern
	if (s.pattern.getEAttribute() != null) t.addNewAttribute("pattern", s.pattern.getEAttribute());
	//Enumeration.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//Enumeration.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Enumeration.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Enumeration.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Enumeration.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Enumeration.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//Enumeration.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Enumeration.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Enumeration.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Enumeration.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Enumeration.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Enumeration.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Enumeration.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Enumeration.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Enumeration.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Enumeration.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Enumeration.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Enumeration.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Enumeration.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//Enumeration.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//Enumeration.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//Enumeration.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//Enumeration.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//Enumeration.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//Enumeration.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//Enumeration.ownedDataValues -> EReference : ownedDataValues
	if (s.ownedDataValues.getEReference() != null) t.addNewReference("ownedDataValues", s.ownedDataValues.getEReference());
	//Enumeration.defaultValue -> EReference : defaultValue
	if (s.defaultValue.getEReference() != null) t.addNewReference("defaultValue", s.defaultValue.getEReference());
	//Enumeration.nullValue -> EReference : nullValue
	if (s.nullValue.getEReference() != null) t.addNewReference("nullValue", s.nullValue.getEReference());
	//Enumeration.ownedInformationRealizations -> EReference : ownedInformationRealizations
	if (s.ownedInformationRealizations.getEReference() != null) t.addNewReference("ownedInformationRealizations", s.ownedInformationRealizations.getEReference());
	//Enumeration.realizedDataTypes -> EReference : realizedDataTypes
	if (s.realizedDataTypes.getEReference() != null) t.addNewReference("realizedDataTypes", s.realizedDataTypes.getEReference());
	//Enumeration.realizingDataTypes -> EReference : realizingDataTypes
	if (s.realizingDataTypes.getEReference() != null) t.addNewReference("realizingDataTypes", s.realizingDataTypes.getEReference());
	//Enumeration.ownedLiterals -> EReference : ownedLiterals
	if (s.ownedLiterals.getEReference() != null) t.addNewReference("ownedLiterals", s.ownedLiterals.getEReference());
	//Enumeration.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//Enumeration.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//Enumeration.ownedMinValue -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//Enumeration.ownedMaxValue -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//Enumeration.domainType -> EReference : domainType
	if (s.domainType.getEReference() != null) t.addNewReference("domainType", s.domainType.getEReference());
}

@lazy
rule StringType
	transform s : DSL!StringType //datatype.StringType
	to t : SysMLine!ItemUsage
	extends Base{
	//StringType.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//StringType.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//StringType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//StringType.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//StringType.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//StringType.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//StringType.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//StringType.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//StringType.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//StringType.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//StringType.discrete -> EAttribute : discrete
	if (s.discrete.getEAttribute() != null) t.addNewAttribute("discrete", s.discrete.getEAttribute());
	//StringType.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//StringType.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//StringType.pattern -> EAttribute : pattern
	if (s.pattern.getEAttribute() != null) t.addNewAttribute("pattern", s.pattern.getEAttribute());
	//StringType.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//StringType.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//StringType.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//StringType.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//StringType.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//StringType.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//StringType.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//StringType.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//StringType.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//StringType.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//StringType.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//StringType.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//StringType.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//StringType.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//StringType.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//StringType.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//StringType.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//StringType.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//StringType.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//StringType.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//StringType.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//StringType.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//StringType.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//StringType.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//StringType.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//StringType.ownedDataValues -> EReference : ownedDataValues
	if (s.ownedDataValues.getEReference() != null) t.addNewReference("ownedDataValues", s.ownedDataValues.getEReference());
	//StringType.defaultValue -> EReference : defaultValue
	if (s.defaultValue.getEReference() != null) t.addNewReference("defaultValue", s.defaultValue.getEReference());
	//StringType.nullValue -> EReference : nullValue
	if (s.nullValue.getEReference() != null) t.addNewReference("nullValue", s.nullValue.getEReference());
	//StringType.ownedInformationRealizations -> EReference : ownedInformationRealizations
	if (s.ownedInformationRealizations.getEReference() != null) t.addNewReference("ownedInformationRealizations", s.ownedInformationRealizations.getEReference());
	//StringType.realizedDataTypes -> EReference : realizedDataTypes
	if (s.realizedDataTypes.getEReference() != null) t.addNewReference("realizedDataTypes", s.realizedDataTypes.getEReference());
	//StringType.realizingDataTypes -> EReference : realizingDataTypes
	if (s.realizingDataTypes.getEReference() != null) t.addNewReference("realizingDataTypes", s.realizingDataTypes.getEReference());
	//StringType.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//StringType.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//StringType.ownedMinLength -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//StringType.ownedMaxLength -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
}

@lazy
rule NumericType
	transform s : DSL!NumericType //datatype.NumericType
	to t : SysMLine!ItemUsage
	extends Base{
	//NumericType.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//NumericType.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//NumericType.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//NumericType.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//NumericType.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//NumericType.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//NumericType.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//NumericType.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//NumericType.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//NumericType.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//NumericType.discrete -> EAttribute : discrete
	if (s.discrete.getEAttribute() != null) t.addNewAttribute("discrete", s.discrete.getEAttribute());
	//NumericType.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//NumericType.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//NumericType.pattern -> EAttribute : pattern
	if (s.pattern.getEAttribute() != null) t.addNewAttribute("pattern", s.pattern.getEAttribute());
	//NumericType.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//NumericType.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//NumericType.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//NumericType.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//NumericType.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//NumericType.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//NumericType.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//NumericType.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//NumericType.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//NumericType.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//NumericType.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//NumericType.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//NumericType.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//NumericType.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//NumericType.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//NumericType.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//NumericType.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//NumericType.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//NumericType.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//NumericType.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//NumericType.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//NumericType.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//NumericType.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//NumericType.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//NumericType.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//NumericType.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//NumericType.ownedDataValues -> EReference : ownedDataValues
	if (s.ownedDataValues.getEReference() != null) t.addNewReference("ownedDataValues", s.ownedDataValues.getEReference());
	//NumericType.defaultValue -> EReference : defaultValue
	if (s.defaultValue.getEReference() != null) t.addNewReference("defaultValue", s.defaultValue.getEReference());
	//NumericType.nullValue -> EReference : nullValue
	if (s.nullValue.getEReference() != null) t.addNewReference("nullValue", s.nullValue.getEReference());
	//NumericType.ownedInformationRealizations -> EReference : ownedInformationRealizations
	if (s.ownedInformationRealizations.getEReference() != null) t.addNewReference("ownedInformationRealizations", s.ownedInformationRealizations.getEReference());
	//NumericType.realizedDataTypes -> EReference : realizedDataTypes
	if (s.realizedDataTypes.getEReference() != null) t.addNewReference("realizedDataTypes", s.realizedDataTypes.getEReference());
	//NumericType.realizingDataTypes -> EReference : realizingDataTypes
	if (s.realizingDataTypes.getEReference() != null) t.addNewReference("realizingDataTypes", s.realizingDataTypes.getEReference());
	//NumericType.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//NumericType.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//NumericType.ownedMinValue -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//NumericType.ownedMaxValue -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
}

@lazy
rule PhysicalQuantity
	transform s : DSL!PhysicalQuantity //datatype.PhysicalQuantity
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalQuantity.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalQuantity.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalQuantity.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PhysicalQuantity.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalQuantity.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalQuantity.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalQuantity.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalQuantity.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalQuantity.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//PhysicalQuantity.final -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//PhysicalQuantity.discrete -> EAttribute : discrete
	if (s.discrete.getEAttribute() != null) t.addNewAttribute("discrete", s.discrete.getEAttribute());
	//PhysicalQuantity.minInclusive -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//PhysicalQuantity.maxInclusive -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//PhysicalQuantity.pattern -> EAttribute : pattern
	if (s.pattern.getEAttribute() != null) t.addNewAttribute("pattern", s.pattern.getEAttribute());
	//PhysicalQuantity.visibility -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//PhysicalQuantity.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//PhysicalQuantity.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalQuantity.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalQuantity.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalQuantity.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalQuantity.abstractTypedElements -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//PhysicalQuantity.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalQuantity.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalQuantity.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalQuantity.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalQuantity.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalQuantity.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalQuantity.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalQuantity.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalQuantity.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalQuantity.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//PhysicalQuantity.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//PhysicalQuantity.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//PhysicalQuantity.typedElements -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//PhysicalQuantity.ownedGeneralizations -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//PhysicalQuantity.superGeneralizations -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//PhysicalQuantity.subGeneralizations -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//PhysicalQuantity.super -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//PhysicalQuantity.sub -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//PhysicalQuantity.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//PhysicalQuantity.ownedDataValues -> EReference : ownedDataValues
	if (s.ownedDataValues.getEReference() != null) t.addNewReference("ownedDataValues", s.ownedDataValues.getEReference());
	//PhysicalQuantity.defaultValue -> EReference : defaultValue
	if (s.defaultValue.getEReference() != null) t.addNewReference("defaultValue", s.defaultValue.getEReference());
	//PhysicalQuantity.nullValue -> EReference : nullValue
	if (s.nullValue.getEReference() != null) t.addNewReference("nullValue", s.nullValue.getEReference());
	//PhysicalQuantity.ownedInformationRealizations -> EReference : ownedInformationRealizations
	if (s.ownedInformationRealizations.getEReference() != null) t.addNewReference("ownedInformationRealizations", s.ownedInformationRealizations.getEReference());
	//PhysicalQuantity.realizedDataTypes -> EReference : realizedDataTypes
	if (s.realizedDataTypes.getEReference() != null) t.addNewReference("realizedDataTypes", s.realizedDataTypes.getEReference());
	//PhysicalQuantity.realizingDataTypes -> EReference : realizingDataTypes
	if (s.realizingDataTypes.getEReference() != null) t.addNewReference("realizingDataTypes", s.realizingDataTypes.getEReference());
	//PhysicalQuantity.ownedDefaultValue -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//PhysicalQuantity.ownedNullValue -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//PhysicalQuantity.ownedMinValue -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//PhysicalQuantity.ownedMaxValue -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//PhysicalQuantity.unit -> EReference : unit
	if (s.unit.getEReference() != null) t.addNewReference("unit", s.unit.getEReference());
}


// datavalue.ecore
@lazy
rule DataValue
	transform s : DSL!DataValue //datavalue.DataValue
	to t : SysMLine!ItemUsage
	extends Base{
	//DataValue.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//DataValue.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//DataValue.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//DataValue.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//DataValue.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//DataValue.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//DataValue.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//DataValue.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//DataValue.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//DataValue.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//DataValue.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//DataValue.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//DataValue.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//DataValue.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//DataValue.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//DataValue.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//DataValue.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//DataValue.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//DataValue.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//DataValue.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//DataValue.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//DataValue.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//DataValue.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//DataValue.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
}

@lazy
rule DataValueContainer
	transform s : DSL!DataValueContainer //datavalue.DataValueContainer
	to t : SysMLine!ItemUsage
	extends Base{
	//DataValueContainer.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//DataValueContainer.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//DataValueContainer.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//DataValueContainer.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//DataValueContainer.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//DataValueContainer.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//DataValueContainer.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//DataValueContainer.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//DataValueContainer.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//DataValueContainer.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//DataValueContainer.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//DataValueContainer.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//DataValueContainer.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//DataValueContainer.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//DataValueContainer.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//DataValueContainer.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//DataValueContainer.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//DataValueContainer.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//DataValueContainer.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//DataValueContainer.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//DataValueContainer.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//DataValueContainer.ownedTraces -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//DataValueContainer.containedGenericTraces -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//DataValueContainer.namingRules -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//DataValueContainer.ownedPropertyValuePkgs -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//DataValueContainer.ownedDataValues -> EReference : ownedDataValues
	if (s.ownedDataValues.getEReference() != null) t.addNewReference("ownedDataValues", s.ownedDataValues.getEReference());
}

@lazy
rule AbstractBooleanValue
	transform s : DSL!AbstractBooleanValue //datavalue.AbstractBooleanValue
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractBooleanValue.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractBooleanValue.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractBooleanValue.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractBooleanValue.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractBooleanValue.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractBooleanValue.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractBooleanValue.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractBooleanValue.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractBooleanValue.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//AbstractBooleanValue.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractBooleanValue.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractBooleanValue.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractBooleanValue.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractBooleanValue.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractBooleanValue.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractBooleanValue.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractBooleanValue.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractBooleanValue.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractBooleanValue.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractBooleanValue.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractBooleanValue.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractBooleanValue.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractBooleanValue.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//AbstractBooleanValue.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//AbstractBooleanValue.booleanType -> EReference : booleanType
	if (s.booleanType.getEReference() != null) t.addNewReference("booleanType", s.booleanType.getEReference());
}

@lazy
rule LiteralBooleanValue
	transform s : DSL!LiteralBooleanValue //datavalue.LiteralBooleanValue
	to t : SysMLine!ItemUsage
	extends Base{
	//LiteralBooleanValue.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//LiteralBooleanValue.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//LiteralBooleanValue.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//LiteralBooleanValue.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//LiteralBooleanValue.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//LiteralBooleanValue.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//LiteralBooleanValue.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//LiteralBooleanValue.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//LiteralBooleanValue.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//LiteralBooleanValue.value -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value", s.value.getEAttribute());
	//LiteralBooleanValue.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//LiteralBooleanValue.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//LiteralBooleanValue.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//LiteralBooleanValue.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//LiteralBooleanValue.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//LiteralBooleanValue.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//LiteralBooleanValue.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//LiteralBooleanValue.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//LiteralBooleanValue.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//LiteralBooleanValue.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//LiteralBooleanValue.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//LiteralBooleanValue.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//LiteralBooleanValue.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//LiteralBooleanValue.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//LiteralBooleanValue.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//LiteralBooleanValue.booleanType -> EReference : booleanType
	if (s.booleanType.getEReference() != null) t.addNewReference("booleanType", s.booleanType.getEReference());
}

@lazy
rule BooleanReference
	transform s : DSL!BooleanReference //datavalue.BooleanReference
	to t : SysMLine!ItemUsage
	extends Base{
	//BooleanReference.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//BooleanReference.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//BooleanReference.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//BooleanReference.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//BooleanReference.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//BooleanReference.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//BooleanReference.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//BooleanReference.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//BooleanReference.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//BooleanReference.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//BooleanReference.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//BooleanReference.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//BooleanReference.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//BooleanReference.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//BooleanReference.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//BooleanReference.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//BooleanReference.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//BooleanReference.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//BooleanReference.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//BooleanReference.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//BooleanReference.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//BooleanReference.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//BooleanReference.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//BooleanReference.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//BooleanReference.booleanType -> EReference : booleanType
	if (s.booleanType.getEReference() != null) t.addNewReference("booleanType", s.booleanType.getEReference());
	//BooleanReference.referencedValue -> EReference : referencedValue
	if (s.referencedValue.getEReference() != null) t.addNewReference("referencedValue", s.referencedValue.getEReference());
	//BooleanReference.referencedProperty -> EReference : referencedProperty
	if (s.referencedProperty.getEReference() != null) t.addNewReference("referencedProperty", s.referencedProperty.getEReference());
}

@lazy
rule AbstractEnumerationValue
	transform s : DSL!AbstractEnumerationValue //datavalue.AbstractEnumerationValue
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractEnumerationValue.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractEnumerationValue.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractEnumerationValue.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractEnumerationValue.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractEnumerationValue.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractEnumerationValue.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractEnumerationValue.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractEnumerationValue.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractEnumerationValue.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//AbstractEnumerationValue.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractEnumerationValue.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractEnumerationValue.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractEnumerationValue.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractEnumerationValue.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractEnumerationValue.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractEnumerationValue.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractEnumerationValue.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractEnumerationValue.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractEnumerationValue.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractEnumerationValue.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractEnumerationValue.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractEnumerationValue.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractEnumerationValue.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//AbstractEnumerationValue.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//AbstractEnumerationValue.enumerationType -> EReference : enumerationType
	if (s.enumerationType.getEReference() != null) t.addNewReference("enumerationType", s.enumerationType.getEReference());
}

@lazy
rule EnumerationLiteral
	transform s : DSL!EnumerationLiteral //datavalue.EnumerationLiteral
	to t : SysMLine!ItemUsage
	extends Base{
	//EnumerationLiteral.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//EnumerationLiteral.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//EnumerationLiteral.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//EnumerationLiteral.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//EnumerationLiteral.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//EnumerationLiteral.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//EnumerationLiteral.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//EnumerationLiteral.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//EnumerationLiteral.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//EnumerationLiteral.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//EnumerationLiteral.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//EnumerationLiteral.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//EnumerationLiteral.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//EnumerationLiteral.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//EnumerationLiteral.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//EnumerationLiteral.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//EnumerationLiteral.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//EnumerationLiteral.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//EnumerationLiteral.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//EnumerationLiteral.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//EnumerationLiteral.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//EnumerationLiteral.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//EnumerationLiteral.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//EnumerationLiteral.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//EnumerationLiteral.enumerationType -> EReference : enumerationType
	if (s.enumerationType.getEReference() != null) t.addNewReference("enumerationType", s.enumerationType.getEReference());
	//EnumerationLiteral.domainValue -> EReference : domainValue
	if (s.domainValue.getEReference() != null) t.addNewReference("domainValue", s.domainValue.getEReference());
}

@lazy
rule EnumerationReference
	transform s : DSL!EnumerationReference //datavalue.EnumerationReference
	to t : SysMLine!ItemUsage
	extends Base{
	//EnumerationReference.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//EnumerationReference.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//EnumerationReference.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//EnumerationReference.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//EnumerationReference.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//EnumerationReference.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//EnumerationReference.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//EnumerationReference.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//EnumerationReference.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//EnumerationReference.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//EnumerationReference.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//EnumerationReference.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//EnumerationReference.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//EnumerationReference.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//EnumerationReference.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//EnumerationReference.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//EnumerationReference.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//EnumerationReference.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//EnumerationReference.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//EnumerationReference.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//EnumerationReference.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//EnumerationReference.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//EnumerationReference.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//EnumerationReference.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//EnumerationReference.enumerationType -> EReference : enumerationType
	if (s.enumerationType.getEReference() != null) t.addNewReference("enumerationType", s.enumerationType.getEReference());
	//EnumerationReference.referencedValue -> EReference : referencedValue
	if (s.referencedValue.getEReference() != null) t.addNewReference("referencedValue", s.referencedValue.getEReference());
	//EnumerationReference.referencedProperty -> EReference : referencedProperty
	if (s.referencedProperty.getEReference() != null) t.addNewReference("referencedProperty", s.referencedProperty.getEReference());
}

@lazy
rule AbstractStringValue
	transform s : DSL!AbstractStringValue //datavalue.AbstractStringValue
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractStringValue.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractStringValue.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractStringValue.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractStringValue.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractStringValue.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractStringValue.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractStringValue.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractStringValue.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractStringValue.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//AbstractStringValue.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractStringValue.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractStringValue.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractStringValue.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractStringValue.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractStringValue.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractStringValue.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractStringValue.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractStringValue.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractStringValue.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractStringValue.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractStringValue.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractStringValue.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractStringValue.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//AbstractStringValue.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//AbstractStringValue.stringType -> EReference : stringType
	if (s.stringType.getEReference() != null) t.addNewReference("stringType", s.stringType.getEReference());
}

@lazy
rule LiteralStringValue
	transform s : DSL!LiteralStringValue //datavalue.LiteralStringValue
	to t : SysMLine!ItemUsage
	extends Base{
	//LiteralStringValue.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//LiteralStringValue.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//LiteralStringValue.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//LiteralStringValue.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//LiteralStringValue.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//LiteralStringValue.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//LiteralStringValue.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//LiteralStringValue.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//LiteralStringValue.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//LiteralStringValue.value -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value", s.value.getEAttribute());
	//LiteralStringValue.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//LiteralStringValue.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//LiteralStringValue.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//LiteralStringValue.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//LiteralStringValue.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//LiteralStringValue.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//LiteralStringValue.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//LiteralStringValue.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//LiteralStringValue.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//LiteralStringValue.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//LiteralStringValue.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//LiteralStringValue.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//LiteralStringValue.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//LiteralStringValue.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//LiteralStringValue.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//LiteralStringValue.stringType -> EReference : stringType
	if (s.stringType.getEReference() != null) t.addNewReference("stringType", s.stringType.getEReference());
}

@lazy
rule StringReference
	transform s : DSL!StringReference //datavalue.StringReference
	to t : SysMLine!ItemUsage
	extends Base{
	//StringReference.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//StringReference.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//StringReference.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//StringReference.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//StringReference.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//StringReference.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//StringReference.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//StringReference.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//StringReference.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//StringReference.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//StringReference.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//StringReference.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//StringReference.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//StringReference.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//StringReference.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//StringReference.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//StringReference.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//StringReference.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//StringReference.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//StringReference.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//StringReference.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//StringReference.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//StringReference.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//StringReference.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//StringReference.stringType -> EReference : stringType
	if (s.stringType.getEReference() != null) t.addNewReference("stringType", s.stringType.getEReference());
	//StringReference.referencedValue -> EReference : referencedValue
	if (s.referencedValue.getEReference() != null) t.addNewReference("referencedValue", s.referencedValue.getEReference());
	//StringReference.referencedProperty -> EReference : referencedProperty
	if (s.referencedProperty.getEReference() != null) t.addNewReference("referencedProperty", s.referencedProperty.getEReference());
}

@lazy
rule NumericValue
	transform s : DSL!NumericValue //datavalue.NumericValue
	to t : SysMLine!ItemUsage
	extends Base{
	//NumericValue.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//NumericValue.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//NumericValue.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//NumericValue.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//NumericValue.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//NumericValue.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//NumericValue.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//NumericValue.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//NumericValue.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//NumericValue.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//NumericValue.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//NumericValue.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//NumericValue.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//NumericValue.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//NumericValue.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//NumericValue.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//NumericValue.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//NumericValue.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//NumericValue.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//NumericValue.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//NumericValue.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//NumericValue.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//NumericValue.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//NumericValue.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//NumericValue.unit -> EReference : unit
	if (s.unit.getEReference() != null) t.addNewReference("unit", s.unit.getEReference());
	//NumericValue.numericType -> EReference : numericType
	if (s.numericType.getEReference() != null) t.addNewReference("numericType", s.numericType.getEReference());
}

@lazy
rule LiteralNumericValue
	transform s : DSL!LiteralNumericValue //datavalue.LiteralNumericValue
	to t : SysMLine!ItemUsage
	extends Base{
	//LiteralNumericValue.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//LiteralNumericValue.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//LiteralNumericValue.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//LiteralNumericValue.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//LiteralNumericValue.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//LiteralNumericValue.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//LiteralNumericValue.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//LiteralNumericValue.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//LiteralNumericValue.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//LiteralNumericValue.value -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value", s.value.getEAttribute());
	//LiteralNumericValue.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//LiteralNumericValue.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//LiteralNumericValue.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//LiteralNumericValue.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//LiteralNumericValue.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//LiteralNumericValue.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//LiteralNumericValue.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//LiteralNumericValue.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//LiteralNumericValue.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//LiteralNumericValue.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//LiteralNumericValue.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//LiteralNumericValue.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//LiteralNumericValue.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//LiteralNumericValue.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//LiteralNumericValue.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//LiteralNumericValue.unit -> EReference : unit
	if (s.unit.getEReference() != null) t.addNewReference("unit", s.unit.getEReference());
	//LiteralNumericValue.numericType -> EReference : numericType
	if (s.numericType.getEReference() != null) t.addNewReference("numericType", s.numericType.getEReference());
}

@lazy
rule NumericReference
	transform s : DSL!NumericReference //datavalue.NumericReference
	to t : SysMLine!ItemUsage
	extends Base{
	//NumericReference.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//NumericReference.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//NumericReference.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//NumericReference.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//NumericReference.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//NumericReference.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//NumericReference.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//NumericReference.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//NumericReference.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//NumericReference.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//NumericReference.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//NumericReference.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//NumericReference.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//NumericReference.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//NumericReference.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//NumericReference.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//NumericReference.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//NumericReference.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//NumericReference.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//NumericReference.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//NumericReference.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//NumericReference.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//NumericReference.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//NumericReference.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//NumericReference.unit -> EReference : unit
	if (s.unit.getEReference() != null) t.addNewReference("unit", s.unit.getEReference());
	//NumericReference.numericType -> EReference : numericType
	if (s.numericType.getEReference() != null) t.addNewReference("numericType", s.numericType.getEReference());
	//NumericReference.referencedValue -> EReference : referencedValue
	if (s.referencedValue.getEReference() != null) t.addNewReference("referencedValue", s.referencedValue.getEReference());
	//NumericReference.referencedProperty -> EReference : referencedProperty
	if (s.referencedProperty.getEReference() != null) t.addNewReference("referencedProperty", s.referencedProperty.getEReference());
}

@lazy
rule AbstractComplexValue
	transform s : DSL!AbstractComplexValue //datavalue.AbstractComplexValue
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractComplexValue.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractComplexValue.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractComplexValue.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractComplexValue.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractComplexValue.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractComplexValue.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractComplexValue.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractComplexValue.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractComplexValue.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//AbstractComplexValue.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractComplexValue.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractComplexValue.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractComplexValue.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractComplexValue.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractComplexValue.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractComplexValue.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractComplexValue.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractComplexValue.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractComplexValue.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractComplexValue.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractComplexValue.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractComplexValue.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractComplexValue.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//AbstractComplexValue.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//AbstractComplexValue.complexType -> EReference : complexType
	if (s.complexType.getEReference() != null) t.addNewReference("complexType", s.complexType.getEReference());
}

@lazy
rule ComplexValue
	transform s : DSL!ComplexValue //datavalue.ComplexValue
	to t : SysMLine!ItemUsage
	extends Base{
	//ComplexValue.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ComplexValue.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ComplexValue.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ComplexValue.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ComplexValue.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ComplexValue.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ComplexValue.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ComplexValue.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ComplexValue.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//ComplexValue.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ComplexValue.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ComplexValue.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ComplexValue.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ComplexValue.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ComplexValue.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ComplexValue.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ComplexValue.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ComplexValue.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ComplexValue.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ComplexValue.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ComplexValue.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ComplexValue.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ComplexValue.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//ComplexValue.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//ComplexValue.complexType -> EReference : complexType
	if (s.complexType.getEReference() != null) t.addNewReference("complexType", s.complexType.getEReference());
	//ComplexValue.ownedParts -> EReference : ownedParts
	if (s.ownedParts.getEReference() != null) t.addNewReference("ownedParts", s.ownedParts.getEReference());
}

@lazy
rule ComplexValueReference
	transform s : DSL!ComplexValueReference //datavalue.ComplexValueReference
	to t : SysMLine!ItemUsage
	extends Base{
	//ComplexValueReference.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ComplexValueReference.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ComplexValueReference.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ComplexValueReference.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ComplexValueReference.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ComplexValueReference.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ComplexValueReference.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ComplexValueReference.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ComplexValueReference.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//ComplexValueReference.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ComplexValueReference.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ComplexValueReference.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ComplexValueReference.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ComplexValueReference.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ComplexValueReference.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ComplexValueReference.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ComplexValueReference.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ComplexValueReference.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ComplexValueReference.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ComplexValueReference.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ComplexValueReference.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ComplexValueReference.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ComplexValueReference.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//ComplexValueReference.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//ComplexValueReference.complexType -> EReference : complexType
	if (s.complexType.getEReference() != null) t.addNewReference("complexType", s.complexType.getEReference());
	//ComplexValueReference.referencedValue -> EReference : referencedValue
	if (s.referencedValue.getEReference() != null) t.addNewReference("referencedValue", s.referencedValue.getEReference());
	//ComplexValueReference.referencedProperty -> EReference : referencedProperty
	if (s.referencedProperty.getEReference() != null) t.addNewReference("referencedProperty", s.referencedProperty.getEReference());
}

@lazy
rule ValuePart
	transform s : DSL!ValuePart //datavalue.ValuePart
	to t : SysMLine!ItemUsage
	extends Base{
	//ValuePart.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ValuePart.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ValuePart.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ValuePart.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ValuePart.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ValuePart.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ValuePart.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ValuePart.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ValuePart.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ValuePart.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ValuePart.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ValuePart.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ValuePart.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ValuePart.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ValuePart.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ValuePart.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ValuePart.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ValuePart.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ValuePart.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ValuePart.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ValuePart.referencedProperty -> EReference : referencedProperty
	if (s.referencedProperty.getEReference() != null) t.addNewReference("referencedProperty", s.referencedProperty.getEReference());
	//ValuePart.ownedValue -> EReference : ownedValue
	if (s.ownedValue.getEReference() != null) t.addNewReference("ownedValue", s.ownedValue.getEReference());
}

@lazy
rule AbstractExpressionValue
	transform s : DSL!AbstractExpressionValue //datavalue.AbstractExpressionValue
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractExpressionValue.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractExpressionValue.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractExpressionValue.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractExpressionValue.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractExpressionValue.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractExpressionValue.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractExpressionValue.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractExpressionValue.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractExpressionValue.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//AbstractExpressionValue.expression -> EAttribute : expression
	if (s.expression.getEAttribute() != null) t.addNewAttribute("expression", s.expression.getEAttribute());
	//AbstractExpressionValue.unparsedExpression -> EAttribute : unparsedExpression
	if (s.unparsedExpression.getEAttribute() != null) t.addNewAttribute("unparsedExpression", s.unparsedExpression.getEAttribute());
	//AbstractExpressionValue.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractExpressionValue.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractExpressionValue.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractExpressionValue.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractExpressionValue.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractExpressionValue.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractExpressionValue.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractExpressionValue.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractExpressionValue.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractExpressionValue.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractExpressionValue.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractExpressionValue.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractExpressionValue.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractExpressionValue.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//AbstractExpressionValue.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//AbstractExpressionValue.booleanType -> EReference : booleanType
	if (s.booleanType.getEReference() != null) t.addNewReference("booleanType", s.booleanType.getEReference());
	//AbstractExpressionValue.complexType -> EReference : complexType
	if (s.complexType.getEReference() != null) t.addNewReference("complexType", s.complexType.getEReference());
	//AbstractExpressionValue.enumerationType -> EReference : enumerationType
	if (s.enumerationType.getEReference() != null) t.addNewReference("enumerationType", s.enumerationType.getEReference());
	//AbstractExpressionValue.unit -> EReference : unit
	if (s.unit.getEReference() != null) t.addNewReference("unit", s.unit.getEReference());
	//AbstractExpressionValue.numericType -> EReference : numericType
	if (s.numericType.getEReference() != null) t.addNewReference("numericType", s.numericType.getEReference());
	//AbstractExpressionValue.stringType -> EReference : stringType
	if (s.stringType.getEReference() != null) t.addNewReference("stringType", s.stringType.getEReference());
	//AbstractExpressionValue.expressionType -> EReference : expressionType
	if (s.expressionType.getEReference() != null) t.addNewReference("expressionType", s.expressionType.getEReference());
}

@lazy
rule BinaryExpression
	transform s : DSL!BinaryExpression //datavalue.BinaryExpression
	to t : SysMLine!ItemUsage
	extends Base{
	//BinaryExpression.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//BinaryExpression.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//BinaryExpression.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//BinaryExpression.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//BinaryExpression.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//BinaryExpression.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//BinaryExpression.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//BinaryExpression.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//BinaryExpression.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//BinaryExpression.expression -> EAttribute : expression
	if (s.expression.getEAttribute() != null) t.addNewAttribute("expression", s.expression.getEAttribute());
	//BinaryExpression.unparsedExpression -> EAttribute : unparsedExpression
	if (s.unparsedExpression.getEAttribute() != null) t.addNewAttribute("unparsedExpression", s.unparsedExpression.getEAttribute());
	//BinaryExpression.operator -> EAttribute : operator
	if (s.operator.getEAttribute() != null) t.addNewAttribute("operator", s.operator.getEAttribute());
	//BinaryExpression.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//BinaryExpression.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//BinaryExpression.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//BinaryExpression.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//BinaryExpression.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//BinaryExpression.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//BinaryExpression.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//BinaryExpression.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//BinaryExpression.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//BinaryExpression.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//BinaryExpression.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//BinaryExpression.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//BinaryExpression.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//BinaryExpression.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//BinaryExpression.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//BinaryExpression.booleanType -> EReference : booleanType
	if (s.booleanType.getEReference() != null) t.addNewReference("booleanType", s.booleanType.getEReference());
	//BinaryExpression.complexType -> EReference : complexType
	if (s.complexType.getEReference() != null) t.addNewReference("complexType", s.complexType.getEReference());
	//BinaryExpression.enumerationType -> EReference : enumerationType
	if (s.enumerationType.getEReference() != null) t.addNewReference("enumerationType", s.enumerationType.getEReference());
	//BinaryExpression.unit -> EReference : unit
	if (s.unit.getEReference() != null) t.addNewReference("unit", s.unit.getEReference());
	//BinaryExpression.numericType -> EReference : numericType
	if (s.numericType.getEReference() != null) t.addNewReference("numericType", s.numericType.getEReference());
	//BinaryExpression.stringType -> EReference : stringType
	if (s.stringType.getEReference() != null) t.addNewReference("stringType", s.stringType.getEReference());
	//BinaryExpression.expressionType -> EReference : expressionType
	if (s.expressionType.getEReference() != null) t.addNewReference("expressionType", s.expressionType.getEReference());
	//BinaryExpression.ownedLeftOperand -> EReference : ownedLeftOperand
	if (s.ownedLeftOperand.getEReference() != null) t.addNewReference("ownedLeftOperand", s.ownedLeftOperand.getEReference());
	//BinaryExpression.ownedRightOperand -> EReference : ownedRightOperand
	if (s.ownedRightOperand.getEReference() != null) t.addNewReference("ownedRightOperand", s.ownedRightOperand.getEReference());
}

@lazy
rule UnaryExpression
	transform s : DSL!UnaryExpression //datavalue.UnaryExpression
	to t : SysMLine!ItemUsage
	extends Base{
	//UnaryExpression.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//UnaryExpression.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//UnaryExpression.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//UnaryExpression.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//UnaryExpression.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//UnaryExpression.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//UnaryExpression.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//UnaryExpression.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//UnaryExpression.abstract -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//UnaryExpression.expression -> EAttribute : expression
	if (s.expression.getEAttribute() != null) t.addNewAttribute("expression", s.expression.getEAttribute());
	//UnaryExpression.unparsedExpression -> EAttribute : unparsedExpression
	if (s.unparsedExpression.getEAttribute() != null) t.addNewAttribute("unparsedExpression", s.unparsedExpression.getEAttribute());
	//UnaryExpression.operator -> EAttribute : operator
	if (s.operator.getEAttribute() != null) t.addNewAttribute("operator", s.operator.getEAttribute());
	//UnaryExpression.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//UnaryExpression.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//UnaryExpression.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//UnaryExpression.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//UnaryExpression.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//UnaryExpression.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//UnaryExpression.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//UnaryExpression.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//UnaryExpression.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//UnaryExpression.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//UnaryExpression.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//UnaryExpression.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//UnaryExpression.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//UnaryExpression.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//UnaryExpression.type -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//UnaryExpression.booleanType -> EReference : booleanType
	if (s.booleanType.getEReference() != null) t.addNewReference("booleanType", s.booleanType.getEReference());
	//UnaryExpression.complexType -> EReference : complexType
	if (s.complexType.getEReference() != null) t.addNewReference("complexType", s.complexType.getEReference());
	//UnaryExpression.enumerationType -> EReference : enumerationType
	if (s.enumerationType.getEReference() != null) t.addNewReference("enumerationType", s.enumerationType.getEReference());
	//UnaryExpression.unit -> EReference : unit
	if (s.unit.getEReference() != null) t.addNewReference("unit", s.unit.getEReference());
	//UnaryExpression.numericType -> EReference : numericType
	if (s.numericType.getEReference() != null) t.addNewReference("numericType", s.numericType.getEReference());
	//UnaryExpression.stringType -> EReference : stringType
	if (s.stringType.getEReference() != null) t.addNewReference("stringType", s.stringType.getEReference());
	//UnaryExpression.expressionType -> EReference : expressionType
	if (s.expressionType.getEReference() != null) t.addNewReference("expressionType", s.expressionType.getEReference());
	//UnaryExpression.ownedOperand -> EReference : ownedOperand
	if (s.ownedOperand.getEReference() != null) t.addNewReference("ownedOperand", s.ownedOperand.getEReference());
}

@lazy
rule OpaqueExpression
	transform s : DSL!OpaqueExpression //datavalue.OpaqueExpression
	to t : SysMLine!ItemUsage
	extends Base{
	//OpaqueExpression.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OpaqueExpression.sid -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OpaqueExpression.visibleInDoc -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OpaqueExpression.visibleInLM -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OpaqueExpression.summary -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OpaqueExpression.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OpaqueExpression.review -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OpaqueExpression.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//OpaqueExpression.bodies -> EAttribute : bodies
	if (s.bodies.getEAttribute() != null) t.addNewAttribute("bodies", s.bodies.getEAttribute());
	//OpaqueExpression.languages -> EAttribute : languages
	if (s.languages.getEAttribute() != null) t.addNewAttribute("languages", s.languages.getEAttribute());
	//OpaqueExpression.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OpaqueExpression.constraints -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OpaqueExpression.ownedConstraints -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OpaqueExpression.ownedMigratedElements -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OpaqueExpression.incomingTraces -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OpaqueExpression.outgoingTraces -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OpaqueExpression.ownedPropertyValues -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OpaqueExpression.ownedEnumerationPropertyTypes -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OpaqueExpression.appliedPropertyValues -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OpaqueExpression.ownedPropertyValueGroups -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OpaqueExpression.appliedPropertyValueGroups -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OpaqueExpression.status -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OpaqueExpression.features -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//OpaqueExpression.abstractType -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
}


// libraries.ecore
@lazy
rule ModelInformation
	transform s : DSL!ModelInformation //libraries.ModelInformation
	to t : SysMLine!ItemUsage
	extends Base{
	//ModelInformation.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ModelInformation.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ModelInformation.ownedReferences -> EReference : ownedReferences
	if (s.ownedReferences.getEReference() != null) t.addNewReference("ownedReferences", s.ownedReferences.getEReference());
	//ModelInformation.version -> EReference : version
	if (s.version.getEReference() != null) t.addNewReference("version", s.version.getEReference());
}

@lazy
rule LibraryReference
	transform s : DSL!LibraryReference //libraries.LibraryReference
	to t : SysMLine!ItemUsage
	extends Base{
	//LibraryReference.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//LibraryReference.accessPolicy -> EAttribute : accessPolicy
	if (s.accessPolicy.getEAttribute() != null) t.addNewAttribute("accessPolicy", s.accessPolicy.getEAttribute());
	//LibraryReference.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//LibraryReference.library -> EReference : library
	if (s.library.getEReference() != null) t.addNewReference("library", s.library.getEReference());
	//LibraryReference.version -> EReference : version
	if (s.version.getEReference() != null) t.addNewReference("version", s.version.getEReference());
}

@lazy
rule ModelVersion
	transform s : DSL!ModelVersion //libraries.ModelVersion
	to t : SysMLine!ItemUsage
	extends Base{
	//ModelVersion.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ModelVersion.majorVersionNumber -> EAttribute : majorVersionNumber
	if (s.majorVersionNumber.getEAttribute() != null) t.addNewAttribute("majorVersionNumber", s.majorVersionNumber.getEAttribute());
	//ModelVersion.minorVersionNumber -> EAttribute : minorVersionNumber
	if (s.minorVersionNumber.getEAttribute() != null) t.addNewAttribute("minorVersionNumber", s.minorVersionNumber.getEAttribute());
	//ModelVersion.lastModifiedFileStamp -> EAttribute : lastModifiedFileStamp
	if (s.lastModifiedFileStamp.getEAttribute() != null) t.addNewAttribute("lastModifiedFileStamp", s.lastModifiedFileStamp.getEAttribute());
	//ModelVersion.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
}

@lazy
rule LibraryAbstractElement
	transform s : DSL!LibraryAbstractElement //libraries.LibraryAbstractElement
	to t : SysMLine!ItemUsage
	extends Base{
	//LibraryAbstractElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//LibraryAbstractElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
}


// re.ecore
@lazy
rule ReAbstractElement
	transform s : DSL!ReAbstractElement //re.ReAbstractElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ReAbstractElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ReAbstractElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
}

@lazy
rule ReNamedElement
	transform s : DSL!ReNamedElement //re.ReNamedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ReNamedElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ReNamedElement.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ReNamedElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
}

@lazy
rule ReDescriptionElement
	transform s : DSL!ReDescriptionElement //re.ReDescriptionElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ReDescriptionElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ReDescriptionElement.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ReDescriptionElement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ReDescriptionElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
}

@lazy
rule ReElementContainer
	transform s : DSL!ReElementContainer //re.ReElementContainer
	to t : SysMLine!ItemUsage
	extends Base{
	//ReElementContainer.ownedElements -> EReference : ownedElements
	if (s.ownedElements.getEReference() != null) t.addNewReference("ownedElements", s.ownedElements.getEReference());
}

@lazy
rule CatalogElementPkg
	transform s : DSL!CatalogElementPkg //re.CatalogElementPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//CatalogElementPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CatalogElementPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CatalogElementPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CatalogElementPkg.ownedElements -> EReference : ownedElements
	if (s.ownedElements.getEReference() != null) t.addNewReference("ownedElements", s.ownedElements.getEReference());
	//CatalogElementPkg.ownedElementPkgs -> EReference : ownedElementPkgs
	if (s.ownedElementPkgs.getEReference() != null) t.addNewReference("ownedElementPkgs", s.ownedElementPkgs.getEReference());
}

@lazy
rule RecCatalog
	transform s : DSL!RecCatalog //re.RecCatalog
	to t : SysMLine!ItemUsage
	extends Base{
	//RecCatalog.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//RecCatalog.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//RecCatalog.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//RecCatalog.ownedElements -> EReference : ownedElements
	if (s.ownedElements.getEReference() != null) t.addNewReference("ownedElements", s.ownedElements.getEReference());
	//RecCatalog.ownedElementPkgs -> EReference : ownedElementPkgs
	if (s.ownedElementPkgs.getEReference() != null) t.addNewReference("ownedElementPkgs", s.ownedElementPkgs.getEReference());
	//RecCatalog.ownedCompliancyDefinitionPkg -> EReference : ownedCompliancyDefinitionPkg
	if (s.ownedCompliancyDefinitionPkg.getEReference() != null) t.addNewReference("ownedCompliancyDefinitionPkg", s.ownedCompliancyDefinitionPkg.getEReference());
}

@lazy
rule GroupingElementPkg
	transform s : DSL!GroupingElementPkg //re.GroupingElementPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//GroupingElementPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//GroupingElementPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//GroupingElementPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//GroupingElementPkg.ownedElements -> EReference : ownedElements
	if (s.ownedElements.getEReference() != null) t.addNewReference("ownedElements", s.ownedElements.getEReference());
	//GroupingElementPkg.ownedElementPkgs -> EReference : ownedElementPkgs
	if (s.ownedElementPkgs.getEReference() != null) t.addNewReference("ownedElementPkgs", s.ownedElementPkgs.getEReference());
}

@lazy
rule CatalogElementLink
	transform s : DSL!CatalogElementLink //re.CatalogElementLink
	to t : SysMLine!ItemUsage
	extends Base{
	//CatalogElementLink.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CatalogElementLink.unsynchronizedFeatures -> EAttribute : unsynchronizedFeatures
	if (s.unsynchronizedFeatures.getEAttribute() != null) t.addNewAttribute("unsynchronizedFeatures", s.unsynchronizedFeatures.getEAttribute());
	//CatalogElementLink.suffixed -> EAttribute : suffixed
	if (s.suffixed.getEAttribute() != null) t.addNewAttribute("suffixed", s.suffixed.getEAttribute());
	//CatalogElementLink.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CatalogElementLink.source -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//CatalogElementLink.target -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//CatalogElementLink.origin -> EReference : origin
	if (s.origin.getEReference() != null) t.addNewReference("origin", s.origin.getEReference());
}

@lazy
rule CatalogElement
	transform s : DSL!CatalogElement //re.CatalogElement
	to t : SysMLine!ItemUsage
	extends Base{
	//CatalogElement.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CatalogElement.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CatalogElement.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CatalogElement.kind -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//CatalogElement.author -> EAttribute : author
	if (s.author.getEAttribute() != null) t.addNewAttribute("author", s.author.getEAttribute());
	//CatalogElement.environment -> EAttribute : environment
	if (s.environment.getEAttribute() != null) t.addNewAttribute("environment", s.environment.getEAttribute());
	//CatalogElement.suffix -> EAttribute : suffix
	if (s.suffix.getEAttribute() != null) t.addNewAttribute("suffix", s.suffix.getEAttribute());
	//CatalogElement.purpose -> EAttribute : purpose
	if (s.purpose.getEAttribute() != null) t.addNewAttribute("purpose", s.purpose.getEAttribute());
	//CatalogElement.readOnly -> EAttribute : readOnly
	if (s.readOnly.getEAttribute() != null) t.addNewAttribute("readOnly", s.readOnly.getEAttribute());
	//CatalogElement.version -> EAttribute : version
	if (s.version.getEAttribute() != null) t.addNewAttribute("version", s.version.getEAttribute());
	//CatalogElement.tags -> EAttribute : tags
	if (s.tags.getEAttribute() != null) t.addNewAttribute("tags", s.tags.getEAttribute());
	//CatalogElement.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CatalogElement.ownedElements -> EReference : ownedElements
	if (s.ownedElements.getEReference() != null) t.addNewReference("ownedElements", s.ownedElements.getEReference());
	//CatalogElement.origin -> EReference : origin
	if (s.origin.getEReference() != null) t.addNewReference("origin", s.origin.getEReference());
	//CatalogElement.currentCompliancy -> EReference : currentCompliancy
	if (s.currentCompliancy.getEReference() != null) t.addNewReference("currentCompliancy", s.currentCompliancy.getEReference());
	//CatalogElement.defaultReplicaCompliancy -> EReference : defaultReplicaCompliancy
	if (s.defaultReplicaCompliancy.getEReference() != null) t.addNewReference("defaultReplicaCompliancy", s.defaultReplicaCompliancy.getEReference());
	//CatalogElement.ownedLinks -> EReference : ownedLinks
	if (s.ownedLinks.getEReference() != null) t.addNewReference("ownedLinks", s.ownedLinks.getEReference());
	//CatalogElement.referencedElements -> EReference : referencedElements
	if (s.referencedElements.getEReference() != null) t.addNewReference("referencedElements", s.referencedElements.getEReference());
	//CatalogElement.replicatedElements -> EReference : replicatedElements
	if (s.replicatedElements.getEReference() != null) t.addNewReference("replicatedElements", s.replicatedElements.getEReference());
}

@lazy
rule CompliancyDefinitionPkg
	transform s : DSL!CompliancyDefinitionPkg //re.CompliancyDefinitionPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//CompliancyDefinitionPkg.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CompliancyDefinitionPkg.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CompliancyDefinitionPkg.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CompliancyDefinitionPkg.ownedDefinitions -> EReference : ownedDefinitions
	if (s.ownedDefinitions.getEReference() != null) t.addNewReference("ownedDefinitions", s.ownedDefinitions.getEReference());
}

@lazy
rule CompliancyDefinition
	transform s : DSL!CompliancyDefinition //re.CompliancyDefinition
	to t : SysMLine!ItemUsage
	extends Base{
	//CompliancyDefinition.id -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CompliancyDefinition.name -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CompliancyDefinition.description -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CompliancyDefinition.ownedExtensions -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
}


