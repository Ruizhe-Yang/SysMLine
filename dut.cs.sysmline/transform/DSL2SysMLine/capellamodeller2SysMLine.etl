import "DSL2SysMLine-util.eol";

pre{
	var eObjectSequence = new Sequence;
	var KeyWords = baseKeyWords();
	init_capellamodeller();
	main_capellamodeller();
}

post{
	("[ETL] capellamodeller2SysMLine >> " + SysMLine!Package.all.first().declaredName + ".sysmline").println();
}

operation main_capellamodeller(){
	var rootEcore = DSL!EObject.all.first();
	var rootSysMLine = new SysMLine!Namespace;
	var rootPackage = new SysMLine!Package;
	rootPackage.declaredName = "capellamodeller_model";
	rootSysMLine.body.add(rootPackage);
	rootPackage.addNamespaceImport("capellamodeller");
	rootPackage.addNamespaceImport("capellacore");
	rootPackage.addNamespaceImport("modellingcore");
	rootPackage.addNamespaceImport("emde");
	rootPackage.addNamespaceImport("oa");
	rootPackage.addNamespaceImport("ctx");
	rootPackage.addNamespaceImport("la");
	rootPackage.addNamespaceImport("pa");
	rootPackage.addNamespaceImport("deployment");
	rootPackage.addNamespaceImport("epbs");
	rootPackage.addNamespaceImport("sharedmodel");
	rootEcore.addNodeTo(rootPackage);
}

operation init_capellamodeller(){
	//capellamodeller.Project -> Instantiation
	var idProject = 0;
	for (eProject in DSL!EObject.all.select(s|s.isTypeOf(DSL!Project))){
		var eProjectTuple = Tuple{"key"=eProject.type().name.asString()+"_"+(idProject++).asString(),"value"= eProject};
		eObjectSequence.add(eProjectTuple);
	}
	//capellamodeller.Folder -> Instantiation
	var idFolder = 0;
	for (eFolder in DSL!EObject.all.select(s|s.isTypeOf(DSL!Folder))){
		var eFolderTuple = Tuple{"key"=eFolder.type().name.asString()+"_"+(idFolder++).asString(),"value"= eFolder};
		eObjectSequence.add(eFolderTuple);
	}
	//capellamodeller.ModelRoot -> Instantiation
	var idModelRoot = 0;
	for (eModelRoot in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModelRoot))){
		var eModelRootTuple = Tuple{"key"=eModelRoot.type().name.asString()+"_"+(idModelRoot++).asString(),"value"= eModelRoot};
		eObjectSequence.add(eModelRootTuple);
	}
	//capellamodeller.SystemEngineering -> Instantiation
	var idSystemEngineering = 0;
	for (eSystemEngineering in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemEngineering))){
		var eSystemEngineeringTuple = Tuple{"key"=eSystemEngineering.type().name.asString()+"_"+(idSystemEngineering++).asString(),"value"= eSystemEngineering};
		eObjectSequence.add(eSystemEngineeringTuple);
	}
	//capellamodeller.SystemEngineeringPkg -> Instantiation
	var idSystemEngineeringPkg = 0;
	for (eSystemEngineeringPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemEngineeringPkg))){
		var eSystemEngineeringPkgTuple = Tuple{"key"=eSystemEngineeringPkg.type().name.asString()+"_"+(idSystemEngineeringPkg++).asString(),"value"= eSystemEngineeringPkg};
		eObjectSequence.add(eSystemEngineeringPkgTuple);
	}
	//capellamodeller.Library -> Instantiation
	var idLibrary = 0;
	for (eLibrary in DSL!EObject.all.select(s|s.isTypeOf(DSL!Library))){
		var eLibraryTuple = Tuple{"key"=eLibrary.type().name.asString()+"_"+(idLibrary++).asString(),"value"= eLibrary};
		eObjectSequence.add(eLibraryTuple);
	}
	//capellacore.CapellaElement -> Instantiation
	var idCapellaElement = 0;
	for (eCapellaElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapellaElement))){
		var eCapellaElementTuple = Tuple{"key"=eCapellaElement.type().name.asString()+"_"+(idCapellaElement++).asString(),"value"= eCapellaElement};
		eObjectSequence.add(eCapellaElementTuple);
	}
	//capellacore.NamedElement -> Instantiation
	var idNamedElement = 0;
	for (eNamedElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!NamedElement))){
		var eNamedElementTuple = Tuple{"key"=eNamedElement.type().name.asString()+"_"+(idNamedElement++).asString(),"value"= eNamedElement};
		eObjectSequence.add(eNamedElementTuple);
	}
	//capellacore.Relationship -> Instantiation
	var idRelationship = 0;
	for (eRelationship in DSL!EObject.all.select(s|s.isTypeOf(DSL!Relationship))){
		var eRelationshipTuple = Tuple{"key"=eRelationship.type().name.asString()+"_"+(idRelationship++).asString(),"value"= eRelationship};
		eObjectSequence.add(eRelationshipTuple);
	}
	//capellacore.Namespace -> Instantiation
	var idNamespace = 0;
	for (eNamespace in DSL!EObject.all.select(s|s.isTypeOf(DSL!Namespace))){
		var eNamespaceTuple = Tuple{"key"=eNamespace.type().name.asString()+"_"+(idNamespace++).asString(),"value"= eNamespace};
		eObjectSequence.add(eNamespaceTuple);
	}
	//capellacore.NamedRelationship -> Instantiation
	var idNamedRelationship = 0;
	for (eNamedRelationship in DSL!EObject.all.select(s|s.isTypeOf(DSL!NamedRelationship))){
		var eNamedRelationshipTuple = Tuple{"key"=eNamedRelationship.type().name.asString()+"_"+(idNamedRelationship++).asString(),"value"= eNamedRelationship};
		eObjectSequence.add(eNamedRelationshipTuple);
	}
	//capellacore.Structure -> Instantiation
	var idStructure = 0;
	for (eStructure in DSL!EObject.all.select(s|s.isTypeOf(DSL!Structure))){
		var eStructureTuple = Tuple{"key"=eStructure.type().name.asString()+"_"+(idStructure++).asString(),"value"= eStructure};
		eObjectSequence.add(eStructureTuple);
	}
	//capellacore.AbstractModellingStructure -> Instantiation
	var idAbstractModellingStructure = 0;
	for (eAbstractModellingStructure in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractModellingStructure))){
		var eAbstractModellingStructureTuple = Tuple{"key"=eAbstractModellingStructure.type().name.asString()+"_"+(idAbstractModellingStructure++).asString(),"value"= eAbstractModellingStructure};
		eObjectSequence.add(eAbstractModellingStructureTuple);
	}
	//capellacore.ModellingBlock -> Instantiation
	var idModellingBlock = 0;
	for (eModellingBlock in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModellingBlock))){
		var eModellingBlockTuple = Tuple{"key"=eModellingBlock.type().name.asString()+"_"+(idModellingBlock++).asString(),"value"= eModellingBlock};
		eObjectSequence.add(eModellingBlockTuple);
	}
	//capellacore.ModellingArchitecture -> Instantiation
	var idModellingArchitecture = 0;
	for (eModellingArchitecture in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModellingArchitecture))){
		var eModellingArchitectureTuple = Tuple{"key"=eModellingArchitecture.type().name.asString()+"_"+(idModellingArchitecture++).asString(),"value"= eModellingArchitecture};
		eObjectSequence.add(eModellingArchitectureTuple);
	}
	//capellacore.ModellingArchitecturePkg -> Instantiation
	var idModellingArchitecturePkg = 0;
	for (eModellingArchitecturePkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModellingArchitecturePkg))){
		var eModellingArchitecturePkgTuple = Tuple{"key"=eModellingArchitecturePkg.type().name.asString()+"_"+(idModellingArchitecturePkg++).asString(),"value"= eModellingArchitecturePkg};
		eObjectSequence.add(eModellingArchitecturePkgTuple);
	}
	//capellacore.Type -> Instantiation
	var idType = 0;
	for (eType in DSL!EObject.all.select(s|s.isTypeOf(DSL!Type))){
		var eTypeTuple = Tuple{"key"=eType.type().name.asString()+"_"+(idType++).asString(),"value"= eType};
		eObjectSequence.add(eTypeTuple);
	}
	//capellacore.TypedElement -> Instantiation
	var idTypedElement = 0;
	for (eTypedElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!TypedElement))){
		var eTypedElementTuple = Tuple{"key"=eTypedElement.type().name.asString()+"_"+(idTypedElement++).asString(),"value"= eTypedElement};
		eObjectSequence.add(eTypedElementTuple);
	}
	//capellacore.Trace -> Instantiation
	var idTrace = 0;
	for (eTrace in DSL!EObject.all.select(s|s.isTypeOf(DSL!Trace))){
		var eTraceTuple = Tuple{"key"=eTrace.type().name.asString()+"_"+(idTrace++).asString(),"value"= eTrace};
		eObjectSequence.add(eTraceTuple);
	}
	//capellacore.AbstractAnnotation -> Instantiation
	var idAbstractAnnotation = 0;
	for (eAbstractAnnotation in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractAnnotation))){
		var eAbstractAnnotationTuple = Tuple{"key"=eAbstractAnnotation.type().name.asString()+"_"+(idAbstractAnnotation++).asString(),"value"= eAbstractAnnotation};
		eObjectSequence.add(eAbstractAnnotationTuple);
	}
	//capellacore.NamingRule -> Instantiation
	var idNamingRule = 0;
	for (eNamingRule in DSL!EObject.all.select(s|s.isTypeOf(DSL!NamingRule))){
		var eNamingRuleTuple = Tuple{"key"=eNamingRule.type().name.asString()+"_"+(idNamingRule++).asString(),"value"= eNamingRule};
		eObjectSequence.add(eNamingRuleTuple);
	}
	//capellacore.Constraint -> Instantiation
	var idConstraint = 0;
	for (eConstraint in DSL!EObject.all.select(s|s.isTypeOf(DSL!Constraint))){
		var eConstraintTuple = Tuple{"key"=eConstraint.type().name.asString()+"_"+(idConstraint++).asString(),"value"= eConstraint};
		eObjectSequence.add(eConstraintTuple);
	}
	//capellacore.KeyValue -> Instantiation
	var idKeyValue = 0;
	for (eKeyValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!KeyValue))){
		var eKeyValueTuple = Tuple{"key"=eKeyValue.type().name.asString()+"_"+(idKeyValue++).asString(),"value"= eKeyValue};
		eObjectSequence.add(eKeyValueTuple);
	}
	//capellacore.ReuseLink -> Instantiation
	var idReuseLink = 0;
	for (eReuseLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!ReuseLink))){
		var eReuseLinkTuple = Tuple{"key"=eReuseLink.type().name.asString()+"_"+(idReuseLink++).asString(),"value"= eReuseLink};
		eObjectSequence.add(eReuseLinkTuple);
	}
	//capellacore.ReuseableStructure -> Instantiation
	var idReuseableStructure = 0;
	for (eReuseableStructure in DSL!EObject.all.select(s|s.isTypeOf(DSL!ReuseableStructure))){
		var eReuseableStructureTuple = Tuple{"key"=eReuseableStructure.type().name.asString()+"_"+(idReuseableStructure++).asString(),"value"= eReuseableStructure};
		eObjectSequence.add(eReuseableStructureTuple);
	}
	//capellacore.ReuserStructure -> Instantiation
	var idReuserStructure = 0;
	for (eReuserStructure in DSL!EObject.all.select(s|s.isTypeOf(DSL!ReuserStructure))){
		var eReuserStructureTuple = Tuple{"key"=eReuserStructure.type().name.asString()+"_"+(idReuserStructure++).asString(),"value"= eReuserStructure};
		eObjectSequence.add(eReuserStructureTuple);
	}
	//capellacore.GeneralizableElement -> Instantiation
	var idGeneralizableElement = 0;
	for (eGeneralizableElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!GeneralizableElement))){
		var eGeneralizableElementTuple = Tuple{"key"=eGeneralizableElement.type().name.asString()+"_"+(idGeneralizableElement++).asString(),"value"= eGeneralizableElement};
		eObjectSequence.add(eGeneralizableElementTuple);
	}
	//capellacore.Classifier -> Instantiation
	var idClassifier = 0;
	for (eClassifier in DSL!EObject.all.select(s|s.isTypeOf(DSL!Classifier))){
		var eClassifierTuple = Tuple{"key"=eClassifier.type().name.asString()+"_"+(idClassifier++).asString(),"value"= eClassifier};
		eObjectSequence.add(eClassifierTuple);
	}
	//capellacore.GeneralClass -> Instantiation
	var idGeneralClass = 0;
	for (eGeneralClass in DSL!EObject.all.select(s|s.isTypeOf(DSL!GeneralClass))){
		var eGeneralClassTuple = Tuple{"key"=eGeneralClass.type().name.asString()+"_"+(idGeneralClass++).asString(),"value"= eGeneralClass};
		eObjectSequence.add(eGeneralClassTuple);
	}
	//capellacore.Generalization -> Instantiation
	var idGeneralization = 0;
	for (eGeneralization in DSL!EObject.all.select(s|s.isTypeOf(DSL!Generalization))){
		var eGeneralizationTuple = Tuple{"key"=eGeneralization.type().name.asString()+"_"+(idGeneralization++).asString(),"value"= eGeneralization};
		eObjectSequence.add(eGeneralizationTuple);
	}
	//capellacore.Feature -> Instantiation
	var idFeature = 0;
	for (eFeature in DSL!EObject.all.select(s|s.isTypeOf(DSL!Feature))){
		var eFeatureTuple = Tuple{"key"=eFeature.type().name.asString()+"_"+(idFeature++).asString(),"value"= eFeature};
		eObjectSequence.add(eFeatureTuple);
	}
	//capellacore.AbstractExchangeItemPkg -> Instantiation
	var idAbstractExchangeItemPkg = 0;
	for (eAbstractExchangeItemPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractExchangeItemPkg))){
		var eAbstractExchangeItemPkgTuple = Tuple{"key"=eAbstractExchangeItemPkg.type().name.asString()+"_"+(idAbstractExchangeItemPkg++).asString(),"value"= eAbstractExchangeItemPkg};
		eObjectSequence.add(eAbstractExchangeItemPkgTuple);
	}
	//capellacore.Allocation -> Instantiation
	var idAllocation = 0;
	for (eAllocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!Allocation))){
		var eAllocationTuple = Tuple{"key"=eAllocation.type().name.asString()+"_"+(idAllocation++).asString(),"value"= eAllocation};
		eObjectSequence.add(eAllocationTuple);
	}
	//capellacore.Involvement -> Instantiation
	var idInvolvement = 0;
	for (eInvolvement in DSL!EObject.all.select(s|s.isTypeOf(DSL!Involvement))){
		var eInvolvementTuple = Tuple{"key"=eInvolvement.type().name.asString()+"_"+(idInvolvement++).asString(),"value"= eInvolvement};
		eObjectSequence.add(eInvolvementTuple);
	}
	//capellacore.InvolverElement -> Instantiation
	var idInvolverElement = 0;
	for (eInvolverElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!InvolverElement))){
		var eInvolverElementTuple = Tuple{"key"=eInvolverElement.type().name.asString()+"_"+(idInvolverElement++).asString(),"value"= eInvolverElement};
		eObjectSequence.add(eInvolverElementTuple);
	}
	//capellacore.InvolvedElement -> Instantiation
	var idInvolvedElement = 0;
	for (eInvolvedElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!InvolvedElement))){
		var eInvolvedElementTuple = Tuple{"key"=eInvolvedElement.type().name.asString()+"_"+(idInvolvedElement++).asString(),"value"= eInvolvedElement};
		eObjectSequence.add(eInvolvedElementTuple);
	}
	//capellacore.AbstractPropertyValue -> Instantiation
	var idAbstractPropertyValue = 0;
	for (eAbstractPropertyValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractPropertyValue))){
		var eAbstractPropertyValueTuple = Tuple{"key"=eAbstractPropertyValue.type().name.asString()+"_"+(idAbstractPropertyValue++).asString(),"value"= eAbstractPropertyValue};
		eObjectSequence.add(eAbstractPropertyValueTuple);
	}
	//capellacore.StringPropertyValue -> Instantiation
	var idStringPropertyValue = 0;
	for (eStringPropertyValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!StringPropertyValue))){
		var eStringPropertyValueTuple = Tuple{"key"=eStringPropertyValue.type().name.asString()+"_"+(idStringPropertyValue++).asString(),"value"= eStringPropertyValue};
		eObjectSequence.add(eStringPropertyValueTuple);
	}
	//capellacore.IntegerPropertyValue -> Instantiation
	var idIntegerPropertyValue = 0;
	for (eIntegerPropertyValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!IntegerPropertyValue))){
		var eIntegerPropertyValueTuple = Tuple{"key"=eIntegerPropertyValue.type().name.asString()+"_"+(idIntegerPropertyValue++).asString(),"value"= eIntegerPropertyValue};
		eObjectSequence.add(eIntegerPropertyValueTuple);
	}
	//capellacore.BooleanPropertyValue -> Instantiation
	var idBooleanPropertyValue = 0;
	for (eBooleanPropertyValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!BooleanPropertyValue))){
		var eBooleanPropertyValueTuple = Tuple{"key"=eBooleanPropertyValue.type().name.asString()+"_"+(idBooleanPropertyValue++).asString(),"value"= eBooleanPropertyValue};
		eObjectSequence.add(eBooleanPropertyValueTuple);
	}
	//capellacore.FloatPropertyValue -> Instantiation
	var idFloatPropertyValue = 0;
	for (eFloatPropertyValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!FloatPropertyValue))){
		var eFloatPropertyValueTuple = Tuple{"key"=eFloatPropertyValue.type().name.asString()+"_"+(idFloatPropertyValue++).asString(),"value"= eFloatPropertyValue};
		eObjectSequence.add(eFloatPropertyValueTuple);
	}
	//capellacore.EnumerationPropertyValue -> Instantiation
	var idEnumerationPropertyValue = 0;
	for (eEnumerationPropertyValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!EnumerationPropertyValue))){
		var eEnumerationPropertyValueTuple = Tuple{"key"=eEnumerationPropertyValue.type().name.asString()+"_"+(idEnumerationPropertyValue++).asString(),"value"= eEnumerationPropertyValue};
		eObjectSequence.add(eEnumerationPropertyValueTuple);
	}
	//capellacore.EnumerationPropertyType -> Instantiation
	var idEnumerationPropertyType = 0;
	for (eEnumerationPropertyType in DSL!EObject.all.select(s|s.isTypeOf(DSL!EnumerationPropertyType))){
		var eEnumerationPropertyTypeTuple = Tuple{"key"=eEnumerationPropertyType.type().name.asString()+"_"+(idEnumerationPropertyType++).asString(),"value"= eEnumerationPropertyType};
		eObjectSequence.add(eEnumerationPropertyTypeTuple);
	}
	//capellacore.EnumerationPropertyLiteral -> Instantiation
	var idEnumerationPropertyLiteral = 0;
	for (eEnumerationPropertyLiteral in DSL!EObject.all.select(s|s.isTypeOf(DSL!EnumerationPropertyLiteral))){
		var eEnumerationPropertyLiteralTuple = Tuple{"key"=eEnumerationPropertyLiteral.type().name.asString()+"_"+(idEnumerationPropertyLiteral++).asString(),"value"= eEnumerationPropertyLiteral};
		eObjectSequence.add(eEnumerationPropertyLiteralTuple);
	}
	//capellacore.PropertyValueGroup -> Instantiation
	var idPropertyValueGroup = 0;
	for (ePropertyValueGroup in DSL!EObject.all.select(s|s.isTypeOf(DSL!PropertyValueGroup))){
		var ePropertyValueGroupTuple = Tuple{"key"=ePropertyValueGroup.type().name.asString()+"_"+(idPropertyValueGroup++).asString(),"value"= ePropertyValueGroup};
		eObjectSequence.add(ePropertyValueGroupTuple);
	}
	//capellacore.PropertyValuePkg -> Instantiation
	var idPropertyValuePkg = 0;
	for (ePropertyValuePkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!PropertyValuePkg))){
		var ePropertyValuePkgTuple = Tuple{"key"=ePropertyValuePkg.type().name.asString()+"_"+(idPropertyValuePkg++).asString(),"value"= ePropertyValuePkg};
		eObjectSequence.add(ePropertyValuePkgTuple);
	}
	//capellacore.AbstractDependenciesPkg -> Instantiation
	var idAbstractDependenciesPkg = 0;
	for (eAbstractDependenciesPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractDependenciesPkg))){
		var eAbstractDependenciesPkgTuple = Tuple{"key"=eAbstractDependenciesPkg.type().name.asString()+"_"+(idAbstractDependenciesPkg++).asString(),"value"= eAbstractDependenciesPkg};
		eObjectSequence.add(eAbstractDependenciesPkgTuple);
	}
	//modellingcore.ModelElement -> Instantiation
	var idModelElement = 0;
	for (eModelElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!ModelElement))){
		var eModelElementTuple = Tuple{"key"=eModelElement.type().name.asString()+"_"+(idModelElement++).asString(),"value"= eModelElement};
		eObjectSequence.add(eModelElementTuple);
	}
	//modellingcore.AbstractRelationship -> Instantiation
	var idAbstractRelationship = 0;
	for (eAbstractRelationship in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractRelationship))){
		var eAbstractRelationshipTuple = Tuple{"key"=eAbstractRelationship.type().name.asString()+"_"+(idAbstractRelationship++).asString(),"value"= eAbstractRelationship};
		eObjectSequence.add(eAbstractRelationshipTuple);
	}
	//modellingcore.AbstractNamedElement -> Instantiation
	var idAbstractNamedElement = 0;
	for (eAbstractNamedElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractNamedElement))){
		var eAbstractNamedElementTuple = Tuple{"key"=eAbstractNamedElement.type().name.asString()+"_"+(idAbstractNamedElement++).asString(),"value"= eAbstractNamedElement};
		eObjectSequence.add(eAbstractNamedElementTuple);
	}
	//modellingcore.InformationsExchanger -> Instantiation
	var idInformationsExchanger = 0;
	for (eInformationsExchanger in DSL!EObject.all.select(s|s.isTypeOf(DSL!InformationsExchanger))){
		var eInformationsExchangerTuple = Tuple{"key"=eInformationsExchanger.type().name.asString()+"_"+(idInformationsExchanger++).asString(),"value"= eInformationsExchanger};
		eObjectSequence.add(eInformationsExchangerTuple);
	}
	//modellingcore.TraceableElement -> Instantiation
	var idTraceableElement = 0;
	for (eTraceableElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!TraceableElement))){
		var eTraceableElementTuple = Tuple{"key"=eTraceableElement.type().name.asString()+"_"+(idTraceableElement++).asString(),"value"= eTraceableElement};
		eObjectSequence.add(eTraceableElementTuple);
	}
	//modellingcore.FinalizableElement -> Instantiation
	var idFinalizableElement = 0;
	for (eFinalizableElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!FinalizableElement))){
		var eFinalizableElementTuple = Tuple{"key"=eFinalizableElement.type().name.asString()+"_"+(idFinalizableElement++).asString(),"value"= eFinalizableElement};
		eObjectSequence.add(eFinalizableElementTuple);
	}
	//modellingcore.PublishableElement -> Instantiation
	var idPublishableElement = 0;
	for (ePublishableElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!PublishableElement))){
		var ePublishableElementTuple = Tuple{"key"=ePublishableElement.type().name.asString()+"_"+(idPublishableElement++).asString(),"value"= ePublishableElement};
		eObjectSequence.add(ePublishableElementTuple);
	}
	//modellingcore.AbstractType -> Instantiation
	var idAbstractType = 0;
	for (eAbstractType in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractType))){
		var eAbstractTypeTuple = Tuple{"key"=eAbstractType.type().name.asString()+"_"+(idAbstractType++).asString(),"value"= eAbstractType};
		eObjectSequence.add(eAbstractTypeTuple);
	}
	//modellingcore.AbstractTypedElement -> Instantiation
	var idAbstractTypedElement = 0;
	for (eAbstractTypedElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractTypedElement))){
		var eAbstractTypedElementTuple = Tuple{"key"=eAbstractTypedElement.type().name.asString()+"_"+(idAbstractTypedElement++).asString(),"value"= eAbstractTypedElement};
		eObjectSequence.add(eAbstractTypedElementTuple);
	}
	//modellingcore.AbstractTrace -> Instantiation
	var idAbstractTrace = 0;
	for (eAbstractTrace in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractTrace))){
		var eAbstractTraceTuple = Tuple{"key"=eAbstractTrace.type().name.asString()+"_"+(idAbstractTrace++).asString(),"value"= eAbstractTrace};
		eObjectSequence.add(eAbstractTraceTuple);
	}
	//modellingcore.AbstractConstraint -> Instantiation
	var idAbstractConstraint = 0;
	for (eAbstractConstraint in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractConstraint))){
		var eAbstractConstraintTuple = Tuple{"key"=eAbstractConstraint.type().name.asString()+"_"+(idAbstractConstraint++).asString(),"value"= eAbstractConstraint};
		eObjectSequence.add(eAbstractConstraintTuple);
	}
	//modellingcore.ValueSpecification -> Instantiation
	var idValueSpecification = 0;
	for (eValueSpecification in DSL!EObject.all.select(s|s.isTypeOf(DSL!ValueSpecification))){
		var eValueSpecificationTuple = Tuple{"key"=eValueSpecification.type().name.asString()+"_"+(idValueSpecification++).asString(),"value"= eValueSpecification};
		eObjectSequence.add(eValueSpecificationTuple);
	}
	//modellingcore.AbstractParameter -> Instantiation
	var idAbstractParameter = 0;
	for (eAbstractParameter in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractParameter))){
		var eAbstractParameterTuple = Tuple{"key"=eAbstractParameter.type().name.asString()+"_"+(idAbstractParameter++).asString(),"value"= eAbstractParameter};
		eObjectSequence.add(eAbstractParameterTuple);
	}
	//modellingcore.AbstractParameterSet -> Instantiation
	var idAbstractParameterSet = 0;
	for (eAbstractParameterSet in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractParameterSet))){
		var eAbstractParameterSetTuple = Tuple{"key"=eAbstractParameterSet.type().name.asString()+"_"+(idAbstractParameterSet++).asString(),"value"= eAbstractParameterSet};
		eObjectSequence.add(eAbstractParameterSetTuple);
	}
	//modellingcore.AbstractInformationFlow -> Instantiation
	var idAbstractInformationFlow = 0;
	for (eAbstractInformationFlow in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractInformationFlow))){
		var eAbstractInformationFlowTuple = Tuple{"key"=eAbstractInformationFlow.type().name.asString()+"_"+(idAbstractInformationFlow++).asString(),"value"= eAbstractInformationFlow};
		eObjectSequence.add(eAbstractInformationFlowTuple);
	}
	//modellingcore.AbstractExchangeItem -> Instantiation
	var idAbstractExchangeItem = 0;
	for (eAbstractExchangeItem in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractExchangeItem))){
		var eAbstractExchangeItemTuple = Tuple{"key"=eAbstractExchangeItem.type().name.asString()+"_"+(idAbstractExchangeItem++).asString(),"value"= eAbstractExchangeItem};
		eObjectSequence.add(eAbstractExchangeItemTuple);
	}
	//modellingcore.IState -> Instantiation
	var idIState = 0;
	for (eIState in DSL!EObject.all.select(s|s.isTypeOf(DSL!IState))){
		var eIStateTuple = Tuple{"key"=eIState.type().name.asString()+"_"+(idIState++).asString(),"value"= eIState};
		eObjectSequence.add(eIStateTuple);
	}
	//emde.Element -> Instantiation
	var idElement = 0;
	for (eElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!Element))){
		var eElementTuple = Tuple{"key"=eElement.type().name.asString()+"_"+(idElement++).asString(),"value"= eElement};
		eObjectSequence.add(eElementTuple);
	}
	//emde.ExtensibleElement -> Instantiation
	var idExtensibleElement = 0;
	for (eExtensibleElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExtensibleElement))){
		var eExtensibleElementTuple = Tuple{"key"=eExtensibleElement.type().name.asString()+"_"+(idExtensibleElement++).asString(),"value"= eExtensibleElement};
		eObjectSequence.add(eExtensibleElementTuple);
	}
	//emde.ElementExtension -> Instantiation
	var idElementExtension = 0;
	for (eElementExtension in DSL!EObject.all.select(s|s.isTypeOf(DSL!ElementExtension))){
		var eElementExtensionTuple = Tuple{"key"=eElementExtension.type().name.asString()+"_"+(idElementExtension++).asString(),"value"= eElementExtension};
		eObjectSequence.add(eElementExtensionTuple);
	}
	//oa.OperationalAnalysis -> Instantiation
	var idOperationalAnalysis = 0;
	for (eOperationalAnalysis in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalAnalysis))){
		var eOperationalAnalysisTuple = Tuple{"key"=eOperationalAnalysis.type().name.asString()+"_"+(idOperationalAnalysis++).asString(),"value"= eOperationalAnalysis};
		eObjectSequence.add(eOperationalAnalysisTuple);
	}
	//oa.OperationalScenario -> Instantiation
	var idOperationalScenario = 0;
	for (eOperationalScenario in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalScenario))){
		var eOperationalScenarioTuple = Tuple{"key"=eOperationalScenario.type().name.asString()+"_"+(idOperationalScenario++).asString(),"value"= eOperationalScenario};
		eObjectSequence.add(eOperationalScenarioTuple);
	}
	//oa.OperationalActivityPkg -> Instantiation
	var idOperationalActivityPkg = 0;
	for (eOperationalActivityPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalActivityPkg))){
		var eOperationalActivityPkgTuple = Tuple{"key"=eOperationalActivityPkg.type().name.asString()+"_"+(idOperationalActivityPkg++).asString(),"value"= eOperationalActivityPkg};
		eObjectSequence.add(eOperationalActivityPkgTuple);
	}
	//oa.OperationalActivity -> Instantiation
	var idOperationalActivity = 0;
	for (eOperationalActivity in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalActivity))){
		var eOperationalActivityTuple = Tuple{"key"=eOperationalActivity.type().name.asString()+"_"+(idOperationalActivity++).asString(),"value"= eOperationalActivity};
		eObjectSequence.add(eOperationalActivityTuple);
	}
	//oa.OperationalProcess -> Instantiation
	var idOperationalProcess = 0;
	for (eOperationalProcess in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalProcess))){
		var eOperationalProcessTuple = Tuple{"key"=eOperationalProcess.type().name.asString()+"_"+(idOperationalProcess++).asString(),"value"= eOperationalProcess};
		eObjectSequence.add(eOperationalProcessTuple);
	}
	//oa.Swimlane -> Instantiation
	var idSwimlane = 0;
	for (eSwimlane in DSL!EObject.all.select(s|s.isTypeOf(DSL!Swimlane))){
		var eSwimlaneTuple = Tuple{"key"=eSwimlane.type().name.asString()+"_"+(idSwimlane++).asString(),"value"= eSwimlane};
		eObjectSequence.add(eSwimlaneTuple);
	}
	//oa.OperationalCapabilityPkg -> Instantiation
	var idOperationalCapabilityPkg = 0;
	for (eOperationalCapabilityPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalCapabilityPkg))){
		var eOperationalCapabilityPkgTuple = Tuple{"key"=eOperationalCapabilityPkg.type().name.asString()+"_"+(idOperationalCapabilityPkg++).asString(),"value"= eOperationalCapabilityPkg};
		eObjectSequence.add(eOperationalCapabilityPkgTuple);
	}
	//oa.OperationalCapability -> Instantiation
	var idOperationalCapability = 0;
	for (eOperationalCapability in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalCapability))){
		var eOperationalCapabilityTuple = Tuple{"key"=eOperationalCapability.type().name.asString()+"_"+(idOperationalCapability++).asString(),"value"= eOperationalCapability};
		eObjectSequence.add(eOperationalCapabilityTuple);
	}
	//oa.ActivityAllocation -> Instantiation
	var idActivityAllocation = 0;
	for (eActivityAllocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!ActivityAllocation))){
		var eActivityAllocationTuple = Tuple{"key"=eActivityAllocation.type().name.asString()+"_"+(idActivityAllocation++).asString(),"value"= eActivityAllocation};
		eObjectSequence.add(eActivityAllocationTuple);
	}
	//oa.RolePkg -> Instantiation
	var idRolePkg = 0;
	for (eRolePkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!RolePkg))){
		var eRolePkgTuple = Tuple{"key"=eRolePkg.type().name.asString()+"_"+(idRolePkg++).asString(),"value"= eRolePkg};
		eObjectSequence.add(eRolePkgTuple);
	}
	//oa.Role -> Instantiation
	var idRole = 0;
	for (eRole in DSL!EObject.all.select(s|s.isTypeOf(DSL!Role))){
		var eRoleTuple = Tuple{"key"=eRole.type().name.asString()+"_"+(idRole++).asString(),"value"= eRole};
		eObjectSequence.add(eRoleTuple);
	}
	//oa.RoleAssemblyUsage -> Instantiation
	var idRoleAssemblyUsage = 0;
	for (eRoleAssemblyUsage in DSL!EObject.all.select(s|s.isTypeOf(DSL!RoleAssemblyUsage))){
		var eRoleAssemblyUsageTuple = Tuple{"key"=eRoleAssemblyUsage.type().name.asString()+"_"+(idRoleAssemblyUsage++).asString(),"value"= eRoleAssemblyUsage};
		eObjectSequence.add(eRoleAssemblyUsageTuple);
	}
	//oa.RoleAllocation -> Instantiation
	var idRoleAllocation = 0;
	for (eRoleAllocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!RoleAllocation))){
		var eRoleAllocationTuple = Tuple{"key"=eRoleAllocation.type().name.asString()+"_"+(idRoleAllocation++).asString(),"value"= eRoleAllocation};
		eObjectSequence.add(eRoleAllocationTuple);
	}
	//oa.EntityPkg -> Instantiation
	var idEntityPkg = 0;
	for (eEntityPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!EntityPkg))){
		var eEntityPkgTuple = Tuple{"key"=eEntityPkg.type().name.asString()+"_"+(idEntityPkg++).asString(),"value"= eEntityPkg};
		eObjectSequence.add(eEntityPkgTuple);
	}
	//oa.Entity -> Instantiation
	var idEntity = 0;
	for (eEntity in DSL!EObject.all.select(s|s.isTypeOf(DSL!Entity))){
		var eEntityTuple = Tuple{"key"=eEntity.type().name.asString()+"_"+(idEntity++).asString(),"value"= eEntity};
		eObjectSequence.add(eEntityTuple);
	}
	//oa.ConceptPkg -> Instantiation
	var idConceptPkg = 0;
	for (eConceptPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!ConceptPkg))){
		var eConceptPkgTuple = Tuple{"key"=eConceptPkg.type().name.asString()+"_"+(idConceptPkg++).asString(),"value"= eConceptPkg};
		eObjectSequence.add(eConceptPkgTuple);
	}
	//oa.Concept -> Instantiation
	var idConcept = 0;
	for (eConcept in DSL!EObject.all.select(s|s.isTypeOf(DSL!Concept))){
		var eConceptTuple = Tuple{"key"=eConcept.type().name.asString()+"_"+(idConcept++).asString(),"value"= eConcept};
		eObjectSequence.add(eConceptTuple);
	}
	//oa.ConceptCompliance -> Instantiation
	var idConceptCompliance = 0;
	for (eConceptCompliance in DSL!EObject.all.select(s|s.isTypeOf(DSL!ConceptCompliance))){
		var eConceptComplianceTuple = Tuple{"key"=eConceptCompliance.type().name.asString()+"_"+(idConceptCompliance++).asString(),"value"= eConceptCompliance};
		eObjectSequence.add(eConceptComplianceTuple);
	}
	//oa.ItemInConcept -> Instantiation
	var idItemInConcept = 0;
	for (eItemInConcept in DSL!EObject.all.select(s|s.isTypeOf(DSL!ItemInConcept))){
		var eItemInConceptTuple = Tuple{"key"=eItemInConcept.type().name.asString()+"_"+(idItemInConcept++).asString(),"value"= eItemInConcept};
		eObjectSequence.add(eItemInConceptTuple);
	}
	//oa.AbstractConceptItem -> Instantiation
	var idAbstractConceptItem = 0;
	for (eAbstractConceptItem in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractConceptItem))){
		var eAbstractConceptItemTuple = Tuple{"key"=eAbstractConceptItem.type().name.asString()+"_"+(idAbstractConceptItem++).asString(),"value"= eAbstractConceptItem};
		eObjectSequence.add(eAbstractConceptItemTuple);
	}
	//oa.CommunityOfInterest -> Instantiation
	var idCommunityOfInterest = 0;
	for (eCommunityOfInterest in DSL!EObject.all.select(s|s.isTypeOf(DSL!CommunityOfInterest))){
		var eCommunityOfInterestTuple = Tuple{"key"=eCommunityOfInterest.type().name.asString()+"_"+(idCommunityOfInterest++).asString(),"value"= eCommunityOfInterest};
		eObjectSequence.add(eCommunityOfInterestTuple);
	}
	//oa.CommunityOfInterestComposition -> Instantiation
	var idCommunityOfInterestComposition = 0;
	for (eCommunityOfInterestComposition in DSL!EObject.all.select(s|s.isTypeOf(DSL!CommunityOfInterestComposition))){
		var eCommunityOfInterestCompositionTuple = Tuple{"key"=eCommunityOfInterestComposition.type().name.asString()+"_"+(idCommunityOfInterestComposition++).asString(),"value"= eCommunityOfInterestComposition};
		eObjectSequence.add(eCommunityOfInterestCompositionTuple);
	}
	//oa.OrganisationalUnit -> Instantiation
	var idOrganisationalUnit = 0;
	for (eOrganisationalUnit in DSL!EObject.all.select(s|s.isTypeOf(DSL!OrganisationalUnit))){
		var eOrganisationalUnitTuple = Tuple{"key"=eOrganisationalUnit.type().name.asString()+"_"+(idOrganisationalUnit++).asString(),"value"= eOrganisationalUnit};
		eObjectSequence.add(eOrganisationalUnitTuple);
	}
	//oa.OrganisationalUnitComposition -> Instantiation
	var idOrganisationalUnitComposition = 0;
	for (eOrganisationalUnitComposition in DSL!EObject.all.select(s|s.isTypeOf(DSL!OrganisationalUnitComposition))){
		var eOrganisationalUnitCompositionTuple = Tuple{"key"=eOrganisationalUnitComposition.type().name.asString()+"_"+(idOrganisationalUnitComposition++).asString(),"value"= eOrganisationalUnitComposition};
		eObjectSequence.add(eOrganisationalUnitCompositionTuple);
	}
	//oa.Location -> Instantiation
	var idLocation = 0;
	for (eLocation in DSL!EObject.all.select(s|s.isTypeOf(DSL!Location))){
		var eLocationTuple = Tuple{"key"=eLocation.type().name.asString()+"_"+(idLocation++).asString(),"value"= eLocation};
		eObjectSequence.add(eLocationTuple);
	}
	//oa.CapabilityConfiguration -> Instantiation
	var idCapabilityConfiguration = 0;
	for (eCapabilityConfiguration in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapabilityConfiguration))){
		var eCapabilityConfigurationTuple = Tuple{"key"=eCapabilityConfiguration.type().name.asString()+"_"+(idCapabilityConfiguration++).asString(),"value"= eCapabilityConfiguration};
		eObjectSequence.add(eCapabilityConfigurationTuple);
	}
	//oa.CommunicationMean -> Instantiation
	var idCommunicationMean = 0;
	for (eCommunicationMean in DSL!EObject.all.select(s|s.isTypeOf(DSL!CommunicationMean))){
		var eCommunicationMeanTuple = Tuple{"key"=eCommunicationMean.type().name.asString()+"_"+(idCommunicationMean++).asString(),"value"= eCommunicationMean};
		eObjectSequence.add(eCommunicationMeanTuple);
	}
	//oa.EntityOperationalCapabilityInvolvement -> Instantiation
	var idEntityOperationalCapabilityInvolvement = 0;
	for (eEntityOperationalCapabilityInvolvement in DSL!EObject.all.select(s|s.isTypeOf(DSL!EntityOperationalCapabilityInvolvement))){
		var eEntityOperationalCapabilityInvolvementTuple = Tuple{"key"=eEntityOperationalCapabilityInvolvement.type().name.asString()+"_"+(idEntityOperationalCapabilityInvolvement++).asString(),"value"= eEntityOperationalCapabilityInvolvement};
		eObjectSequence.add(eEntityOperationalCapabilityInvolvementTuple);
	}
	//ctx.SystemAnalysis -> Instantiation
	var idSystemAnalysis = 0;
	for (eSystemAnalysis in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemAnalysis))){
		var eSystemAnalysisTuple = Tuple{"key"=eSystemAnalysis.type().name.asString()+"_"+(idSystemAnalysis++).asString(),"value"= eSystemAnalysis};
		eObjectSequence.add(eSystemAnalysisTuple);
	}
	//ctx.SystemFunction -> Instantiation
	var idSystemFunction = 0;
	for (eSystemFunction in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemFunction))){
		var eSystemFunctionTuple = Tuple{"key"=eSystemFunction.type().name.asString()+"_"+(idSystemFunction++).asString(),"value"= eSystemFunction};
		eObjectSequence.add(eSystemFunctionTuple);
	}
	//ctx.SystemFunctionPkg -> Instantiation
	var idSystemFunctionPkg = 0;
	for (eSystemFunctionPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemFunctionPkg))){
		var eSystemFunctionPkgTuple = Tuple{"key"=eSystemFunctionPkg.type().name.asString()+"_"+(idSystemFunctionPkg++).asString(),"value"= eSystemFunctionPkg};
		eObjectSequence.add(eSystemFunctionPkgTuple);
	}
	//ctx.SystemCommunicationHook -> Instantiation
	var idSystemCommunicationHook = 0;
	for (eSystemCommunicationHook in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemCommunicationHook))){
		var eSystemCommunicationHookTuple = Tuple{"key"=eSystemCommunicationHook.type().name.asString()+"_"+(idSystemCommunicationHook++).asString(),"value"= eSystemCommunicationHook};
		eObjectSequence.add(eSystemCommunicationHookTuple);
	}
	//ctx.SystemCommunication -> Instantiation
	var idSystemCommunication = 0;
	for (eSystemCommunication in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemCommunication))){
		var eSystemCommunicationTuple = Tuple{"key"=eSystemCommunication.type().name.asString()+"_"+(idSystemCommunication++).asString(),"value"= eSystemCommunication};
		eObjectSequence.add(eSystemCommunicationTuple);
	}
	//ctx.CapabilityInvolvement -> Instantiation
	var idCapabilityInvolvement = 0;
	for (eCapabilityInvolvement in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapabilityInvolvement))){
		var eCapabilityInvolvementTuple = Tuple{"key"=eCapabilityInvolvement.type().name.asString()+"_"+(idCapabilityInvolvement++).asString(),"value"= eCapabilityInvolvement};
		eObjectSequence.add(eCapabilityInvolvementTuple);
	}
	//ctx.MissionInvolvement -> Instantiation
	var idMissionInvolvement = 0;
	for (eMissionInvolvement in DSL!EObject.all.select(s|s.isTypeOf(DSL!MissionInvolvement))){
		var eMissionInvolvementTuple = Tuple{"key"=eMissionInvolvement.type().name.asString()+"_"+(idMissionInvolvement++).asString(),"value"= eMissionInvolvement};
		eObjectSequence.add(eMissionInvolvementTuple);
	}
	//ctx.Mission -> Instantiation
	var idMission = 0;
	for (eMission in DSL!EObject.all.select(s|s.isTypeOf(DSL!Mission))){
		var eMissionTuple = Tuple{"key"=eMission.type().name.asString()+"_"+(idMission++).asString(),"value"= eMission};
		eObjectSequence.add(eMissionTuple);
	}
	//ctx.MissionPkg -> Instantiation
	var idMissionPkg = 0;
	for (eMissionPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!MissionPkg))){
		var eMissionPkgTuple = Tuple{"key"=eMissionPkg.type().name.asString()+"_"+(idMissionPkg++).asString(),"value"= eMissionPkg};
		eObjectSequence.add(eMissionPkgTuple);
	}
	//ctx.Capability -> Instantiation
	var idCapability = 0;
	for (eCapability in DSL!EObject.all.select(s|s.isTypeOf(DSL!Capability))){
		var eCapabilityTuple = Tuple{"key"=eCapability.type().name.asString()+"_"+(idCapability++).asString(),"value"= eCapability};
		eObjectSequence.add(eCapabilityTuple);
	}
	//ctx.CapabilityExploitation -> Instantiation
	var idCapabilityExploitation = 0;
	for (eCapabilityExploitation in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapabilityExploitation))){
		var eCapabilityExploitationTuple = Tuple{"key"=eCapabilityExploitation.type().name.asString()+"_"+(idCapabilityExploitation++).asString(),"value"= eCapabilityExploitation};
		eObjectSequence.add(eCapabilityExploitationTuple);
	}
	//ctx.CapabilityPkg -> Instantiation
	var idCapabilityPkg = 0;
	for (eCapabilityPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapabilityPkg))){
		var eCapabilityPkgTuple = Tuple{"key"=eCapabilityPkg.type().name.asString()+"_"+(idCapabilityPkg++).asString(),"value"= eCapabilityPkg};
		eObjectSequence.add(eCapabilityPkgTuple);
	}
	//ctx.OperationalAnalysisRealization -> Instantiation
	var idOperationalAnalysisRealization = 0;
	for (eOperationalAnalysisRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!OperationalAnalysisRealization))){
		var eOperationalAnalysisRealizationTuple = Tuple{"key"=eOperationalAnalysisRealization.type().name.asString()+"_"+(idOperationalAnalysisRealization++).asString(),"value"= eOperationalAnalysisRealization};
		eObjectSequence.add(eOperationalAnalysisRealizationTuple);
	}
	//ctx.SystemComponentPkg -> Instantiation
	var idSystemComponentPkg = 0;
	for (eSystemComponentPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemComponentPkg))){
		var eSystemComponentPkgTuple = Tuple{"key"=eSystemComponentPkg.type().name.asString()+"_"+(idSystemComponentPkg++).asString(),"value"= eSystemComponentPkg};
		eObjectSequence.add(eSystemComponentPkgTuple);
	}
	//ctx.SystemComponent -> Instantiation
	var idSystemComponent = 0;
	for (eSystemComponent in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemComponent))){
		var eSystemComponentTuple = Tuple{"key"=eSystemComponent.type().name.asString()+"_"+(idSystemComponent++).asString(),"value"= eSystemComponent};
		eObjectSequence.add(eSystemComponentTuple);
	}
	//la.LogicalArchitecturePkg -> Instantiation
	var idLogicalArchitecturePkg = 0;
	for (eLogicalArchitecturePkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalArchitecturePkg))){
		var eLogicalArchitecturePkgTuple = Tuple{"key"=eLogicalArchitecturePkg.type().name.asString()+"_"+(idLogicalArchitecturePkg++).asString(),"value"= eLogicalArchitecturePkg};
		eObjectSequence.add(eLogicalArchitecturePkgTuple);
	}
	//la.LogicalArchitecture -> Instantiation
	var idLogicalArchitecture = 0;
	for (eLogicalArchitecture in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalArchitecture))){
		var eLogicalArchitectureTuple = Tuple{"key"=eLogicalArchitecture.type().name.asString()+"_"+(idLogicalArchitecture++).asString(),"value"= eLogicalArchitecture};
		eObjectSequence.add(eLogicalArchitectureTuple);
	}
	//la.LogicalFunction -> Instantiation
	var idLogicalFunction = 0;
	for (eLogicalFunction in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalFunction))){
		var eLogicalFunctionTuple = Tuple{"key"=eLogicalFunction.type().name.asString()+"_"+(idLogicalFunction++).asString(),"value"= eLogicalFunction};
		eObjectSequence.add(eLogicalFunctionTuple);
	}
	//la.LogicalFunctionPkg -> Instantiation
	var idLogicalFunctionPkg = 0;
	for (eLogicalFunctionPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalFunctionPkg))){
		var eLogicalFunctionPkgTuple = Tuple{"key"=eLogicalFunctionPkg.type().name.asString()+"_"+(idLogicalFunctionPkg++).asString(),"value"= eLogicalFunctionPkg};
		eObjectSequence.add(eLogicalFunctionPkgTuple);
	}
	//la.LogicalComponent -> Instantiation
	var idLogicalComponent = 0;
	for (eLogicalComponent in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalComponent))){
		var eLogicalComponentTuple = Tuple{"key"=eLogicalComponent.type().name.asString()+"_"+(idLogicalComponent++).asString(),"value"= eLogicalComponent};
		eObjectSequence.add(eLogicalComponentTuple);
	}
	//la.LogicalComponentPkg -> Instantiation
	var idLogicalComponentPkg = 0;
	for (eLogicalComponentPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalComponentPkg))){
		var eLogicalComponentPkgTuple = Tuple{"key"=eLogicalComponentPkg.type().name.asString()+"_"+(idLogicalComponentPkg++).asString(),"value"= eLogicalComponentPkg};
		eObjectSequence.add(eLogicalComponentPkgTuple);
	}
	//la.CapabilityRealization -> Instantiation
	var idCapabilityRealization = 0;
	for (eCapabilityRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapabilityRealization))){
		var eCapabilityRealizationTuple = Tuple{"key"=eCapabilityRealization.type().name.asString()+"_"+(idCapabilityRealization++).asString(),"value"= eCapabilityRealization};
		eObjectSequence.add(eCapabilityRealizationTuple);
	}
	//la.CapabilityRealizationPkg -> Instantiation
	var idCapabilityRealizationPkg = 0;
	for (eCapabilityRealizationPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!CapabilityRealizationPkg))){
		var eCapabilityRealizationPkgTuple = Tuple{"key"=eCapabilityRealizationPkg.type().name.asString()+"_"+(idCapabilityRealizationPkg++).asString(),"value"= eCapabilityRealizationPkg};
		eObjectSequence.add(eCapabilityRealizationPkgTuple);
	}
	//la.SystemAnalysisRealization -> Instantiation
	var idSystemAnalysisRealization = 0;
	for (eSystemAnalysisRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!SystemAnalysisRealization))){
		var eSystemAnalysisRealizationTuple = Tuple{"key"=eSystemAnalysisRealization.type().name.asString()+"_"+(idSystemAnalysisRealization++).asString(),"value"= eSystemAnalysisRealization};
		eObjectSequence.add(eSystemAnalysisRealizationTuple);
	}
	//la.ContextInterfaceRealization -> Instantiation
	var idContextInterfaceRealization = 0;
	for (eContextInterfaceRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!ContextInterfaceRealization))){
		var eContextInterfaceRealizationTuple = Tuple{"key"=eContextInterfaceRealization.type().name.asString()+"_"+(idContextInterfaceRealization++).asString(),"value"= eContextInterfaceRealization};
		eObjectSequence.add(eContextInterfaceRealizationTuple);
	}
	//pa.PhysicalArchitecturePkg -> Instantiation
	var idPhysicalArchitecturePkg = 0;
	for (ePhysicalArchitecturePkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalArchitecturePkg))){
		var ePhysicalArchitecturePkgTuple = Tuple{"key"=ePhysicalArchitecturePkg.type().name.asString()+"_"+(idPhysicalArchitecturePkg++).asString(),"value"= ePhysicalArchitecturePkg};
		eObjectSequence.add(ePhysicalArchitecturePkgTuple);
	}
	//pa.PhysicalArchitecture -> Instantiation
	var idPhysicalArchitecture = 0;
	for (ePhysicalArchitecture in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalArchitecture))){
		var ePhysicalArchitectureTuple = Tuple{"key"=ePhysicalArchitecture.type().name.asString()+"_"+(idPhysicalArchitecture++).asString(),"value"= ePhysicalArchitecture};
		eObjectSequence.add(ePhysicalArchitectureTuple);
	}
	//pa.PhysicalFunction -> Instantiation
	var idPhysicalFunction = 0;
	for (ePhysicalFunction in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalFunction))){
		var ePhysicalFunctionTuple = Tuple{"key"=ePhysicalFunction.type().name.asString()+"_"+(idPhysicalFunction++).asString(),"value"= ePhysicalFunction};
		eObjectSequence.add(ePhysicalFunctionTuple);
	}
	//pa.PhysicalFunctionPkg -> Instantiation
	var idPhysicalFunctionPkg = 0;
	for (ePhysicalFunctionPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalFunctionPkg))){
		var ePhysicalFunctionPkgTuple = Tuple{"key"=ePhysicalFunctionPkg.type().name.asString()+"_"+(idPhysicalFunctionPkg++).asString(),"value"= ePhysicalFunctionPkg};
		eObjectSequence.add(ePhysicalFunctionPkgTuple);
	}
	//pa.PhysicalComponent -> Instantiation
	var idPhysicalComponent = 0;
	for (ePhysicalComponent in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalComponent))){
		var ePhysicalComponentTuple = Tuple{"key"=ePhysicalComponent.type().name.asString()+"_"+(idPhysicalComponent++).asString(),"value"= ePhysicalComponent};
		eObjectSequence.add(ePhysicalComponentTuple);
	}
	//pa.PhysicalComponentPkg -> Instantiation
	var idPhysicalComponentPkg = 0;
	for (ePhysicalComponentPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalComponentPkg))){
		var ePhysicalComponentPkgTuple = Tuple{"key"=ePhysicalComponentPkg.type().name.asString()+"_"+(idPhysicalComponentPkg++).asString(),"value"= ePhysicalComponentPkg};
		eObjectSequence.add(ePhysicalComponentPkgTuple);
	}
	//pa.PhysicalNode -> Instantiation
	var idPhysicalNode = 0;
	for (ePhysicalNode in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalNode))){
		var ePhysicalNodeTuple = Tuple{"key"=ePhysicalNode.type().name.asString()+"_"+(idPhysicalNode++).asString(),"value"= ePhysicalNode};
		eObjectSequence.add(ePhysicalNodeTuple);
	}
	//pa.LogicalArchitectureRealization -> Instantiation
	var idLogicalArchitectureRealization = 0;
	for (eLogicalArchitectureRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalArchitectureRealization))){
		var eLogicalArchitectureRealizationTuple = Tuple{"key"=eLogicalArchitectureRealization.type().name.asString()+"_"+(idLogicalArchitectureRealization++).asString(),"value"= eLogicalArchitectureRealization};
		eObjectSequence.add(eLogicalArchitectureRealizationTuple);
	}
	//pa.LogicalInterfaceRealization -> Instantiation
	var idLogicalInterfaceRealization = 0;
	for (eLogicalInterfaceRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!LogicalInterfaceRealization))){
		var eLogicalInterfaceRealizationTuple = Tuple{"key"=eLogicalInterfaceRealization.type().name.asString()+"_"+(idLogicalInterfaceRealization++).asString(),"value"= eLogicalInterfaceRealization};
		eObjectSequence.add(eLogicalInterfaceRealizationTuple);
	}
	//deployment.ComponentInstance -> Instantiation
	var idComponentInstance = 0;
	for (eComponentInstance in DSL!EObject.all.select(s|s.isTypeOf(DSL!ComponentInstance))){
		var eComponentInstanceTuple = Tuple{"key"=eComponentInstance.type().name.asString()+"_"+(idComponentInstance++).asString(),"value"= eComponentInstance};
		eObjectSequence.add(eComponentInstanceTuple);
	}
	//deployment.ConnectionInstance -> Instantiation
	var idConnectionInstance = 0;
	for (eConnectionInstance in DSL!EObject.all.select(s|s.isTypeOf(DSL!ConnectionInstance))){
		var eConnectionInstanceTuple = Tuple{"key"=eConnectionInstance.type().name.asString()+"_"+(idConnectionInstance++).asString(),"value"= eConnectionInstance};
		eObjectSequence.add(eConnectionInstanceTuple);
	}
	//deployment.DeploymentAspect -> Instantiation
	var idDeploymentAspect = 0;
	for (eDeploymentAspect in DSL!EObject.all.select(s|s.isTypeOf(DSL!DeploymentAspect))){
		var eDeploymentAspectTuple = Tuple{"key"=eDeploymentAspect.type().name.asString()+"_"+(idDeploymentAspect++).asString(),"value"= eDeploymentAspect};
		eObjectSequence.add(eDeploymentAspectTuple);
	}
	//deployment.DeploymentConfiguration -> Instantiation
	var idDeploymentConfiguration = 0;
	for (eDeploymentConfiguration in DSL!EObject.all.select(s|s.isTypeOf(DSL!DeploymentConfiguration))){
		var eDeploymentConfigurationTuple = Tuple{"key"=eDeploymentConfiguration.type().name.asString()+"_"+(idDeploymentConfiguration++).asString(),"value"= eDeploymentConfiguration};
		eObjectSequence.add(eDeploymentConfigurationTuple);
	}
	//deployment.InstanceDeploymentLink -> Instantiation
	var idInstanceDeploymentLink = 0;
	for (eInstanceDeploymentLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!InstanceDeploymentLink))){
		var eInstanceDeploymentLinkTuple = Tuple{"key"=eInstanceDeploymentLink.type().name.asString()+"_"+(idInstanceDeploymentLink++).asString(),"value"= eInstanceDeploymentLink};
		eObjectSequence.add(eInstanceDeploymentLinkTuple);
	}
	//deployment.PartDeploymentLink -> Instantiation
	var idPartDeploymentLink = 0;
	for (ePartDeploymentLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!PartDeploymentLink))){
		var ePartDeploymentLinkTuple = Tuple{"key"=ePartDeploymentLink.type().name.asString()+"_"+(idPartDeploymentLink++).asString(),"value"= ePartDeploymentLink};
		eObjectSequence.add(ePartDeploymentLinkTuple);
	}
	//deployment.AbstractPhysicalInstance -> Instantiation
	var idAbstractPhysicalInstance = 0;
	for (eAbstractPhysicalInstance in DSL!EObject.all.select(s|s.isTypeOf(DSL!AbstractPhysicalInstance))){
		var eAbstractPhysicalInstanceTuple = Tuple{"key"=eAbstractPhysicalInstance.type().name.asString()+"_"+(idAbstractPhysicalInstance++).asString(),"value"= eAbstractPhysicalInstance};
		eObjectSequence.add(eAbstractPhysicalInstanceTuple);
	}
	//deployment.PortInstance -> Instantiation
	var idPortInstance = 0;
	for (ePortInstance in DSL!EObject.all.select(s|s.isTypeOf(DSL!PortInstance))){
		var ePortInstanceTuple = Tuple{"key"=ePortInstance.type().name.asString()+"_"+(idPortInstance++).asString(),"value"= ePortInstance};
		eObjectSequence.add(ePortInstanceTuple);
	}
	//deployment.TypeDeploymentLink -> Instantiation
	var idTypeDeploymentLink = 0;
	for (eTypeDeploymentLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!TypeDeploymentLink))){
		var eTypeDeploymentLinkTuple = Tuple{"key"=eTypeDeploymentLink.type().name.asString()+"_"+(idTypeDeploymentLink++).asString(),"value"= eTypeDeploymentLink};
		eObjectSequence.add(eTypeDeploymentLinkTuple);
	}
	//epbs.EPBSArchitecturePkg -> Instantiation
	var idEPBSArchitecturePkg = 0;
	for (eEPBSArchitecturePkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!EPBSArchitecturePkg))){
		var eEPBSArchitecturePkgTuple = Tuple{"key"=eEPBSArchitecturePkg.type().name.asString()+"_"+(idEPBSArchitecturePkg++).asString(),"value"= eEPBSArchitecturePkg};
		eObjectSequence.add(eEPBSArchitecturePkgTuple);
	}
	//epbs.EPBSArchitecture -> Instantiation
	var idEPBSArchitecture = 0;
	for (eEPBSArchitecture in DSL!EObject.all.select(s|s.isTypeOf(DSL!EPBSArchitecture))){
		var eEPBSArchitectureTuple = Tuple{"key"=eEPBSArchitecture.type().name.asString()+"_"+(idEPBSArchitecture++).asString(),"value"= eEPBSArchitecture};
		eObjectSequence.add(eEPBSArchitectureTuple);
	}
	//epbs.ConfigurationItemPkg -> Instantiation
	var idConfigurationItemPkg = 0;
	for (eConfigurationItemPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!ConfigurationItemPkg))){
		var eConfigurationItemPkgTuple = Tuple{"key"=eConfigurationItemPkg.type().name.asString()+"_"+(idConfigurationItemPkg++).asString(),"value"= eConfigurationItemPkg};
		eObjectSequence.add(eConfigurationItemPkgTuple);
	}
	//epbs.ConfigurationItem -> Instantiation
	var idConfigurationItem = 0;
	for (eConfigurationItem in DSL!EObject.all.select(s|s.isTypeOf(DSL!ConfigurationItem))){
		var eConfigurationItemTuple = Tuple{"key"=eConfigurationItem.type().name.asString()+"_"+(idConfigurationItem++).asString(),"value"= eConfigurationItem};
		eObjectSequence.add(eConfigurationItemTuple);
	}
	//epbs.PhysicalArchitectureRealization -> Instantiation
	var idPhysicalArchitectureRealization = 0;
	for (ePhysicalArchitectureRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalArchitectureRealization))){
		var ePhysicalArchitectureRealizationTuple = Tuple{"key"=ePhysicalArchitectureRealization.type().name.asString()+"_"+(idPhysicalArchitectureRealization++).asString(),"value"= ePhysicalArchitectureRealization};
		eObjectSequence.add(ePhysicalArchitectureRealizationTuple);
	}
	//epbs.PhysicalArtifactRealization -> Instantiation
	var idPhysicalArtifactRealization = 0;
	for (ePhysicalArtifactRealization in DSL!EObject.all.select(s|s.isTypeOf(DSL!PhysicalArtifactRealization))){
		var ePhysicalArtifactRealizationTuple = Tuple{"key"=ePhysicalArtifactRealization.type().name.asString()+"_"+(idPhysicalArtifactRealization++).asString(),"value"= ePhysicalArtifactRealization};
		eObjectSequence.add(ePhysicalArtifactRealizationTuple);
	}
	//sharedmodel.SharedPkg -> Instantiation
	var idSharedPkg = 0;
	for (eSharedPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!SharedPkg))){
		var eSharedPkgTuple = Tuple{"key"=eSharedPkg.type().name.asString()+"_"+(idSharedPkg++).asString(),"value"= eSharedPkg};
		eObjectSequence.add(eSharedPkgTuple);
	}
	//sharedmodel.GenericPkg -> Instantiation
	var idGenericPkg = 0;
	for (eGenericPkg in DSL!EObject.all.select(s|s.isTypeOf(DSL!GenericPkg))){
		var eGenericPkgTuple = Tuple{"key"=eGenericPkg.type().name.asString()+"_"+(idGenericPkg++).asString(),"value"= eGenericPkg};
		eObjectSequence.add(eGenericPkgTuple);
	}
}

@abstract
rule Base
	transform s : DSL!EObject
	to t : SysMLine!ItemUsage{
	t.declaredName = s.getDeclaredName();
	t.featureNote.add(":");
	t.featureSpecialization.add(s.getfeatureSpecialization());
	if (s.eContainingFeature != null and s.eContainingFeature.name != null){
		t.featureNote.add(":>");
		t.featureSpecialization.add(s.eContainingFeature().name);
	}
}

// capellamodeller.ecore
@lazy
rule Project
	transform s : DSL!Project
	to t : SysMLine!ItemUsage
	extends Base{
	//Project.Project -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Project.Project -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Project.Project -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Project.Project -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Project.Project -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Project.Project -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Project.Project -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Project.Project -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Project.Project -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Project.Project -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Project.Project -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Project.Project -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Project.Project -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Project.Project -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Project.Project -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Project.Project -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Project.Project -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Project.Project -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Project.Project -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Project.Project -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Project.Project -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Project.Project -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Project.Project -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Project.Project -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Project.Project -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//Project.Project -> EReference : keyValuePairs
	if (s.keyValuePairs.getEReference() != null) t.addNewReference("keyValuePairs", s.keyValuePairs.getEReference());
	//Project.Project -> EReference : ownedFolders
	if (s.ownedFolders.getEReference() != null) t.addNewReference("ownedFolders", s.ownedFolders.getEReference());
	//Project.Project -> EReference : ownedModelRoots
	if (s.ownedModelRoots.getEReference() != null) t.addNewReference("ownedModelRoots", s.ownedModelRoots.getEReference());
}

@lazy
rule Folder
	transform s : DSL!Folder
	to t : SysMLine!ItemUsage
	extends Base{
	//Folder.Folder -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Folder.Folder -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Folder.Folder -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Folder.Folder -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Folder.Folder -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Folder.Folder -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Folder.Folder -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Folder.Folder -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Folder.Folder -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Folder.Folder -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Folder.Folder -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Folder.Folder -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Folder.Folder -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Folder.Folder -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Folder.Folder -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Folder.Folder -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Folder.Folder -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Folder.Folder -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Folder.Folder -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Folder.Folder -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Folder.Folder -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Folder.Folder -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Folder.Folder -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Folder.Folder -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Folder.Folder -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//Folder.Folder -> EReference : ownedFolders
	if (s.ownedFolders.getEReference() != null) t.addNewReference("ownedFolders", s.ownedFolders.getEReference());
	//Folder.Folder -> EReference : ownedModelRoots
	if (s.ownedModelRoots.getEReference() != null) t.addNewReference("ownedModelRoots", s.ownedModelRoots.getEReference());
}

@lazy
rule ModelRoot
	transform s : DSL!ModelRoot
	to t : SysMLine!ItemUsage
	extends Base{
	//ModelRoot.ModelRoot -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ModelRoot.ModelRoot -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ModelRoot.ModelRoot -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ModelRoot.ModelRoot -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ModelRoot.ModelRoot -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ModelRoot.ModelRoot -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ModelRoot.ModelRoot -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ModelRoot.ModelRoot -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ModelRoot.ModelRoot -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ModelRoot.ModelRoot -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ModelRoot.ModelRoot -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ModelRoot.ModelRoot -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ModelRoot.ModelRoot -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ModelRoot.ModelRoot -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ModelRoot.ModelRoot -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ModelRoot.ModelRoot -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ModelRoot.ModelRoot -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ModelRoot.ModelRoot -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ModelRoot.ModelRoot -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ModelRoot.ModelRoot -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule SystemEngineering
	transform s : DSL!SystemEngineering
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemEngineering.SystemEngineering -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SystemEngineering.SystemEngineering -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SystemEngineering.SystemEngineering -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//SystemEngineering.SystemEngineering -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SystemEngineering.SystemEngineering -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SystemEngineering.SystemEngineering -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SystemEngineering.SystemEngineering -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SystemEngineering.SystemEngineering -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SystemEngineering.SystemEngineering -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : reuseLinks
	if (s.reuseLinks.getEReference() != null) t.addNewReference("reuseLinks", s.reuseLinks.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : ownedReuseLinks
	if (s.ownedReuseLinks.getEReference() != null) t.addNewReference("ownedReuseLinks", s.ownedReuseLinks.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : ownedArchitectures
	if (s.ownedArchitectures.getEReference() != null) t.addNewReference("ownedArchitectures", s.ownedArchitectures.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : ownedArchitecturePkgs
	if (s.ownedArchitecturePkgs.getEReference() != null) t.addNewReference("ownedArchitecturePkgs", s.ownedArchitecturePkgs.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : containedOperationalAnalysis
	if (s.containedOperationalAnalysis.getEReference() != null) t.addNewReference("containedOperationalAnalysis", s.containedOperationalAnalysis.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : containedSystemAnalysis
	if (s.containedSystemAnalysis.getEReference() != null) t.addNewReference("containedSystemAnalysis", s.containedSystemAnalysis.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : containedLogicalArchitectures
	if (s.containedLogicalArchitectures.getEReference() != null) t.addNewReference("containedLogicalArchitectures", s.containedLogicalArchitectures.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : containedPhysicalArchitectures
	if (s.containedPhysicalArchitectures.getEReference() != null) t.addNewReference("containedPhysicalArchitectures", s.containedPhysicalArchitectures.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : containedEPBSArchitectures
	if (s.containedEPBSArchitectures.getEReference() != null) t.addNewReference("containedEPBSArchitectures", s.containedEPBSArchitectures.getEReference());
	//SystemEngineering.SystemEngineering -> EReference : containedSharedPkgs
	if (s.containedSharedPkgs.getEReference() != null) t.addNewReference("containedSharedPkgs", s.containedSharedPkgs.getEReference());
}

@lazy
rule SystemEngineeringPkg
	transform s : DSL!SystemEngineeringPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemEngineeringPkg.SystemEngineeringPkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//SystemEngineeringPkg.SystemEngineeringPkg -> EReference : ownedSystemEngineerings
	if (s.ownedSystemEngineerings.getEReference() != null) t.addNewReference("ownedSystemEngineerings", s.ownedSystemEngineerings.getEReference());
}

@lazy
rule Library
	transform s : DSL!Library
	to t : SysMLine!ItemUsage
	extends Base{
	//Library.Library -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Library.Library -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Library.Library -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Library.Library -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Library.Library -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Library.Library -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Library.Library -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Library.Library -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Library.Library -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Library.Library -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Library.Library -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Library.Library -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Library.Library -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Library.Library -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Library.Library -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Library.Library -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Library.Library -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Library.Library -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Library.Library -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Library.Library -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Library.Library -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Library.Library -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Library.Library -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Library.Library -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Library.Library -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//Library.Library -> EReference : keyValuePairs
	if (s.keyValuePairs.getEReference() != null) t.addNewReference("keyValuePairs", s.keyValuePairs.getEReference());
	//Library.Library -> EReference : ownedFolders
	if (s.ownedFolders.getEReference() != null) t.addNewReference("ownedFolders", s.ownedFolders.getEReference());
	//Library.Library -> EReference : ownedModelRoots
	if (s.ownedModelRoots.getEReference() != null) t.addNewReference("ownedModelRoots", s.ownedModelRoots.getEReference());
}


// capellacore.ecore
@lazy
rule CapellaElement
	transform s : DSL!CapellaElement
	to t : SysMLine!ItemUsage
	extends Base{
	//CapellaElement.CapellaElement -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CapellaElement.CapellaElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CapellaElement.CapellaElement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CapellaElement.CapellaElement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CapellaElement.CapellaElement -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CapellaElement.CapellaElement -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CapellaElement.CapellaElement -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CapellaElement.CapellaElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CapellaElement.CapellaElement -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CapellaElement.CapellaElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CapellaElement.CapellaElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CapellaElement.CapellaElement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CapellaElement.CapellaElement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CapellaElement.CapellaElement -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CapellaElement.CapellaElement -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CapellaElement.CapellaElement -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CapellaElement.CapellaElement -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CapellaElement.CapellaElement -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CapellaElement.CapellaElement -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CapellaElement.CapellaElement -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule NamedElement
	transform s : DSL!NamedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//NamedElement.NamedElement -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//NamedElement.NamedElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//NamedElement.NamedElement -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//NamedElement.NamedElement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//NamedElement.NamedElement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//NamedElement.NamedElement -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//NamedElement.NamedElement -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//NamedElement.NamedElement -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//NamedElement.NamedElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//NamedElement.NamedElement -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//NamedElement.NamedElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//NamedElement.NamedElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//NamedElement.NamedElement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//NamedElement.NamedElement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//NamedElement.NamedElement -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//NamedElement.NamedElement -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//NamedElement.NamedElement -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//NamedElement.NamedElement -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//NamedElement.NamedElement -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//NamedElement.NamedElement -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//NamedElement.NamedElement -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule Relationship
	transform s : DSL!Relationship
	to t : SysMLine!ItemUsage
	extends Base{
	//Relationship.Relationship -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Relationship.Relationship -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Relationship.Relationship -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Relationship.Relationship -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Relationship.Relationship -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Relationship.Relationship -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Relationship.Relationship -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Relationship.Relationship -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Relationship.Relationship -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Relationship.Relationship -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Relationship.Relationship -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Relationship.Relationship -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//Relationship.Relationship -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Relationship.Relationship -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Relationship.Relationship -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Relationship.Relationship -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Relationship.Relationship -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Relationship.Relationship -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Relationship.Relationship -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Relationship.Relationship -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Relationship.Relationship -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule Namespace
	transform s : DSL!Namespace
	to t : SysMLine!ItemUsage
	extends Base{
	//Namespace.Namespace -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Namespace.Namespace -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Namespace.Namespace -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Namespace.Namespace -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Namespace.Namespace -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Namespace.Namespace -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Namespace.Namespace -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Namespace.Namespace -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Namespace.Namespace -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Namespace.Namespace -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Namespace.Namespace -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Namespace.Namespace -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Namespace.Namespace -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Namespace.Namespace -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Namespace.Namespace -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Namespace.Namespace -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Namespace.Namespace -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Namespace.Namespace -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Namespace.Namespace -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Namespace.Namespace -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Namespace.Namespace -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Namespace.Namespace -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Namespace.Namespace -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Namespace.Namespace -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
}

@lazy
rule NamedRelationship
	transform s : DSL!NamedRelationship
	to t : SysMLine!ItemUsage
	extends Base{
	//NamedRelationship.NamedRelationship -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//NamedRelationship.NamedRelationship -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//NamedRelationship.NamedRelationship -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//NamedRelationship.NamedRelationship -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//NamedRelationship.NamedRelationship -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//NamedRelationship.NamedRelationship -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//NamedRelationship.NamedRelationship -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//NamedRelationship.NamedRelationship -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//NamedRelationship.NamedRelationship -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//NamedRelationship.NamedRelationship -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//NamedRelationship.NamedRelationship -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//NamedRelationship.NamedRelationship -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//NamedRelationship.NamedRelationship -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//NamedRelationship.NamedRelationship -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//NamedRelationship.NamedRelationship -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//NamedRelationship.NamedRelationship -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//NamedRelationship.NamedRelationship -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//NamedRelationship.NamedRelationship -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//NamedRelationship.NamedRelationship -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//NamedRelationship.NamedRelationship -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//NamedRelationship.NamedRelationship -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//NamedRelationship.NamedRelationship -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//NamedRelationship.NamedRelationship -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
}

@lazy
rule Structure
	transform s : DSL!Structure
	to t : SysMLine!ItemUsage
	extends Base{
	//Structure.Structure -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Structure.Structure -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Structure.Structure -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Structure.Structure -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Structure.Structure -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Structure.Structure -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Structure.Structure -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Structure.Structure -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Structure.Structure -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Structure.Structure -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Structure.Structure -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Structure.Structure -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Structure.Structure -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Structure.Structure -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Structure.Structure -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Structure.Structure -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Structure.Structure -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Structure.Structure -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Structure.Structure -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Structure.Structure -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Structure.Structure -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Structure.Structure -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Structure.Structure -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Structure.Structure -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Structure.Structure -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
}

@lazy
rule AbstractModellingStructure
	transform s : DSL!AbstractModellingStructure
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractModellingStructure.AbstractModellingStructure -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractModellingStructure.AbstractModellingStructure -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractModellingStructure.AbstractModellingStructure -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractModellingStructure.AbstractModellingStructure -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractModellingStructure.AbstractModellingStructure -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractModellingStructure.AbstractModellingStructure -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractModellingStructure.AbstractModellingStructure -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractModellingStructure.AbstractModellingStructure -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractModellingStructure.AbstractModellingStructure -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractModellingStructure.AbstractModellingStructure -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractModellingStructure.AbstractModellingStructure -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractModellingStructure.AbstractModellingStructure -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractModellingStructure.AbstractModellingStructure -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractModellingStructure.AbstractModellingStructure -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractModellingStructure.AbstractModellingStructure -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractModellingStructure.AbstractModellingStructure -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractModellingStructure.AbstractModellingStructure -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractModellingStructure.AbstractModellingStructure -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractModellingStructure.AbstractModellingStructure -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractModellingStructure.AbstractModellingStructure -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractModellingStructure.AbstractModellingStructure -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractModellingStructure.AbstractModellingStructure -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//AbstractModellingStructure.AbstractModellingStructure -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//AbstractModellingStructure.AbstractModellingStructure -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//AbstractModellingStructure.AbstractModellingStructure -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//AbstractModellingStructure.AbstractModellingStructure -> EReference : reuseLinks
	if (s.reuseLinks.getEReference() != null) t.addNewReference("reuseLinks", s.reuseLinks.getEReference());
	//AbstractModellingStructure.AbstractModellingStructure -> EReference : ownedReuseLinks
	if (s.ownedReuseLinks.getEReference() != null) t.addNewReference("ownedReuseLinks", s.ownedReuseLinks.getEReference());
	//AbstractModellingStructure.AbstractModellingStructure -> EReference : ownedArchitectures
	if (s.ownedArchitectures.getEReference() != null) t.addNewReference("ownedArchitectures", s.ownedArchitectures.getEReference());
	//AbstractModellingStructure.AbstractModellingStructure -> EReference : ownedArchitecturePkgs
	if (s.ownedArchitecturePkgs.getEReference() != null) t.addNewReference("ownedArchitecturePkgs", s.ownedArchitecturePkgs.getEReference());
}

@lazy
rule ModellingBlock
	transform s : DSL!ModellingBlock
	to t : SysMLine!ItemUsage
	extends Base{
	//ModellingBlock.ModellingBlock -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ModellingBlock.ModellingBlock -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ModellingBlock.ModellingBlock -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ModellingBlock.ModellingBlock -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ModellingBlock.ModellingBlock -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ModellingBlock.ModellingBlock -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ModellingBlock.ModellingBlock -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ModellingBlock.ModellingBlock -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ModellingBlock.ModellingBlock -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ModellingBlock.ModellingBlock -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ModellingBlock.ModellingBlock -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ModellingBlock.ModellingBlock -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ModellingBlock.ModellingBlock -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//ModellingBlock.ModellingBlock -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ModellingBlock.ModellingBlock -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ModellingBlock.ModellingBlock -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ModellingBlock.ModellingBlock -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ModellingBlock.ModellingBlock -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ModellingBlock.ModellingBlock -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ModellingBlock.ModellingBlock -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ModellingBlock.ModellingBlock -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ModellingBlock.ModellingBlock -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ModellingBlock.ModellingBlock -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//ModellingBlock.ModellingBlock -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//ModellingBlock.ModellingBlock -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//ModellingBlock.ModellingBlock -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
}

@lazy
rule ModellingArchitecture
	transform s : DSL!ModellingArchitecture
	to t : SysMLine!ItemUsage
	extends Base{
	//ModellingArchitecture.ModellingArchitecture -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ModellingArchitecture.ModellingArchitecture -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ModellingArchitecture.ModellingArchitecture -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ModellingArchitecture.ModellingArchitecture -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ModellingArchitecture.ModellingArchitecture -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ModellingArchitecture.ModellingArchitecture -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ModellingArchitecture.ModellingArchitecture -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ModellingArchitecture.ModellingArchitecture -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ModellingArchitecture.ModellingArchitecture -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ModellingArchitecture.ModellingArchitecture -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ModellingArchitecture.ModellingArchitecture -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ModellingArchitecture.ModellingArchitecture -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ModellingArchitecture.ModellingArchitecture -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ModellingArchitecture.ModellingArchitecture -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ModellingArchitecture.ModellingArchitecture -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ModellingArchitecture.ModellingArchitecture -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ModellingArchitecture.ModellingArchitecture -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ModellingArchitecture.ModellingArchitecture -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ModellingArchitecture.ModellingArchitecture -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ModellingArchitecture.ModellingArchitecture -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ModellingArchitecture.ModellingArchitecture -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ModellingArchitecture.ModellingArchitecture -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//ModellingArchitecture.ModellingArchitecture -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//ModellingArchitecture.ModellingArchitecture -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//ModellingArchitecture.ModellingArchitecture -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
}

@lazy
rule ModellingArchitecturePkg
	transform s : DSL!ModellingArchitecturePkg
	to t : SysMLine!ItemUsage
	extends Base{
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//ModellingArchitecturePkg.ModellingArchitecturePkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
}

@lazy
rule Type
	transform s : DSL!Type
	to t : SysMLine!ItemUsage
	extends Base{
	//Type.Type -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Type.Type -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Type.Type -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Type.Type -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Type.Type -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Type.Type -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Type.Type -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Type.Type -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Type.Type -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Type.Type -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Type.Type -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Type.Type -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Type.Type -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//Type.Type -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Type.Type -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Type.Type -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Type.Type -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Type.Type -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Type.Type -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Type.Type -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Type.Type -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Type.Type -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Type.Type -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Type.Type -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Type.Type -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Type.Type -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
}

@lazy
rule TypedElement
	transform s : DSL!TypedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//TypedElement.TypedElement -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//TypedElement.TypedElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//TypedElement.TypedElement -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//TypedElement.TypedElement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//TypedElement.TypedElement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//TypedElement.TypedElement -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//TypedElement.TypedElement -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//TypedElement.TypedElement -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//TypedElement.TypedElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//TypedElement.TypedElement -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//TypedElement.TypedElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//TypedElement.TypedElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//TypedElement.TypedElement -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//TypedElement.TypedElement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//TypedElement.TypedElement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//TypedElement.TypedElement -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//TypedElement.TypedElement -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//TypedElement.TypedElement -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//TypedElement.TypedElement -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//TypedElement.TypedElement -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//TypedElement.TypedElement -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//TypedElement.TypedElement -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//TypedElement.TypedElement -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
}

@lazy
rule Trace
	transform s : DSL!Trace
	to t : SysMLine!ItemUsage
	extends Base{
	//Trace.Trace -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Trace.Trace -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Trace.Trace -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Trace.Trace -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Trace.Trace -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Trace.Trace -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Trace.Trace -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Trace.Trace -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Trace.Trace -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Trace.Trace -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Trace.Trace -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Trace.Trace -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//Trace.Trace -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Trace.Trace -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Trace.Trace -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Trace.Trace -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Trace.Trace -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Trace.Trace -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Trace.Trace -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Trace.Trace -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Trace.Trace -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Trace.Trace -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//Trace.Trace -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
}

@lazy
rule AbstractAnnotation
	transform s : DSL!AbstractAnnotation
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractAnnotation.AbstractAnnotation -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractAnnotation.AbstractAnnotation -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractAnnotation.AbstractAnnotation -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractAnnotation.AbstractAnnotation -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractAnnotation.AbstractAnnotation -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractAnnotation.AbstractAnnotation -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractAnnotation.AbstractAnnotation -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractAnnotation.AbstractAnnotation -> EAttribute : content
	if (s.content.getEAttribute() != null) t.addNewAttribute("content", s.content.getEAttribute());
	//AbstractAnnotation.AbstractAnnotation -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractAnnotation.AbstractAnnotation -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractAnnotation.AbstractAnnotation -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractAnnotation.AbstractAnnotation -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractAnnotation.AbstractAnnotation -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractAnnotation.AbstractAnnotation -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractAnnotation.AbstractAnnotation -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractAnnotation.AbstractAnnotation -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractAnnotation.AbstractAnnotation -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractAnnotation.AbstractAnnotation -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractAnnotation.AbstractAnnotation -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractAnnotation.AbstractAnnotation -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractAnnotation.AbstractAnnotation -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule NamingRule
	transform s : DSL!NamingRule
	to t : SysMLine!ItemUsage
	extends Base{
	//NamingRule.NamingRule -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//NamingRule.NamingRule -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//NamingRule.NamingRule -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//NamingRule.NamingRule -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//NamingRule.NamingRule -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//NamingRule.NamingRule -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//NamingRule.NamingRule -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//NamingRule.NamingRule -> EAttribute : content
	if (s.content.getEAttribute() != null) t.addNewAttribute("content", s.content.getEAttribute());
	//NamingRule.NamingRule -> EAttribute : targetType
	if (s.targetType.getEAttribute() != null) t.addNewAttribute("targetType", s.targetType.getEAttribute());
	//NamingRule.NamingRule -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//NamingRule.NamingRule -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//NamingRule.NamingRule -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//NamingRule.NamingRule -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//NamingRule.NamingRule -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//NamingRule.NamingRule -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//NamingRule.NamingRule -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//NamingRule.NamingRule -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//NamingRule.NamingRule -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//NamingRule.NamingRule -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//NamingRule.NamingRule -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//NamingRule.NamingRule -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//NamingRule.NamingRule -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule Constraint
	transform s : DSL!Constraint
	to t : SysMLine!ItemUsage
	extends Base{
	//Constraint.Constraint -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Constraint.Constraint -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Constraint.Constraint -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Constraint.Constraint -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Constraint.Constraint -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Constraint.Constraint -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Constraint.Constraint -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Constraint.Constraint -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Constraint.Constraint -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Constraint.Constraint -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Constraint.Constraint -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Constraint.Constraint -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Constraint.Constraint -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Constraint.Constraint -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Constraint.Constraint -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Constraint.Constraint -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Constraint.Constraint -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Constraint.Constraint -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Constraint.Constraint -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Constraint.Constraint -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Constraint.Constraint -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Constraint.Constraint -> EReference : constrainedElements
	if (s.constrainedElements.getEReference() != null) t.addNewReference("constrainedElements", s.constrainedElements.getEReference());
	//Constraint.Constraint -> EReference : ownedSpecification
	if (s.ownedSpecification.getEReference() != null) t.addNewReference("ownedSpecification", s.ownedSpecification.getEReference());
	//Constraint.Constraint -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context", s.context.getEReference());
}

@lazy
rule KeyValue
	transform s : DSL!KeyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//KeyValue.KeyValue -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//KeyValue.KeyValue -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//KeyValue.KeyValue -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//KeyValue.KeyValue -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//KeyValue.KeyValue -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//KeyValue.KeyValue -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//KeyValue.KeyValue -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//KeyValue.KeyValue -> EAttribute : key
	if (s.key.getEAttribute() != null) t.addNewAttribute("key", s.key.getEAttribute());
	//KeyValue.KeyValue -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value", s.value.getEAttribute());
	//KeyValue.KeyValue -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//KeyValue.KeyValue -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//KeyValue.KeyValue -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//KeyValue.KeyValue -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//KeyValue.KeyValue -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//KeyValue.KeyValue -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//KeyValue.KeyValue -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//KeyValue.KeyValue -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//KeyValue.KeyValue -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//KeyValue.KeyValue -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//KeyValue.KeyValue -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//KeyValue.KeyValue -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//KeyValue.KeyValue -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule ReuseLink
	transform s : DSL!ReuseLink
	to t : SysMLine!ItemUsage
	extends Base{
	//ReuseLink.ReuseLink -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ReuseLink.ReuseLink -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ReuseLink.ReuseLink -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ReuseLink.ReuseLink -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ReuseLink.ReuseLink -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ReuseLink.ReuseLink -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ReuseLink.ReuseLink -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ReuseLink.ReuseLink -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ReuseLink.ReuseLink -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ReuseLink.ReuseLink -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ReuseLink.ReuseLink -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ReuseLink.ReuseLink -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ReuseLink.ReuseLink -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ReuseLink.ReuseLink -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ReuseLink.ReuseLink -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ReuseLink.ReuseLink -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ReuseLink.ReuseLink -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ReuseLink.ReuseLink -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ReuseLink.ReuseLink -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ReuseLink.ReuseLink -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ReuseLink.ReuseLink -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ReuseLink.ReuseLink -> EReference : reused
	if (s.reused.getEReference() != null) t.addNewReference("reused", s.reused.getEReference());
	//ReuseLink.ReuseLink -> EReference : reuser
	if (s.reuser.getEReference() != null) t.addNewReference("reuser", s.reuser.getEReference());
}

@lazy
rule ReuseableStructure
	transform s : DSL!ReuseableStructure
	to t : SysMLine!ItemUsage
	extends Base{
	//ReuseableStructure.ReuseableStructure -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ReuseableStructure.ReuseableStructure -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ReuseableStructure.ReuseableStructure -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ReuseableStructure.ReuseableStructure -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ReuseableStructure.ReuseableStructure -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ReuseableStructure.ReuseableStructure -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ReuseableStructure.ReuseableStructure -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ReuseableStructure.ReuseableStructure -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ReuseableStructure.ReuseableStructure -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ReuseableStructure.ReuseableStructure -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ReuseableStructure.ReuseableStructure -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ReuseableStructure.ReuseableStructure -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ReuseableStructure.ReuseableStructure -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ReuseableStructure.ReuseableStructure -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ReuseableStructure.ReuseableStructure -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ReuseableStructure.ReuseableStructure -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ReuseableStructure.ReuseableStructure -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ReuseableStructure.ReuseableStructure -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ReuseableStructure.ReuseableStructure -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ReuseableStructure.ReuseableStructure -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ReuseableStructure.ReuseableStructure -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ReuseableStructure.ReuseableStructure -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//ReuseableStructure.ReuseableStructure -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//ReuseableStructure.ReuseableStructure -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//ReuseableStructure.ReuseableStructure -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//ReuseableStructure.ReuseableStructure -> EReference : reuseLinks
	if (s.reuseLinks.getEReference() != null) t.addNewReference("reuseLinks", s.reuseLinks.getEReference());
}

@lazy
rule ReuserStructure
	transform s : DSL!ReuserStructure
	to t : SysMLine!ItemUsage
	extends Base{
	//ReuserStructure.ReuserStructure -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ReuserStructure.ReuserStructure -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ReuserStructure.ReuserStructure -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ReuserStructure.ReuserStructure -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ReuserStructure.ReuserStructure -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ReuserStructure.ReuserStructure -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ReuserStructure.ReuserStructure -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ReuserStructure.ReuserStructure -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ReuserStructure.ReuserStructure -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ReuserStructure.ReuserStructure -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ReuserStructure.ReuserStructure -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ReuserStructure.ReuserStructure -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ReuserStructure.ReuserStructure -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ReuserStructure.ReuserStructure -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ReuserStructure.ReuserStructure -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ReuserStructure.ReuserStructure -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ReuserStructure.ReuserStructure -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ReuserStructure.ReuserStructure -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ReuserStructure.ReuserStructure -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ReuserStructure.ReuserStructure -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ReuserStructure.ReuserStructure -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ReuserStructure.ReuserStructure -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//ReuserStructure.ReuserStructure -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//ReuserStructure.ReuserStructure -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//ReuserStructure.ReuserStructure -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//ReuserStructure.ReuserStructure -> EReference : reuseLinks
	if (s.reuseLinks.getEReference() != null) t.addNewReference("reuseLinks", s.reuseLinks.getEReference());
	//ReuserStructure.ReuserStructure -> EReference : ownedReuseLinks
	if (s.ownedReuseLinks.getEReference() != null) t.addNewReference("ownedReuseLinks", s.ownedReuseLinks.getEReference());
}

@lazy
rule GeneralizableElement
	transform s : DSL!GeneralizableElement
	to t : SysMLine!ItemUsage
	extends Base{
	//GeneralizableElement.GeneralizableElement -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//GeneralizableElement.GeneralizableElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//GeneralizableElement.GeneralizableElement -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//GeneralizableElement.GeneralizableElement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//GeneralizableElement.GeneralizableElement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//GeneralizableElement.GeneralizableElement -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//GeneralizableElement.GeneralizableElement -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//GeneralizableElement.GeneralizableElement -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//GeneralizableElement.GeneralizableElement -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//GeneralizableElement.GeneralizableElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//GeneralizableElement.GeneralizableElement -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
}

@lazy
rule Classifier
	transform s : DSL!Classifier
	to t : SysMLine!ItemUsage
	extends Base{
	//Classifier.Classifier -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Classifier.Classifier -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Classifier.Classifier -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Classifier.Classifier -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Classifier.Classifier -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Classifier.Classifier -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Classifier.Classifier -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Classifier.Classifier -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Classifier.Classifier -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//Classifier.Classifier -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Classifier.Classifier -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Classifier.Classifier -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Classifier.Classifier -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Classifier.Classifier -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//Classifier.Classifier -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Classifier.Classifier -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Classifier.Classifier -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Classifier.Classifier -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Classifier.Classifier -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Classifier.Classifier -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Classifier.Classifier -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Classifier.Classifier -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Classifier.Classifier -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Classifier.Classifier -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Classifier.Classifier -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Classifier.Classifier -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Classifier.Classifier -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//Classifier.Classifier -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//Classifier.Classifier -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//Classifier.Classifier -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//Classifier.Classifier -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//Classifier.Classifier -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//Classifier.Classifier -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//Classifier.Classifier -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
}

@lazy
rule GeneralClass
	transform s : DSL!GeneralClass
	to t : SysMLine!ItemUsage
	extends Base{
	//GeneralClass.GeneralClass -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//GeneralClass.GeneralClass -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//GeneralClass.GeneralClass -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//GeneralClass.GeneralClass -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//GeneralClass.GeneralClass -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//GeneralClass.GeneralClass -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//GeneralClass.GeneralClass -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//GeneralClass.GeneralClass -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//GeneralClass.GeneralClass -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//GeneralClass.GeneralClass -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//GeneralClass.GeneralClass -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//GeneralClass.GeneralClass -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//GeneralClass.GeneralClass -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//GeneralClass.GeneralClass -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//GeneralClass.GeneralClass -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//GeneralClass.GeneralClass -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//GeneralClass.GeneralClass -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//GeneralClass.GeneralClass -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//GeneralClass.GeneralClass -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//GeneralClass.GeneralClass -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//GeneralClass.GeneralClass -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//GeneralClass.GeneralClass -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//GeneralClass.GeneralClass -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//GeneralClass.GeneralClass -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//GeneralClass.GeneralClass -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//GeneralClass.GeneralClass -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//GeneralClass.GeneralClass -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//GeneralClass.GeneralClass -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//GeneralClass.GeneralClass -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//GeneralClass.GeneralClass -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//GeneralClass.GeneralClass -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//GeneralClass.GeneralClass -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//GeneralClass.GeneralClass -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//GeneralClass.GeneralClass -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//GeneralClass.GeneralClass -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//GeneralClass.GeneralClass -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//GeneralClass.GeneralClass -> EReference : containedOperations
	if (s.containedOperations.getEReference() != null) t.addNewReference("containedOperations", s.containedOperations.getEReference());
	//GeneralClass.GeneralClass -> EReference : nestedGeneralClasses
	if (s.nestedGeneralClasses.getEReference() != null) t.addNewReference("nestedGeneralClasses", s.nestedGeneralClasses.getEReference());
}

@lazy
rule Generalization
	transform s : DSL!Generalization
	to t : SysMLine!ItemUsage
	extends Base{
	//Generalization.Generalization -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Generalization.Generalization -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Generalization.Generalization -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Generalization.Generalization -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Generalization.Generalization -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Generalization.Generalization -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Generalization.Generalization -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Generalization.Generalization -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Generalization.Generalization -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Generalization.Generalization -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Generalization.Generalization -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Generalization.Generalization -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//Generalization.Generalization -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Generalization.Generalization -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Generalization.Generalization -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Generalization.Generalization -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Generalization.Generalization -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Generalization.Generalization -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Generalization.Generalization -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Generalization.Generalization -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Generalization.Generalization -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Generalization.Generalization -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//Generalization.Generalization -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
}

@lazy
rule Feature
	transform s : DSL!Feature
	to t : SysMLine!ItemUsage
	extends Base{
	//Feature.Feature -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Feature.Feature -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Feature.Feature -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Feature.Feature -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Feature.Feature -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Feature.Feature -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Feature.Feature -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Feature.Feature -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Feature.Feature -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Feature.Feature -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//Feature.Feature -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//Feature.Feature -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Feature.Feature -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Feature.Feature -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Feature.Feature -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Feature.Feature -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Feature.Feature -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Feature.Feature -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Feature.Feature -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Feature.Feature -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Feature.Feature -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Feature.Feature -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Feature.Feature -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Feature.Feature -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule AbstractExchangeItemPkg
	transform s : DSL!AbstractExchangeItemPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//AbstractExchangeItemPkg.AbstractExchangeItemPkg -> EReference : ownedExchangeItems
	if (s.ownedExchangeItems.getEReference() != null) t.addNewReference("ownedExchangeItems", s.ownedExchangeItems.getEReference());
}

@lazy
rule Allocation
	transform s : DSL!Allocation
	to t : SysMLine!ItemUsage
	extends Base{
	//Allocation.Allocation -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Allocation.Allocation -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Allocation.Allocation -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Allocation.Allocation -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Allocation.Allocation -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Allocation.Allocation -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Allocation.Allocation -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Allocation.Allocation -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Allocation.Allocation -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Allocation.Allocation -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Allocation.Allocation -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Allocation.Allocation -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//Allocation.Allocation -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Allocation.Allocation -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Allocation.Allocation -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Allocation.Allocation -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Allocation.Allocation -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Allocation.Allocation -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Allocation.Allocation -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Allocation.Allocation -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Allocation.Allocation -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Allocation.Allocation -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//Allocation.Allocation -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
}

@lazy
rule Involvement
	transform s : DSL!Involvement
	to t : SysMLine!ItemUsage
	extends Base{
	//Involvement.Involvement -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Involvement.Involvement -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Involvement.Involvement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Involvement.Involvement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Involvement.Involvement -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Involvement.Involvement -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Involvement.Involvement -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Involvement.Involvement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Involvement.Involvement -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Involvement.Involvement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Involvement.Involvement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Involvement.Involvement -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//Involvement.Involvement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Involvement.Involvement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Involvement.Involvement -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Involvement.Involvement -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Involvement.Involvement -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Involvement.Involvement -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Involvement.Involvement -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Involvement.Involvement -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Involvement.Involvement -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Involvement.Involvement -> EReference : involver
	if (s.involver.getEReference() != null) t.addNewReference("involver", s.involver.getEReference());
	//Involvement.Involvement -> EReference : involved
	if (s.involved.getEReference() != null) t.addNewReference("involved", s.involved.getEReference());
}

@lazy
rule InvolverElement
	transform s : DSL!InvolverElement
	to t : SysMLine!ItemUsage
	extends Base{
	//InvolverElement.InvolverElement -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InvolverElement.InvolverElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InvolverElement.InvolverElement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//InvolverElement.InvolverElement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//InvolverElement.InvolverElement -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//InvolverElement.InvolverElement -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//InvolverElement.InvolverElement -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//InvolverElement.InvolverElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InvolverElement.InvolverElement -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InvolverElement.InvolverElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InvolverElement.InvolverElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InvolverElement.InvolverElement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//InvolverElement.InvolverElement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//InvolverElement.InvolverElement -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//InvolverElement.InvolverElement -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//InvolverElement.InvolverElement -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//InvolverElement.InvolverElement -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//InvolverElement.InvolverElement -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//InvolverElement.InvolverElement -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//InvolverElement.InvolverElement -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//InvolverElement.InvolverElement -> EReference : involvedInvolvements
	if (s.involvedInvolvements.getEReference() != null) t.addNewReference("involvedInvolvements", s.involvedInvolvements.getEReference());
}

@lazy
rule InvolvedElement
	transform s : DSL!InvolvedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//InvolvedElement.InvolvedElement -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InvolvedElement.InvolvedElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InvolvedElement.InvolvedElement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//InvolvedElement.InvolvedElement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//InvolvedElement.InvolvedElement -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//InvolvedElement.InvolvedElement -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//InvolvedElement.InvolvedElement -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//InvolvedElement.InvolvedElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InvolvedElement.InvolvedElement -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InvolvedElement.InvolvedElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InvolvedElement.InvolvedElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InvolvedElement.InvolvedElement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//InvolvedElement.InvolvedElement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//InvolvedElement.InvolvedElement -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//InvolvedElement.InvolvedElement -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//InvolvedElement.InvolvedElement -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//InvolvedElement.InvolvedElement -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//InvolvedElement.InvolvedElement -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//InvolvedElement.InvolvedElement -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//InvolvedElement.InvolvedElement -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//InvolvedElement.InvolvedElement -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
}

@lazy
rule AbstractPropertyValue
	transform s : DSL!AbstractPropertyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractPropertyValue.AbstractPropertyValue -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractPropertyValue.AbstractPropertyValue -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractPropertyValue.AbstractPropertyValue -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractPropertyValue.AbstractPropertyValue -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractPropertyValue.AbstractPropertyValue -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractPropertyValue.AbstractPropertyValue -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractPropertyValue.AbstractPropertyValue -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractPropertyValue.AbstractPropertyValue -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractPropertyValue.AbstractPropertyValue -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractPropertyValue.AbstractPropertyValue -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractPropertyValue.AbstractPropertyValue -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractPropertyValue.AbstractPropertyValue -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractPropertyValue.AbstractPropertyValue -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractPropertyValue.AbstractPropertyValue -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractPropertyValue.AbstractPropertyValue -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractPropertyValue.AbstractPropertyValue -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractPropertyValue.AbstractPropertyValue -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractPropertyValue.AbstractPropertyValue -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractPropertyValue.AbstractPropertyValue -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractPropertyValue.AbstractPropertyValue -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractPropertyValue.AbstractPropertyValue -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractPropertyValue.AbstractPropertyValue -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null) t.addNewReference("involvedElements", s.involvedElements.getEReference());
	//AbstractPropertyValue.AbstractPropertyValue -> EReference : valuedElements
	if (s.valuedElements.getEReference() != null) t.addNewReference("valuedElements", s.valuedElements.getEReference());
}

@lazy
rule StringPropertyValue
	transform s : DSL!StringPropertyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//StringPropertyValue.StringPropertyValue -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//StringPropertyValue.StringPropertyValue -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//StringPropertyValue.StringPropertyValue -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//StringPropertyValue.StringPropertyValue -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//StringPropertyValue.StringPropertyValue -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//StringPropertyValue.StringPropertyValue -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//StringPropertyValue.StringPropertyValue -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//StringPropertyValue.StringPropertyValue -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//StringPropertyValue.StringPropertyValue -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value", s.value.getEAttribute());
	//StringPropertyValue.StringPropertyValue -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//StringPropertyValue.StringPropertyValue -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//StringPropertyValue.StringPropertyValue -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//StringPropertyValue.StringPropertyValue -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//StringPropertyValue.StringPropertyValue -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//StringPropertyValue.StringPropertyValue -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//StringPropertyValue.StringPropertyValue -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//StringPropertyValue.StringPropertyValue -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//StringPropertyValue.StringPropertyValue -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//StringPropertyValue.StringPropertyValue -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//StringPropertyValue.StringPropertyValue -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//StringPropertyValue.StringPropertyValue -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//StringPropertyValue.StringPropertyValue -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//StringPropertyValue.StringPropertyValue -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null) t.addNewReference("involvedElements", s.involvedElements.getEReference());
	//StringPropertyValue.StringPropertyValue -> EReference : valuedElements
	if (s.valuedElements.getEReference() != null) t.addNewReference("valuedElements", s.valuedElements.getEReference());
}

@lazy
rule IntegerPropertyValue
	transform s : DSL!IntegerPropertyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//IntegerPropertyValue.IntegerPropertyValue -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//IntegerPropertyValue.IntegerPropertyValue -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//IntegerPropertyValue.IntegerPropertyValue -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//IntegerPropertyValue.IntegerPropertyValue -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//IntegerPropertyValue.IntegerPropertyValue -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//IntegerPropertyValue.IntegerPropertyValue -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//IntegerPropertyValue.IntegerPropertyValue -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//IntegerPropertyValue.IntegerPropertyValue -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//IntegerPropertyValue.IntegerPropertyValue -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value", s.value.getEAttribute());
	//IntegerPropertyValue.IntegerPropertyValue -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//IntegerPropertyValue.IntegerPropertyValue -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//IntegerPropertyValue.IntegerPropertyValue -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//IntegerPropertyValue.IntegerPropertyValue -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//IntegerPropertyValue.IntegerPropertyValue -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//IntegerPropertyValue.IntegerPropertyValue -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//IntegerPropertyValue.IntegerPropertyValue -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//IntegerPropertyValue.IntegerPropertyValue -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//IntegerPropertyValue.IntegerPropertyValue -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//IntegerPropertyValue.IntegerPropertyValue -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//IntegerPropertyValue.IntegerPropertyValue -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//IntegerPropertyValue.IntegerPropertyValue -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//IntegerPropertyValue.IntegerPropertyValue -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//IntegerPropertyValue.IntegerPropertyValue -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null) t.addNewReference("involvedElements", s.involvedElements.getEReference());
	//IntegerPropertyValue.IntegerPropertyValue -> EReference : valuedElements
	if (s.valuedElements.getEReference() != null) t.addNewReference("valuedElements", s.valuedElements.getEReference());
}

@lazy
rule BooleanPropertyValue
	transform s : DSL!BooleanPropertyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//BooleanPropertyValue.BooleanPropertyValue -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//BooleanPropertyValue.BooleanPropertyValue -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//BooleanPropertyValue.BooleanPropertyValue -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//BooleanPropertyValue.BooleanPropertyValue -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//BooleanPropertyValue.BooleanPropertyValue -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//BooleanPropertyValue.BooleanPropertyValue -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//BooleanPropertyValue.BooleanPropertyValue -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//BooleanPropertyValue.BooleanPropertyValue -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//BooleanPropertyValue.BooleanPropertyValue -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value", s.value.getEAttribute());
	//BooleanPropertyValue.BooleanPropertyValue -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//BooleanPropertyValue.BooleanPropertyValue -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//BooleanPropertyValue.BooleanPropertyValue -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//BooleanPropertyValue.BooleanPropertyValue -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//BooleanPropertyValue.BooleanPropertyValue -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//BooleanPropertyValue.BooleanPropertyValue -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//BooleanPropertyValue.BooleanPropertyValue -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//BooleanPropertyValue.BooleanPropertyValue -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//BooleanPropertyValue.BooleanPropertyValue -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//BooleanPropertyValue.BooleanPropertyValue -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//BooleanPropertyValue.BooleanPropertyValue -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//BooleanPropertyValue.BooleanPropertyValue -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//BooleanPropertyValue.BooleanPropertyValue -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//BooleanPropertyValue.BooleanPropertyValue -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null) t.addNewReference("involvedElements", s.involvedElements.getEReference());
	//BooleanPropertyValue.BooleanPropertyValue -> EReference : valuedElements
	if (s.valuedElements.getEReference() != null) t.addNewReference("valuedElements", s.valuedElements.getEReference());
}

@lazy
rule FloatPropertyValue
	transform s : DSL!FloatPropertyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//FloatPropertyValue.FloatPropertyValue -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FloatPropertyValue.FloatPropertyValue -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FloatPropertyValue.FloatPropertyValue -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//FloatPropertyValue.FloatPropertyValue -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//FloatPropertyValue.FloatPropertyValue -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//FloatPropertyValue.FloatPropertyValue -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//FloatPropertyValue.FloatPropertyValue -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//FloatPropertyValue.FloatPropertyValue -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//FloatPropertyValue.FloatPropertyValue -> EAttribute : value
	if (s.value.getEAttribute() != null) t.addNewAttribute("value", s.value.getEAttribute());
	//FloatPropertyValue.FloatPropertyValue -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FloatPropertyValue.FloatPropertyValue -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FloatPropertyValue.FloatPropertyValue -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FloatPropertyValue.FloatPropertyValue -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//FloatPropertyValue.FloatPropertyValue -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//FloatPropertyValue.FloatPropertyValue -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//FloatPropertyValue.FloatPropertyValue -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//FloatPropertyValue.FloatPropertyValue -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//FloatPropertyValue.FloatPropertyValue -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//FloatPropertyValue.FloatPropertyValue -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//FloatPropertyValue.FloatPropertyValue -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//FloatPropertyValue.FloatPropertyValue -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//FloatPropertyValue.FloatPropertyValue -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//FloatPropertyValue.FloatPropertyValue -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null) t.addNewReference("involvedElements", s.involvedElements.getEReference());
	//FloatPropertyValue.FloatPropertyValue -> EReference : valuedElements
	if (s.valuedElements.getEReference() != null) t.addNewReference("valuedElements", s.valuedElements.getEReference());
}

@lazy
rule EnumerationPropertyValue
	transform s : DSL!EnumerationPropertyValue
	to t : SysMLine!ItemUsage
	extends Base{
	//EnumerationPropertyValue.EnumerationPropertyValue -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null) t.addNewReference("involvedElements", s.involvedElements.getEReference());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EReference : valuedElements
	if (s.valuedElements.getEReference() != null) t.addNewReference("valuedElements", s.valuedElements.getEReference());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//EnumerationPropertyValue.EnumerationPropertyValue -> EReference : value
	if (s.value.getEReference() != null) t.addNewReference("value", s.value.getEReference());
}

@lazy
rule EnumerationPropertyType
	transform s : DSL!EnumerationPropertyType
	to t : SysMLine!ItemUsage
	extends Base{
	//EnumerationPropertyType.EnumerationPropertyType -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//EnumerationPropertyType.EnumerationPropertyType -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//EnumerationPropertyType.EnumerationPropertyType -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//EnumerationPropertyType.EnumerationPropertyType -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//EnumerationPropertyType.EnumerationPropertyType -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//EnumerationPropertyType.EnumerationPropertyType -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//EnumerationPropertyType.EnumerationPropertyType -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//EnumerationPropertyType.EnumerationPropertyType -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//EnumerationPropertyType.EnumerationPropertyType -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//EnumerationPropertyType.EnumerationPropertyType -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//EnumerationPropertyType.EnumerationPropertyType -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//EnumerationPropertyType.EnumerationPropertyType -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//EnumerationPropertyType.EnumerationPropertyType -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//EnumerationPropertyType.EnumerationPropertyType -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//EnumerationPropertyType.EnumerationPropertyType -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//EnumerationPropertyType.EnumerationPropertyType -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//EnumerationPropertyType.EnumerationPropertyType -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//EnumerationPropertyType.EnumerationPropertyType -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//EnumerationPropertyType.EnumerationPropertyType -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//EnumerationPropertyType.EnumerationPropertyType -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//EnumerationPropertyType.EnumerationPropertyType -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//EnumerationPropertyType.EnumerationPropertyType -> EReference : ownedLiterals
	if (s.ownedLiterals.getEReference() != null) t.addNewReference("ownedLiterals", s.ownedLiterals.getEReference());
}

@lazy
rule EnumerationPropertyLiteral
	transform s : DSL!EnumerationPropertyLiteral
	to t : SysMLine!ItemUsage
	extends Base{
	//EnumerationPropertyLiteral.EnumerationPropertyLiteral -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//EnumerationPropertyLiteral.EnumerationPropertyLiteral -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//EnumerationPropertyLiteral.EnumerationPropertyLiteral -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//EnumerationPropertyLiteral.EnumerationPropertyLiteral -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//EnumerationPropertyLiteral.EnumerationPropertyLiteral -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//EnumerationPropertyLiteral.EnumerationPropertyLiteral -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//EnumerationPropertyLiteral.EnumerationPropertyLiteral -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//EnumerationPropertyLiteral.EnumerationPropertyLiteral -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//EnumerationPropertyLiteral.EnumerationPropertyLiteral -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//EnumerationPropertyLiteral.EnumerationPropertyLiteral -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//EnumerationPropertyLiteral.EnumerationPropertyLiteral -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//EnumerationPropertyLiteral.EnumerationPropertyLiteral -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//EnumerationPropertyLiteral.EnumerationPropertyLiteral -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//EnumerationPropertyLiteral.EnumerationPropertyLiteral -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//EnumerationPropertyLiteral.EnumerationPropertyLiteral -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//EnumerationPropertyLiteral.EnumerationPropertyLiteral -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//EnumerationPropertyLiteral.EnumerationPropertyLiteral -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//EnumerationPropertyLiteral.EnumerationPropertyLiteral -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//EnumerationPropertyLiteral.EnumerationPropertyLiteral -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//EnumerationPropertyLiteral.EnumerationPropertyLiteral -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//EnumerationPropertyLiteral.EnumerationPropertyLiteral -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule PropertyValueGroup
	transform s : DSL!PropertyValueGroup
	to t : SysMLine!ItemUsage
	extends Base{
	//PropertyValueGroup.PropertyValueGroup -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PropertyValueGroup.PropertyValueGroup -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PropertyValueGroup.PropertyValueGroup -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PropertyValueGroup.PropertyValueGroup -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PropertyValueGroup.PropertyValueGroup -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PropertyValueGroup.PropertyValueGroup -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PropertyValueGroup.PropertyValueGroup -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PropertyValueGroup.PropertyValueGroup -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PropertyValueGroup.PropertyValueGroup -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PropertyValueGroup.PropertyValueGroup -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PropertyValueGroup.PropertyValueGroup -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PropertyValueGroup.PropertyValueGroup -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PropertyValueGroup.PropertyValueGroup -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PropertyValueGroup.PropertyValueGroup -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PropertyValueGroup.PropertyValueGroup -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PropertyValueGroup.PropertyValueGroup -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PropertyValueGroup.PropertyValueGroup -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PropertyValueGroup.PropertyValueGroup -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PropertyValueGroup.PropertyValueGroup -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PropertyValueGroup.PropertyValueGroup -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PropertyValueGroup.PropertyValueGroup -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PropertyValueGroup.PropertyValueGroup -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//PropertyValueGroup.PropertyValueGroup -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//PropertyValueGroup.PropertyValueGroup -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//PropertyValueGroup.PropertyValueGroup -> EReference : valuedElements
	if (s.valuedElements.getEReference() != null) t.addNewReference("valuedElements", s.valuedElements.getEReference());
}

@lazy
rule PropertyValuePkg
	transform s : DSL!PropertyValuePkg
	to t : SysMLine!ItemUsage
	extends Base{
	//PropertyValuePkg.PropertyValuePkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PropertyValuePkg.PropertyValuePkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PropertyValuePkg.PropertyValuePkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PropertyValuePkg.PropertyValuePkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PropertyValuePkg.PropertyValuePkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PropertyValuePkg.PropertyValuePkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PropertyValuePkg.PropertyValuePkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PropertyValuePkg.PropertyValuePkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PropertyValuePkg.PropertyValuePkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PropertyValuePkg.PropertyValuePkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PropertyValuePkg.PropertyValuePkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PropertyValuePkg.PropertyValuePkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PropertyValuePkg.PropertyValuePkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PropertyValuePkg.PropertyValuePkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PropertyValuePkg.PropertyValuePkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PropertyValuePkg.PropertyValuePkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PropertyValuePkg.PropertyValuePkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PropertyValuePkg.PropertyValuePkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PropertyValuePkg.PropertyValuePkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PropertyValuePkg.PropertyValuePkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PropertyValuePkg.PropertyValuePkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PropertyValuePkg.PropertyValuePkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//PropertyValuePkg.PropertyValuePkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//PropertyValuePkg.PropertyValuePkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//PropertyValuePkg.PropertyValuePkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
}

@lazy
rule AbstractDependenciesPkg
	transform s : DSL!AbstractDependenciesPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//AbstractDependenciesPkg.AbstractDependenciesPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
}


// modellingcore.ecore
@lazy
rule ModelElement
	transform s : DSL!ModelElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ModelElement.ModelElement -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ModelElement.ModelElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ModelElement.ModelElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ModelElement.ModelElement -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ModelElement.ModelElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ModelElement.ModelElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
}

@lazy
rule AbstractRelationship
	transform s : DSL!AbstractRelationship
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractRelationship.AbstractRelationship -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractRelationship.AbstractRelationship -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractRelationship.AbstractRelationship -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractRelationship.AbstractRelationship -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractRelationship.AbstractRelationship -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractRelationship.AbstractRelationship -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractRelationship.AbstractRelationship -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
}

@lazy
rule AbstractNamedElement
	transform s : DSL!AbstractNamedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractNamedElement.AbstractNamedElement -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractNamedElement.AbstractNamedElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractNamedElement.AbstractNamedElement -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractNamedElement.AbstractNamedElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractNamedElement.AbstractNamedElement -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractNamedElement.AbstractNamedElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractNamedElement.AbstractNamedElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
}

@lazy
rule InformationsExchanger
	transform s : DSL!InformationsExchanger
	to t : SysMLine!ItemUsage
	extends Base{
	//InformationsExchanger.InformationsExchanger -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InformationsExchanger.InformationsExchanger -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InformationsExchanger.InformationsExchanger -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InformationsExchanger.InformationsExchanger -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InformationsExchanger.InformationsExchanger -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InformationsExchanger.InformationsExchanger -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InformationsExchanger.InformationsExchanger -> EReference : incomingInformationFlows
	if (s.incomingInformationFlows.getEReference() != null) t.addNewReference("incomingInformationFlows", s.incomingInformationFlows.getEReference());
	//InformationsExchanger.InformationsExchanger -> EReference : outgoingInformationFlows
	if (s.outgoingInformationFlows.getEReference() != null) t.addNewReference("outgoingInformationFlows", s.outgoingInformationFlows.getEReference());
	//InformationsExchanger.InformationsExchanger -> EReference : informationFlows
	if (s.informationFlows.getEReference() != null) t.addNewReference("informationFlows", s.informationFlows.getEReference());
}

@lazy
rule TraceableElement
	transform s : DSL!TraceableElement
	to t : SysMLine!ItemUsage
	extends Base{
	//TraceableElement.TraceableElement -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//TraceableElement.TraceableElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//TraceableElement.TraceableElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//TraceableElement.TraceableElement -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//TraceableElement.TraceableElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//TraceableElement.TraceableElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//TraceableElement.TraceableElement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//TraceableElement.TraceableElement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
}

@lazy
rule FinalizableElement
	transform s : DSL!FinalizableElement
	to t : SysMLine!ItemUsage
	extends Base{
	//FinalizableElement.FinalizableElement -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//FinalizableElement.FinalizableElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//FinalizableElement.FinalizableElement -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//FinalizableElement.FinalizableElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//FinalizableElement.FinalizableElement -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//FinalizableElement.FinalizableElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//FinalizableElement.FinalizableElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
}

@lazy
rule PublishableElement
	transform s : DSL!PublishableElement
	to t : SysMLine!ItemUsage
	extends Base{
	//PublishableElement.PublishableElement -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PublishableElement.PublishableElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PublishableElement.PublishableElement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PublishableElement.PublishableElement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PublishableElement.PublishableElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PublishableElement.PublishableElement -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PublishableElement.PublishableElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PublishableElement.PublishableElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
}

@lazy
rule AbstractType
	transform s : DSL!AbstractType
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractType.AbstractType -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractType.AbstractType -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractType.AbstractType -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractType.AbstractType -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractType.AbstractType -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractType.AbstractType -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractType.AbstractType -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractType.AbstractType -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
}

@lazy
rule AbstractTypedElement
	transform s : DSL!AbstractTypedElement
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractTypedElement.AbstractTypedElement -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractTypedElement.AbstractTypedElement -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractTypedElement.AbstractTypedElement -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractTypedElement.AbstractTypedElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractTypedElement.AbstractTypedElement -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractTypedElement.AbstractTypedElement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractTypedElement.AbstractTypedElement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractTypedElement.AbstractTypedElement -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
}

@lazy
rule AbstractTrace
	transform s : DSL!AbstractTrace
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractTrace.AbstractTrace -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractTrace.AbstractTrace -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractTrace.AbstractTrace -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractTrace.AbstractTrace -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractTrace.AbstractTrace -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractTrace.AbstractTrace -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractTrace.AbstractTrace -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractTrace.AbstractTrace -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractTrace.AbstractTrace -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//AbstractTrace.AbstractTrace -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
}

@lazy
rule AbstractConstraint
	transform s : DSL!AbstractConstraint
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractConstraint.AbstractConstraint -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractConstraint.AbstractConstraint -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractConstraint.AbstractConstraint -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractConstraint.AbstractConstraint -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractConstraint.AbstractConstraint -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractConstraint.AbstractConstraint -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractConstraint.AbstractConstraint -> EReference : constrainedElements
	if (s.constrainedElements.getEReference() != null) t.addNewReference("constrainedElements", s.constrainedElements.getEReference());
	//AbstractConstraint.AbstractConstraint -> EReference : ownedSpecification
	if (s.ownedSpecification.getEReference() != null) t.addNewReference("ownedSpecification", s.ownedSpecification.getEReference());
	//AbstractConstraint.AbstractConstraint -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context", s.context.getEReference());
}

@lazy
rule ValueSpecification
	transform s : DSL!ValueSpecification
	to t : SysMLine!ItemUsage
	extends Base{
	//ValueSpecification.ValueSpecification -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ValueSpecification.ValueSpecification -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ValueSpecification.ValueSpecification -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ValueSpecification.ValueSpecification -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ValueSpecification.ValueSpecification -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ValueSpecification.ValueSpecification -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ValueSpecification.ValueSpecification -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ValueSpecification.ValueSpecification -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
}

@lazy
rule AbstractParameter
	transform s : DSL!AbstractParameter
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractParameter.AbstractParameter -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractParameter.AbstractParameter -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractParameter.AbstractParameter -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractParameter.AbstractParameter -> EAttribute : isException
	if (s.isException.getEAttribute() != null) t.addNewAttribute("isException", s.isException.getEAttribute());
	//AbstractParameter.AbstractParameter -> EAttribute : isStream
	if (s.isStream.getEAttribute() != null) t.addNewAttribute("isStream", s.isStream.getEAttribute());
	//AbstractParameter.AbstractParameter -> EAttribute : isOptional
	if (s.isOptional.getEAttribute() != null) t.addNewAttribute("isOptional", s.isOptional.getEAttribute());
	//AbstractParameter.AbstractParameter -> EAttribute : kindOfRate
	if (s.kindOfRate.getEAttribute() != null) t.addNewAttribute("kindOfRate", s.kindOfRate.getEAttribute());
	//AbstractParameter.AbstractParameter -> EAttribute : effect
	if (s.effect.getEAttribute() != null) t.addNewAttribute("effect", s.effect.getEAttribute());
	//AbstractParameter.AbstractParameter -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractParameter.AbstractParameter -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractParameter.AbstractParameter -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractParameter.AbstractParameter -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractParameter.AbstractParameter -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//AbstractParameter.AbstractParameter -> EReference : rate
	if (s.rate.getEReference() != null) t.addNewReference("rate", s.rate.getEReference());
	//AbstractParameter.AbstractParameter -> EReference : probability
	if (s.probability.getEReference() != null) t.addNewReference("probability", s.probability.getEReference());
	//AbstractParameter.AbstractParameter -> EReference : parameterSet
	if (s.parameterSet.getEReference() != null) t.addNewReference("parameterSet", s.parameterSet.getEReference());
}

@lazy
rule AbstractParameterSet
	transform s : DSL!AbstractParameterSet
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractParameterSet.AbstractParameterSet -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractParameterSet.AbstractParameterSet -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractParameterSet.AbstractParameterSet -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractParameterSet.AbstractParameterSet -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractParameterSet.AbstractParameterSet -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractParameterSet.AbstractParameterSet -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractParameterSet.AbstractParameterSet -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractParameterSet.AbstractParameterSet -> EReference : ownedConditions
	if (s.ownedConditions.getEReference() != null) t.addNewReference("ownedConditions", s.ownedConditions.getEReference());
	//AbstractParameterSet.AbstractParameterSet -> EReference : probability
	if (s.probability.getEReference() != null) t.addNewReference("probability", s.probability.getEReference());
	//AbstractParameterSet.AbstractParameterSet -> EReference : parameters
	if (s.parameters.getEReference() != null) t.addNewReference("parameters", s.parameters.getEReference());
}

@lazy
rule AbstractInformationFlow
	transform s : DSL!AbstractInformationFlow
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractInformationFlow.AbstractInformationFlow -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractInformationFlow.AbstractInformationFlow -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractInformationFlow.AbstractInformationFlow -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractInformationFlow.AbstractInformationFlow -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractInformationFlow.AbstractInformationFlow -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractInformationFlow.AbstractInformationFlow -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractInformationFlow.AbstractInformationFlow -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractInformationFlow.AbstractInformationFlow -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//AbstractInformationFlow.AbstractInformationFlow -> EReference : realizations
	if (s.realizations.getEReference() != null) t.addNewReference("realizations", s.realizations.getEReference());
	//AbstractInformationFlow.AbstractInformationFlow -> EReference : convoyedInformations
	if (s.convoyedInformations.getEReference() != null) t.addNewReference("convoyedInformations", s.convoyedInformations.getEReference());
	//AbstractInformationFlow.AbstractInformationFlow -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//AbstractInformationFlow.AbstractInformationFlow -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
}

@lazy
rule AbstractExchangeItem
	transform s : DSL!AbstractExchangeItem
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractExchangeItem.AbstractExchangeItem -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractExchangeItem.AbstractExchangeItem -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractExchangeItem.AbstractExchangeItem -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractExchangeItem.AbstractExchangeItem -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractExchangeItem.AbstractExchangeItem -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractExchangeItem.AbstractExchangeItem -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractExchangeItem.AbstractExchangeItem -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractExchangeItem.AbstractExchangeItem -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
}

@lazy
rule IState
	transform s : DSL!IState
	to t : SysMLine!ItemUsage
	extends Base{
	//IState.IState -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//IState.IState -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//IState.IState -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//IState.IState -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//IState.IState -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//IState.IState -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//IState.IState -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//IState.IState -> EReference : referencedStates
	if (s.referencedStates.getEReference() != null) t.addNewReference("referencedStates", s.referencedStates.getEReference());
	//IState.IState -> EReference : exploitedStates
	if (s.exploitedStates.getEReference() != null) t.addNewReference("exploitedStates", s.exploitedStates.getEReference());
}


// emde.ecore
@lazy
rule Element
	transform s : DSL!Element
	to t : SysMLine!ItemUsage
	extends Base{
}

@lazy
rule ExtensibleElement
	transform s : DSL!ExtensibleElement
	to t : SysMLine!ItemUsage
	extends Base{
	//ExtensibleElement.ExtensibleElement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
}

@lazy
rule ElementExtension
	transform s : DSL!ElementExtension
	to t : SysMLine!ItemUsage
	extends Base{
	//ElementExtension.ElementExtension -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
}


// oa.ecore
@lazy
rule OperationalAnalysis
	transform s : DSL!OperationalAnalysis
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalAnalysis.OperationalAnalysis -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OperationalAnalysis.OperationalAnalysis -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OperationalAnalysis.OperationalAnalysis -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//OperationalAnalysis.OperationalAnalysis -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OperationalAnalysis.OperationalAnalysis -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OperationalAnalysis.OperationalAnalysis -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OperationalAnalysis.OperationalAnalysis -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OperationalAnalysis.OperationalAnalysis -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OperationalAnalysis.OperationalAnalysis -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : ownedFunctionPkg
	if (s.ownedFunctionPkg.getEReference() != null) t.addNewReference("ownedFunctionPkg", s.ownedFunctionPkg.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : provisionedArchitectureAllocations
	if (s.provisionedArchitectureAllocations.getEReference() != null) t.addNewReference("provisionedArchitectureAllocations", s.provisionedArchitectureAllocations.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : provisioningArchitectureAllocations
	if (s.provisioningArchitectureAllocations.getEReference() != null) t.addNewReference("provisioningArchitectureAllocations", s.provisioningArchitectureAllocations.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : allocatedArchitectures
	if (s.allocatedArchitectures.getEReference() != null) t.addNewReference("allocatedArchitectures", s.allocatedArchitectures.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : allocatingArchitectures
	if (s.allocatingArchitectures.getEReference() != null) t.addNewReference("allocatingArchitectures", s.allocatingArchitectures.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : system
	if (s.system.getEReference() != null) t.addNewReference("system", s.system.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : ownedRolePkg
	if (s.ownedRolePkg.getEReference() != null) t.addNewReference("ownedRolePkg", s.ownedRolePkg.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : ownedEntityPkg
	if (s.ownedEntityPkg.getEReference() != null) t.addNewReference("ownedEntityPkg", s.ownedEntityPkg.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : ownedConceptPkg
	if (s.ownedConceptPkg.getEReference() != null) t.addNewReference("ownedConceptPkg", s.ownedConceptPkg.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : containedOperationalCapabilityPkg
	if (s.containedOperationalCapabilityPkg.getEReference() != null) t.addNewReference("containedOperationalCapabilityPkg", s.containedOperationalCapabilityPkg.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : containedOperationalActivityPkg
	if (s.containedOperationalActivityPkg.getEReference() != null) t.addNewReference("containedOperationalActivityPkg", s.containedOperationalActivityPkg.getEReference());
	//OperationalAnalysis.OperationalAnalysis -> EReference : allocatingSystemAnalyses
	if (s.allocatingSystemAnalyses.getEReference() != null) t.addNewReference("allocatingSystemAnalyses", s.allocatingSystemAnalyses.getEReference());
}

@lazy
rule OperationalScenario
	transform s : DSL!OperationalScenario
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalScenario.OperationalScenario -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OperationalScenario.OperationalScenario -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OperationalScenario.OperationalScenario -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//OperationalScenario.OperationalScenario -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OperationalScenario.OperationalScenario -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OperationalScenario.OperationalScenario -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OperationalScenario.OperationalScenario -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OperationalScenario.OperationalScenario -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OperationalScenario.OperationalScenario -> EAttribute : context
	if (s.context.getEAttribute() != null) t.addNewAttribute("context", s.context.getEAttribute());
	//OperationalScenario.OperationalScenario -> EAttribute : objective
	if (s.objective.getEAttribute() != null) t.addNewAttribute("objective", s.objective.getEAttribute());
	//OperationalScenario.OperationalScenario -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OperationalScenario.OperationalScenario -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OperationalScenario.OperationalScenario -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OperationalScenario.OperationalScenario -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OperationalScenario.OperationalScenario -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OperationalScenario.OperationalScenario -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OperationalScenario.OperationalScenario -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OperationalScenario.OperationalScenario -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OperationalScenario.OperationalScenario -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OperationalScenario.OperationalScenario -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OperationalScenario.OperationalScenario -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OperationalScenario.OperationalScenario -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OperationalScenario.OperationalScenario -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule OperationalActivityPkg
	transform s : DSL!OperationalActivityPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalActivityPkg.OperationalActivityPkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OperationalActivityPkg.OperationalActivityPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OperationalActivityPkg.OperationalActivityPkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//OperationalActivityPkg.OperationalActivityPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OperationalActivityPkg.OperationalActivityPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OperationalActivityPkg.OperationalActivityPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OperationalActivityPkg.OperationalActivityPkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OperationalActivityPkg.OperationalActivityPkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : ownedExchanges
	if (s.ownedExchanges.getEReference() != null) t.addNewReference("ownedExchanges", s.ownedExchanges.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : ownedExchangeSpecificationRealizations
	if (s.ownedExchangeSpecificationRealizations.getEReference() != null) t.addNewReference("ownedExchangeSpecificationRealizations", s.ownedExchangeSpecificationRealizations.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : ownedCategories
	if (s.ownedCategories.getEReference() != null) t.addNewReference("ownedCategories", s.ownedCategories.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : ownedFunctionSpecifications
	if (s.ownedFunctionSpecifications.getEReference() != null) t.addNewReference("ownedFunctionSpecifications", s.ownedFunctionSpecifications.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : ownedOperationalActivities
	if (s.ownedOperationalActivities.getEReference() != null) t.addNewReference("ownedOperationalActivities", s.ownedOperationalActivities.getEReference());
	//OperationalActivityPkg.OperationalActivityPkg -> EReference : ownedOperationalActivityPkgs
	if (s.ownedOperationalActivityPkgs.getEReference() != null) t.addNewReference("ownedOperationalActivityPkgs", s.ownedOperationalActivityPkgs.getEReference());
}

@lazy
rule OperationalActivity
	transform s : DSL!OperationalActivity
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalActivity.OperationalActivity -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OperationalActivity.OperationalActivity -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OperationalActivity.OperationalActivity -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//OperationalActivity.OperationalActivity -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OperationalActivity.OperationalActivity -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OperationalActivity.OperationalActivity -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OperationalActivity.OperationalActivity -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OperationalActivity.OperationalActivity -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OperationalActivity.OperationalActivity -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//OperationalActivity.OperationalActivity -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//OperationalActivity.OperationalActivity -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//OperationalActivity.OperationalActivity -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//OperationalActivity.OperationalActivity -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//OperationalActivity.OperationalActivity -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//OperationalActivity.OperationalActivity -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//OperationalActivity.OperationalActivity -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//OperationalActivity.OperationalActivity -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null) t.addNewAttribute("aggregationKind", s.aggregationKind.getEAttribute());
	//OperationalActivity.OperationalActivity -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null) t.addNewAttribute("isDerived", s.isDerived.getEAttribute());
	//OperationalActivity.OperationalActivity -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null) t.addNewAttribute("isReadOnly", s.isReadOnly.getEAttribute());
	//OperationalActivity.OperationalActivity -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null) t.addNewAttribute("isPartOfKey", s.isPartOfKey.getEAttribute());
	//OperationalActivity.OperationalActivity -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//OperationalActivity.OperationalActivity -> EAttribute : condition
	if (s.condition.getEAttribute() != null) t.addNewAttribute("condition", s.condition.getEAttribute());
	//OperationalActivity.OperationalActivity -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : association
	if (s.association.getEReference() != null) t.addNewReference("association", s.association.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : representingInstanceRoles
	if (s.representingInstanceRoles.getEReference() != null) t.addNewReference("representingInstanceRoles", s.representingInstanceRoles.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null) t.addNewReference("ownedFunctionalChains", s.ownedFunctionalChains.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedHandlers
	if (s.ownedHandlers.getEReference() != null) t.addNewReference("ownedHandlers", s.ownedHandlers.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : localPrecondition
	if (s.localPrecondition.getEReference() != null) t.addNewReference("localPrecondition", s.localPrecondition.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : localPostcondition
	if (s.localPostcondition.getEReference() != null) t.addNewReference("localPostcondition", s.localPostcondition.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context", s.context.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : inputs
	if (s.inputs.getEReference() != null) t.addNewReference("inputs", s.inputs.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : outputs
	if (s.outputs.getEReference() != null) t.addNewReference("outputs", s.outputs.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : arguments
	if (s.arguments.getEReference() != null) t.addNewReference("arguments", s.arguments.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : results
	if (s.results.getEReference() != null) t.addNewReference("results", s.results.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : behavior
	if (s.behavior.getEReference() != null) t.addNewReference("behavior", s.behavior.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedFunctions
	if (s.ownedFunctions.getEReference() != null) t.addNewReference("ownedFunctions", s.ownedFunctions.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedFunctionRealizations
	if (s.ownedFunctionRealizations.getEReference() != null) t.addNewReference("ownedFunctionRealizations", s.ownedFunctionRealizations.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedFunctionalExchanges
	if (s.ownedFunctionalExchanges.getEReference() != null) t.addNewReference("ownedFunctionalExchanges", s.ownedFunctionalExchanges.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : subFunctions
	if (s.subFunctions.getEReference() != null) t.addNewReference("subFunctions", s.subFunctions.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : outFunctionRealizations
	if (s.outFunctionRealizations.getEReference() != null) t.addNewReference("outFunctionRealizations", s.outFunctionRealizations.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : inFunctionRealizations
	if (s.inFunctionRealizations.getEReference() != null) t.addNewReference("inFunctionRealizations", s.inFunctionRealizations.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : componentFunctionalAllocations
	if (s.componentFunctionalAllocations.getEReference() != null) t.addNewReference("componentFunctionalAllocations", s.componentFunctionalAllocations.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : allocationBlocks
	if (s.allocationBlocks.getEReference() != null) t.addNewReference("allocationBlocks", s.allocationBlocks.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null) t.addNewReference("availableInStates", s.availableInStates.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : involvingCapabilities
	if (s.involvingCapabilities.getEReference() != null) t.addNewReference("involvingCapabilities", s.involvingCapabilities.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null) t.addNewReference("involvingCapabilityRealizations", s.involvingCapabilityRealizations.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : involvingFunctionalChains
	if (s.involvingFunctionalChains.getEReference() != null) t.addNewReference("involvingFunctionalChains", s.involvingFunctionalChains.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : linkedStateMachine
	if (s.linkedStateMachine.getEReference() != null) t.addNewReference("linkedStateMachine", s.linkedStateMachine.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : linkedFunctionSpecification
	if (s.linkedFunctionSpecification.getEReference() != null) t.addNewReference("linkedFunctionSpecification", s.linkedFunctionSpecification.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedOperationalActivityPkgs
	if (s.ownedOperationalActivityPkgs.getEReference() != null) t.addNewReference("ownedOperationalActivityPkgs", s.ownedOperationalActivityPkgs.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : activityAllocations
	if (s.activityAllocations.getEReference() != null) t.addNewReference("activityAllocations", s.activityAllocations.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedSwimlanes
	if (s.ownedSwimlanes.getEReference() != null) t.addNewReference("ownedSwimlanes", s.ownedSwimlanes.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : ownedProcess
	if (s.ownedProcess.getEReference() != null) t.addNewReference("ownedProcess", s.ownedProcess.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : allocatorEntities
	if (s.allocatorEntities.getEReference() != null) t.addNewReference("allocatorEntities", s.allocatorEntities.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : realizingSystemFunctions
	if (s.realizingSystemFunctions.getEReference() != null) t.addNewReference("realizingSystemFunctions", s.realizingSystemFunctions.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : allocatingRoles
	if (s.allocatingRoles.getEReference() != null) t.addNewReference("allocatingRoles", s.allocatingRoles.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : containedOperationalActivities
	if (s.containedOperationalActivities.getEReference() != null) t.addNewReference("containedOperationalActivities", s.containedOperationalActivities.getEReference());
	//OperationalActivity.OperationalActivity -> EReference : childrenOperationalActivities
	if (s.childrenOperationalActivities.getEReference() != null) t.addNewReference("childrenOperationalActivities", s.childrenOperationalActivities.getEReference());
}

@lazy
rule OperationalProcess
	transform s : DSL!OperationalProcess
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalProcess.OperationalProcess -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OperationalProcess.OperationalProcess -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OperationalProcess.OperationalProcess -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//OperationalProcess.OperationalProcess -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OperationalProcess.OperationalProcess -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OperationalProcess.OperationalProcess -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OperationalProcess.OperationalProcess -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OperationalProcess.OperationalProcess -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OperationalProcess.OperationalProcess -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//OperationalProcess.OperationalProcess -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : involvedInvolvements
	if (s.involvedInvolvements.getEReference() != null) t.addNewReference("involvedInvolvements", s.involvedInvolvements.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : ownedFunctionalChainInvolvements
	if (s.ownedFunctionalChainInvolvements.getEReference() != null) t.addNewReference("ownedFunctionalChainInvolvements", s.ownedFunctionalChainInvolvements.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : ownedFunctionalChainRealizations
	if (s.ownedFunctionalChainRealizations.getEReference() != null) t.addNewReference("ownedFunctionalChainRealizations", s.ownedFunctionalChainRealizations.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : involvedFunctionalChainInvolvements
	if (s.involvedFunctionalChainInvolvements.getEReference() != null) t.addNewReference("involvedFunctionalChainInvolvements", s.involvedFunctionalChainInvolvements.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : involvedFunctions
	if (s.involvedFunctions.getEReference() != null) t.addNewReference("involvedFunctions", s.involvedFunctions.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : involvedFunctionalExchanges
	if (s.involvedFunctionalExchanges.getEReference() != null) t.addNewReference("involvedFunctionalExchanges", s.involvedFunctionalExchanges.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : involvedElements
	if (s.involvedElements.getEReference() != null) t.addNewReference("involvedElements", s.involvedElements.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : enactedFunctions
	if (s.enactedFunctions.getEReference() != null) t.addNewReference("enactedFunctions", s.enactedFunctions.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : enactedFunctionalBlocks
	if (s.enactedFunctionalBlocks.getEReference() != null) t.addNewReference("enactedFunctionalBlocks", s.enactedFunctionalBlocks.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null) t.addNewReference("availableInStates", s.availableInStates.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : firstFunctionalChainInvolvements
	if (s.firstFunctionalChainInvolvements.getEReference() != null) t.addNewReference("firstFunctionalChainInvolvements", s.firstFunctionalChainInvolvements.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : involvingCapabilities
	if (s.involvingCapabilities.getEReference() != null) t.addNewReference("involvingCapabilities", s.involvingCapabilities.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null) t.addNewReference("involvingCapabilityRealizations", s.involvingCapabilityRealizations.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : realizedFunctionalChains
	if (s.realizedFunctionalChains.getEReference() != null) t.addNewReference("realizedFunctionalChains", s.realizedFunctionalChains.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : realizingFunctionalChains
	if (s.realizingFunctionalChains.getEReference() != null) t.addNewReference("realizingFunctionalChains", s.realizingFunctionalChains.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : preCondition
	if (s.preCondition.getEReference() != null) t.addNewReference("preCondition", s.preCondition.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : postCondition
	if (s.postCondition.getEReference() != null) t.addNewReference("postCondition", s.postCondition.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : ownedSequenceNodes
	if (s.ownedSequenceNodes.getEReference() != null) t.addNewReference("ownedSequenceNodes", s.ownedSequenceNodes.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : ownedSequenceLinks
	if (s.ownedSequenceLinks.getEReference() != null) t.addNewReference("ownedSequenceLinks", s.ownedSequenceLinks.getEReference());
	//OperationalProcess.OperationalProcess -> EReference : involvingOperationalCapabilities
	if (s.involvingOperationalCapabilities.getEReference() != null) t.addNewReference("involvingOperationalCapabilities", s.involvingOperationalCapabilities.getEReference());
}

@lazy
rule Swimlane
	transform s : DSL!Swimlane
	to t : SysMLine!ItemUsage
	extends Base{
	//Swimlane.Swimlane -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Swimlane.Swimlane -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Swimlane.Swimlane -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Swimlane.Swimlane -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Swimlane.Swimlane -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Swimlane.Swimlane -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Swimlane.Swimlane -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Swimlane.Swimlane -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Swimlane.Swimlane -> EAttribute : isDimension
	if (s.isDimension.getEAttribute() != null) t.addNewAttribute("isDimension", s.isDimension.getEAttribute());
	//Swimlane.Swimlane -> EAttribute : isExternal
	if (s.isExternal.getEAttribute() != null) t.addNewAttribute("isExternal", s.isExternal.getEAttribute());
	//Swimlane.Swimlane -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Swimlane.Swimlane -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Swimlane.Swimlane -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Swimlane.Swimlane -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Swimlane.Swimlane -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Swimlane.Swimlane -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Swimlane.Swimlane -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Swimlane.Swimlane -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Swimlane.Swimlane -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Swimlane.Swimlane -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Swimlane.Swimlane -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Swimlane.Swimlane -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Swimlane.Swimlane -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Swimlane.Swimlane -> EReference : superGroup
	if (s.superGroup.getEReference() != null) t.addNewReference("superGroup", s.superGroup.getEReference());
	//Swimlane.Swimlane -> EReference : subGroups
	if (s.subGroups.getEReference() != null) t.addNewReference("subGroups", s.subGroups.getEReference());
	//Swimlane.Swimlane -> EReference : ownedNodes
	if (s.ownedNodes.getEReference() != null) t.addNewReference("ownedNodes", s.ownedNodes.getEReference());
	//Swimlane.Swimlane -> EReference : ownedEdges
	if (s.ownedEdges.getEReference() != null) t.addNewReference("ownedEdges", s.ownedEdges.getEReference());
	//Swimlane.Swimlane -> EReference : representedElement
	if (s.representedElement.getEReference() != null) t.addNewReference("representedElement", s.representedElement.getEReference());
	//Swimlane.Swimlane -> EReference : superPartition
	if (s.superPartition.getEReference() != null) t.addNewReference("superPartition", s.superPartition.getEReference());
	//Swimlane.Swimlane -> EReference : subPartitions
	if (s.subPartitions.getEReference() != null) t.addNewReference("subPartitions", s.subPartitions.getEReference());
	//Swimlane.Swimlane -> EReference : representedEntity
	if (s.representedEntity.getEReference() != null) t.addNewReference("representedEntity", s.representedEntity.getEReference());
}

@lazy
rule OperationalCapabilityPkg
	transform s : DSL!OperationalCapabilityPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EReference : ownedOperationalCapabilities
	if (s.ownedOperationalCapabilities.getEReference() != null) t.addNewReference("ownedOperationalCapabilities", s.ownedOperationalCapabilities.getEReference());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EReference : ownedOperationalCapabilityPkgs
	if (s.ownedOperationalCapabilityPkgs.getEReference() != null) t.addNewReference("ownedOperationalCapabilityPkgs", s.ownedOperationalCapabilityPkgs.getEReference());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EReference : ownedCapabilityConfigurations
	if (s.ownedCapabilityConfigurations.getEReference() != null) t.addNewReference("ownedCapabilityConfigurations", s.ownedCapabilityConfigurations.getEReference());
	//OperationalCapabilityPkg.OperationalCapabilityPkg -> EReference : ownedConceptCompliances
	if (s.ownedConceptCompliances.getEReference() != null) t.addNewReference("ownedConceptCompliances", s.ownedConceptCompliances.getEReference());
}

@lazy
rule OperationalCapability
	transform s : DSL!OperationalCapability
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalCapability.OperationalCapability -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OperationalCapability.OperationalCapability -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OperationalCapability.OperationalCapability -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//OperationalCapability.OperationalCapability -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OperationalCapability.OperationalCapability -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OperationalCapability.OperationalCapability -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OperationalCapability.OperationalCapability -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OperationalCapability.OperationalCapability -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OperationalCapability.OperationalCapability -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : involvedInvolvements
	if (s.involvedInvolvements.getEReference() != null) t.addNewReference("involvedInvolvements", s.involvedInvolvements.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null) t.addNewReference("ownedFunctionalChains", s.ownedFunctionalChains.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : preCondition
	if (s.preCondition.getEReference() != null) t.addNewReference("preCondition", s.preCondition.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : postCondition
	if (s.postCondition.getEReference() != null) t.addNewReference("postCondition", s.postCondition.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : ownedScenarios
	if (s.ownedScenarios.getEReference() != null) t.addNewReference("ownedScenarios", s.ownedScenarios.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : incomingCapabilityAllocation
	if (s.incomingCapabilityAllocation.getEReference() != null) t.addNewReference("incomingCapabilityAllocation", s.incomingCapabilityAllocation.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : outgoingCapabilityAllocation
	if (s.outgoingCapabilityAllocation.getEReference() != null) t.addNewReference("outgoingCapabilityAllocation", s.outgoingCapabilityAllocation.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : extends_
	if (s.~extends.getEReference() != null) t.addNewReference("'extends'", s.~extends.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : extending
	if (s.extending.getEReference() != null) t.addNewReference("extending", s.extending.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : abstractCapabilityExtensionPoints
	if (s.abstractCapabilityExtensionPoints.getEReference() != null) t.addNewReference("abstractCapabilityExtensionPoints", s.abstractCapabilityExtensionPoints.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : includes
	if (s.includes.getEReference() != null) t.addNewReference("includes", s.includes.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : including
	if (s.including.getEReference() != null) t.addNewReference("including", s.including.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : includedAbstractCapabilities
	if (s.includedAbstractCapabilities.getEReference() != null) t.addNewReference("includedAbstractCapabilities", s.includedAbstractCapabilities.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : includingAbstractCapabilities
	if (s.includingAbstractCapabilities.getEReference() != null) t.addNewReference("includingAbstractCapabilities", s.includingAbstractCapabilities.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : extendedAbstractCapabilities
	if (s.extendedAbstractCapabilities.getEReference() != null) t.addNewReference("extendedAbstractCapabilities", s.extendedAbstractCapabilities.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : extendingAbstractCapabilities
	if (s.extendingAbstractCapabilities.getEReference() != null) t.addNewReference("extendingAbstractCapabilities", s.extendingAbstractCapabilities.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : ownedFunctionalChainAbstractCapabilityInvolvements
	if (s.ownedFunctionalChainAbstractCapabilityInvolvements.getEReference() != null) t.addNewReference("ownedFunctionalChainAbstractCapabilityInvolvements", s.ownedFunctionalChainAbstractCapabilityInvolvements.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : ownedAbstractFunctionAbstractCapabilityInvolvements
	if (s.ownedAbstractFunctionAbstractCapabilityInvolvements.getEReference() != null) t.addNewReference("ownedAbstractFunctionAbstractCapabilityInvolvements", s.ownedAbstractFunctionAbstractCapabilityInvolvements.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null) t.addNewReference("availableInStates", s.availableInStates.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : ownedAbstractCapabilityRealizations
	if (s.ownedAbstractCapabilityRealizations.getEReference() != null) t.addNewReference("ownedAbstractCapabilityRealizations", s.ownedAbstractCapabilityRealizations.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : involvedAbstractFunctions
	if (s.involvedAbstractFunctions.getEReference() != null) t.addNewReference("involvedAbstractFunctions", s.involvedAbstractFunctions.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : involvedFunctionalChains
	if (s.involvedFunctionalChains.getEReference() != null) t.addNewReference("involvedFunctionalChains", s.involvedFunctionalChains.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : compliances
	if (s.compliances.getEReference() != null) t.addNewReference("compliances", s.compliances.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : configurations
	if (s.configurations.getEReference() != null) t.addNewReference("configurations", s.configurations.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : ownedEntityOperationalCapabilityInvolvements
	if (s.ownedEntityOperationalCapabilityInvolvements.getEReference() != null) t.addNewReference("ownedEntityOperationalCapabilityInvolvements", s.ownedEntityOperationalCapabilityInvolvements.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : realizingCapabilities
	if (s.realizingCapabilities.getEReference() != null) t.addNewReference("realizingCapabilities", s.realizingCapabilities.getEReference());
	//OperationalCapability.OperationalCapability -> EReference : involvedEntities
	if (s.involvedEntities.getEReference() != null) t.addNewReference("involvedEntities", s.involvedEntities.getEReference());
}

@lazy
rule ActivityAllocation
	transform s : DSL!ActivityAllocation
	to t : SysMLine!ItemUsage
	extends Base{
	//ActivityAllocation.ActivityAllocation -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ActivityAllocation.ActivityAllocation -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ActivityAllocation.ActivityAllocation -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ActivityAllocation.ActivityAllocation -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ActivityAllocation.ActivityAllocation -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ActivityAllocation.ActivityAllocation -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ActivityAllocation.ActivityAllocation -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ActivityAllocation.ActivityAllocation -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ActivityAllocation.ActivityAllocation -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ActivityAllocation.ActivityAllocation -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ActivityAllocation.ActivityAllocation -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ActivityAllocation.ActivityAllocation -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ActivityAllocation.ActivityAllocation -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ActivityAllocation.ActivityAllocation -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ActivityAllocation.ActivityAllocation -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ActivityAllocation.ActivityAllocation -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ActivityAllocation.ActivityAllocation -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ActivityAllocation.ActivityAllocation -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ActivityAllocation.ActivityAllocation -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ActivityAllocation.ActivityAllocation -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ActivityAllocation.ActivityAllocation -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ActivityAllocation.ActivityAllocation -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//ActivityAllocation.ActivityAllocation -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//ActivityAllocation.ActivityAllocation -> EReference : role
	if (s.role.getEReference() != null) t.addNewReference("role", s.role.getEReference());
	//ActivityAllocation.ActivityAllocation -> EReference : activity
	if (s.activity.getEReference() != null) t.addNewReference("activity", s.activity.getEReference());
}

@lazy
rule RolePkg
	transform s : DSL!RolePkg
	to t : SysMLine!ItemUsage
	extends Base{
	//RolePkg.RolePkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//RolePkg.RolePkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//RolePkg.RolePkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//RolePkg.RolePkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//RolePkg.RolePkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//RolePkg.RolePkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//RolePkg.RolePkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//RolePkg.RolePkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//RolePkg.RolePkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//RolePkg.RolePkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//RolePkg.RolePkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//RolePkg.RolePkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//RolePkg.RolePkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//RolePkg.RolePkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//RolePkg.RolePkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//RolePkg.RolePkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//RolePkg.RolePkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//RolePkg.RolePkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//RolePkg.RolePkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//RolePkg.RolePkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//RolePkg.RolePkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//RolePkg.RolePkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//RolePkg.RolePkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//RolePkg.RolePkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//RolePkg.RolePkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//RolePkg.RolePkg -> EReference : ownedRolePkgs
	if (s.ownedRolePkgs.getEReference() != null) t.addNewReference("ownedRolePkgs", s.ownedRolePkgs.getEReference());
	//RolePkg.RolePkg -> EReference : ownedRoles
	if (s.ownedRoles.getEReference() != null) t.addNewReference("ownedRoles", s.ownedRoles.getEReference());
}

@lazy
rule Role
	transform s : DSL!Role
	to t : SysMLine!ItemUsage
	extends Base{
	//Role.Role -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Role.Role -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Role.Role -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Role.Role -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Role.Role -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Role.Role -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Role.Role -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Role.Role -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Role.Role -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//Role.Role -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//Role.Role -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//Role.Role -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//Role.Role -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//Role.Role -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//Role.Role -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//Role.Role -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//Role.Role -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null) t.addNewAttribute("aggregationKind", s.aggregationKind.getEAttribute());
	//Role.Role -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null) t.addNewAttribute("isDerived", s.isDerived.getEAttribute());
	//Role.Role -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null) t.addNewAttribute("isReadOnly", s.isReadOnly.getEAttribute());
	//Role.Role -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null) t.addNewAttribute("isPartOfKey", s.isPartOfKey.getEAttribute());
	//Role.Role -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Role.Role -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Role.Role -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Role.Role -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Role.Role -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Role.Role -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Role.Role -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Role.Role -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Role.Role -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Role.Role -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Role.Role -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Role.Role -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Role.Role -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Role.Role -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//Role.Role -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//Role.Role -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//Role.Role -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//Role.Role -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//Role.Role -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//Role.Role -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//Role.Role -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//Role.Role -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//Role.Role -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//Role.Role -> EReference : association
	if (s.association.getEReference() != null) t.addNewReference("association", s.association.getEReference());
	//Role.Role -> EReference : representingInstanceRoles
	if (s.representingInstanceRoles.getEReference() != null) t.addNewReference("representingInstanceRoles", s.representingInstanceRoles.getEReference());
	//Role.Role -> EReference : ownedRoleAssemblyUsages
	if (s.ownedRoleAssemblyUsages.getEReference() != null) t.addNewReference("ownedRoleAssemblyUsages", s.ownedRoleAssemblyUsages.getEReference());
	//Role.Role -> EReference : ownedActivityAllocations
	if (s.ownedActivityAllocations.getEReference() != null) t.addNewReference("ownedActivityAllocations", s.ownedActivityAllocations.getEReference());
	//Role.Role -> EReference : roleAllocations
	if (s.roleAllocations.getEReference() != null) t.addNewReference("roleAllocations", s.roleAllocations.getEReference());
	//Role.Role -> EReference : activityAllocations
	if (s.activityAllocations.getEReference() != null) t.addNewReference("activityAllocations", s.activityAllocations.getEReference());
	//Role.Role -> EReference : allocatingEntities
	if (s.allocatingEntities.getEReference() != null) t.addNewReference("allocatingEntities", s.allocatingEntities.getEReference());
	//Role.Role -> EReference : allocatedOperationalActivities
	if (s.allocatedOperationalActivities.getEReference() != null) t.addNewReference("allocatedOperationalActivities", s.allocatedOperationalActivities.getEReference());
}

@lazy
rule RoleAssemblyUsage
	transform s : DSL!RoleAssemblyUsage
	to t : SysMLine!ItemUsage
	extends Base{
	//RoleAssemblyUsage.RoleAssemblyUsage -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//RoleAssemblyUsage.RoleAssemblyUsage -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//RoleAssemblyUsage.RoleAssemblyUsage -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//RoleAssemblyUsage.RoleAssemblyUsage -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//RoleAssemblyUsage.RoleAssemblyUsage -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//RoleAssemblyUsage.RoleAssemblyUsage -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//RoleAssemblyUsage.RoleAssemblyUsage -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//RoleAssemblyUsage.RoleAssemblyUsage -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//RoleAssemblyUsage.RoleAssemblyUsage -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//RoleAssemblyUsage.RoleAssemblyUsage -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//RoleAssemblyUsage.RoleAssemblyUsage -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//RoleAssemblyUsage.RoleAssemblyUsage -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//RoleAssemblyUsage.RoleAssemblyUsage -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//RoleAssemblyUsage.RoleAssemblyUsage -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//RoleAssemblyUsage.RoleAssemblyUsage -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//RoleAssemblyUsage.RoleAssemblyUsage -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//RoleAssemblyUsage.RoleAssemblyUsage -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//RoleAssemblyUsage.RoleAssemblyUsage -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//RoleAssemblyUsage.RoleAssemblyUsage -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//RoleAssemblyUsage.RoleAssemblyUsage -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//RoleAssemblyUsage.RoleAssemblyUsage -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//RoleAssemblyUsage.RoleAssemblyUsage -> EReference : child
	if (s.child.getEReference() != null) t.addNewReference("child", s.child.getEReference());
}

@lazy
rule RoleAllocation
	transform s : DSL!RoleAllocation
	to t : SysMLine!ItemUsage
	extends Base{
	//RoleAllocation.RoleAllocation -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//RoleAllocation.RoleAllocation -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//RoleAllocation.RoleAllocation -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//RoleAllocation.RoleAllocation -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//RoleAllocation.RoleAllocation -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//RoleAllocation.RoleAllocation -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//RoleAllocation.RoleAllocation -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//RoleAllocation.RoleAllocation -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//RoleAllocation.RoleAllocation -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//RoleAllocation.RoleAllocation -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//RoleAllocation.RoleAllocation -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//RoleAllocation.RoleAllocation -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//RoleAllocation.RoleAllocation -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//RoleAllocation.RoleAllocation -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//RoleAllocation.RoleAllocation -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//RoleAllocation.RoleAllocation -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//RoleAllocation.RoleAllocation -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//RoleAllocation.RoleAllocation -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//RoleAllocation.RoleAllocation -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//RoleAllocation.RoleAllocation -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//RoleAllocation.RoleAllocation -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//RoleAllocation.RoleAllocation -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//RoleAllocation.RoleAllocation -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//RoleAllocation.RoleAllocation -> EReference : role
	if (s.role.getEReference() != null) t.addNewReference("role", s.role.getEReference());
	//RoleAllocation.RoleAllocation -> EReference : entity
	if (s.entity.getEReference() != null) t.addNewReference("entity", s.entity.getEReference());
}

@lazy
rule EntityPkg
	transform s : DSL!EntityPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//EntityPkg.EntityPkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//EntityPkg.EntityPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//EntityPkg.EntityPkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//EntityPkg.EntityPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//EntityPkg.EntityPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//EntityPkg.EntityPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//EntityPkg.EntityPkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//EntityPkg.EntityPkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//EntityPkg.EntityPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//EntityPkg.EntityPkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//EntityPkg.EntityPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//EntityPkg.EntityPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//EntityPkg.EntityPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//EntityPkg.EntityPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//EntityPkg.EntityPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//EntityPkg.EntityPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//EntityPkg.EntityPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//EntityPkg.EntityPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//EntityPkg.EntityPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//EntityPkg.EntityPkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//EntityPkg.EntityPkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//EntityPkg.EntityPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//EntityPkg.EntityPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//EntityPkg.EntityPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//EntityPkg.EntityPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//EntityPkg.EntityPkg -> EReference : ownedParts
	if (s.ownedParts.getEReference() != null) t.addNewReference("ownedParts", s.ownedParts.getEReference());
	//EntityPkg.EntityPkg -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//EntityPkg.EntityPkg -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//EntityPkg.EntityPkg -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//EntityPkg.EntityPkg -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//EntityPkg.EntityPkg -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//EntityPkg.EntityPkg -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//EntityPkg.EntityPkg -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//EntityPkg.EntityPkg -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//EntityPkg.EntityPkg -> EReference : ownedEntities
	if (s.ownedEntities.getEReference() != null) t.addNewReference("ownedEntities", s.ownedEntities.getEReference());
	//EntityPkg.EntityPkg -> EReference : ownedEntityPkgs
	if (s.ownedEntityPkgs.getEReference() != null) t.addNewReference("ownedEntityPkgs", s.ownedEntityPkgs.getEReference());
	//EntityPkg.EntityPkg -> EReference : ownedLocations
	if (s.ownedLocations.getEReference() != null) t.addNewReference("ownedLocations", s.ownedLocations.getEReference());
	//EntityPkg.EntityPkg -> EReference : ownedCommunicationMeans
	if (s.ownedCommunicationMeans.getEReference() != null) t.addNewReference("ownedCommunicationMeans", s.ownedCommunicationMeans.getEReference());
}

@lazy
rule Entity
	transform s : DSL!Entity
	to t : SysMLine!ItemUsage
	extends Base{
	//Entity.Entity -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Entity.Entity -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Entity.Entity -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Entity.Entity -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Entity.Entity -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Entity.Entity -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Entity.Entity -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Entity.Entity -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Entity.Entity -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//Entity.Entity -> EAttribute : actor
	if (s.actor.getEAttribute() != null) t.addNewAttribute("actor", s.actor.getEAttribute());
	//Entity.Entity -> EAttribute : human
	if (s.human.getEAttribute() != null) t.addNewAttribute("human", s.human.getEAttribute());
	//Entity.Entity -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Entity.Entity -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Entity.Entity -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Entity.Entity -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Entity.Entity -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//Entity.Entity -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Entity.Entity -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Entity.Entity -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Entity.Entity -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Entity.Entity -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Entity.Entity -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Entity.Entity -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Entity.Entity -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Entity.Entity -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Entity.Entity -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Entity.Entity -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Entity.Entity -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Entity.Entity -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//Entity.Entity -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null) t.addNewReference("ownedFunctionalAllocation", s.ownedFunctionalAllocation.getEReference());
	//Entity.Entity -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//Entity.Entity -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//Entity.Entity -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null) t.addNewReference("functionalAllocations", s.functionalAllocations.getEReference());
	//Entity.Entity -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null) t.addNewReference("allocatedFunctions", s.allocatedFunctions.getEReference());
	//Entity.Entity -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//Entity.Entity -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
	//Entity.Entity -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//Entity.Entity -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//Entity.Entity -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//Entity.Entity -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//Entity.Entity -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//Entity.Entity -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//Entity.Entity -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//Entity.Entity -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//Entity.Entity -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//Entity.Entity -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//Entity.Entity -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//Entity.Entity -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null) t.addNewReference("ownedInterfaceAllocations", s.ownedInterfaceAllocations.getEReference());
	//Entity.Entity -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null) t.addNewReference("provisionedInterfaceAllocations", s.provisionedInterfaceAllocations.getEReference());
	//Entity.Entity -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null) t.addNewReference("allocatedInterfaces", s.allocatedInterfaces.getEReference());
	//Entity.Entity -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null) t.addNewReference("ownedCommunicationLinks", s.ownedCommunicationLinks.getEReference());
	//Entity.Entity -> EReference : produce
	if (s.produce.getEReference() != null) t.addNewReference("produce", s.produce.getEReference());
	//Entity.Entity -> EReference : consume
	if (s.consume.getEReference() != null) t.addNewReference("consume", s.consume.getEReference());
	//Entity.Entity -> EReference : send
	if (s.send.getEReference() != null) t.addNewReference("send", s.send.getEReference());
	//Entity.Entity -> EReference : receive
	if (s.receive.getEReference() != null) t.addNewReference("receive", s.receive.getEReference());
	//Entity.Entity -> EReference : call
	if (s.call.getEReference() != null) t.addNewReference("call", s.call.getEReference());
	//Entity.Entity -> EReference : execute
	if (s.execute.getEReference() != null) t.addNewReference("execute", s.execute.getEReference());
	//Entity.Entity -> EReference : write
	if (s.write.getEReference() != null) t.addNewReference("write", s.write.getEReference());
	//Entity.Entity -> EReference : access
	if (s.access.getEReference() != null) t.addNewReference("access", s.access.getEReference());
	//Entity.Entity -> EReference : acquire
	if (s.acquire.getEReference() != null) t.addNewReference("acquire", s.acquire.getEReference());
	//Entity.Entity -> EReference : transmit
	if (s.transmit.getEReference() != null) t.addNewReference("transmit", s.transmit.getEReference());
	//Entity.Entity -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null) t.addNewReference("ownedInterfaceUses", s.ownedInterfaceUses.getEReference());
	//Entity.Entity -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null) t.addNewReference("usedInterfaceLinks", s.usedInterfaceLinks.getEReference());
	//Entity.Entity -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null) t.addNewReference("usedInterfaces", s.usedInterfaces.getEReference());
	//Entity.Entity -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null) t.addNewReference("ownedInterfaceImplementations", s.ownedInterfaceImplementations.getEReference());
	//Entity.Entity -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null) t.addNewReference("implementedInterfaceLinks", s.implementedInterfaceLinks.getEReference());
	//Entity.Entity -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null) t.addNewReference("implementedInterfaces", s.implementedInterfaces.getEReference());
	//Entity.Entity -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null) t.addNewReference("ownedComponentRealizations", s.ownedComponentRealizations.getEReference());
	//Entity.Entity -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null) t.addNewReference("realizedComponents", s.realizedComponents.getEReference());
	//Entity.Entity -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null) t.addNewReference("realizingComponents", s.realizingComponents.getEReference());
	//Entity.Entity -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//Entity.Entity -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//Entity.Entity -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null) t.addNewReference("containedComponentPorts", s.containedComponentPorts.getEReference());
	//Entity.Entity -> EReference : containedParts
	if (s.containedParts.getEReference() != null) t.addNewReference("containedParts", s.containedParts.getEReference());
	//Entity.Entity -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null) t.addNewReference("containedPhysicalPorts", s.containedPhysicalPorts.getEReference());
	//Entity.Entity -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null) t.addNewReference("ownedPhysicalPath", s.ownedPhysicalPath.getEReference());
	//Entity.Entity -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//Entity.Entity -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//Entity.Entity -> EReference : representingParts
	if (s.representingParts.getEReference() != null) t.addNewReference("representingParts", s.representingParts.getEReference());
	//Entity.Entity -> EReference : composingLinks
	if (s.composingLinks.getEReference() != null) t.addNewReference("composingLinks", s.composingLinks.getEReference());
	//Entity.Entity -> EReference : incomingInformationFlows
	if (s.incomingInformationFlows.getEReference() != null) t.addNewReference("incomingInformationFlows", s.incomingInformationFlows.getEReference());
	//Entity.Entity -> EReference : outgoingInformationFlows
	if (s.outgoingInformationFlows.getEReference() != null) t.addNewReference("outgoingInformationFlows", s.outgoingInformationFlows.getEReference());
	//Entity.Entity -> EReference : informationFlows
	if (s.informationFlows.getEReference() != null) t.addNewReference("informationFlows", s.informationFlows.getEReference());
	//Entity.Entity -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//Entity.Entity -> EReference : roleAllocations
	if (s.roleAllocations.getEReference() != null) t.addNewReference("roleAllocations", s.roleAllocations.getEReference());
	//Entity.Entity -> EReference : organisationalUnitMemberships
	if (s.organisationalUnitMemberships.getEReference() != null) t.addNewReference("organisationalUnitMemberships", s.organisationalUnitMemberships.getEReference());
	//Entity.Entity -> EReference : actualLocation
	if (s.actualLocation.getEReference() != null) t.addNewReference("actualLocation", s.actualLocation.getEReference());
	//Entity.Entity -> EReference : subEntities
	if (s.subEntities.getEReference() != null) t.addNewReference("subEntities", s.subEntities.getEReference());
	//Entity.Entity -> EReference : ownedEntities
	if (s.ownedEntities.getEReference() != null) t.addNewReference("ownedEntities", s.ownedEntities.getEReference());
	//Entity.Entity -> EReference : ownedCommunicationMeans
	if (s.ownedCommunicationMeans.getEReference() != null) t.addNewReference("ownedCommunicationMeans", s.ownedCommunicationMeans.getEReference());
	//Entity.Entity -> EReference : ownedRoleAllocations
	if (s.ownedRoleAllocations.getEReference() != null) t.addNewReference("ownedRoleAllocations", s.ownedRoleAllocations.getEReference());
	//Entity.Entity -> EReference : allocatedOperationalActivities
	if (s.allocatedOperationalActivities.getEReference() != null) t.addNewReference("allocatedOperationalActivities", s.allocatedOperationalActivities.getEReference());
	//Entity.Entity -> EReference : allocatedRoles
	if (s.allocatedRoles.getEReference() != null) t.addNewReference("allocatedRoles", s.allocatedRoles.getEReference());
	//Entity.Entity -> EReference : involvingOperationalCapabilities
	if (s.involvingOperationalCapabilities.getEReference() != null) t.addNewReference("involvingOperationalCapabilities", s.involvingOperationalCapabilities.getEReference());
	//Entity.Entity -> EReference : realizingSystemComponents
	if (s.realizingSystemComponents.getEReference() != null) t.addNewReference("realizingSystemComponents", s.realizingSystemComponents.getEReference());
}

@lazy
rule ConceptPkg
	transform s : DSL!ConceptPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//ConceptPkg.ConceptPkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ConceptPkg.ConceptPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ConceptPkg.ConceptPkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ConceptPkg.ConceptPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ConceptPkg.ConceptPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ConceptPkg.ConceptPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ConceptPkg.ConceptPkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ConceptPkg.ConceptPkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ConceptPkg.ConceptPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ConceptPkg.ConceptPkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ConceptPkg.ConceptPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ConceptPkg.ConceptPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ConceptPkg.ConceptPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ConceptPkg.ConceptPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ConceptPkg.ConceptPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ConceptPkg.ConceptPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ConceptPkg.ConceptPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ConceptPkg.ConceptPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ConceptPkg.ConceptPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ConceptPkg.ConceptPkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ConceptPkg.ConceptPkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ConceptPkg.ConceptPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//ConceptPkg.ConceptPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//ConceptPkg.ConceptPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//ConceptPkg.ConceptPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//ConceptPkg.ConceptPkg -> EReference : ownedConceptPkgs
	if (s.ownedConceptPkgs.getEReference() != null) t.addNewReference("ownedConceptPkgs", s.ownedConceptPkgs.getEReference());
	//ConceptPkg.ConceptPkg -> EReference : ownedConcepts
	if (s.ownedConcepts.getEReference() != null) t.addNewReference("ownedConcepts", s.ownedConcepts.getEReference());
}

@lazy
rule Concept
	transform s : DSL!Concept
	to t : SysMLine!ItemUsage
	extends Base{
	//Concept.Concept -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Concept.Concept -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Concept.Concept -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Concept.Concept -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Concept.Concept -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Concept.Concept -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Concept.Concept -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Concept.Concept -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Concept.Concept -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Concept.Concept -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Concept.Concept -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Concept.Concept -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Concept.Concept -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Concept.Concept -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Concept.Concept -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Concept.Concept -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Concept.Concept -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Concept.Concept -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Concept.Concept -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Concept.Concept -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Concept.Concept -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Concept.Concept -> EReference : compliances
	if (s.compliances.getEReference() != null) t.addNewReference("compliances", s.compliances.getEReference());
	//Concept.Concept -> EReference : compositeLinks
	if (s.compositeLinks.getEReference() != null) t.addNewReference("compositeLinks", s.compositeLinks.getEReference());
}

@lazy
rule ConceptCompliance
	transform s : DSL!ConceptCompliance
	to t : SysMLine!ItemUsage
	extends Base{
	//ConceptCompliance.ConceptCompliance -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ConceptCompliance.ConceptCompliance -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ConceptCompliance.ConceptCompliance -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ConceptCompliance.ConceptCompliance -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ConceptCompliance.ConceptCompliance -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ConceptCompliance.ConceptCompliance -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ConceptCompliance.ConceptCompliance -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ConceptCompliance.ConceptCompliance -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ConceptCompliance.ConceptCompliance -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ConceptCompliance.ConceptCompliance -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ConceptCompliance.ConceptCompliance -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ConceptCompliance.ConceptCompliance -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ConceptCompliance.ConceptCompliance -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ConceptCompliance.ConceptCompliance -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ConceptCompliance.ConceptCompliance -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ConceptCompliance.ConceptCompliance -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ConceptCompliance.ConceptCompliance -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ConceptCompliance.ConceptCompliance -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ConceptCompliance.ConceptCompliance -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ConceptCompliance.ConceptCompliance -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ConceptCompliance.ConceptCompliance -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ConceptCompliance.ConceptCompliance -> EReference : complyWithConcept
	if (s.complyWithConcept.getEReference() != null) t.addNewReference("complyWithConcept", s.complyWithConcept.getEReference());
	//ConceptCompliance.ConceptCompliance -> EReference : compliantCapability
	if (s.compliantCapability.getEReference() != null) t.addNewReference("compliantCapability", s.compliantCapability.getEReference());
}

@lazy
rule ItemInConcept
	transform s : DSL!ItemInConcept
	to t : SysMLine!ItemUsage
	extends Base{
	//ItemInConcept.ItemInConcept -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ItemInConcept.ItemInConcept -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ItemInConcept.ItemInConcept -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ItemInConcept.ItemInConcept -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ItemInConcept.ItemInConcept -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ItemInConcept.ItemInConcept -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ItemInConcept.ItemInConcept -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ItemInConcept.ItemInConcept -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ItemInConcept.ItemInConcept -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ItemInConcept.ItemInConcept -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ItemInConcept.ItemInConcept -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ItemInConcept.ItemInConcept -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ItemInConcept.ItemInConcept -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ItemInConcept.ItemInConcept -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ItemInConcept.ItemInConcept -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ItemInConcept.ItemInConcept -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ItemInConcept.ItemInConcept -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ItemInConcept.ItemInConcept -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ItemInConcept.ItemInConcept -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ItemInConcept.ItemInConcept -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ItemInConcept.ItemInConcept -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ItemInConcept.ItemInConcept -> EReference : concept
	if (s.concept.getEReference() != null) t.addNewReference("concept", s.concept.getEReference());
	//ItemInConcept.ItemInConcept -> EReference : item
	if (s.item.getEReference() != null) t.addNewReference("item", s.item.getEReference());
}

@lazy
rule AbstractConceptItem
	transform s : DSL!AbstractConceptItem
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractConceptItem.AbstractConceptItem -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractConceptItem.AbstractConceptItem -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractConceptItem.AbstractConceptItem -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//AbstractConceptItem.AbstractConceptItem -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractConceptItem.AbstractConceptItem -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractConceptItem.AbstractConceptItem -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractConceptItem.AbstractConceptItem -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractConceptItem.AbstractConceptItem -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractConceptItem.AbstractConceptItem -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//AbstractConceptItem.AbstractConceptItem -> EAttribute : actor
	if (s.actor.getEAttribute() != null) t.addNewAttribute("actor", s.actor.getEAttribute());
	//AbstractConceptItem.AbstractConceptItem -> EAttribute : human
	if (s.human.getEAttribute() != null) t.addNewAttribute("human", s.human.getEAttribute());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null) t.addNewReference("ownedFunctionalAllocation", s.ownedFunctionalAllocation.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null) t.addNewReference("functionalAllocations", s.functionalAllocations.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null) t.addNewReference("allocatedFunctions", s.allocatedFunctions.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null) t.addNewReference("ownedInterfaceAllocations", s.ownedInterfaceAllocations.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null) t.addNewReference("provisionedInterfaceAllocations", s.provisionedInterfaceAllocations.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null) t.addNewReference("allocatedInterfaces", s.allocatedInterfaces.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null) t.addNewReference("ownedCommunicationLinks", s.ownedCommunicationLinks.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : produce
	if (s.produce.getEReference() != null) t.addNewReference("produce", s.produce.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : consume
	if (s.consume.getEReference() != null) t.addNewReference("consume", s.consume.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : send
	if (s.send.getEReference() != null) t.addNewReference("send", s.send.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : receive
	if (s.receive.getEReference() != null) t.addNewReference("receive", s.receive.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : call
	if (s.call.getEReference() != null) t.addNewReference("call", s.call.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : execute
	if (s.execute.getEReference() != null) t.addNewReference("execute", s.execute.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : write
	if (s.write.getEReference() != null) t.addNewReference("write", s.write.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : access
	if (s.access.getEReference() != null) t.addNewReference("access", s.access.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : acquire
	if (s.acquire.getEReference() != null) t.addNewReference("acquire", s.acquire.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : transmit
	if (s.transmit.getEReference() != null) t.addNewReference("transmit", s.transmit.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null) t.addNewReference("ownedInterfaceUses", s.ownedInterfaceUses.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null) t.addNewReference("usedInterfaceLinks", s.usedInterfaceLinks.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null) t.addNewReference("usedInterfaces", s.usedInterfaces.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null) t.addNewReference("ownedInterfaceImplementations", s.ownedInterfaceImplementations.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null) t.addNewReference("implementedInterfaceLinks", s.implementedInterfaceLinks.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null) t.addNewReference("implementedInterfaces", s.implementedInterfaces.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null) t.addNewReference("ownedComponentRealizations", s.ownedComponentRealizations.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null) t.addNewReference("realizedComponents", s.realizedComponents.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null) t.addNewReference("realizingComponents", s.realizingComponents.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null) t.addNewReference("containedComponentPorts", s.containedComponentPorts.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : containedParts
	if (s.containedParts.getEReference() != null) t.addNewReference("containedParts", s.containedParts.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null) t.addNewReference("containedPhysicalPorts", s.containedPhysicalPorts.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null) t.addNewReference("ownedPhysicalPath", s.ownedPhysicalPath.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : representingParts
	if (s.representingParts.getEReference() != null) t.addNewReference("representingParts", s.representingParts.getEReference());
	//AbstractConceptItem.AbstractConceptItem -> EReference : composingLinks
	if (s.composingLinks.getEReference() != null) t.addNewReference("composingLinks", s.composingLinks.getEReference());
}

@lazy
rule CommunityOfInterest
	transform s : DSL!CommunityOfInterest
	to t : SysMLine!ItemUsage
	extends Base{
	//CommunityOfInterest.CommunityOfInterest -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CommunityOfInterest.CommunityOfInterest -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CommunityOfInterest.CommunityOfInterest -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CommunityOfInterest.CommunityOfInterest -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CommunityOfInterest.CommunityOfInterest -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CommunityOfInterest.CommunityOfInterest -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CommunityOfInterest.CommunityOfInterest -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CommunityOfInterest.CommunityOfInterest -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CommunityOfInterest.CommunityOfInterest -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CommunityOfInterest.CommunityOfInterest -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CommunityOfInterest.CommunityOfInterest -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CommunityOfInterest.CommunityOfInterest -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CommunityOfInterest.CommunityOfInterest -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CommunityOfInterest.CommunityOfInterest -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CommunityOfInterest.CommunityOfInterest -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CommunityOfInterest.CommunityOfInterest -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CommunityOfInterest.CommunityOfInterest -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CommunityOfInterest.CommunityOfInterest -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CommunityOfInterest.CommunityOfInterest -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CommunityOfInterest.CommunityOfInterest -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CommunityOfInterest.CommunityOfInterest -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CommunityOfInterest.CommunityOfInterest -> EReference : communityOfInterestCompositions
	if (s.communityOfInterestCompositions.getEReference() != null) t.addNewReference("communityOfInterestCompositions", s.communityOfInterestCompositions.getEReference());
}

@lazy
rule CommunityOfInterestComposition
	transform s : DSL!CommunityOfInterestComposition
	to t : SysMLine!ItemUsage
	extends Base{
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EReference : communityOfInterest
	if (s.communityOfInterest.getEReference() != null) t.addNewReference("communityOfInterest", s.communityOfInterest.getEReference());
	//CommunityOfInterestComposition.CommunityOfInterestComposition -> EReference : interestedOrganisationUnit
	if (s.interestedOrganisationUnit.getEReference() != null) t.addNewReference("interestedOrganisationUnit", s.interestedOrganisationUnit.getEReference());
}

@lazy
rule OrganisationalUnit
	transform s : DSL!OrganisationalUnit
	to t : SysMLine!ItemUsage
	extends Base{
	//OrganisationalUnit.OrganisationalUnit -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OrganisationalUnit.OrganisationalUnit -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OrganisationalUnit.OrganisationalUnit -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//OrganisationalUnit.OrganisationalUnit -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OrganisationalUnit.OrganisationalUnit -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OrganisationalUnit.OrganisationalUnit -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OrganisationalUnit.OrganisationalUnit -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OrganisationalUnit.OrganisationalUnit -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OrganisationalUnit.OrganisationalUnit -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OrganisationalUnit.OrganisationalUnit -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OrganisationalUnit.OrganisationalUnit -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OrganisationalUnit.OrganisationalUnit -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OrganisationalUnit.OrganisationalUnit -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OrganisationalUnit.OrganisationalUnit -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OrganisationalUnit.OrganisationalUnit -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OrganisationalUnit.OrganisationalUnit -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OrganisationalUnit.OrganisationalUnit -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OrganisationalUnit.OrganisationalUnit -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OrganisationalUnit.OrganisationalUnit -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OrganisationalUnit.OrganisationalUnit -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OrganisationalUnit.OrganisationalUnit -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//OrganisationalUnit.OrganisationalUnit -> EReference : organisationalUnitCompositions
	if (s.organisationalUnitCompositions.getEReference() != null) t.addNewReference("organisationalUnitCompositions", s.organisationalUnitCompositions.getEReference());
	//OrganisationalUnit.OrganisationalUnit -> EReference : communityOfInterestMemberships
	if (s.communityOfInterestMemberships.getEReference() != null) t.addNewReference("communityOfInterestMemberships", s.communityOfInterestMemberships.getEReference());
}

@lazy
rule OrganisationalUnitComposition
	transform s : DSL!OrganisationalUnitComposition
	to t : SysMLine!ItemUsage
	extends Base{
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EReference : organisationalUnit
	if (s.organisationalUnit.getEReference() != null) t.addNewReference("organisationalUnit", s.organisationalUnit.getEReference());
	//OrganisationalUnitComposition.OrganisationalUnitComposition -> EReference : participatingEntity
	if (s.participatingEntity.getEReference() != null) t.addNewReference("participatingEntity", s.participatingEntity.getEReference());
}

@lazy
rule Location
	transform s : DSL!Location
	to t : SysMLine!ItemUsage
	extends Base{
	//Location.Location -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Location.Location -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Location.Location -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Location.Location -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Location.Location -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Location.Location -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Location.Location -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Location.Location -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Location.Location -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//Location.Location -> EAttribute : actor
	if (s.actor.getEAttribute() != null) t.addNewAttribute("actor", s.actor.getEAttribute());
	//Location.Location -> EAttribute : human
	if (s.human.getEAttribute() != null) t.addNewAttribute("human", s.human.getEAttribute());
	//Location.Location -> EAttribute : locationDescription
	if (s.locationDescription.getEAttribute() != null) t.addNewAttribute("locationDescription", s.locationDescription.getEAttribute());
	//Location.Location -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Location.Location -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Location.Location -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Location.Location -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Location.Location -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//Location.Location -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Location.Location -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Location.Location -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Location.Location -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Location.Location -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Location.Location -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Location.Location -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Location.Location -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Location.Location -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Location.Location -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Location.Location -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Location.Location -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Location.Location -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//Location.Location -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null) t.addNewReference("ownedFunctionalAllocation", s.ownedFunctionalAllocation.getEReference());
	//Location.Location -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//Location.Location -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//Location.Location -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null) t.addNewReference("functionalAllocations", s.functionalAllocations.getEReference());
	//Location.Location -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null) t.addNewReference("allocatedFunctions", s.allocatedFunctions.getEReference());
	//Location.Location -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//Location.Location -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
	//Location.Location -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//Location.Location -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//Location.Location -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//Location.Location -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//Location.Location -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//Location.Location -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//Location.Location -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//Location.Location -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//Location.Location -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//Location.Location -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//Location.Location -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//Location.Location -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null) t.addNewReference("ownedInterfaceAllocations", s.ownedInterfaceAllocations.getEReference());
	//Location.Location -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null) t.addNewReference("provisionedInterfaceAllocations", s.provisionedInterfaceAllocations.getEReference());
	//Location.Location -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null) t.addNewReference("allocatedInterfaces", s.allocatedInterfaces.getEReference());
	//Location.Location -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null) t.addNewReference("ownedCommunicationLinks", s.ownedCommunicationLinks.getEReference());
	//Location.Location -> EReference : produce
	if (s.produce.getEReference() != null) t.addNewReference("produce", s.produce.getEReference());
	//Location.Location -> EReference : consume
	if (s.consume.getEReference() != null) t.addNewReference("consume", s.consume.getEReference());
	//Location.Location -> EReference : send
	if (s.send.getEReference() != null) t.addNewReference("send", s.send.getEReference());
	//Location.Location -> EReference : receive
	if (s.receive.getEReference() != null) t.addNewReference("receive", s.receive.getEReference());
	//Location.Location -> EReference : call
	if (s.call.getEReference() != null) t.addNewReference("call", s.call.getEReference());
	//Location.Location -> EReference : execute
	if (s.execute.getEReference() != null) t.addNewReference("execute", s.execute.getEReference());
	//Location.Location -> EReference : write
	if (s.write.getEReference() != null) t.addNewReference("write", s.write.getEReference());
	//Location.Location -> EReference : access
	if (s.access.getEReference() != null) t.addNewReference("access", s.access.getEReference());
	//Location.Location -> EReference : acquire
	if (s.acquire.getEReference() != null) t.addNewReference("acquire", s.acquire.getEReference());
	//Location.Location -> EReference : transmit
	if (s.transmit.getEReference() != null) t.addNewReference("transmit", s.transmit.getEReference());
	//Location.Location -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null) t.addNewReference("ownedInterfaceUses", s.ownedInterfaceUses.getEReference());
	//Location.Location -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null) t.addNewReference("usedInterfaceLinks", s.usedInterfaceLinks.getEReference());
	//Location.Location -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null) t.addNewReference("usedInterfaces", s.usedInterfaces.getEReference());
	//Location.Location -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null) t.addNewReference("ownedInterfaceImplementations", s.ownedInterfaceImplementations.getEReference());
	//Location.Location -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null) t.addNewReference("implementedInterfaceLinks", s.implementedInterfaceLinks.getEReference());
	//Location.Location -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null) t.addNewReference("implementedInterfaces", s.implementedInterfaces.getEReference());
	//Location.Location -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null) t.addNewReference("ownedComponentRealizations", s.ownedComponentRealizations.getEReference());
	//Location.Location -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null) t.addNewReference("realizedComponents", s.realizedComponents.getEReference());
	//Location.Location -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null) t.addNewReference("realizingComponents", s.realizingComponents.getEReference());
	//Location.Location -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//Location.Location -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//Location.Location -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null) t.addNewReference("containedComponentPorts", s.containedComponentPorts.getEReference());
	//Location.Location -> EReference : containedParts
	if (s.containedParts.getEReference() != null) t.addNewReference("containedParts", s.containedParts.getEReference());
	//Location.Location -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null) t.addNewReference("containedPhysicalPorts", s.containedPhysicalPorts.getEReference());
	//Location.Location -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null) t.addNewReference("ownedPhysicalPath", s.ownedPhysicalPath.getEReference());
	//Location.Location -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//Location.Location -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//Location.Location -> EReference : representingParts
	if (s.representingParts.getEReference() != null) t.addNewReference("representingParts", s.representingParts.getEReference());
	//Location.Location -> EReference : composingLinks
	if (s.composingLinks.getEReference() != null) t.addNewReference("composingLinks", s.composingLinks.getEReference());
	//Location.Location -> EReference : locatedEntities
	if (s.locatedEntities.getEReference() != null) t.addNewReference("locatedEntities", s.locatedEntities.getEReference());
}

@lazy
rule CapabilityConfiguration
	transform s : DSL!CapabilityConfiguration
	to t : SysMLine!ItemUsage
	extends Base{
	//CapabilityConfiguration.CapabilityConfiguration -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CapabilityConfiguration.CapabilityConfiguration -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CapabilityConfiguration.CapabilityConfiguration -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CapabilityConfiguration.CapabilityConfiguration -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CapabilityConfiguration.CapabilityConfiguration -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CapabilityConfiguration.CapabilityConfiguration -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CapabilityConfiguration.CapabilityConfiguration -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CapabilityConfiguration.CapabilityConfiguration -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CapabilityConfiguration.CapabilityConfiguration -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//CapabilityConfiguration.CapabilityConfiguration -> EAttribute : actor
	if (s.actor.getEAttribute() != null) t.addNewAttribute("actor", s.actor.getEAttribute());
	//CapabilityConfiguration.CapabilityConfiguration -> EAttribute : human
	if (s.human.getEAttribute() != null) t.addNewAttribute("human", s.human.getEAttribute());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null) t.addNewReference("ownedFunctionalAllocation", s.ownedFunctionalAllocation.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null) t.addNewReference("functionalAllocations", s.functionalAllocations.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null) t.addNewReference("allocatedFunctions", s.allocatedFunctions.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null) t.addNewReference("ownedInterfaceAllocations", s.ownedInterfaceAllocations.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null) t.addNewReference("provisionedInterfaceAllocations", s.provisionedInterfaceAllocations.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null) t.addNewReference("allocatedInterfaces", s.allocatedInterfaces.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null) t.addNewReference("ownedCommunicationLinks", s.ownedCommunicationLinks.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : produce
	if (s.produce.getEReference() != null) t.addNewReference("produce", s.produce.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : consume
	if (s.consume.getEReference() != null) t.addNewReference("consume", s.consume.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : send
	if (s.send.getEReference() != null) t.addNewReference("send", s.send.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : receive
	if (s.receive.getEReference() != null) t.addNewReference("receive", s.receive.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : call
	if (s.call.getEReference() != null) t.addNewReference("call", s.call.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : execute
	if (s.execute.getEReference() != null) t.addNewReference("execute", s.execute.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : write
	if (s.write.getEReference() != null) t.addNewReference("write", s.write.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : access
	if (s.access.getEReference() != null) t.addNewReference("access", s.access.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : acquire
	if (s.acquire.getEReference() != null) t.addNewReference("acquire", s.acquire.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : transmit
	if (s.transmit.getEReference() != null) t.addNewReference("transmit", s.transmit.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null) t.addNewReference("ownedInterfaceUses", s.ownedInterfaceUses.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null) t.addNewReference("usedInterfaceLinks", s.usedInterfaceLinks.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null) t.addNewReference("usedInterfaces", s.usedInterfaces.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null) t.addNewReference("ownedInterfaceImplementations", s.ownedInterfaceImplementations.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null) t.addNewReference("implementedInterfaceLinks", s.implementedInterfaceLinks.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null) t.addNewReference("implementedInterfaces", s.implementedInterfaces.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null) t.addNewReference("ownedComponentRealizations", s.ownedComponentRealizations.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null) t.addNewReference("realizedComponents", s.realizedComponents.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null) t.addNewReference("realizingComponents", s.realizingComponents.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null) t.addNewReference("containedComponentPorts", s.containedComponentPorts.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : containedParts
	if (s.containedParts.getEReference() != null) t.addNewReference("containedParts", s.containedParts.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null) t.addNewReference("containedPhysicalPorts", s.containedPhysicalPorts.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null) t.addNewReference("ownedPhysicalPath", s.ownedPhysicalPath.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : representingParts
	if (s.representingParts.getEReference() != null) t.addNewReference("representingParts", s.representingParts.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : composingLinks
	if (s.composingLinks.getEReference() != null) t.addNewReference("composingLinks", s.composingLinks.getEReference());
	//CapabilityConfiguration.CapabilityConfiguration -> EReference : configuredCapability
	if (s.configuredCapability.getEReference() != null) t.addNewReference("configuredCapability", s.configuredCapability.getEReference());
}

@lazy
rule CommunicationMean
	transform s : DSL!CommunicationMean
	to t : SysMLine!ItemUsage
	extends Base{
	//CommunicationMean.CommunicationMean -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CommunicationMean.CommunicationMean -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CommunicationMean.CommunicationMean -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CommunicationMean.CommunicationMean -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CommunicationMean.CommunicationMean -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CommunicationMean.CommunicationMean -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CommunicationMean.CommunicationMean -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CommunicationMean.CommunicationMean -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CommunicationMean.CommunicationMean -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//CommunicationMean.CommunicationMean -> EAttribute : oriented
	if (s.oriented.getEAttribute() != null) t.addNewAttribute("oriented", s.oriented.getEAttribute());
	//CommunicationMean.CommunicationMean -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : invokingSequenceMessages
	if (s.invokingSequenceMessages.getEReference() != null) t.addNewReference("invokingSequenceMessages", s.invokingSequenceMessages.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : realizations
	if (s.realizations.getEReference() != null) t.addNewReference("realizations", s.realizations.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : convoyedInformations
	if (s.convoyedInformations.getEReference() != null) t.addNewReference("convoyedInformations", s.convoyedInformations.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : source
	if (s.source.getEReference() != null) t.addNewReference("source", s.source.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : target
	if (s.target.getEReference() != null) t.addNewReference("target", s.target.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : realizingActivityFlows
	if (s.realizingActivityFlows.getEReference() != null) t.addNewReference("realizingActivityFlows", s.realizingActivityFlows.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : containingLink
	if (s.containingLink.getEReference() != null) t.addNewReference("containingLink", s.containingLink.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : link
	if (s.link.getEReference() != null) t.addNewReference("link", s.link.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : outgoingExchangeSpecificationRealizations
	if (s.outgoingExchangeSpecificationRealizations.getEReference() != null) t.addNewReference("outgoingExchangeSpecificationRealizations", s.outgoingExchangeSpecificationRealizations.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : incomingExchangeSpecificationRealizations
	if (s.incomingExchangeSpecificationRealizations.getEReference() != null) t.addNewReference("incomingExchangeSpecificationRealizations", s.incomingExchangeSpecificationRealizations.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : allocatedFunctionalExchanges
	if (s.allocatedFunctionalExchanges.getEReference() != null) t.addNewReference("allocatedFunctionalExchanges", s.allocatedFunctionalExchanges.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : incomingComponentExchangeRealizations
	if (s.incomingComponentExchangeRealizations.getEReference() != null) t.addNewReference("incomingComponentExchangeRealizations", s.incomingComponentExchangeRealizations.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : outgoingComponentExchangeRealizations
	if (s.outgoingComponentExchangeRealizations.getEReference() != null) t.addNewReference("outgoingComponentExchangeRealizations", s.outgoingComponentExchangeRealizations.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : outgoingComponentExchangeFunctionalExchangeAllocations
	if (s.outgoingComponentExchangeFunctionalExchangeAllocations.getEReference() != null) t.addNewReference("outgoingComponentExchangeFunctionalExchangeAllocations", s.outgoingComponentExchangeFunctionalExchangeAllocations.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : ownedComponentExchangeFunctionalExchangeAllocations
	if (s.ownedComponentExchangeFunctionalExchangeAllocations.getEReference() != null) t.addNewReference("ownedComponentExchangeFunctionalExchangeAllocations", s.ownedComponentExchangeFunctionalExchangeAllocations.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : ownedComponentExchangeEnds
	if (s.ownedComponentExchangeEnds.getEReference() != null) t.addNewReference("ownedComponentExchangeEnds", s.ownedComponentExchangeEnds.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : sourcePort
	if (s.sourcePort.getEReference() != null) t.addNewReference("sourcePort", s.sourcePort.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : sourcePart
	if (s.sourcePart.getEReference() != null) t.addNewReference("sourcePart", s.sourcePart.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : targetPort
	if (s.targetPort.getEReference() != null) t.addNewReference("targetPort", s.targetPort.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : targetPart
	if (s.targetPart.getEReference() != null) t.addNewReference("targetPart", s.targetPart.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : categories
	if (s.categories.getEReference() != null) t.addNewReference("categories", s.categories.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : allocatorPhysicalLinks
	if (s.allocatorPhysicalLinks.getEReference() != null) t.addNewReference("allocatorPhysicalLinks", s.allocatorPhysicalLinks.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : realizedComponentExchanges
	if (s.realizedComponentExchanges.getEReference() != null) t.addNewReference("realizedComponentExchanges", s.realizedComponentExchanges.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : realizingComponentExchanges
	if (s.realizingComponentExchanges.getEReference() != null) t.addNewReference("realizingComponentExchanges", s.realizingComponentExchanges.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : sourceEntity
	if (s.sourceEntity.getEReference() != null) t.addNewReference("sourceEntity", s.sourceEntity.getEReference());
	//CommunicationMean.CommunicationMean -> EReference : targetEntity
	if (s.targetEntity.getEReference() != null) t.addNewReference("targetEntity", s.targetEntity.getEReference());
}

@lazy
rule EntityOperationalCapabilityInvolvement
	transform s : DSL!EntityOperationalCapabilityInvolvement
	to t : SysMLine!ItemUsage
	extends Base{
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EReference : involver
	if (s.involver.getEReference() != null) t.addNewReference("involver", s.involver.getEReference());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EReference : involved
	if (s.involved.getEReference() != null) t.addNewReference("involved", s.involved.getEReference());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EReference : entity
	if (s.entity.getEReference() != null) t.addNewReference("entity", s.entity.getEReference());
	//EntityOperationalCapabilityInvolvement.EntityOperationalCapabilityInvolvement -> EReference : capability
	if (s.capability.getEReference() != null) t.addNewReference("capability", s.capability.getEReference());
}


// ctx.ecore
@lazy
rule SystemAnalysis
	transform s : DSL!SystemAnalysis
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemAnalysis.SystemAnalysis -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SystemAnalysis.SystemAnalysis -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SystemAnalysis.SystemAnalysis -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//SystemAnalysis.SystemAnalysis -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SystemAnalysis.SystemAnalysis -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SystemAnalysis.SystemAnalysis -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SystemAnalysis.SystemAnalysis -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SystemAnalysis.SystemAnalysis -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SystemAnalysis.SystemAnalysis -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : ownedFunctionPkg
	if (s.ownedFunctionPkg.getEReference() != null) t.addNewReference("ownedFunctionPkg", s.ownedFunctionPkg.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : provisionedArchitectureAllocations
	if (s.provisionedArchitectureAllocations.getEReference() != null) t.addNewReference("provisionedArchitectureAllocations", s.provisionedArchitectureAllocations.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : provisioningArchitectureAllocations
	if (s.provisioningArchitectureAllocations.getEReference() != null) t.addNewReference("provisioningArchitectureAllocations", s.provisioningArchitectureAllocations.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : allocatedArchitectures
	if (s.allocatedArchitectures.getEReference() != null) t.addNewReference("allocatedArchitectures", s.allocatedArchitectures.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : allocatingArchitectures
	if (s.allocatingArchitectures.getEReference() != null) t.addNewReference("allocatingArchitectures", s.allocatingArchitectures.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : system
	if (s.system.getEReference() != null) t.addNewReference("system", s.system.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : ownedSystemComponentPkg
	if (s.ownedSystemComponentPkg.getEReference() != null) t.addNewReference("ownedSystemComponentPkg", s.ownedSystemComponentPkg.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : ownedMissionPkg
	if (s.ownedMissionPkg.getEReference() != null) t.addNewReference("ownedMissionPkg", s.ownedMissionPkg.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : containedCapabilityPkg
	if (s.containedCapabilityPkg.getEReference() != null) t.addNewReference("containedCapabilityPkg", s.containedCapabilityPkg.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : containedSystemFunctionPkg
	if (s.containedSystemFunctionPkg.getEReference() != null) t.addNewReference("containedSystemFunctionPkg", s.containedSystemFunctionPkg.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : ownedOperationalAnalysisRealizations
	if (s.ownedOperationalAnalysisRealizations.getEReference() != null) t.addNewReference("ownedOperationalAnalysisRealizations", s.ownedOperationalAnalysisRealizations.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : allocatedOperationalAnalysisRealizations
	if (s.allocatedOperationalAnalysisRealizations.getEReference() != null) t.addNewReference("allocatedOperationalAnalysisRealizations", s.allocatedOperationalAnalysisRealizations.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : allocatedOperationalAnalyses
	if (s.allocatedOperationalAnalyses.getEReference() != null) t.addNewReference("allocatedOperationalAnalyses", s.allocatedOperationalAnalyses.getEReference());
	//SystemAnalysis.SystemAnalysis -> EReference : allocatingLogicalArchitectures
	if (s.allocatingLogicalArchitectures.getEReference() != null) t.addNewReference("allocatingLogicalArchitectures", s.allocatingLogicalArchitectures.getEReference());
}

@lazy
rule SystemFunction
	transform s : DSL!SystemFunction
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemFunction.SystemFunction -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SystemFunction.SystemFunction -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SystemFunction.SystemFunction -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//SystemFunction.SystemFunction -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SystemFunction.SystemFunction -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SystemFunction.SystemFunction -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SystemFunction.SystemFunction -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SystemFunction.SystemFunction -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SystemFunction.SystemFunction -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//SystemFunction.SystemFunction -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//SystemFunction.SystemFunction -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//SystemFunction.SystemFunction -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//SystemFunction.SystemFunction -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//SystemFunction.SystemFunction -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//SystemFunction.SystemFunction -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//SystemFunction.SystemFunction -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//SystemFunction.SystemFunction -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null) t.addNewAttribute("aggregationKind", s.aggregationKind.getEAttribute());
	//SystemFunction.SystemFunction -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null) t.addNewAttribute("isDerived", s.isDerived.getEAttribute());
	//SystemFunction.SystemFunction -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null) t.addNewAttribute("isReadOnly", s.isReadOnly.getEAttribute());
	//SystemFunction.SystemFunction -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null) t.addNewAttribute("isPartOfKey", s.isPartOfKey.getEAttribute());
	//SystemFunction.SystemFunction -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//SystemFunction.SystemFunction -> EAttribute : condition
	if (s.condition.getEAttribute() != null) t.addNewAttribute("condition", s.condition.getEAttribute());
	//SystemFunction.SystemFunction -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SystemFunction.SystemFunction -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SystemFunction.SystemFunction -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SystemFunction.SystemFunction -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SystemFunction.SystemFunction -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SystemFunction.SystemFunction -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SystemFunction.SystemFunction -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SystemFunction.SystemFunction -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SystemFunction.SystemFunction -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SystemFunction.SystemFunction -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SystemFunction.SystemFunction -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SystemFunction.SystemFunction -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SystemFunction.SystemFunction -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SystemFunction.SystemFunction -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//SystemFunction.SystemFunction -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//SystemFunction.SystemFunction -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//SystemFunction.SystemFunction -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//SystemFunction.SystemFunction -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//SystemFunction.SystemFunction -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//SystemFunction.SystemFunction -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//SystemFunction.SystemFunction -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//SystemFunction.SystemFunction -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//SystemFunction.SystemFunction -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//SystemFunction.SystemFunction -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//SystemFunction.SystemFunction -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//SystemFunction.SystemFunction -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//SystemFunction.SystemFunction -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//SystemFunction.SystemFunction -> EReference : association
	if (s.association.getEReference() != null) t.addNewReference("association", s.association.getEReference());
	//SystemFunction.SystemFunction -> EReference : representingInstanceRoles
	if (s.representingInstanceRoles.getEReference() != null) t.addNewReference("representingInstanceRoles", s.representingInstanceRoles.getEReference());
	//SystemFunction.SystemFunction -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null) t.addNewReference("ownedFunctionalChains", s.ownedFunctionalChains.getEReference());
	//SystemFunction.SystemFunction -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//SystemFunction.SystemFunction -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//SystemFunction.SystemFunction -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//SystemFunction.SystemFunction -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//SystemFunction.SystemFunction -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//SystemFunction.SystemFunction -> EReference : ownedHandlers
	if (s.ownedHandlers.getEReference() != null) t.addNewReference("ownedHandlers", s.ownedHandlers.getEReference());
	//SystemFunction.SystemFunction -> EReference : localPrecondition
	if (s.localPrecondition.getEReference() != null) t.addNewReference("localPrecondition", s.localPrecondition.getEReference());
	//SystemFunction.SystemFunction -> EReference : localPostcondition
	if (s.localPostcondition.getEReference() != null) t.addNewReference("localPostcondition", s.localPostcondition.getEReference());
	//SystemFunction.SystemFunction -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context", s.context.getEReference());
	//SystemFunction.SystemFunction -> EReference : inputs
	if (s.inputs.getEReference() != null) t.addNewReference("inputs", s.inputs.getEReference());
	//SystemFunction.SystemFunction -> EReference : outputs
	if (s.outputs.getEReference() != null) t.addNewReference("outputs", s.outputs.getEReference());
	//SystemFunction.SystemFunction -> EReference : arguments
	if (s.arguments.getEReference() != null) t.addNewReference("arguments", s.arguments.getEReference());
	//SystemFunction.SystemFunction -> EReference : results
	if (s.results.getEReference() != null) t.addNewReference("results", s.results.getEReference());
	//SystemFunction.SystemFunction -> EReference : behavior
	if (s.behavior.getEReference() != null) t.addNewReference("behavior", s.behavior.getEReference());
	//SystemFunction.SystemFunction -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//SystemFunction.SystemFunction -> EReference : ownedFunctions
	if (s.ownedFunctions.getEReference() != null) t.addNewReference("ownedFunctions", s.ownedFunctions.getEReference());
	//SystemFunction.SystemFunction -> EReference : ownedFunctionRealizations
	if (s.ownedFunctionRealizations.getEReference() != null) t.addNewReference("ownedFunctionRealizations", s.ownedFunctionRealizations.getEReference());
	//SystemFunction.SystemFunction -> EReference : ownedFunctionalExchanges
	if (s.ownedFunctionalExchanges.getEReference() != null) t.addNewReference("ownedFunctionalExchanges", s.ownedFunctionalExchanges.getEReference());
	//SystemFunction.SystemFunction -> EReference : subFunctions
	if (s.subFunctions.getEReference() != null) t.addNewReference("subFunctions", s.subFunctions.getEReference());
	//SystemFunction.SystemFunction -> EReference : outFunctionRealizations
	if (s.outFunctionRealizations.getEReference() != null) t.addNewReference("outFunctionRealizations", s.outFunctionRealizations.getEReference());
	//SystemFunction.SystemFunction -> EReference : inFunctionRealizations
	if (s.inFunctionRealizations.getEReference() != null) t.addNewReference("inFunctionRealizations", s.inFunctionRealizations.getEReference());
	//SystemFunction.SystemFunction -> EReference : componentFunctionalAllocations
	if (s.componentFunctionalAllocations.getEReference() != null) t.addNewReference("componentFunctionalAllocations", s.componentFunctionalAllocations.getEReference());
	//SystemFunction.SystemFunction -> EReference : allocationBlocks
	if (s.allocationBlocks.getEReference() != null) t.addNewReference("allocationBlocks", s.allocationBlocks.getEReference());
	//SystemFunction.SystemFunction -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null) t.addNewReference("availableInStates", s.availableInStates.getEReference());
	//SystemFunction.SystemFunction -> EReference : involvingCapabilities
	if (s.involvingCapabilities.getEReference() != null) t.addNewReference("involvingCapabilities", s.involvingCapabilities.getEReference());
	//SystemFunction.SystemFunction -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null) t.addNewReference("involvingCapabilityRealizations", s.involvingCapabilityRealizations.getEReference());
	//SystemFunction.SystemFunction -> EReference : involvingFunctionalChains
	if (s.involvingFunctionalChains.getEReference() != null) t.addNewReference("involvingFunctionalChains", s.involvingFunctionalChains.getEReference());
	//SystemFunction.SystemFunction -> EReference : linkedStateMachine
	if (s.linkedStateMachine.getEReference() != null) t.addNewReference("linkedStateMachine", s.linkedStateMachine.getEReference());
	//SystemFunction.SystemFunction -> EReference : linkedFunctionSpecification
	if (s.linkedFunctionSpecification.getEReference() != null) t.addNewReference("linkedFunctionSpecification", s.linkedFunctionSpecification.getEReference());
	//SystemFunction.SystemFunction -> EReference : ownedSystemFunctionPkgs
	if (s.ownedSystemFunctionPkgs.getEReference() != null) t.addNewReference("ownedSystemFunctionPkgs", s.ownedSystemFunctionPkgs.getEReference());
	//SystemFunction.SystemFunction -> EReference : allocatingSystemComponents
	if (s.allocatingSystemComponents.getEReference() != null) t.addNewReference("allocatingSystemComponents", s.allocatingSystemComponents.getEReference());
	//SystemFunction.SystemFunction -> EReference : realizedOperationalActivities
	if (s.realizedOperationalActivities.getEReference() != null) t.addNewReference("realizedOperationalActivities", s.realizedOperationalActivities.getEReference());
	//SystemFunction.SystemFunction -> EReference : realizingLogicalFunctions
	if (s.realizingLogicalFunctions.getEReference() != null) t.addNewReference("realizingLogicalFunctions", s.realizingLogicalFunctions.getEReference());
	//SystemFunction.SystemFunction -> EReference : containedSystemFunctions
	if (s.containedSystemFunctions.getEReference() != null) t.addNewReference("containedSystemFunctions", s.containedSystemFunctions.getEReference());
	//SystemFunction.SystemFunction -> EReference : childrenSystemFunctions
	if (s.childrenSystemFunctions.getEReference() != null) t.addNewReference("childrenSystemFunctions", s.childrenSystemFunctions.getEReference());
}

@lazy
rule SystemFunctionPkg
	transform s : DSL!SystemFunctionPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemFunctionPkg.SystemFunctionPkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SystemFunctionPkg.SystemFunctionPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SystemFunctionPkg.SystemFunctionPkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//SystemFunctionPkg.SystemFunctionPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SystemFunctionPkg.SystemFunctionPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SystemFunctionPkg.SystemFunctionPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SystemFunctionPkg.SystemFunctionPkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SystemFunctionPkg.SystemFunctionPkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : ownedExchanges
	if (s.ownedExchanges.getEReference() != null) t.addNewReference("ownedExchanges", s.ownedExchanges.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : ownedExchangeSpecificationRealizations
	if (s.ownedExchangeSpecificationRealizations.getEReference() != null) t.addNewReference("ownedExchangeSpecificationRealizations", s.ownedExchangeSpecificationRealizations.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : ownedCategories
	if (s.ownedCategories.getEReference() != null) t.addNewReference("ownedCategories", s.ownedCategories.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : ownedFunctionSpecifications
	if (s.ownedFunctionSpecifications.getEReference() != null) t.addNewReference("ownedFunctionSpecifications", s.ownedFunctionSpecifications.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : ownedSystemFunctions
	if (s.ownedSystemFunctions.getEReference() != null) t.addNewReference("ownedSystemFunctions", s.ownedSystemFunctions.getEReference());
	//SystemFunctionPkg.SystemFunctionPkg -> EReference : ownedSystemFunctionPkgs
	if (s.ownedSystemFunctionPkgs.getEReference() != null) t.addNewReference("ownedSystemFunctionPkgs", s.ownedSystemFunctionPkgs.getEReference());
}

@lazy
rule SystemCommunicationHook
	transform s : DSL!SystemCommunicationHook
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemCommunicationHook.SystemCommunicationHook -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SystemCommunicationHook.SystemCommunicationHook -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SystemCommunicationHook.SystemCommunicationHook -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//SystemCommunicationHook.SystemCommunicationHook -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SystemCommunicationHook.SystemCommunicationHook -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SystemCommunicationHook.SystemCommunicationHook -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SystemCommunicationHook.SystemCommunicationHook -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SystemCommunicationHook.SystemCommunicationHook -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SystemCommunicationHook.SystemCommunicationHook -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SystemCommunicationHook.SystemCommunicationHook -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SystemCommunicationHook.SystemCommunicationHook -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SystemCommunicationHook.SystemCommunicationHook -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SystemCommunicationHook.SystemCommunicationHook -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SystemCommunicationHook.SystemCommunicationHook -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SystemCommunicationHook.SystemCommunicationHook -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SystemCommunicationHook.SystemCommunicationHook -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SystemCommunicationHook.SystemCommunicationHook -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SystemCommunicationHook.SystemCommunicationHook -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SystemCommunicationHook.SystemCommunicationHook -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SystemCommunicationHook.SystemCommunicationHook -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SystemCommunicationHook.SystemCommunicationHook -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SystemCommunicationHook.SystemCommunicationHook -> EReference : communication
	if (s.communication.getEReference() != null) t.addNewReference("communication", s.communication.getEReference());
	//SystemCommunicationHook.SystemCommunicationHook -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
}

@lazy
rule SystemCommunication
	transform s : DSL!SystemCommunication
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemCommunication.SystemCommunication -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SystemCommunication.SystemCommunication -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SystemCommunication.SystemCommunication -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SystemCommunication.SystemCommunication -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SystemCommunication.SystemCommunication -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SystemCommunication.SystemCommunication -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SystemCommunication.SystemCommunication -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SystemCommunication.SystemCommunication -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SystemCommunication.SystemCommunication -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SystemCommunication.SystemCommunication -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SystemCommunication.SystemCommunication -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SystemCommunication.SystemCommunication -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//SystemCommunication.SystemCommunication -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SystemCommunication.SystemCommunication -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SystemCommunication.SystemCommunication -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SystemCommunication.SystemCommunication -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SystemCommunication.SystemCommunication -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SystemCommunication.SystemCommunication -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SystemCommunication.SystemCommunication -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SystemCommunication.SystemCommunication -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SystemCommunication.SystemCommunication -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SystemCommunication.SystemCommunication -> EReference : ends
	if (s.ends.getEReference() != null) t.addNewReference("ends", s.ends.getEReference());
}

@lazy
rule CapabilityInvolvement
	transform s : DSL!CapabilityInvolvement
	to t : SysMLine!ItemUsage
	extends Base{
	//CapabilityInvolvement.CapabilityInvolvement -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CapabilityInvolvement.CapabilityInvolvement -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CapabilityInvolvement.CapabilityInvolvement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CapabilityInvolvement.CapabilityInvolvement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CapabilityInvolvement.CapabilityInvolvement -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CapabilityInvolvement.CapabilityInvolvement -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CapabilityInvolvement.CapabilityInvolvement -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CapabilityInvolvement.CapabilityInvolvement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CapabilityInvolvement.CapabilityInvolvement -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CapabilityInvolvement.CapabilityInvolvement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CapabilityInvolvement.CapabilityInvolvement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CapabilityInvolvement.CapabilityInvolvement -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//CapabilityInvolvement.CapabilityInvolvement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CapabilityInvolvement.CapabilityInvolvement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CapabilityInvolvement.CapabilityInvolvement -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CapabilityInvolvement.CapabilityInvolvement -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CapabilityInvolvement.CapabilityInvolvement -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CapabilityInvolvement.CapabilityInvolvement -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CapabilityInvolvement.CapabilityInvolvement -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CapabilityInvolvement.CapabilityInvolvement -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CapabilityInvolvement.CapabilityInvolvement -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CapabilityInvolvement.CapabilityInvolvement -> EReference : involver
	if (s.involver.getEReference() != null) t.addNewReference("involver", s.involver.getEReference());
	//CapabilityInvolvement.CapabilityInvolvement -> EReference : involved
	if (s.involved.getEReference() != null) t.addNewReference("involved", s.involved.getEReference());
	//CapabilityInvolvement.CapabilityInvolvement -> EReference : systemComponent
	if (s.systemComponent.getEReference() != null) t.addNewReference("systemComponent", s.systemComponent.getEReference());
	//CapabilityInvolvement.CapabilityInvolvement -> EReference : capability
	if (s.capability.getEReference() != null) t.addNewReference("capability", s.capability.getEReference());
}

@lazy
rule MissionInvolvement
	transform s : DSL!MissionInvolvement
	to t : SysMLine!ItemUsage
	extends Base{
	//MissionInvolvement.MissionInvolvement -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//MissionInvolvement.MissionInvolvement -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//MissionInvolvement.MissionInvolvement -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//MissionInvolvement.MissionInvolvement -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//MissionInvolvement.MissionInvolvement -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//MissionInvolvement.MissionInvolvement -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//MissionInvolvement.MissionInvolvement -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//MissionInvolvement.MissionInvolvement -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//MissionInvolvement.MissionInvolvement -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//MissionInvolvement.MissionInvolvement -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//MissionInvolvement.MissionInvolvement -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//MissionInvolvement.MissionInvolvement -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//MissionInvolvement.MissionInvolvement -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//MissionInvolvement.MissionInvolvement -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//MissionInvolvement.MissionInvolvement -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//MissionInvolvement.MissionInvolvement -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//MissionInvolvement.MissionInvolvement -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//MissionInvolvement.MissionInvolvement -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//MissionInvolvement.MissionInvolvement -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//MissionInvolvement.MissionInvolvement -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//MissionInvolvement.MissionInvolvement -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//MissionInvolvement.MissionInvolvement -> EReference : involver
	if (s.involver.getEReference() != null) t.addNewReference("involver", s.involver.getEReference());
	//MissionInvolvement.MissionInvolvement -> EReference : involved
	if (s.involved.getEReference() != null) t.addNewReference("involved", s.involved.getEReference());
	//MissionInvolvement.MissionInvolvement -> EReference : systemComponent
	if (s.systemComponent.getEReference() != null) t.addNewReference("systemComponent", s.systemComponent.getEReference());
	//MissionInvolvement.MissionInvolvement -> EReference : mission
	if (s.mission.getEReference() != null) t.addNewReference("mission", s.mission.getEReference());
}

@lazy
rule Mission
	transform s : DSL!Mission
	to t : SysMLine!ItemUsage
	extends Base{
	//Mission.Mission -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Mission.Mission -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Mission.Mission -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Mission.Mission -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Mission.Mission -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Mission.Mission -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Mission.Mission -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Mission.Mission -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Mission.Mission -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Mission.Mission -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Mission.Mission -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Mission.Mission -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Mission.Mission -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Mission.Mission -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Mission.Mission -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Mission.Mission -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Mission.Mission -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Mission.Mission -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Mission.Mission -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Mission.Mission -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Mission.Mission -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Mission.Mission -> EReference : involvedInvolvements
	if (s.involvedInvolvements.getEReference() != null) t.addNewReference("involvedInvolvements", s.involvedInvolvements.getEReference());
	//Mission.Mission -> EReference : ownedMissionInvolvements
	if (s.ownedMissionInvolvements.getEReference() != null) t.addNewReference("ownedMissionInvolvements", s.ownedMissionInvolvements.getEReference());
	//Mission.Mission -> EReference : involvedSystemComponents
	if (s.involvedSystemComponents.getEReference() != null) t.addNewReference("involvedSystemComponents", s.involvedSystemComponents.getEReference());
	//Mission.Mission -> EReference : ownedCapabilityExploitations
	if (s.ownedCapabilityExploitations.getEReference() != null) t.addNewReference("ownedCapabilityExploitations", s.ownedCapabilityExploitations.getEReference());
	//Mission.Mission -> EReference : exploitedCapabilities
	if (s.exploitedCapabilities.getEReference() != null) t.addNewReference("exploitedCapabilities", s.exploitedCapabilities.getEReference());
}

@lazy
rule MissionPkg
	transform s : DSL!MissionPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//MissionPkg.MissionPkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//MissionPkg.MissionPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//MissionPkg.MissionPkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//MissionPkg.MissionPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//MissionPkg.MissionPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//MissionPkg.MissionPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//MissionPkg.MissionPkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//MissionPkg.MissionPkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//MissionPkg.MissionPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//MissionPkg.MissionPkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//MissionPkg.MissionPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//MissionPkg.MissionPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//MissionPkg.MissionPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//MissionPkg.MissionPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//MissionPkg.MissionPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//MissionPkg.MissionPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//MissionPkg.MissionPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//MissionPkg.MissionPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//MissionPkg.MissionPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//MissionPkg.MissionPkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//MissionPkg.MissionPkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//MissionPkg.MissionPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//MissionPkg.MissionPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//MissionPkg.MissionPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//MissionPkg.MissionPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//MissionPkg.MissionPkg -> EReference : ownedMissionPkgs
	if (s.ownedMissionPkgs.getEReference() != null) t.addNewReference("ownedMissionPkgs", s.ownedMissionPkgs.getEReference());
	//MissionPkg.MissionPkg -> EReference : ownedMissions
	if (s.ownedMissions.getEReference() != null) t.addNewReference("ownedMissions", s.ownedMissions.getEReference());
}

@lazy
rule Capability
	transform s : DSL!Capability
	to t : SysMLine!ItemUsage
	extends Base{
	//Capability.Capability -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//Capability.Capability -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//Capability.Capability -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//Capability.Capability -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//Capability.Capability -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//Capability.Capability -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//Capability.Capability -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//Capability.Capability -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//Capability.Capability -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//Capability.Capability -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//Capability.Capability -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//Capability.Capability -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//Capability.Capability -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//Capability.Capability -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//Capability.Capability -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//Capability.Capability -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//Capability.Capability -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//Capability.Capability -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//Capability.Capability -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//Capability.Capability -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//Capability.Capability -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//Capability.Capability -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//Capability.Capability -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//Capability.Capability -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//Capability.Capability -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//Capability.Capability -> EReference : involvedInvolvements
	if (s.involvedInvolvements.getEReference() != null) t.addNewReference("involvedInvolvements", s.involvedInvolvements.getEReference());
	//Capability.Capability -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null) t.addNewReference("ownedFunctionalChains", s.ownedFunctionalChains.getEReference());
	//Capability.Capability -> EReference : preCondition
	if (s.preCondition.getEReference() != null) t.addNewReference("preCondition", s.preCondition.getEReference());
	//Capability.Capability -> EReference : postCondition
	if (s.postCondition.getEReference() != null) t.addNewReference("postCondition", s.postCondition.getEReference());
	//Capability.Capability -> EReference : ownedScenarios
	if (s.ownedScenarios.getEReference() != null) t.addNewReference("ownedScenarios", s.ownedScenarios.getEReference());
	//Capability.Capability -> EReference : incomingCapabilityAllocation
	if (s.incomingCapabilityAllocation.getEReference() != null) t.addNewReference("incomingCapabilityAllocation", s.incomingCapabilityAllocation.getEReference());
	//Capability.Capability -> EReference : outgoingCapabilityAllocation
	if (s.outgoingCapabilityAllocation.getEReference() != null) t.addNewReference("outgoingCapabilityAllocation", s.outgoingCapabilityAllocation.getEReference());
	//Capability.Capability -> EReference : extends_
	if (s.~extends.getEReference() != null) t.addNewReference("'extends'", s.~extends.getEReference());
	//Capability.Capability -> EReference : extending
	if (s.extending.getEReference() != null) t.addNewReference("extending", s.extending.getEReference());
	//Capability.Capability -> EReference : abstractCapabilityExtensionPoints
	if (s.abstractCapabilityExtensionPoints.getEReference() != null) t.addNewReference("abstractCapabilityExtensionPoints", s.abstractCapabilityExtensionPoints.getEReference());
	//Capability.Capability -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//Capability.Capability -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//Capability.Capability -> EReference : includes
	if (s.includes.getEReference() != null) t.addNewReference("includes", s.includes.getEReference());
	//Capability.Capability -> EReference : including
	if (s.including.getEReference() != null) t.addNewReference("including", s.including.getEReference());
	//Capability.Capability -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//Capability.Capability -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//Capability.Capability -> EReference : includedAbstractCapabilities
	if (s.includedAbstractCapabilities.getEReference() != null) t.addNewReference("includedAbstractCapabilities", s.includedAbstractCapabilities.getEReference());
	//Capability.Capability -> EReference : includingAbstractCapabilities
	if (s.includingAbstractCapabilities.getEReference() != null) t.addNewReference("includingAbstractCapabilities", s.includingAbstractCapabilities.getEReference());
	//Capability.Capability -> EReference : extendedAbstractCapabilities
	if (s.extendedAbstractCapabilities.getEReference() != null) t.addNewReference("extendedAbstractCapabilities", s.extendedAbstractCapabilities.getEReference());
	//Capability.Capability -> EReference : extendingAbstractCapabilities
	if (s.extendingAbstractCapabilities.getEReference() != null) t.addNewReference("extendingAbstractCapabilities", s.extendingAbstractCapabilities.getEReference());
	//Capability.Capability -> EReference : ownedFunctionalChainAbstractCapabilityInvolvements
	if (s.ownedFunctionalChainAbstractCapabilityInvolvements.getEReference() != null) t.addNewReference("ownedFunctionalChainAbstractCapabilityInvolvements", s.ownedFunctionalChainAbstractCapabilityInvolvements.getEReference());
	//Capability.Capability -> EReference : ownedAbstractFunctionAbstractCapabilityInvolvements
	if (s.ownedAbstractFunctionAbstractCapabilityInvolvements.getEReference() != null) t.addNewReference("ownedAbstractFunctionAbstractCapabilityInvolvements", s.ownedAbstractFunctionAbstractCapabilityInvolvements.getEReference());
	//Capability.Capability -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null) t.addNewReference("availableInStates", s.availableInStates.getEReference());
	//Capability.Capability -> EReference : ownedAbstractCapabilityRealizations
	if (s.ownedAbstractCapabilityRealizations.getEReference() != null) t.addNewReference("ownedAbstractCapabilityRealizations", s.ownedAbstractCapabilityRealizations.getEReference());
	//Capability.Capability -> EReference : involvedAbstractFunctions
	if (s.involvedAbstractFunctions.getEReference() != null) t.addNewReference("involvedAbstractFunctions", s.involvedAbstractFunctions.getEReference());
	//Capability.Capability -> EReference : involvedFunctionalChains
	if (s.involvedFunctionalChains.getEReference() != null) t.addNewReference("involvedFunctionalChains", s.involvedFunctionalChains.getEReference());
	//Capability.Capability -> EReference : ownedCapabilityInvolvements
	if (s.ownedCapabilityInvolvements.getEReference() != null) t.addNewReference("ownedCapabilityInvolvements", s.ownedCapabilityInvolvements.getEReference());
	//Capability.Capability -> EReference : involvedSystemComponents
	if (s.involvedSystemComponents.getEReference() != null) t.addNewReference("involvedSystemComponents", s.involvedSystemComponents.getEReference());
	//Capability.Capability -> EReference : purposes
	if (s.purposes.getEReference() != null) t.addNewReference("purposes", s.purposes.getEReference());
	//Capability.Capability -> EReference : purposeMissions
	if (s.purposeMissions.getEReference() != null) t.addNewReference("purposeMissions", s.purposeMissions.getEReference());
	//Capability.Capability -> EReference : realizedOperationalCapabilities
	if (s.realizedOperationalCapabilities.getEReference() != null) t.addNewReference("realizedOperationalCapabilities", s.realizedOperationalCapabilities.getEReference());
	//Capability.Capability -> EReference : realizingCapabilityRealizations
	if (s.realizingCapabilityRealizations.getEReference() != null) t.addNewReference("realizingCapabilityRealizations", s.realizingCapabilityRealizations.getEReference());
}

@lazy
rule CapabilityExploitation
	transform s : DSL!CapabilityExploitation
	to t : SysMLine!ItemUsage
	extends Base{
	//CapabilityExploitation.CapabilityExploitation -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CapabilityExploitation.CapabilityExploitation -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CapabilityExploitation.CapabilityExploitation -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CapabilityExploitation.CapabilityExploitation -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CapabilityExploitation.CapabilityExploitation -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CapabilityExploitation.CapabilityExploitation -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CapabilityExploitation.CapabilityExploitation -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CapabilityExploitation.CapabilityExploitation -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CapabilityExploitation.CapabilityExploitation -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CapabilityExploitation.CapabilityExploitation -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CapabilityExploitation.CapabilityExploitation -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CapabilityExploitation.CapabilityExploitation -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//CapabilityExploitation.CapabilityExploitation -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CapabilityExploitation.CapabilityExploitation -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CapabilityExploitation.CapabilityExploitation -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CapabilityExploitation.CapabilityExploitation -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CapabilityExploitation.CapabilityExploitation -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CapabilityExploitation.CapabilityExploitation -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CapabilityExploitation.CapabilityExploitation -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CapabilityExploitation.CapabilityExploitation -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CapabilityExploitation.CapabilityExploitation -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CapabilityExploitation.CapabilityExploitation -> EReference : mission
	if (s.mission.getEReference() != null) t.addNewReference("mission", s.mission.getEReference());
	//CapabilityExploitation.CapabilityExploitation -> EReference : capability
	if (s.capability.getEReference() != null) t.addNewReference("capability", s.capability.getEReference());
}

@lazy
rule CapabilityPkg
	transform s : DSL!CapabilityPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//CapabilityPkg.CapabilityPkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CapabilityPkg.CapabilityPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CapabilityPkg.CapabilityPkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CapabilityPkg.CapabilityPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CapabilityPkg.CapabilityPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CapabilityPkg.CapabilityPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CapabilityPkg.CapabilityPkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CapabilityPkg.CapabilityPkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CapabilityPkg.CapabilityPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CapabilityPkg.CapabilityPkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CapabilityPkg.CapabilityPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CapabilityPkg.CapabilityPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CapabilityPkg.CapabilityPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CapabilityPkg.CapabilityPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CapabilityPkg.CapabilityPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CapabilityPkg.CapabilityPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CapabilityPkg.CapabilityPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CapabilityPkg.CapabilityPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CapabilityPkg.CapabilityPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CapabilityPkg.CapabilityPkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CapabilityPkg.CapabilityPkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CapabilityPkg.CapabilityPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//CapabilityPkg.CapabilityPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//CapabilityPkg.CapabilityPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//CapabilityPkg.CapabilityPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//CapabilityPkg.CapabilityPkg -> EReference : ownedCapabilities
	if (s.ownedCapabilities.getEReference() != null) t.addNewReference("ownedCapabilities", s.ownedCapabilities.getEReference());
	//CapabilityPkg.CapabilityPkg -> EReference : ownedCapabilityPkgs
	if (s.ownedCapabilityPkgs.getEReference() != null) t.addNewReference("ownedCapabilityPkgs", s.ownedCapabilityPkgs.getEReference());
}

@lazy
rule OperationalAnalysisRealization
	transform s : DSL!OperationalAnalysisRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EReference : allocatedArchitecture
	if (s.allocatedArchitecture.getEReference() != null) t.addNewReference("allocatedArchitecture", s.allocatedArchitecture.getEReference());
	//OperationalAnalysisRealization.OperationalAnalysisRealization -> EReference : allocatingArchitecture
	if (s.allocatingArchitecture.getEReference() != null) t.addNewReference("allocatingArchitecture", s.allocatingArchitecture.getEReference());
}

@lazy
rule SystemComponentPkg
	transform s : DSL!SystemComponentPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemComponentPkg.SystemComponentPkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SystemComponentPkg.SystemComponentPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SystemComponentPkg.SystemComponentPkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//SystemComponentPkg.SystemComponentPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SystemComponentPkg.SystemComponentPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SystemComponentPkg.SystemComponentPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SystemComponentPkg.SystemComponentPkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SystemComponentPkg.SystemComponentPkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SystemComponentPkg.SystemComponentPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : ownedParts
	if (s.ownedParts.getEReference() != null) t.addNewReference("ownedParts", s.ownedParts.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : ownedSystemComponents
	if (s.ownedSystemComponents.getEReference() != null) t.addNewReference("ownedSystemComponents", s.ownedSystemComponents.getEReference());
	//SystemComponentPkg.SystemComponentPkg -> EReference : ownedSystemComponentPkgs
	if (s.ownedSystemComponentPkgs.getEReference() != null) t.addNewReference("ownedSystemComponentPkgs", s.ownedSystemComponentPkgs.getEReference());
}

@lazy
rule SystemComponent
	transform s : DSL!SystemComponent
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemComponent.SystemComponent -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SystemComponent.SystemComponent -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SystemComponent.SystemComponent -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//SystemComponent.SystemComponent -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SystemComponent.SystemComponent -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SystemComponent.SystemComponent -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SystemComponent.SystemComponent -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SystemComponent.SystemComponent -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SystemComponent.SystemComponent -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//SystemComponent.SystemComponent -> EAttribute : actor
	if (s.actor.getEAttribute() != null) t.addNewAttribute("actor", s.actor.getEAttribute());
	//SystemComponent.SystemComponent -> EAttribute : human
	if (s.human.getEAttribute() != null) t.addNewAttribute("human", s.human.getEAttribute());
	//SystemComponent.SystemComponent -> EAttribute : dataComponent
	if (s.dataComponent.getEAttribute() != null) t.addNewAttribute("dataComponent", s.dataComponent.getEAttribute());
	//SystemComponent.SystemComponent -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SystemComponent.SystemComponent -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SystemComponent.SystemComponent -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//SystemComponent.SystemComponent -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SystemComponent.SystemComponent -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SystemComponent.SystemComponent -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SystemComponent.SystemComponent -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SystemComponent.SystemComponent -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SystemComponent.SystemComponent -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//SystemComponent.SystemComponent -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//SystemComponent.SystemComponent -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//SystemComponent.SystemComponent -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null) t.addNewReference("ownedFunctionalAllocation", s.ownedFunctionalAllocation.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//SystemComponent.SystemComponent -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null) t.addNewReference("functionalAllocations", s.functionalAllocations.getEReference());
	//SystemComponent.SystemComponent -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null) t.addNewReference("allocatedFunctions", s.allocatedFunctions.getEReference());
	//SystemComponent.SystemComponent -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//SystemComponent.SystemComponent -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//SystemComponent.SystemComponent -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//SystemComponent.SystemComponent -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//SystemComponent.SystemComponent -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//SystemComponent.SystemComponent -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//SystemComponent.SystemComponent -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null) t.addNewReference("ownedInterfaceAllocations", s.ownedInterfaceAllocations.getEReference());
	//SystemComponent.SystemComponent -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null) t.addNewReference("provisionedInterfaceAllocations", s.provisionedInterfaceAllocations.getEReference());
	//SystemComponent.SystemComponent -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null) t.addNewReference("allocatedInterfaces", s.allocatedInterfaces.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null) t.addNewReference("ownedCommunicationLinks", s.ownedCommunicationLinks.getEReference());
	//SystemComponent.SystemComponent -> EReference : produce
	if (s.produce.getEReference() != null) t.addNewReference("produce", s.produce.getEReference());
	//SystemComponent.SystemComponent -> EReference : consume
	if (s.consume.getEReference() != null) t.addNewReference("consume", s.consume.getEReference());
	//SystemComponent.SystemComponent -> EReference : send
	if (s.send.getEReference() != null) t.addNewReference("send", s.send.getEReference());
	//SystemComponent.SystemComponent -> EReference : receive
	if (s.receive.getEReference() != null) t.addNewReference("receive", s.receive.getEReference());
	//SystemComponent.SystemComponent -> EReference : call
	if (s.call.getEReference() != null) t.addNewReference("call", s.call.getEReference());
	//SystemComponent.SystemComponent -> EReference : execute
	if (s.execute.getEReference() != null) t.addNewReference("execute", s.execute.getEReference());
	//SystemComponent.SystemComponent -> EReference : write
	if (s.write.getEReference() != null) t.addNewReference("write", s.write.getEReference());
	//SystemComponent.SystemComponent -> EReference : access
	if (s.access.getEReference() != null) t.addNewReference("access", s.access.getEReference());
	//SystemComponent.SystemComponent -> EReference : acquire
	if (s.acquire.getEReference() != null) t.addNewReference("acquire", s.acquire.getEReference());
	//SystemComponent.SystemComponent -> EReference : transmit
	if (s.transmit.getEReference() != null) t.addNewReference("transmit", s.transmit.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null) t.addNewReference("ownedInterfaceUses", s.ownedInterfaceUses.getEReference());
	//SystemComponent.SystemComponent -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null) t.addNewReference("usedInterfaceLinks", s.usedInterfaceLinks.getEReference());
	//SystemComponent.SystemComponent -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null) t.addNewReference("usedInterfaces", s.usedInterfaces.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null) t.addNewReference("ownedInterfaceImplementations", s.ownedInterfaceImplementations.getEReference());
	//SystemComponent.SystemComponent -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null) t.addNewReference("implementedInterfaceLinks", s.implementedInterfaceLinks.getEReference());
	//SystemComponent.SystemComponent -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null) t.addNewReference("implementedInterfaces", s.implementedInterfaces.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null) t.addNewReference("ownedComponentRealizations", s.ownedComponentRealizations.getEReference());
	//SystemComponent.SystemComponent -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null) t.addNewReference("realizedComponents", s.realizedComponents.getEReference());
	//SystemComponent.SystemComponent -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null) t.addNewReference("realizingComponents", s.realizingComponents.getEReference());
	//SystemComponent.SystemComponent -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//SystemComponent.SystemComponent -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//SystemComponent.SystemComponent -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null) t.addNewReference("containedComponentPorts", s.containedComponentPorts.getEReference());
	//SystemComponent.SystemComponent -> EReference : containedParts
	if (s.containedParts.getEReference() != null) t.addNewReference("containedParts", s.containedParts.getEReference());
	//SystemComponent.SystemComponent -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null) t.addNewReference("containedPhysicalPorts", s.containedPhysicalPorts.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null) t.addNewReference("ownedPhysicalPath", s.ownedPhysicalPath.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//SystemComponent.SystemComponent -> EReference : representingParts
	if (s.representingParts.getEReference() != null) t.addNewReference("representingParts", s.representingParts.getEReference());
	//SystemComponent.SystemComponent -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedSystemComponents
	if (s.ownedSystemComponents.getEReference() != null) t.addNewReference("ownedSystemComponents", s.ownedSystemComponents.getEReference());
	//SystemComponent.SystemComponent -> EReference : ownedSystemComponentPkgs
	if (s.ownedSystemComponentPkgs.getEReference() != null) t.addNewReference("ownedSystemComponentPkgs", s.ownedSystemComponentPkgs.getEReference());
	//SystemComponent.SystemComponent -> EReference : dataType
	if (s.dataType.getEReference() != null) t.addNewReference("dataType", s.dataType.getEReference());
	//SystemComponent.SystemComponent -> EReference : involvingCapabilities
	if (s.involvingCapabilities.getEReference() != null) t.addNewReference("involvingCapabilities", s.involvingCapabilities.getEReference());
	//SystemComponent.SystemComponent -> EReference : capabilityInvolvements
	if (s.capabilityInvolvements.getEReference() != null) t.addNewReference("capabilityInvolvements", s.capabilityInvolvements.getEReference());
	//SystemComponent.SystemComponent -> EReference : involvingMissions
	if (s.involvingMissions.getEReference() != null) t.addNewReference("involvingMissions", s.involvingMissions.getEReference());
	//SystemComponent.SystemComponent -> EReference : missionInvolvements
	if (s.missionInvolvements.getEReference() != null) t.addNewReference("missionInvolvements", s.missionInvolvements.getEReference());
	//SystemComponent.SystemComponent -> EReference : realizedEntities
	if (s.realizedEntities.getEReference() != null) t.addNewReference("realizedEntities", s.realizedEntities.getEReference());
	//SystemComponent.SystemComponent -> EReference : realizingLogicalComponents
	if (s.realizingLogicalComponents.getEReference() != null) t.addNewReference("realizingLogicalComponents", s.realizingLogicalComponents.getEReference());
	//SystemComponent.SystemComponent -> EReference : allocatedSystemFunctions
	if (s.allocatedSystemFunctions.getEReference() != null) t.addNewReference("allocatedSystemFunctions", s.allocatedSystemFunctions.getEReference());
}


// la.ecore
@lazy
rule LogicalArchitecturePkg
	transform s : DSL!LogicalArchitecturePkg
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//LogicalArchitecturePkg.LogicalArchitecturePkg -> EReference : ownedLogicalArchitectures
	if (s.ownedLogicalArchitectures.getEReference() != null) t.addNewReference("ownedLogicalArchitectures", s.ownedLogicalArchitectures.getEReference());
}

@lazy
rule LogicalArchitecture
	transform s : DSL!LogicalArchitecture
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalArchitecture.LogicalArchitecture -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//LogicalArchitecture.LogicalArchitecture -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//LogicalArchitecture.LogicalArchitecture -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//LogicalArchitecture.LogicalArchitecture -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//LogicalArchitecture.LogicalArchitecture -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//LogicalArchitecture.LogicalArchitecture -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//LogicalArchitecture.LogicalArchitecture -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//LogicalArchitecture.LogicalArchitecture -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//LogicalArchitecture.LogicalArchitecture -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : ownedFunctionPkg
	if (s.ownedFunctionPkg.getEReference() != null) t.addNewReference("ownedFunctionPkg", s.ownedFunctionPkg.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : provisionedArchitectureAllocations
	if (s.provisionedArchitectureAllocations.getEReference() != null) t.addNewReference("provisionedArchitectureAllocations", s.provisionedArchitectureAllocations.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : provisioningArchitectureAllocations
	if (s.provisioningArchitectureAllocations.getEReference() != null) t.addNewReference("provisioningArchitectureAllocations", s.provisioningArchitectureAllocations.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : allocatedArchitectures
	if (s.allocatedArchitectures.getEReference() != null) t.addNewReference("allocatedArchitectures", s.allocatedArchitectures.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : allocatingArchitectures
	if (s.allocatingArchitectures.getEReference() != null) t.addNewReference("allocatingArchitectures", s.allocatingArchitectures.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : system
	if (s.system.getEReference() != null) t.addNewReference("system", s.system.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : ownedLogicalComponentPkg
	if (s.ownedLogicalComponentPkg.getEReference() != null) t.addNewReference("ownedLogicalComponentPkg", s.ownedLogicalComponentPkg.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : containedCapabilityRealizationPkg
	if (s.containedCapabilityRealizationPkg.getEReference() != null) t.addNewReference("containedCapabilityRealizationPkg", s.containedCapabilityRealizationPkg.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : containedLogicalFunctionPkg
	if (s.containedLogicalFunctionPkg.getEReference() != null) t.addNewReference("containedLogicalFunctionPkg", s.containedLogicalFunctionPkg.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : ownedSystemAnalysisRealizations
	if (s.ownedSystemAnalysisRealizations.getEReference() != null) t.addNewReference("ownedSystemAnalysisRealizations", s.ownedSystemAnalysisRealizations.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : allocatedSystemAnalysisRealizations
	if (s.allocatedSystemAnalysisRealizations.getEReference() != null) t.addNewReference("allocatedSystemAnalysisRealizations", s.allocatedSystemAnalysisRealizations.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : allocatedSystemAnalyses
	if (s.allocatedSystemAnalyses.getEReference() != null) t.addNewReference("allocatedSystemAnalyses", s.allocatedSystemAnalyses.getEReference());
	//LogicalArchitecture.LogicalArchitecture -> EReference : allocatingPhysicalArchitectures
	if (s.allocatingPhysicalArchitectures.getEReference() != null) t.addNewReference("allocatingPhysicalArchitectures", s.allocatingPhysicalArchitectures.getEReference());
}

@lazy
rule LogicalFunction
	transform s : DSL!LogicalFunction
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalFunction.LogicalFunction -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//LogicalFunction.LogicalFunction -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//LogicalFunction.LogicalFunction -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//LogicalFunction.LogicalFunction -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//LogicalFunction.LogicalFunction -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//LogicalFunction.LogicalFunction -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//LogicalFunction.LogicalFunction -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//LogicalFunction.LogicalFunction -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//LogicalFunction.LogicalFunction -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//LogicalFunction.LogicalFunction -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//LogicalFunction.LogicalFunction -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//LogicalFunction.LogicalFunction -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//LogicalFunction.LogicalFunction -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//LogicalFunction.LogicalFunction -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//LogicalFunction.LogicalFunction -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//LogicalFunction.LogicalFunction -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//LogicalFunction.LogicalFunction -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null) t.addNewAttribute("aggregationKind", s.aggregationKind.getEAttribute());
	//LogicalFunction.LogicalFunction -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null) t.addNewAttribute("isDerived", s.isDerived.getEAttribute());
	//LogicalFunction.LogicalFunction -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null) t.addNewAttribute("isReadOnly", s.isReadOnly.getEAttribute());
	//LogicalFunction.LogicalFunction -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null) t.addNewAttribute("isPartOfKey", s.isPartOfKey.getEAttribute());
	//LogicalFunction.LogicalFunction -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//LogicalFunction.LogicalFunction -> EAttribute : condition
	if (s.condition.getEAttribute() != null) t.addNewAttribute("condition", s.condition.getEAttribute());
	//LogicalFunction.LogicalFunction -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : association
	if (s.association.getEReference() != null) t.addNewReference("association", s.association.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : representingInstanceRoles
	if (s.representingInstanceRoles.getEReference() != null) t.addNewReference("representingInstanceRoles", s.representingInstanceRoles.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null) t.addNewReference("ownedFunctionalChains", s.ownedFunctionalChains.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : ownedHandlers
	if (s.ownedHandlers.getEReference() != null) t.addNewReference("ownedHandlers", s.ownedHandlers.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : localPrecondition
	if (s.localPrecondition.getEReference() != null) t.addNewReference("localPrecondition", s.localPrecondition.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : localPostcondition
	if (s.localPostcondition.getEReference() != null) t.addNewReference("localPostcondition", s.localPostcondition.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context", s.context.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : inputs
	if (s.inputs.getEReference() != null) t.addNewReference("inputs", s.inputs.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : outputs
	if (s.outputs.getEReference() != null) t.addNewReference("outputs", s.outputs.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : arguments
	if (s.arguments.getEReference() != null) t.addNewReference("arguments", s.arguments.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : results
	if (s.results.getEReference() != null) t.addNewReference("results", s.results.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : behavior
	if (s.behavior.getEReference() != null) t.addNewReference("behavior", s.behavior.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : ownedFunctions
	if (s.ownedFunctions.getEReference() != null) t.addNewReference("ownedFunctions", s.ownedFunctions.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : ownedFunctionRealizations
	if (s.ownedFunctionRealizations.getEReference() != null) t.addNewReference("ownedFunctionRealizations", s.ownedFunctionRealizations.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : ownedFunctionalExchanges
	if (s.ownedFunctionalExchanges.getEReference() != null) t.addNewReference("ownedFunctionalExchanges", s.ownedFunctionalExchanges.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : subFunctions
	if (s.subFunctions.getEReference() != null) t.addNewReference("subFunctions", s.subFunctions.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : outFunctionRealizations
	if (s.outFunctionRealizations.getEReference() != null) t.addNewReference("outFunctionRealizations", s.outFunctionRealizations.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : inFunctionRealizations
	if (s.inFunctionRealizations.getEReference() != null) t.addNewReference("inFunctionRealizations", s.inFunctionRealizations.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : componentFunctionalAllocations
	if (s.componentFunctionalAllocations.getEReference() != null) t.addNewReference("componentFunctionalAllocations", s.componentFunctionalAllocations.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : allocationBlocks
	if (s.allocationBlocks.getEReference() != null) t.addNewReference("allocationBlocks", s.allocationBlocks.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null) t.addNewReference("availableInStates", s.availableInStates.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : involvingCapabilities
	if (s.involvingCapabilities.getEReference() != null) t.addNewReference("involvingCapabilities", s.involvingCapabilities.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null) t.addNewReference("involvingCapabilityRealizations", s.involvingCapabilityRealizations.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : involvingFunctionalChains
	if (s.involvingFunctionalChains.getEReference() != null) t.addNewReference("involvingFunctionalChains", s.involvingFunctionalChains.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : linkedStateMachine
	if (s.linkedStateMachine.getEReference() != null) t.addNewReference("linkedStateMachine", s.linkedStateMachine.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : linkedFunctionSpecification
	if (s.linkedFunctionSpecification.getEReference() != null) t.addNewReference("linkedFunctionSpecification", s.linkedFunctionSpecification.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : ownedLogicalFunctionPkgs
	if (s.ownedLogicalFunctionPkgs.getEReference() != null) t.addNewReference("ownedLogicalFunctionPkgs", s.ownedLogicalFunctionPkgs.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : allocatingLogicalComponents
	if (s.allocatingLogicalComponents.getEReference() != null) t.addNewReference("allocatingLogicalComponents", s.allocatingLogicalComponents.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : realizedSystemFunctions
	if (s.realizedSystemFunctions.getEReference() != null) t.addNewReference("realizedSystemFunctions", s.realizedSystemFunctions.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : realizingPhysicalFunctions
	if (s.realizingPhysicalFunctions.getEReference() != null) t.addNewReference("realizingPhysicalFunctions", s.realizingPhysicalFunctions.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : containedLogicalFunctions
	if (s.containedLogicalFunctions.getEReference() != null) t.addNewReference("containedLogicalFunctions", s.containedLogicalFunctions.getEReference());
	//LogicalFunction.LogicalFunction -> EReference : childrenLogicalFunctions
	if (s.childrenLogicalFunctions.getEReference() != null) t.addNewReference("childrenLogicalFunctions", s.childrenLogicalFunctions.getEReference());
}

@lazy
rule LogicalFunctionPkg
	transform s : DSL!LogicalFunctionPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalFunctionPkg.LogicalFunctionPkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : ownedExchanges
	if (s.ownedExchanges.getEReference() != null) t.addNewReference("ownedExchanges", s.ownedExchanges.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : ownedExchangeSpecificationRealizations
	if (s.ownedExchangeSpecificationRealizations.getEReference() != null) t.addNewReference("ownedExchangeSpecificationRealizations", s.ownedExchangeSpecificationRealizations.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : ownedCategories
	if (s.ownedCategories.getEReference() != null) t.addNewReference("ownedCategories", s.ownedCategories.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : ownedFunctionSpecifications
	if (s.ownedFunctionSpecifications.getEReference() != null) t.addNewReference("ownedFunctionSpecifications", s.ownedFunctionSpecifications.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : ownedLogicalFunctions
	if (s.ownedLogicalFunctions.getEReference() != null) t.addNewReference("ownedLogicalFunctions", s.ownedLogicalFunctions.getEReference());
	//LogicalFunctionPkg.LogicalFunctionPkg -> EReference : ownedLogicalFunctionPkgs
	if (s.ownedLogicalFunctionPkgs.getEReference() != null) t.addNewReference("ownedLogicalFunctionPkgs", s.ownedLogicalFunctionPkgs.getEReference());
}

@lazy
rule LogicalComponent
	transform s : DSL!LogicalComponent
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalComponent.LogicalComponent -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//LogicalComponent.LogicalComponent -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//LogicalComponent.LogicalComponent -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//LogicalComponent.LogicalComponent -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//LogicalComponent.LogicalComponent -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//LogicalComponent.LogicalComponent -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//LogicalComponent.LogicalComponent -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//LogicalComponent.LogicalComponent -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//LogicalComponent.LogicalComponent -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//LogicalComponent.LogicalComponent -> EAttribute : actor
	if (s.actor.getEAttribute() != null) t.addNewAttribute("actor", s.actor.getEAttribute());
	//LogicalComponent.LogicalComponent -> EAttribute : human
	if (s.human.getEAttribute() != null) t.addNewAttribute("human", s.human.getEAttribute());
	//LogicalComponent.LogicalComponent -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null) t.addNewReference("ownedFunctionalAllocation", s.ownedFunctionalAllocation.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null) t.addNewReference("functionalAllocations", s.functionalAllocations.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null) t.addNewReference("allocatedFunctions", s.allocatedFunctions.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null) t.addNewReference("ownedInterfaceAllocations", s.ownedInterfaceAllocations.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null) t.addNewReference("provisionedInterfaceAllocations", s.provisionedInterfaceAllocations.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null) t.addNewReference("allocatedInterfaces", s.allocatedInterfaces.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null) t.addNewReference("ownedCommunicationLinks", s.ownedCommunicationLinks.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : produce
	if (s.produce.getEReference() != null) t.addNewReference("produce", s.produce.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : consume
	if (s.consume.getEReference() != null) t.addNewReference("consume", s.consume.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : send
	if (s.send.getEReference() != null) t.addNewReference("send", s.send.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : receive
	if (s.receive.getEReference() != null) t.addNewReference("receive", s.receive.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : call
	if (s.call.getEReference() != null) t.addNewReference("call", s.call.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : execute
	if (s.execute.getEReference() != null) t.addNewReference("execute", s.execute.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : write
	if (s.write.getEReference() != null) t.addNewReference("write", s.write.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : access
	if (s.access.getEReference() != null) t.addNewReference("access", s.access.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : acquire
	if (s.acquire.getEReference() != null) t.addNewReference("acquire", s.acquire.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : transmit
	if (s.transmit.getEReference() != null) t.addNewReference("transmit", s.transmit.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null) t.addNewReference("ownedInterfaceUses", s.ownedInterfaceUses.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null) t.addNewReference("usedInterfaceLinks", s.usedInterfaceLinks.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null) t.addNewReference("usedInterfaces", s.usedInterfaces.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null) t.addNewReference("ownedInterfaceImplementations", s.ownedInterfaceImplementations.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null) t.addNewReference("implementedInterfaceLinks", s.implementedInterfaceLinks.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null) t.addNewReference("implementedInterfaces", s.implementedInterfaces.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null) t.addNewReference("ownedComponentRealizations", s.ownedComponentRealizations.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null) t.addNewReference("realizedComponents", s.realizedComponents.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null) t.addNewReference("realizingComponents", s.realizingComponents.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null) t.addNewReference("containedComponentPorts", s.containedComponentPorts.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : containedParts
	if (s.containedParts.getEReference() != null) t.addNewReference("containedParts", s.containedParts.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null) t.addNewReference("containedPhysicalPorts", s.containedPhysicalPorts.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null) t.addNewReference("ownedPhysicalPath", s.ownedPhysicalPath.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : representingParts
	if (s.representingParts.getEReference() != null) t.addNewReference("representingParts", s.representingParts.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : capabilityRealizationInvolvements
	if (s.capabilityRealizationInvolvements.getEReference() != null) t.addNewReference("capabilityRealizationInvolvements", s.capabilityRealizationInvolvements.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null) t.addNewReference("involvingCapabilityRealizations", s.involvingCapabilityRealizations.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedLogicalComponents
	if (s.ownedLogicalComponents.getEReference() != null) t.addNewReference("ownedLogicalComponents", s.ownedLogicalComponents.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedLogicalArchitectures
	if (s.ownedLogicalArchitectures.getEReference() != null) t.addNewReference("ownedLogicalArchitectures", s.ownedLogicalArchitectures.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : ownedLogicalComponentPkgs
	if (s.ownedLogicalComponentPkgs.getEReference() != null) t.addNewReference("ownedLogicalComponentPkgs", s.ownedLogicalComponentPkgs.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : subLogicalComponents
	if (s.subLogicalComponents.getEReference() != null) t.addNewReference("subLogicalComponents", s.subLogicalComponents.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : allocatedLogicalFunctions
	if (s.allocatedLogicalFunctions.getEReference() != null) t.addNewReference("allocatedLogicalFunctions", s.allocatedLogicalFunctions.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : realizedSystemComponents
	if (s.realizedSystemComponents.getEReference() != null) t.addNewReference("realizedSystemComponents", s.realizedSystemComponents.getEReference());
	//LogicalComponent.LogicalComponent -> EReference : realizingPhysicalComponents
	if (s.realizingPhysicalComponents.getEReference() != null) t.addNewReference("realizingPhysicalComponents", s.realizingPhysicalComponents.getEReference());
}

@lazy
rule LogicalComponentPkg
	transform s : DSL!LogicalComponentPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalComponentPkg.LogicalComponentPkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//LogicalComponentPkg.LogicalComponentPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//LogicalComponentPkg.LogicalComponentPkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//LogicalComponentPkg.LogicalComponentPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//LogicalComponentPkg.LogicalComponentPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//LogicalComponentPkg.LogicalComponentPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//LogicalComponentPkg.LogicalComponentPkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//LogicalComponentPkg.LogicalComponentPkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : ownedParts
	if (s.ownedParts.getEReference() != null) t.addNewReference("ownedParts", s.ownedParts.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : ownedLogicalComponents
	if (s.ownedLogicalComponents.getEReference() != null) t.addNewReference("ownedLogicalComponents", s.ownedLogicalComponents.getEReference());
	//LogicalComponentPkg.LogicalComponentPkg -> EReference : ownedLogicalComponentPkgs
	if (s.ownedLogicalComponentPkgs.getEReference() != null) t.addNewReference("ownedLogicalComponentPkgs", s.ownedLogicalComponentPkgs.getEReference());
}

@lazy
rule CapabilityRealization
	transform s : DSL!CapabilityRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//CapabilityRealization.CapabilityRealization -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CapabilityRealization.CapabilityRealization -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CapabilityRealization.CapabilityRealization -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CapabilityRealization.CapabilityRealization -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CapabilityRealization.CapabilityRealization -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CapabilityRealization.CapabilityRealization -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CapabilityRealization.CapabilityRealization -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CapabilityRealization.CapabilityRealization -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CapabilityRealization.CapabilityRealization -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : involvedInvolvements
	if (s.involvedInvolvements.getEReference() != null) t.addNewReference("involvedInvolvements", s.involvedInvolvements.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null) t.addNewReference("ownedFunctionalChains", s.ownedFunctionalChains.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : preCondition
	if (s.preCondition.getEReference() != null) t.addNewReference("preCondition", s.preCondition.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : postCondition
	if (s.postCondition.getEReference() != null) t.addNewReference("postCondition", s.postCondition.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : ownedScenarios
	if (s.ownedScenarios.getEReference() != null) t.addNewReference("ownedScenarios", s.ownedScenarios.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : incomingCapabilityAllocation
	if (s.incomingCapabilityAllocation.getEReference() != null) t.addNewReference("incomingCapabilityAllocation", s.incomingCapabilityAllocation.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : outgoingCapabilityAllocation
	if (s.outgoingCapabilityAllocation.getEReference() != null) t.addNewReference("outgoingCapabilityAllocation", s.outgoingCapabilityAllocation.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : extends_
	if (s.~extends.getEReference() != null) t.addNewReference("'extends'", s.~extends.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : extending
	if (s.extending.getEReference() != null) t.addNewReference("extending", s.extending.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : abstractCapabilityExtensionPoints
	if (s.abstractCapabilityExtensionPoints.getEReference() != null) t.addNewReference("abstractCapabilityExtensionPoints", s.abstractCapabilityExtensionPoints.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : includes
	if (s.includes.getEReference() != null) t.addNewReference("includes", s.includes.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : including
	if (s.including.getEReference() != null) t.addNewReference("including", s.including.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : includedAbstractCapabilities
	if (s.includedAbstractCapabilities.getEReference() != null) t.addNewReference("includedAbstractCapabilities", s.includedAbstractCapabilities.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : includingAbstractCapabilities
	if (s.includingAbstractCapabilities.getEReference() != null) t.addNewReference("includingAbstractCapabilities", s.includingAbstractCapabilities.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : extendedAbstractCapabilities
	if (s.extendedAbstractCapabilities.getEReference() != null) t.addNewReference("extendedAbstractCapabilities", s.extendedAbstractCapabilities.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : extendingAbstractCapabilities
	if (s.extendingAbstractCapabilities.getEReference() != null) t.addNewReference("extendingAbstractCapabilities", s.extendingAbstractCapabilities.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : ownedFunctionalChainAbstractCapabilityInvolvements
	if (s.ownedFunctionalChainAbstractCapabilityInvolvements.getEReference() != null) t.addNewReference("ownedFunctionalChainAbstractCapabilityInvolvements", s.ownedFunctionalChainAbstractCapabilityInvolvements.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : ownedAbstractFunctionAbstractCapabilityInvolvements
	if (s.ownedAbstractFunctionAbstractCapabilityInvolvements.getEReference() != null) t.addNewReference("ownedAbstractFunctionAbstractCapabilityInvolvements", s.ownedAbstractFunctionAbstractCapabilityInvolvements.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null) t.addNewReference("availableInStates", s.availableInStates.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : ownedAbstractCapabilityRealizations
	if (s.ownedAbstractCapabilityRealizations.getEReference() != null) t.addNewReference("ownedAbstractCapabilityRealizations", s.ownedAbstractCapabilityRealizations.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : involvedAbstractFunctions
	if (s.involvedAbstractFunctions.getEReference() != null) t.addNewReference("involvedAbstractFunctions", s.involvedAbstractFunctions.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : involvedFunctionalChains
	if (s.involvedFunctionalChains.getEReference() != null) t.addNewReference("involvedFunctionalChains", s.involvedFunctionalChains.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : ownedCapabilityRealizationInvolvements
	if (s.ownedCapabilityRealizationInvolvements.getEReference() != null) t.addNewReference("ownedCapabilityRealizationInvolvements", s.ownedCapabilityRealizationInvolvements.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : involvedComponents
	if (s.involvedComponents.getEReference() != null) t.addNewReference("involvedComponents", s.involvedComponents.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : realizedCapabilities
	if (s.realizedCapabilities.getEReference() != null) t.addNewReference("realizedCapabilities", s.realizedCapabilities.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : realizedCapabilityRealizations
	if (s.realizedCapabilityRealizations.getEReference() != null) t.addNewReference("realizedCapabilityRealizations", s.realizedCapabilityRealizations.getEReference());
	//CapabilityRealization.CapabilityRealization -> EReference : realizingCapabilityRealizations
	if (s.realizingCapabilityRealizations.getEReference() != null) t.addNewReference("realizingCapabilityRealizations", s.realizingCapabilityRealizations.getEReference());
}

@lazy
rule CapabilityRealizationPkg
	transform s : DSL!CapabilityRealizationPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EReference : ownedCapabilityRealizations
	if (s.ownedCapabilityRealizations.getEReference() != null) t.addNewReference("ownedCapabilityRealizations", s.ownedCapabilityRealizations.getEReference());
	//CapabilityRealizationPkg.CapabilityRealizationPkg -> EReference : ownedCapabilityRealizationPkgs
	if (s.ownedCapabilityRealizationPkgs.getEReference() != null) t.addNewReference("ownedCapabilityRealizationPkgs", s.ownedCapabilityRealizationPkgs.getEReference());
}

@lazy
rule SystemAnalysisRealization
	transform s : DSL!SystemAnalysisRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//SystemAnalysisRealization.SystemAnalysisRealization -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EReference : allocatedArchitecture
	if (s.allocatedArchitecture.getEReference() != null) t.addNewReference("allocatedArchitecture", s.allocatedArchitecture.getEReference());
	//SystemAnalysisRealization.SystemAnalysisRealization -> EReference : allocatingArchitecture
	if (s.allocatingArchitecture.getEReference() != null) t.addNewReference("allocatingArchitecture", s.allocatingArchitecture.getEReference());
}

@lazy
rule ContextInterfaceRealization
	transform s : DSL!ContextInterfaceRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//ContextInterfaceRealization.ContextInterfaceRealization -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EReference : allocatedInterface
	if (s.allocatedInterface.getEReference() != null) t.addNewReference("allocatedInterface", s.allocatedInterface.getEReference());
	//ContextInterfaceRealization.ContextInterfaceRealization -> EReference : allocatingInterfaceAllocator
	if (s.allocatingInterfaceAllocator.getEReference() != null) t.addNewReference("allocatingInterfaceAllocator", s.allocatingInterfaceAllocator.getEReference());
}


// pa.ecore
@lazy
rule PhysicalArchitecturePkg
	transform s : DSL!PhysicalArchitecturePkg
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EReference : ownedPhysicalArchitecturePkgs
	if (s.ownedPhysicalArchitecturePkgs.getEReference() != null) t.addNewReference("ownedPhysicalArchitecturePkgs", s.ownedPhysicalArchitecturePkgs.getEReference());
	//PhysicalArchitecturePkg.PhysicalArchitecturePkg -> EReference : ownedPhysicalArchitectures
	if (s.ownedPhysicalArchitectures.getEReference() != null) t.addNewReference("ownedPhysicalArchitectures", s.ownedPhysicalArchitectures.getEReference());
}

@lazy
rule PhysicalArchitecture
	transform s : DSL!PhysicalArchitecture
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalArchitecture.PhysicalArchitecture -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalArchitecture.PhysicalArchitecture -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalArchitecture.PhysicalArchitecture -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PhysicalArchitecture.PhysicalArchitecture -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalArchitecture.PhysicalArchitecture -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalArchitecture.PhysicalArchitecture -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalArchitecture.PhysicalArchitecture -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalArchitecture.PhysicalArchitecture -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : ownedFunctionPkg
	if (s.ownedFunctionPkg.getEReference() != null) t.addNewReference("ownedFunctionPkg", s.ownedFunctionPkg.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : provisionedArchitectureAllocations
	if (s.provisionedArchitectureAllocations.getEReference() != null) t.addNewReference("provisionedArchitectureAllocations", s.provisionedArchitectureAllocations.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : provisioningArchitectureAllocations
	if (s.provisioningArchitectureAllocations.getEReference() != null) t.addNewReference("provisioningArchitectureAllocations", s.provisioningArchitectureAllocations.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : allocatedArchitectures
	if (s.allocatedArchitectures.getEReference() != null) t.addNewReference("allocatedArchitectures", s.allocatedArchitectures.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : allocatingArchitectures
	if (s.allocatingArchitectures.getEReference() != null) t.addNewReference("allocatingArchitectures", s.allocatingArchitectures.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : system
	if (s.system.getEReference() != null) t.addNewReference("system", s.system.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : ownedPhysicalComponentPkg
	if (s.ownedPhysicalComponentPkg.getEReference() != null) t.addNewReference("ownedPhysicalComponentPkg", s.ownedPhysicalComponentPkg.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : containedCapabilityRealizationPkg
	if (s.containedCapabilityRealizationPkg.getEReference() != null) t.addNewReference("containedCapabilityRealizationPkg", s.containedCapabilityRealizationPkg.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : containedPhysicalFunctionPkg
	if (s.containedPhysicalFunctionPkg.getEReference() != null) t.addNewReference("containedPhysicalFunctionPkg", s.containedPhysicalFunctionPkg.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : ownedDeployments
	if (s.ownedDeployments.getEReference() != null) t.addNewReference("ownedDeployments", s.ownedDeployments.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : ownedLogicalArchitectureRealizations
	if (s.ownedLogicalArchitectureRealizations.getEReference() != null) t.addNewReference("ownedLogicalArchitectureRealizations", s.ownedLogicalArchitectureRealizations.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : allocatedLogicalArchitectureRealizations
	if (s.allocatedLogicalArchitectureRealizations.getEReference() != null) t.addNewReference("allocatedLogicalArchitectureRealizations", s.allocatedLogicalArchitectureRealizations.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : allocatedLogicalArchitectures
	if (s.allocatedLogicalArchitectures.getEReference() != null) t.addNewReference("allocatedLogicalArchitectures", s.allocatedLogicalArchitectures.getEReference());
	//PhysicalArchitecture.PhysicalArchitecture -> EReference : allocatingEpbsArchitectures
	if (s.allocatingEpbsArchitectures.getEReference() != null) t.addNewReference("allocatingEpbsArchitectures", s.allocatingEpbsArchitectures.getEReference());
}

@lazy
rule PhysicalFunction
	transform s : DSL!PhysicalFunction
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalFunction.PhysicalFunction -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EAttribute : isAbstract
	if (s.isAbstract.getEAttribute() != null) t.addNewAttribute("isAbstract", s.isAbstract.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EAttribute : isStatic
	if (s.isStatic.getEAttribute() != null) t.addNewAttribute("isStatic", s.isStatic.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EAttribute : ordered
	if (s.ordered.getEAttribute() != null) t.addNewAttribute("ordered", s.ordered.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EAttribute : unique
	if (s.unique.getEAttribute() != null) t.addNewAttribute("unique", s.unique.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EAttribute : minInclusive
	if (s.minInclusive.getEAttribute() != null) t.addNewAttribute("minInclusive", s.minInclusive.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EAttribute : maxInclusive
	if (s.maxInclusive.getEAttribute() != null) t.addNewAttribute("maxInclusive", s.maxInclusive.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EAttribute : final
	if (s.final.getEAttribute() != null) t.addNewAttribute("final", s.final.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EAttribute : aggregationKind
	if (s.aggregationKind.getEAttribute() != null) t.addNewAttribute("aggregationKind", s.aggregationKind.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EAttribute : isDerived
	if (s.isDerived.getEAttribute() != null) t.addNewAttribute("isDerived", s.isDerived.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EAttribute : isReadOnly
	if (s.isReadOnly.getEAttribute() != null) t.addNewAttribute("isReadOnly", s.isReadOnly.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EAttribute : isPartOfKey
	if (s.isPartOfKey.getEAttribute() != null) t.addNewAttribute("isPartOfKey", s.isPartOfKey.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EAttribute : condition
	if (s.condition.getEAttribute() != null) t.addNewAttribute("condition", s.condition.getEAttribute());
	//PhysicalFunction.PhysicalFunction -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : abstractType
	if (s.abstractType.getEReference() != null) t.addNewReference("abstractType", s.abstractType.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : ownedDefaultValue
	if (s.ownedDefaultValue.getEReference() != null) t.addNewReference("ownedDefaultValue", s.ownedDefaultValue.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : ownedMinValue
	if (s.ownedMinValue.getEReference() != null) t.addNewReference("ownedMinValue", s.ownedMinValue.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : ownedMaxValue
	if (s.ownedMaxValue.getEReference() != null) t.addNewReference("ownedMaxValue", s.ownedMaxValue.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : ownedNullValue
	if (s.ownedNullValue.getEReference() != null) t.addNewReference("ownedNullValue", s.ownedNullValue.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : ownedMinCard
	if (s.ownedMinCard.getEReference() != null) t.addNewReference("ownedMinCard", s.ownedMinCard.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : ownedMinLength
	if (s.ownedMinLength.getEReference() != null) t.addNewReference("ownedMinLength", s.ownedMinLength.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : ownedMaxCard
	if (s.ownedMaxCard.getEReference() != null) t.addNewReference("ownedMaxCard", s.ownedMaxCard.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : ownedMaxLength
	if (s.ownedMaxLength.getEReference() != null) t.addNewReference("ownedMaxLength", s.ownedMaxLength.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : association
	if (s.association.getEReference() != null) t.addNewReference("association", s.association.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : representingInstanceRoles
	if (s.representingInstanceRoles.getEReference() != null) t.addNewReference("representingInstanceRoles", s.representingInstanceRoles.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : ownedFunctionalChains
	if (s.ownedFunctionalChains.getEReference() != null) t.addNewReference("ownedFunctionalChains", s.ownedFunctionalChains.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : inActivityPartition
	if (s.inActivityPartition.getEReference() != null) t.addNewReference("inActivityPartition", s.inActivityPartition.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : inInterruptibleRegion
	if (s.inInterruptibleRegion.getEReference() != null) t.addNewReference("inInterruptibleRegion", s.inInterruptibleRegion.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : inStructuredNode
	if (s.inStructuredNode.getEReference() != null) t.addNewReference("inStructuredNode", s.inStructuredNode.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : outgoing
	if (s.outgoing.getEReference() != null) t.addNewReference("outgoing", s.outgoing.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : incoming
	if (s.incoming.getEReference() != null) t.addNewReference("incoming", s.incoming.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : ownedHandlers
	if (s.ownedHandlers.getEReference() != null) t.addNewReference("ownedHandlers", s.ownedHandlers.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : localPrecondition
	if (s.localPrecondition.getEReference() != null) t.addNewReference("localPrecondition", s.localPrecondition.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : localPostcondition
	if (s.localPostcondition.getEReference() != null) t.addNewReference("localPostcondition", s.localPostcondition.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : context
	if (s.context.getEReference() != null) t.addNewReference("context", s.context.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : inputs
	if (s.inputs.getEReference() != null) t.addNewReference("inputs", s.inputs.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : outputs
	if (s.outputs.getEReference() != null) t.addNewReference("outputs", s.outputs.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : arguments
	if (s.arguments.getEReference() != null) t.addNewReference("arguments", s.arguments.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : results
	if (s.results.getEReference() != null) t.addNewReference("results", s.results.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : behavior
	if (s.behavior.getEReference() != null) t.addNewReference("behavior", s.behavior.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : ownedFunctions
	if (s.ownedFunctions.getEReference() != null) t.addNewReference("ownedFunctions", s.ownedFunctions.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : ownedFunctionRealizations
	if (s.ownedFunctionRealizations.getEReference() != null) t.addNewReference("ownedFunctionRealizations", s.ownedFunctionRealizations.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : ownedFunctionalExchanges
	if (s.ownedFunctionalExchanges.getEReference() != null) t.addNewReference("ownedFunctionalExchanges", s.ownedFunctionalExchanges.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : subFunctions
	if (s.subFunctions.getEReference() != null) t.addNewReference("subFunctions", s.subFunctions.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : outFunctionRealizations
	if (s.outFunctionRealizations.getEReference() != null) t.addNewReference("outFunctionRealizations", s.outFunctionRealizations.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : inFunctionRealizations
	if (s.inFunctionRealizations.getEReference() != null) t.addNewReference("inFunctionRealizations", s.inFunctionRealizations.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : componentFunctionalAllocations
	if (s.componentFunctionalAllocations.getEReference() != null) t.addNewReference("componentFunctionalAllocations", s.componentFunctionalAllocations.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : allocationBlocks
	if (s.allocationBlocks.getEReference() != null) t.addNewReference("allocationBlocks", s.allocationBlocks.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : availableInStates
	if (s.availableInStates.getEReference() != null) t.addNewReference("availableInStates", s.availableInStates.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : involvingCapabilities
	if (s.involvingCapabilities.getEReference() != null) t.addNewReference("involvingCapabilities", s.involvingCapabilities.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null) t.addNewReference("involvingCapabilityRealizations", s.involvingCapabilityRealizations.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : involvingFunctionalChains
	if (s.involvingFunctionalChains.getEReference() != null) t.addNewReference("involvingFunctionalChains", s.involvingFunctionalChains.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : linkedStateMachine
	if (s.linkedStateMachine.getEReference() != null) t.addNewReference("linkedStateMachine", s.linkedStateMachine.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : linkedFunctionSpecification
	if (s.linkedFunctionSpecification.getEReference() != null) t.addNewReference("linkedFunctionSpecification", s.linkedFunctionSpecification.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : ownedPhysicalFunctionPkgs
	if (s.ownedPhysicalFunctionPkgs.getEReference() != null) t.addNewReference("ownedPhysicalFunctionPkgs", s.ownedPhysicalFunctionPkgs.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : allocatingPhysicalComponents
	if (s.allocatingPhysicalComponents.getEReference() != null) t.addNewReference("allocatingPhysicalComponents", s.allocatingPhysicalComponents.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : realizedLogicalFunctions
	if (s.realizedLogicalFunctions.getEReference() != null) t.addNewReference("realizedLogicalFunctions", s.realizedLogicalFunctions.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : containedPhysicalFunctions
	if (s.containedPhysicalFunctions.getEReference() != null) t.addNewReference("containedPhysicalFunctions", s.containedPhysicalFunctions.getEReference());
	//PhysicalFunction.PhysicalFunction -> EReference : childrenPhysicalFunctions
	if (s.childrenPhysicalFunctions.getEReference() != null) t.addNewReference("childrenPhysicalFunctions", s.childrenPhysicalFunctions.getEReference());
}

@lazy
rule PhysicalFunctionPkg
	transform s : DSL!PhysicalFunctionPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : ownedExchanges
	if (s.ownedExchanges.getEReference() != null) t.addNewReference("ownedExchanges", s.ownedExchanges.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : ownedExchangeSpecificationRealizations
	if (s.ownedExchangeSpecificationRealizations.getEReference() != null) t.addNewReference("ownedExchangeSpecificationRealizations", s.ownedExchangeSpecificationRealizations.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : ownedCategories
	if (s.ownedCategories.getEReference() != null) t.addNewReference("ownedCategories", s.ownedCategories.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : ownedFunctionSpecifications
	if (s.ownedFunctionSpecifications.getEReference() != null) t.addNewReference("ownedFunctionSpecifications", s.ownedFunctionSpecifications.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : ownedPhysicalFunctions
	if (s.ownedPhysicalFunctions.getEReference() != null) t.addNewReference("ownedPhysicalFunctions", s.ownedPhysicalFunctions.getEReference());
	//PhysicalFunctionPkg.PhysicalFunctionPkg -> EReference : ownedPhysicalFunctionPkgs
	if (s.ownedPhysicalFunctionPkgs.getEReference() != null) t.addNewReference("ownedPhysicalFunctionPkgs", s.ownedPhysicalFunctionPkgs.getEReference());
}

@lazy
rule PhysicalComponent
	transform s : DSL!PhysicalComponent
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalComponent.PhysicalComponent -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalComponent.PhysicalComponent -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalComponent.PhysicalComponent -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalComponent.PhysicalComponent -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalComponent.PhysicalComponent -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalComponent.PhysicalComponent -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalComponent.PhysicalComponent -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalComponent.PhysicalComponent -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PhysicalComponent.PhysicalComponent -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//PhysicalComponent.PhysicalComponent -> EAttribute : actor
	if (s.actor.getEAttribute() != null) t.addNewAttribute("actor", s.actor.getEAttribute());
	//PhysicalComponent.PhysicalComponent -> EAttribute : human
	if (s.human.getEAttribute() != null) t.addNewAttribute("human", s.human.getEAttribute());
	//PhysicalComponent.PhysicalComponent -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//PhysicalComponent.PhysicalComponent -> EAttribute : nature
	if (s.nature.getEAttribute() != null) t.addNewAttribute("nature", s.nature.getEAttribute());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : allocatorConfigurationItems
	if (s.allocatorConfigurationItems.getEReference() != null) t.addNewReference("allocatorConfigurationItems", s.allocatorConfigurationItems.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null) t.addNewReference("ownedFunctionalAllocation", s.ownedFunctionalAllocation.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null) t.addNewReference("functionalAllocations", s.functionalAllocations.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null) t.addNewReference("allocatedFunctions", s.allocatedFunctions.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null) t.addNewReference("ownedInterfaceAllocations", s.ownedInterfaceAllocations.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null) t.addNewReference("provisionedInterfaceAllocations", s.provisionedInterfaceAllocations.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null) t.addNewReference("allocatedInterfaces", s.allocatedInterfaces.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null) t.addNewReference("ownedCommunicationLinks", s.ownedCommunicationLinks.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : produce
	if (s.produce.getEReference() != null) t.addNewReference("produce", s.produce.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : consume
	if (s.consume.getEReference() != null) t.addNewReference("consume", s.consume.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : send
	if (s.send.getEReference() != null) t.addNewReference("send", s.send.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : receive
	if (s.receive.getEReference() != null) t.addNewReference("receive", s.receive.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : call
	if (s.call.getEReference() != null) t.addNewReference("call", s.call.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : execute
	if (s.execute.getEReference() != null) t.addNewReference("execute", s.execute.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : write
	if (s.write.getEReference() != null) t.addNewReference("write", s.write.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : access
	if (s.access.getEReference() != null) t.addNewReference("access", s.access.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : acquire
	if (s.acquire.getEReference() != null) t.addNewReference("acquire", s.acquire.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : transmit
	if (s.transmit.getEReference() != null) t.addNewReference("transmit", s.transmit.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null) t.addNewReference("ownedInterfaceUses", s.ownedInterfaceUses.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null) t.addNewReference("usedInterfaceLinks", s.usedInterfaceLinks.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null) t.addNewReference("usedInterfaces", s.usedInterfaces.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null) t.addNewReference("ownedInterfaceImplementations", s.ownedInterfaceImplementations.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null) t.addNewReference("implementedInterfaceLinks", s.implementedInterfaceLinks.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null) t.addNewReference("implementedInterfaces", s.implementedInterfaces.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null) t.addNewReference("ownedComponentRealizations", s.ownedComponentRealizations.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null) t.addNewReference("realizedComponents", s.realizedComponents.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null) t.addNewReference("realizingComponents", s.realizingComponents.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null) t.addNewReference("containedComponentPorts", s.containedComponentPorts.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : containedParts
	if (s.containedParts.getEReference() != null) t.addNewReference("containedParts", s.containedParts.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null) t.addNewReference("containedPhysicalPorts", s.containedPhysicalPorts.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null) t.addNewReference("ownedPhysicalPath", s.ownedPhysicalPath.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : representingParts
	if (s.representingParts.getEReference() != null) t.addNewReference("representingParts", s.representingParts.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : capabilityRealizationInvolvements
	if (s.capabilityRealizationInvolvements.getEReference() != null) t.addNewReference("capabilityRealizationInvolvements", s.capabilityRealizationInvolvements.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null) t.addNewReference("involvingCapabilityRealizations", s.involvingCapabilityRealizations.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : deployingLinks
	if (s.deployingLinks.getEReference() != null) t.addNewReference("deployingLinks", s.deployingLinks.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : deploymentLinks
	if (s.deploymentLinks.getEReference() != null) t.addNewReference("deploymentLinks", s.deploymentLinks.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedDeploymentLinks
	if (s.ownedDeploymentLinks.getEReference() != null) t.addNewReference("ownedDeploymentLinks", s.ownedDeploymentLinks.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedPhysicalComponents
	if (s.ownedPhysicalComponents.getEReference() != null) t.addNewReference("ownedPhysicalComponents", s.ownedPhysicalComponents.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : ownedPhysicalComponentPkgs
	if (s.ownedPhysicalComponentPkgs.getEReference() != null) t.addNewReference("ownedPhysicalComponentPkgs", s.ownedPhysicalComponentPkgs.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : logicalInterfaceRealizations
	if (s.logicalInterfaceRealizations.getEReference() != null) t.addNewReference("logicalInterfaceRealizations", s.logicalInterfaceRealizations.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : subPhysicalComponents
	if (s.subPhysicalComponents.getEReference() != null) t.addNewReference("subPhysicalComponents", s.subPhysicalComponents.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : realizedLogicalComponents
	if (s.realizedLogicalComponents.getEReference() != null) t.addNewReference("realizedLogicalComponents", s.realizedLogicalComponents.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : allocatedPhysicalFunctions
	if (s.allocatedPhysicalFunctions.getEReference() != null) t.addNewReference("allocatedPhysicalFunctions", s.allocatedPhysicalFunctions.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : deployedPhysicalComponents
	if (s.deployedPhysicalComponents.getEReference() != null) t.addNewReference("deployedPhysicalComponents", s.deployedPhysicalComponents.getEReference());
	//PhysicalComponent.PhysicalComponent -> EReference : deployingPhysicalComponents
	if (s.deployingPhysicalComponents.getEReference() != null) t.addNewReference("deployingPhysicalComponents", s.deployingPhysicalComponents.getEReference());
}

@lazy
rule PhysicalComponentPkg
	transform s : DSL!PhysicalComponentPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalComponentPkg.PhysicalComponentPkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EAttribute : visibility
	if (s.visibility.getEAttribute() != null) t.addNewAttribute("visibility", s.visibility.getEAttribute());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedParts
	if (s.ownedParts.getEReference() != null) t.addNewReference("ownedParts", s.ownedParts.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedAssociations
	if (s.ownedAssociations.getEReference() != null) t.addNewReference("ownedAssociations", s.ownedAssociations.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedPhysicalComponents
	if (s.ownedPhysicalComponents.getEReference() != null) t.addNewReference("ownedPhysicalComponents", s.ownedPhysicalComponents.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedPhysicalComponentPkgs
	if (s.ownedPhysicalComponentPkgs.getEReference() != null) t.addNewReference("ownedPhysicalComponentPkgs", s.ownedPhysicalComponentPkgs.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedKeyParts
	if (s.ownedKeyParts.getEReference() != null) t.addNewReference("ownedKeyParts", s.ownedKeyParts.getEReference());
	//PhysicalComponentPkg.PhysicalComponentPkg -> EReference : ownedDeployments
	if (s.ownedDeployments.getEReference() != null) t.addNewReference("ownedDeployments", s.ownedDeployments.getEReference());
}

@lazy
rule PhysicalNode
	transform s : DSL!PhysicalNode
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalNode.PhysicalNode -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalNode.PhysicalNode -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalNode.PhysicalNode -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalNode.PhysicalNode -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalNode.PhysicalNode -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalNode.PhysicalNode -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalNode.PhysicalNode -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalNode.PhysicalNode -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//PhysicalNode.PhysicalNode -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//PhysicalNode.PhysicalNode -> EAttribute : actor
	if (s.actor.getEAttribute() != null) t.addNewAttribute("actor", s.actor.getEAttribute());
	//PhysicalNode.PhysicalNode -> EAttribute : human
	if (s.human.getEAttribute() != null) t.addNewAttribute("human", s.human.getEAttribute());
	//PhysicalNode.PhysicalNode -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//PhysicalNode.PhysicalNode -> EAttribute : nature
	if (s.nature.getEAttribute() != null) t.addNewAttribute("nature", s.nature.getEAttribute());
	//PhysicalNode.PhysicalNode -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : allocatorConfigurationItems
	if (s.allocatorConfigurationItems.getEReference() != null) t.addNewReference("allocatorConfigurationItems", s.allocatorConfigurationItems.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null) t.addNewReference("ownedFunctionalAllocation", s.ownedFunctionalAllocation.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null) t.addNewReference("functionalAllocations", s.functionalAllocations.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null) t.addNewReference("allocatedFunctions", s.allocatedFunctions.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null) t.addNewReference("ownedInterfaceAllocations", s.ownedInterfaceAllocations.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null) t.addNewReference("provisionedInterfaceAllocations", s.provisionedInterfaceAllocations.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null) t.addNewReference("allocatedInterfaces", s.allocatedInterfaces.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null) t.addNewReference("ownedCommunicationLinks", s.ownedCommunicationLinks.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : produce
	if (s.produce.getEReference() != null) t.addNewReference("produce", s.produce.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : consume
	if (s.consume.getEReference() != null) t.addNewReference("consume", s.consume.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : send
	if (s.send.getEReference() != null) t.addNewReference("send", s.send.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : receive
	if (s.receive.getEReference() != null) t.addNewReference("receive", s.receive.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : call
	if (s.call.getEReference() != null) t.addNewReference("call", s.call.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : execute
	if (s.execute.getEReference() != null) t.addNewReference("execute", s.execute.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : write
	if (s.write.getEReference() != null) t.addNewReference("write", s.write.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : access
	if (s.access.getEReference() != null) t.addNewReference("access", s.access.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : acquire
	if (s.acquire.getEReference() != null) t.addNewReference("acquire", s.acquire.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : transmit
	if (s.transmit.getEReference() != null) t.addNewReference("transmit", s.transmit.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null) t.addNewReference("ownedInterfaceUses", s.ownedInterfaceUses.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null) t.addNewReference("usedInterfaceLinks", s.usedInterfaceLinks.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null) t.addNewReference("usedInterfaces", s.usedInterfaces.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null) t.addNewReference("ownedInterfaceImplementations", s.ownedInterfaceImplementations.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null) t.addNewReference("implementedInterfaceLinks", s.implementedInterfaceLinks.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null) t.addNewReference("implementedInterfaces", s.implementedInterfaces.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null) t.addNewReference("ownedComponentRealizations", s.ownedComponentRealizations.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null) t.addNewReference("realizedComponents", s.realizedComponents.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null) t.addNewReference("realizingComponents", s.realizingComponents.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null) t.addNewReference("containedComponentPorts", s.containedComponentPorts.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : containedParts
	if (s.containedParts.getEReference() != null) t.addNewReference("containedParts", s.containedParts.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null) t.addNewReference("containedPhysicalPorts", s.containedPhysicalPorts.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null) t.addNewReference("ownedPhysicalPath", s.ownedPhysicalPath.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : representingParts
	if (s.representingParts.getEReference() != null) t.addNewReference("representingParts", s.representingParts.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : capabilityRealizationInvolvements
	if (s.capabilityRealizationInvolvements.getEReference() != null) t.addNewReference("capabilityRealizationInvolvements", s.capabilityRealizationInvolvements.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null) t.addNewReference("involvingCapabilityRealizations", s.involvingCapabilityRealizations.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : deployingLinks
	if (s.deployingLinks.getEReference() != null) t.addNewReference("deployingLinks", s.deployingLinks.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : deploymentLinks
	if (s.deploymentLinks.getEReference() != null) t.addNewReference("deploymentLinks", s.deploymentLinks.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedDeploymentLinks
	if (s.ownedDeploymentLinks.getEReference() != null) t.addNewReference("ownedDeploymentLinks", s.ownedDeploymentLinks.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedPhysicalComponents
	if (s.ownedPhysicalComponents.getEReference() != null) t.addNewReference("ownedPhysicalComponents", s.ownedPhysicalComponents.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : ownedPhysicalComponentPkgs
	if (s.ownedPhysicalComponentPkgs.getEReference() != null) t.addNewReference("ownedPhysicalComponentPkgs", s.ownedPhysicalComponentPkgs.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : logicalInterfaceRealizations
	if (s.logicalInterfaceRealizations.getEReference() != null) t.addNewReference("logicalInterfaceRealizations", s.logicalInterfaceRealizations.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : subPhysicalComponents
	if (s.subPhysicalComponents.getEReference() != null) t.addNewReference("subPhysicalComponents", s.subPhysicalComponents.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : realizedLogicalComponents
	if (s.realizedLogicalComponents.getEReference() != null) t.addNewReference("realizedLogicalComponents", s.realizedLogicalComponents.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : allocatedPhysicalFunctions
	if (s.allocatedPhysicalFunctions.getEReference() != null) t.addNewReference("allocatedPhysicalFunctions", s.allocatedPhysicalFunctions.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : deployedPhysicalComponents
	if (s.deployedPhysicalComponents.getEReference() != null) t.addNewReference("deployedPhysicalComponents", s.deployedPhysicalComponents.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : deployingPhysicalComponents
	if (s.deployingPhysicalComponents.getEReference() != null) t.addNewReference("deployingPhysicalComponents", s.deployingPhysicalComponents.getEReference());
	//PhysicalNode.PhysicalNode -> EReference : subPhysicalNodes
	if (s.subPhysicalNodes.getEReference() != null) t.addNewReference("subPhysicalNodes", s.subPhysicalNodes.getEReference());
}

@lazy
rule LogicalArchitectureRealization
	transform s : DSL!LogicalArchitectureRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EReference : allocatedArchitecture
	if (s.allocatedArchitecture.getEReference() != null) t.addNewReference("allocatedArchitecture", s.allocatedArchitecture.getEReference());
	//LogicalArchitectureRealization.LogicalArchitectureRealization -> EReference : allocatingArchitecture
	if (s.allocatingArchitecture.getEReference() != null) t.addNewReference("allocatingArchitecture", s.allocatingArchitecture.getEReference());
}

@lazy
rule LogicalInterfaceRealization
	transform s : DSL!LogicalInterfaceRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EReference : allocatedInterface
	if (s.allocatedInterface.getEReference() != null) t.addNewReference("allocatedInterface", s.allocatedInterface.getEReference());
	//LogicalInterfaceRealization.LogicalInterfaceRealization -> EReference : allocatingInterfaceAllocator
	if (s.allocatingInterfaceAllocator.getEReference() != null) t.addNewReference("allocatingInterfaceAllocator", s.allocatingInterfaceAllocator.getEReference());
}


// deployment.ecore
@lazy
rule ComponentInstance
	transform s : DSL!ComponentInstance
	to t : SysMLine!ItemUsage
	extends Base{
	//ComponentInstance.ComponentInstance -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ComponentInstance.ComponentInstance -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ComponentInstance.ComponentInstance -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ComponentInstance.ComponentInstance -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ComponentInstance.ComponentInstance -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ComponentInstance.ComponentInstance -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ComponentInstance.ComponentInstance -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ComponentInstance.ComponentInstance -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ComponentInstance.ComponentInstance -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ComponentInstance.ComponentInstance -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ComponentInstance.ComponentInstance -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ComponentInstance.ComponentInstance -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ComponentInstance.ComponentInstance -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ComponentInstance.ComponentInstance -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ComponentInstance.ComponentInstance -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ComponentInstance.ComponentInstance -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ComponentInstance.ComponentInstance -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ComponentInstance.ComponentInstance -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ComponentInstance.ComponentInstance -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ComponentInstance.ComponentInstance -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ComponentInstance.ComponentInstance -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ComponentInstance.ComponentInstance -> EReference : deployingLinks
	if (s.deployingLinks.getEReference() != null) t.addNewReference("deployingLinks", s.deployingLinks.getEReference());
	//ComponentInstance.ComponentInstance -> EReference : deploymentLinks
	if (s.deploymentLinks.getEReference() != null) t.addNewReference("deploymentLinks", s.deploymentLinks.getEReference());
	//ComponentInstance.ComponentInstance -> EReference : portInstances
	if (s.portInstances.getEReference() != null) t.addNewReference("portInstances", s.portInstances.getEReference());
	//ComponentInstance.ComponentInstance -> EReference : ownedAbstractPhysicalInstances
	if (s.ownedAbstractPhysicalInstances.getEReference() != null) t.addNewReference("ownedAbstractPhysicalInstances", s.ownedAbstractPhysicalInstances.getEReference());
	//ComponentInstance.ComponentInstance -> EReference : ownedInstanceDeploymentLinks
	if (s.ownedInstanceDeploymentLinks.getEReference() != null) t.addNewReference("ownedInstanceDeploymentLinks", s.ownedInstanceDeploymentLinks.getEReference());
	//ComponentInstance.ComponentInstance -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
}

@lazy
rule ConnectionInstance
	transform s : DSL!ConnectionInstance
	to t : SysMLine!ItemUsage
	extends Base{
	//ConnectionInstance.ConnectionInstance -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ConnectionInstance.ConnectionInstance -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ConnectionInstance.ConnectionInstance -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ConnectionInstance.ConnectionInstance -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ConnectionInstance.ConnectionInstance -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ConnectionInstance.ConnectionInstance -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ConnectionInstance.ConnectionInstance -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ConnectionInstance.ConnectionInstance -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ConnectionInstance.ConnectionInstance -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ConnectionInstance.ConnectionInstance -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ConnectionInstance.ConnectionInstance -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ConnectionInstance.ConnectionInstance -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ConnectionInstance.ConnectionInstance -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ConnectionInstance.ConnectionInstance -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ConnectionInstance.ConnectionInstance -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ConnectionInstance.ConnectionInstance -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ConnectionInstance.ConnectionInstance -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ConnectionInstance.ConnectionInstance -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ConnectionInstance.ConnectionInstance -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ConnectionInstance.ConnectionInstance -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ConnectionInstance.ConnectionInstance -> EReference : connectionEnds
	if (s.connectionEnds.getEReference() != null) t.addNewReference("connectionEnds", s.connectionEnds.getEReference());
	//ConnectionInstance.ConnectionInstance -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
}

@lazy
rule DeploymentAspect
	transform s : DSL!DeploymentAspect
	to t : SysMLine!ItemUsage
	extends Base{
	//DeploymentAspect.DeploymentAspect -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//DeploymentAspect.DeploymentAspect -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//DeploymentAspect.DeploymentAspect -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//DeploymentAspect.DeploymentAspect -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//DeploymentAspect.DeploymentAspect -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//DeploymentAspect.DeploymentAspect -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//DeploymentAspect.DeploymentAspect -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//DeploymentAspect.DeploymentAspect -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//DeploymentAspect.DeploymentAspect -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//DeploymentAspect.DeploymentAspect -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//DeploymentAspect.DeploymentAspect -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//DeploymentAspect.DeploymentAspect -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//DeploymentAspect.DeploymentAspect -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//DeploymentAspect.DeploymentAspect -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//DeploymentAspect.DeploymentAspect -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//DeploymentAspect.DeploymentAspect -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//DeploymentAspect.DeploymentAspect -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//DeploymentAspect.DeploymentAspect -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//DeploymentAspect.DeploymentAspect -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//DeploymentAspect.DeploymentAspect -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//DeploymentAspect.DeploymentAspect -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//DeploymentAspect.DeploymentAspect -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//DeploymentAspect.DeploymentAspect -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//DeploymentAspect.DeploymentAspect -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//DeploymentAspect.DeploymentAspect -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//DeploymentAspect.DeploymentAspect -> EReference : ownedConfigurations
	if (s.ownedConfigurations.getEReference() != null) t.addNewReference("ownedConfigurations", s.ownedConfigurations.getEReference());
	//DeploymentAspect.DeploymentAspect -> EReference : ownedDeploymentAspects
	if (s.ownedDeploymentAspects.getEReference() != null) t.addNewReference("ownedDeploymentAspects", s.ownedDeploymentAspects.getEReference());
}

@lazy
rule DeploymentConfiguration
	transform s : DSL!DeploymentConfiguration
	to t : SysMLine!ItemUsage
	extends Base{
	//DeploymentConfiguration.DeploymentConfiguration -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//DeploymentConfiguration.DeploymentConfiguration -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//DeploymentConfiguration.DeploymentConfiguration -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//DeploymentConfiguration.DeploymentConfiguration -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//DeploymentConfiguration.DeploymentConfiguration -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//DeploymentConfiguration.DeploymentConfiguration -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//DeploymentConfiguration.DeploymentConfiguration -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//DeploymentConfiguration.DeploymentConfiguration -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//DeploymentConfiguration.DeploymentConfiguration -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//DeploymentConfiguration.DeploymentConfiguration -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//DeploymentConfiguration.DeploymentConfiguration -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//DeploymentConfiguration.DeploymentConfiguration -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//DeploymentConfiguration.DeploymentConfiguration -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//DeploymentConfiguration.DeploymentConfiguration -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//DeploymentConfiguration.DeploymentConfiguration -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//DeploymentConfiguration.DeploymentConfiguration -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//DeploymentConfiguration.DeploymentConfiguration -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//DeploymentConfiguration.DeploymentConfiguration -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//DeploymentConfiguration.DeploymentConfiguration -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//DeploymentConfiguration.DeploymentConfiguration -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//DeploymentConfiguration.DeploymentConfiguration -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//DeploymentConfiguration.DeploymentConfiguration -> EReference : ownedDeploymentLinks
	if (s.ownedDeploymentLinks.getEReference() != null) t.addNewReference("ownedDeploymentLinks", s.ownedDeploymentLinks.getEReference());
	//DeploymentConfiguration.DeploymentConfiguration -> EReference : ownedPhysicalInstances
	if (s.ownedPhysicalInstances.getEReference() != null) t.addNewReference("ownedPhysicalInstances", s.ownedPhysicalInstances.getEReference());
}

@lazy
rule InstanceDeploymentLink
	transform s : DSL!InstanceDeploymentLink
	to t : SysMLine!ItemUsage
	extends Base{
	//InstanceDeploymentLink.InstanceDeploymentLink -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EReference : deployedElement
	if (s.deployedElement.getEReference() != null) t.addNewReference("deployedElement", s.deployedElement.getEReference());
	//InstanceDeploymentLink.InstanceDeploymentLink -> EReference : location
	if (s.location.getEReference() != null) t.addNewReference("location", s.location.getEReference());
}

@lazy
rule PartDeploymentLink
	transform s : DSL!PartDeploymentLink
	to t : SysMLine!ItemUsage
	extends Base{
	//PartDeploymentLink.PartDeploymentLink -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PartDeploymentLink.PartDeploymentLink -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PartDeploymentLink.PartDeploymentLink -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PartDeploymentLink.PartDeploymentLink -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PartDeploymentLink.PartDeploymentLink -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PartDeploymentLink.PartDeploymentLink -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PartDeploymentLink.PartDeploymentLink -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PartDeploymentLink.PartDeploymentLink -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PartDeploymentLink.PartDeploymentLink -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PartDeploymentLink.PartDeploymentLink -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PartDeploymentLink.PartDeploymentLink -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PartDeploymentLink.PartDeploymentLink -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//PartDeploymentLink.PartDeploymentLink -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PartDeploymentLink.PartDeploymentLink -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PartDeploymentLink.PartDeploymentLink -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PartDeploymentLink.PartDeploymentLink -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PartDeploymentLink.PartDeploymentLink -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PartDeploymentLink.PartDeploymentLink -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PartDeploymentLink.PartDeploymentLink -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PartDeploymentLink.PartDeploymentLink -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PartDeploymentLink.PartDeploymentLink -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PartDeploymentLink.PartDeploymentLink -> EReference : deployedElement
	if (s.deployedElement.getEReference() != null) t.addNewReference("deployedElement", s.deployedElement.getEReference());
	//PartDeploymentLink.PartDeploymentLink -> EReference : location
	if (s.location.getEReference() != null) t.addNewReference("location", s.location.getEReference());
}

@lazy
rule AbstractPhysicalInstance
	transform s : DSL!AbstractPhysicalInstance
	to t : SysMLine!ItemUsage
	extends Base{
	//AbstractPhysicalInstance.AbstractPhysicalInstance -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//AbstractPhysicalInstance.AbstractPhysicalInstance -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//AbstractPhysicalInstance.AbstractPhysicalInstance -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//AbstractPhysicalInstance.AbstractPhysicalInstance -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//AbstractPhysicalInstance.AbstractPhysicalInstance -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//AbstractPhysicalInstance.AbstractPhysicalInstance -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//AbstractPhysicalInstance.AbstractPhysicalInstance -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//AbstractPhysicalInstance.AbstractPhysicalInstance -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//AbstractPhysicalInstance.AbstractPhysicalInstance -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//AbstractPhysicalInstance.AbstractPhysicalInstance -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//AbstractPhysicalInstance.AbstractPhysicalInstance -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//AbstractPhysicalInstance.AbstractPhysicalInstance -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//AbstractPhysicalInstance.AbstractPhysicalInstance -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//AbstractPhysicalInstance.AbstractPhysicalInstance -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//AbstractPhysicalInstance.AbstractPhysicalInstance -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//AbstractPhysicalInstance.AbstractPhysicalInstance -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//AbstractPhysicalInstance.AbstractPhysicalInstance -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//AbstractPhysicalInstance.AbstractPhysicalInstance -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//AbstractPhysicalInstance.AbstractPhysicalInstance -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//AbstractPhysicalInstance.AbstractPhysicalInstance -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
}

@lazy
rule PortInstance
	transform s : DSL!PortInstance
	to t : SysMLine!ItemUsage
	extends Base{
	//PortInstance.PortInstance -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PortInstance.PortInstance -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PortInstance.PortInstance -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PortInstance.PortInstance -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PortInstance.PortInstance -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PortInstance.PortInstance -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PortInstance.PortInstance -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PortInstance.PortInstance -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PortInstance.PortInstance -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PortInstance.PortInstance -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PortInstance.PortInstance -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PortInstance.PortInstance -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PortInstance.PortInstance -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PortInstance.PortInstance -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PortInstance.PortInstance -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PortInstance.PortInstance -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PortInstance.PortInstance -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PortInstance.PortInstance -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PortInstance.PortInstance -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PortInstance.PortInstance -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PortInstance.PortInstance -> EReference : connections
	if (s.connections.getEReference() != null) t.addNewReference("connections", s.connections.getEReference());
	//PortInstance.PortInstance -> EReference : component
	if (s.component.getEReference() != null) t.addNewReference("component", s.component.getEReference());
	//PortInstance.PortInstance -> EReference : type
	if (s.type.getEReference() != null) t.addNewReference("type", s.type.getEReference());
}

@lazy
rule TypeDeploymentLink
	transform s : DSL!TypeDeploymentLink
	to t : SysMLine!ItemUsage
	extends Base{
	//TypeDeploymentLink.TypeDeploymentLink -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//TypeDeploymentLink.TypeDeploymentLink -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//TypeDeploymentLink.TypeDeploymentLink -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//TypeDeploymentLink.TypeDeploymentLink -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//TypeDeploymentLink.TypeDeploymentLink -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//TypeDeploymentLink.TypeDeploymentLink -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//TypeDeploymentLink.TypeDeploymentLink -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//TypeDeploymentLink.TypeDeploymentLink -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//TypeDeploymentLink.TypeDeploymentLink -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//TypeDeploymentLink.TypeDeploymentLink -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//TypeDeploymentLink.TypeDeploymentLink -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//TypeDeploymentLink.TypeDeploymentLink -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//TypeDeploymentLink.TypeDeploymentLink -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//TypeDeploymentLink.TypeDeploymentLink -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//TypeDeploymentLink.TypeDeploymentLink -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//TypeDeploymentLink.TypeDeploymentLink -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//TypeDeploymentLink.TypeDeploymentLink -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//TypeDeploymentLink.TypeDeploymentLink -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//TypeDeploymentLink.TypeDeploymentLink -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//TypeDeploymentLink.TypeDeploymentLink -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//TypeDeploymentLink.TypeDeploymentLink -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//TypeDeploymentLink.TypeDeploymentLink -> EReference : deployedElement
	if (s.deployedElement.getEReference() != null) t.addNewReference("deployedElement", s.deployedElement.getEReference());
	//TypeDeploymentLink.TypeDeploymentLink -> EReference : location
	if (s.location.getEReference() != null) t.addNewReference("location", s.location.getEReference());
}


// epbs.ecore
@lazy
rule EPBSArchitecturePkg
	transform s : DSL!EPBSArchitecturePkg
	to t : SysMLine!ItemUsage
	extends Base{
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//EPBSArchitecturePkg.EPBSArchitecturePkg -> EReference : ownedEPBSArchitectures
	if (s.ownedEPBSArchitectures.getEReference() != null) t.addNewReference("ownedEPBSArchitectures", s.ownedEPBSArchitectures.getEReference());
}

@lazy
rule EPBSArchitecture
	transform s : DSL!EPBSArchitecture
	to t : SysMLine!ItemUsage
	extends Base{
	//EPBSArchitecture.EPBSArchitecture -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//EPBSArchitecture.EPBSArchitecture -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//EPBSArchitecture.EPBSArchitecture -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//EPBSArchitecture.EPBSArchitecture -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//EPBSArchitecture.EPBSArchitecture -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//EPBSArchitecture.EPBSArchitecture -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//EPBSArchitecture.EPBSArchitecture -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//EPBSArchitecture.EPBSArchitecture -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//EPBSArchitecture.EPBSArchitecture -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : ownedFunctionPkg
	if (s.ownedFunctionPkg.getEReference() != null) t.addNewReference("ownedFunctionPkg", s.ownedFunctionPkg.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : provisionedArchitectureAllocations
	if (s.provisionedArchitectureAllocations.getEReference() != null) t.addNewReference("provisionedArchitectureAllocations", s.provisionedArchitectureAllocations.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : provisioningArchitectureAllocations
	if (s.provisioningArchitectureAllocations.getEReference() != null) t.addNewReference("provisioningArchitectureAllocations", s.provisioningArchitectureAllocations.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : allocatedArchitectures
	if (s.allocatedArchitectures.getEReference() != null) t.addNewReference("allocatedArchitectures", s.allocatedArchitectures.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : allocatingArchitectures
	if (s.allocatingArchitectures.getEReference() != null) t.addNewReference("allocatingArchitectures", s.allocatingArchitectures.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : system
	if (s.system.getEReference() != null) t.addNewReference("system", s.system.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : ownedConfigurationItemPkg
	if (s.ownedConfigurationItemPkg.getEReference() != null) t.addNewReference("ownedConfigurationItemPkg", s.ownedConfigurationItemPkg.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : containedCapabilityRealizationPkg
	if (s.containedCapabilityRealizationPkg.getEReference() != null) t.addNewReference("containedCapabilityRealizationPkg", s.containedCapabilityRealizationPkg.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : ownedPhysicalArchitectureRealizations
	if (s.ownedPhysicalArchitectureRealizations.getEReference() != null) t.addNewReference("ownedPhysicalArchitectureRealizations", s.ownedPhysicalArchitectureRealizations.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : allocatedPhysicalArchitectureRealizations
	if (s.allocatedPhysicalArchitectureRealizations.getEReference() != null) t.addNewReference("allocatedPhysicalArchitectureRealizations", s.allocatedPhysicalArchitectureRealizations.getEReference());
	//EPBSArchitecture.EPBSArchitecture -> EReference : allocatedPhysicalArchitectures
	if (s.allocatedPhysicalArchitectures.getEReference() != null) t.addNewReference("allocatedPhysicalArchitectures", s.allocatedPhysicalArchitectures.getEReference());
}

@lazy
rule ConfigurationItemPkg
	transform s : DSL!ConfigurationItemPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//ConfigurationItemPkg.ConfigurationItemPkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : ownedParts
	if (s.ownedParts.getEReference() != null) t.addNewReference("ownedParts", s.ownedParts.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : ownedFunctionalLinks
	if (s.ownedFunctionalLinks.getEReference() != null) t.addNewReference("ownedFunctionalLinks", s.ownedFunctionalLinks.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : ownedFunctionalAllocations
	if (s.ownedFunctionalAllocations.getEReference() != null) t.addNewReference("ownedFunctionalAllocations", s.ownedFunctionalAllocations.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : ownedComponentExchangeRealizations
	if (s.ownedComponentExchangeRealizations.getEReference() != null) t.addNewReference("ownedComponentExchangeRealizations", s.ownedComponentExchangeRealizations.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : ownedConfigurationItems
	if (s.ownedConfigurationItems.getEReference() != null) t.addNewReference("ownedConfigurationItems", s.ownedConfigurationItems.getEReference());
	//ConfigurationItemPkg.ConfigurationItemPkg -> EReference : ownedConfigurationItemPkgs
	if (s.ownedConfigurationItemPkgs.getEReference() != null) t.addNewReference("ownedConfigurationItemPkgs", s.ownedConfigurationItemPkgs.getEReference());
}

@lazy
rule ConfigurationItem
	transform s : DSL!ConfigurationItem
	to t : SysMLine!ItemUsage
	extends Base{
	//ConfigurationItem.ConfigurationItem -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//ConfigurationItem.ConfigurationItem -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//ConfigurationItem.ConfigurationItem -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//ConfigurationItem.ConfigurationItem -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//ConfigurationItem.ConfigurationItem -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//ConfigurationItem.ConfigurationItem -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//ConfigurationItem.ConfigurationItem -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//ConfigurationItem.ConfigurationItem -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//ConfigurationItem.ConfigurationItem -> EAttribute : abstract
	if (s.abstract.getEAttribute() != null) t.addNewAttribute("abstract", s.abstract.getEAttribute());
	//ConfigurationItem.ConfigurationItem -> EAttribute : actor
	if (s.actor.getEAttribute() != null) t.addNewAttribute("actor", s.actor.getEAttribute());
	//ConfigurationItem.ConfigurationItem -> EAttribute : human
	if (s.human.getEAttribute() != null) t.addNewAttribute("human", s.human.getEAttribute());
	//ConfigurationItem.ConfigurationItem -> EAttribute : itemIdentifier
	if (s.itemIdentifier.getEAttribute() != null) t.addNewAttribute("itemIdentifier", s.itemIdentifier.getEAttribute());
	//ConfigurationItem.ConfigurationItem -> EAttribute : kind
	if (s.kind.getEAttribute() != null) t.addNewAttribute("kind", s.kind.getEAttribute());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : involvingInvolvements
	if (s.involvingInvolvements.getEReference() != null) t.addNewReference("involvingInvolvements", s.involvingInvolvements.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : capabilityRealizationInvolvements
	if (s.capabilityRealizationInvolvements.getEReference() != null) t.addNewReference("capabilityRealizationInvolvements", s.capabilityRealizationInvolvements.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : involvingCapabilityRealizations
	if (s.involvingCapabilityRealizations.getEReference() != null) t.addNewReference("involvingCapabilityRealizations", s.involvingCapabilityRealizations.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : abstractTypedElements
	if (s.abstractTypedElements.getEReference() != null) t.addNewReference("abstractTypedElements", s.abstractTypedElements.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : typedElements
	if (s.typedElements.getEReference() != null) t.addNewReference("typedElements", s.typedElements.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedFunctionalAllocation
	if (s.ownedFunctionalAllocation.getEReference() != null) t.addNewReference("ownedFunctionalAllocation", s.ownedFunctionalAllocation.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedComponentExchanges
	if (s.ownedComponentExchanges.getEReference() != null) t.addNewReference("ownedComponentExchanges", s.ownedComponentExchanges.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedComponentExchangeCategories
	if (s.ownedComponentExchangeCategories.getEReference() != null) t.addNewReference("ownedComponentExchangeCategories", s.ownedComponentExchangeCategories.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : functionalAllocations
	if (s.functionalAllocations.getEReference() != null) t.addNewReference("functionalAllocations", s.functionalAllocations.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : allocatedFunctions
	if (s.allocatedFunctions.getEReference() != null) t.addNewReference("allocatedFunctions", s.allocatedFunctions.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : inExchangeLinks
	if (s.inExchangeLinks.getEReference() != null) t.addNewReference("inExchangeLinks", s.inExchangeLinks.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : outExchangeLinks
	if (s.outExchangeLinks.getEReference() != null) t.addNewReference("outExchangeLinks", s.outExchangeLinks.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedAbstractCapabilityPkg
	if (s.ownedAbstractCapabilityPkg.getEReference() != null) t.addNewReference("ownedAbstractCapabilityPkg", s.ownedAbstractCapabilityPkg.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedInterfacePkg
	if (s.ownedInterfacePkg.getEReference() != null) t.addNewReference("ownedInterfacePkg", s.ownedInterfacePkg.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedStateMachines
	if (s.ownedStateMachines.getEReference() != null) t.addNewReference("ownedStateMachines", s.ownedStateMachines.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedGeneralizations
	if (s.ownedGeneralizations.getEReference() != null) t.addNewReference("ownedGeneralizations", s.ownedGeneralizations.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : superGeneralizations
	if (s.superGeneralizations.getEReference() != null) t.addNewReference("superGeneralizations", s.superGeneralizations.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : subGeneralizations
	if (s.subGeneralizations.getEReference() != null) t.addNewReference("subGeneralizations", s.subGeneralizations.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : super
	if (s.super.getEReference() != null) t.addNewReference("super", s.super.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : sub
	if (s.sub.getEReference() != null) t.addNewReference("sub", s.sub.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedFeatures
	if (s.ownedFeatures.getEReference() != null) t.addNewReference("ownedFeatures", s.ownedFeatures.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : containedProperties
	if (s.containedProperties.getEReference() != null) t.addNewReference("containedProperties", s.containedProperties.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedInterfaceAllocations
	if (s.ownedInterfaceAllocations.getEReference() != null) t.addNewReference("ownedInterfaceAllocations", s.ownedInterfaceAllocations.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : provisionedInterfaceAllocations
	if (s.provisionedInterfaceAllocations.getEReference() != null) t.addNewReference("provisionedInterfaceAllocations", s.provisionedInterfaceAllocations.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : allocatedInterfaces
	if (s.allocatedInterfaces.getEReference() != null) t.addNewReference("allocatedInterfaces", s.allocatedInterfaces.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedCommunicationLinks
	if (s.ownedCommunicationLinks.getEReference() != null) t.addNewReference("ownedCommunicationLinks", s.ownedCommunicationLinks.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : produce
	if (s.produce.getEReference() != null) t.addNewReference("produce", s.produce.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : consume
	if (s.consume.getEReference() != null) t.addNewReference("consume", s.consume.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : send
	if (s.send.getEReference() != null) t.addNewReference("send", s.send.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : receive
	if (s.receive.getEReference() != null) t.addNewReference("receive", s.receive.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : call
	if (s.call.getEReference() != null) t.addNewReference("call", s.call.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : execute
	if (s.execute.getEReference() != null) t.addNewReference("execute", s.execute.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : write
	if (s.write.getEReference() != null) t.addNewReference("write", s.write.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : access
	if (s.access.getEReference() != null) t.addNewReference("access", s.access.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : acquire
	if (s.acquire.getEReference() != null) t.addNewReference("acquire", s.acquire.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : transmit
	if (s.transmit.getEReference() != null) t.addNewReference("transmit", s.transmit.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedInterfaceUses
	if (s.ownedInterfaceUses.getEReference() != null) t.addNewReference("ownedInterfaceUses", s.ownedInterfaceUses.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : usedInterfaceLinks
	if (s.usedInterfaceLinks.getEReference() != null) t.addNewReference("usedInterfaceLinks", s.usedInterfaceLinks.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : usedInterfaces
	if (s.usedInterfaces.getEReference() != null) t.addNewReference("usedInterfaces", s.usedInterfaces.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedInterfaceImplementations
	if (s.ownedInterfaceImplementations.getEReference() != null) t.addNewReference("ownedInterfaceImplementations", s.ownedInterfaceImplementations.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : implementedInterfaceLinks
	if (s.implementedInterfaceLinks.getEReference() != null) t.addNewReference("implementedInterfaceLinks", s.implementedInterfaceLinks.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : implementedInterfaces
	if (s.implementedInterfaces.getEReference() != null) t.addNewReference("implementedInterfaces", s.implementedInterfaces.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedComponentRealizations
	if (s.ownedComponentRealizations.getEReference() != null) t.addNewReference("ownedComponentRealizations", s.ownedComponentRealizations.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : realizedComponents
	if (s.realizedComponents.getEReference() != null) t.addNewReference("realizedComponents", s.realizedComponents.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : realizingComponents
	if (s.realizingComponents.getEReference() != null) t.addNewReference("realizingComponents", s.realizingComponents.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : providedInterfaces
	if (s.providedInterfaces.getEReference() != null) t.addNewReference("providedInterfaces", s.providedInterfaces.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : requiredInterfaces
	if (s.requiredInterfaces.getEReference() != null) t.addNewReference("requiredInterfaces", s.requiredInterfaces.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : containedComponentPorts
	if (s.containedComponentPorts.getEReference() != null) t.addNewReference("containedComponentPorts", s.containedComponentPorts.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : containedParts
	if (s.containedParts.getEReference() != null) t.addNewReference("containedParts", s.containedParts.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : containedPhysicalPorts
	if (s.containedPhysicalPorts.getEReference() != null) t.addNewReference("containedPhysicalPorts", s.containedPhysicalPorts.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedPhysicalPath
	if (s.ownedPhysicalPath.getEReference() != null) t.addNewReference("ownedPhysicalPath", s.ownedPhysicalPath.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedPhysicalLinks
	if (s.ownedPhysicalLinks.getEReference() != null) t.addNewReference("ownedPhysicalLinks", s.ownedPhysicalLinks.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedPhysicalLinkCategories
	if (s.ownedPhysicalLinkCategories.getEReference() != null) t.addNewReference("ownedPhysicalLinkCategories", s.ownedPhysicalLinkCategories.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : representingParts
	if (s.representingParts.getEReference() != null) t.addNewReference("representingParts", s.representingParts.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedConfigurationItems
	if (s.ownedConfigurationItems.getEReference() != null) t.addNewReference("ownedConfigurationItems", s.ownedConfigurationItems.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedConfigurationItemPkgs
	if (s.ownedConfigurationItemPkgs.getEReference() != null) t.addNewReference("ownedConfigurationItemPkgs", s.ownedConfigurationItemPkgs.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : ownedPhysicalArtifactRealizations
	if (s.ownedPhysicalArtifactRealizations.getEReference() != null) t.addNewReference("ownedPhysicalArtifactRealizations", s.ownedPhysicalArtifactRealizations.getEReference());
	//ConfigurationItem.ConfigurationItem -> EReference : allocatedPhysicalArtifacts
	if (s.allocatedPhysicalArtifacts.getEReference() != null) t.addNewReference("allocatedPhysicalArtifacts", s.allocatedPhysicalArtifacts.getEReference());
}

@lazy
rule PhysicalArchitectureRealization
	transform s : DSL!PhysicalArchitectureRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EReference : allocatedArchitecture
	if (s.allocatedArchitecture.getEReference() != null) t.addNewReference("allocatedArchitecture", s.allocatedArchitecture.getEReference());
	//PhysicalArchitectureRealization.PhysicalArchitectureRealization -> EReference : allocatingArchitecture
	if (s.allocatingArchitecture.getEReference() != null) t.addNewReference("allocatingArchitecture", s.allocatingArchitecture.getEReference());
}

@lazy
rule PhysicalArtifactRealization
	transform s : DSL!PhysicalArtifactRealization
	to t : SysMLine!ItemUsage
	extends Base{
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EReference : realizedFlow
	if (s.realizedFlow.getEReference() != null) t.addNewReference("realizedFlow", s.realizedFlow.getEReference());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EReference : targetElement
	if (s.targetElement.getEReference() != null) t.addNewReference("targetElement", s.targetElement.getEReference());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null) t.addNewReference("sourceElement", s.sourceElement.getEReference());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EReference : realizedPhysicalArtifact
	if (s.realizedPhysicalArtifact.getEReference() != null) t.addNewReference("realizedPhysicalArtifact", s.realizedPhysicalArtifact.getEReference());
	//PhysicalArtifactRealization.PhysicalArtifactRealization -> EReference : realizingConfigurationItem
	if (s.realizingConfigurationItem.getEReference() != null) t.addNewReference("realizingConfigurationItem", s.realizingConfigurationItem.getEReference());
}


// sharedmodel.ecore
@lazy
rule SharedPkg
	transform s : DSL!SharedPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//SharedPkg.SharedPkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//SharedPkg.SharedPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//SharedPkg.SharedPkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//SharedPkg.SharedPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//SharedPkg.SharedPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//SharedPkg.SharedPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//SharedPkg.SharedPkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//SharedPkg.SharedPkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//SharedPkg.SharedPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//SharedPkg.SharedPkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//SharedPkg.SharedPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//SharedPkg.SharedPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//SharedPkg.SharedPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//SharedPkg.SharedPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//SharedPkg.SharedPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//SharedPkg.SharedPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//SharedPkg.SharedPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//SharedPkg.SharedPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//SharedPkg.SharedPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//SharedPkg.SharedPkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//SharedPkg.SharedPkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//SharedPkg.SharedPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//SharedPkg.SharedPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//SharedPkg.SharedPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//SharedPkg.SharedPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//SharedPkg.SharedPkg -> EReference : reuseLinks
	if (s.reuseLinks.getEReference() != null) t.addNewReference("reuseLinks", s.reuseLinks.getEReference());
	//SharedPkg.SharedPkg -> EReference : ownedDataPkg
	if (s.ownedDataPkg.getEReference() != null) t.addNewReference("ownedDataPkg", s.ownedDataPkg.getEReference());
	//SharedPkg.SharedPkg -> EReference : ownedGenericPkg
	if (s.ownedGenericPkg.getEReference() != null) t.addNewReference("ownedGenericPkg", s.ownedGenericPkg.getEReference());
}

@lazy
rule GenericPkg
	transform s : DSL!GenericPkg
	to t : SysMLine!ItemUsage
	extends Base{
	//GenericPkg.GenericPkg -> EAttribute : id
	if (s.id.getEAttribute() != null) t.addNewAttribute("id", s.id.getEAttribute());
	//GenericPkg.GenericPkg -> EAttribute : sid
	if (s.sid.getEAttribute() != null) t.addNewAttribute("sid", s.sid.getEAttribute());
	//GenericPkg.GenericPkg -> EAttribute : name
	if (s.name.getEAttribute() != null) t.addNewAttribute("name", s.name.getEAttribute());
	//GenericPkg.GenericPkg -> EAttribute : visibleInDoc
	if (s.visibleInDoc.getEAttribute() != null) t.addNewAttribute("visibleInDoc", s.visibleInDoc.getEAttribute());
	//GenericPkg.GenericPkg -> EAttribute : visibleInLM
	if (s.visibleInLM.getEAttribute() != null) t.addNewAttribute("visibleInLM", s.visibleInLM.getEAttribute());
	//GenericPkg.GenericPkg -> EAttribute : summary
	if (s.summary.getEAttribute() != null) t.addNewAttribute("summary", s.summary.getEAttribute());
	//GenericPkg.GenericPkg -> EAttribute : description
	if (s.description.getEAttribute() != null) t.addNewAttribute("description", s.description.getEAttribute());
	//GenericPkg.GenericPkg -> EAttribute : review
	if (s.review.getEAttribute() != null) t.addNewAttribute("review", s.review.getEAttribute());
	//GenericPkg.GenericPkg -> EReference : ownedExtensions
	if (s.ownedExtensions.getEReference() != null) t.addNewReference("ownedExtensions", s.ownedExtensions.getEReference());
	//GenericPkg.GenericPkg -> EReference : constraints
	if (s.constraints.getEReference() != null) t.addNewReference("constraints", s.constraints.getEReference());
	//GenericPkg.GenericPkg -> EReference : ownedConstraints
	if (s.ownedConstraints.getEReference() != null) t.addNewReference("ownedConstraints", s.ownedConstraints.getEReference());
	//GenericPkg.GenericPkg -> EReference : ownedMigratedElements
	if (s.ownedMigratedElements.getEReference() != null) t.addNewReference("ownedMigratedElements", s.ownedMigratedElements.getEReference());
	//GenericPkg.GenericPkg -> EReference : incomingTraces
	if (s.incomingTraces.getEReference() != null) t.addNewReference("incomingTraces", s.incomingTraces.getEReference());
	//GenericPkg.GenericPkg -> EReference : outgoingTraces
	if (s.outgoingTraces.getEReference() != null) t.addNewReference("outgoingTraces", s.outgoingTraces.getEReference());
	//GenericPkg.GenericPkg -> EReference : ownedPropertyValues
	if (s.ownedPropertyValues.getEReference() != null) t.addNewReference("ownedPropertyValues", s.ownedPropertyValues.getEReference());
	//GenericPkg.GenericPkg -> EReference : ownedEnumerationPropertyTypes
	if (s.ownedEnumerationPropertyTypes.getEReference() != null) t.addNewReference("ownedEnumerationPropertyTypes", s.ownedEnumerationPropertyTypes.getEReference());
	//GenericPkg.GenericPkg -> EReference : appliedPropertyValues
	if (s.appliedPropertyValues.getEReference() != null) t.addNewReference("appliedPropertyValues", s.appliedPropertyValues.getEReference());
	//GenericPkg.GenericPkg -> EReference : ownedPropertyValueGroups
	if (s.ownedPropertyValueGroups.getEReference() != null) t.addNewReference("ownedPropertyValueGroups", s.ownedPropertyValueGroups.getEReference());
	//GenericPkg.GenericPkg -> EReference : appliedPropertyValueGroups
	if (s.appliedPropertyValueGroups.getEReference() != null) t.addNewReference("appliedPropertyValueGroups", s.appliedPropertyValueGroups.getEReference());
	//GenericPkg.GenericPkg -> EReference : status
	if (s.status.getEReference() != null) t.addNewReference("status", s.status.getEReference());
	//GenericPkg.GenericPkg -> EReference : features
	if (s.features.getEReference() != null) t.addNewReference("features", s.features.getEReference());
	//GenericPkg.GenericPkg -> EReference : ownedTraces
	if (s.ownedTraces.getEReference() != null) t.addNewReference("ownedTraces", s.ownedTraces.getEReference());
	//GenericPkg.GenericPkg -> EReference : containedGenericTraces
	if (s.containedGenericTraces.getEReference() != null) t.addNewReference("containedGenericTraces", s.containedGenericTraces.getEReference());
	//GenericPkg.GenericPkg -> EReference : namingRules
	if (s.namingRules.getEReference() != null) t.addNewReference("namingRules", s.namingRules.getEReference());
	//GenericPkg.GenericPkg -> EReference : ownedPropertyValuePkgs
	if (s.ownedPropertyValuePkgs.getEReference() != null) t.addNewReference("ownedPropertyValuePkgs", s.ownedPropertyValuePkgs.getEReference());
	//GenericPkg.GenericPkg -> EReference : subGenericPkgs
	if (s.subGenericPkgs.getEReference() != null) t.addNewReference("subGenericPkgs", s.subGenericPkgs.getEReference());
	//GenericPkg.GenericPkg -> EReference : capellaElements
	if (s.capellaElements.getEReference() != null) t.addNewReference("capellaElements", s.capellaElements.getEReference());
}


