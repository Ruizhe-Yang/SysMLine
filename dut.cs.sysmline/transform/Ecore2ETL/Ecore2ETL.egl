[%var fileName = root.name;%]
[%root.name.println("[gen-ETL] root Package >> ");%]
[%for (epackage in ePackages){%]
[%if (root.name != epackage.name){%]
[%epackage.name.println("[gen-ETL] referenced Package >> ");%]
[%}%]
[%}%]
[%var KeyWords = Sequence{"default", "import", "from", "to", "extends",
 							"Collection", "guard", "function", "operation", "not",
 							"and", "or", "delete", "if", "else"};%]
import "DSL2SysMLine-util.eol";

pre{
	var eObjectSequence = new Sequence;
	var KeyWords = baseKeyWords();
	var i = 0;
	eObjectSequence.init_[%=fileName%]();
	main_[%=fileName%]();
}

post{
	("[ETL] [%=fileName%]2SysMLine >> " + SysMLine!Package.all.first().declaredName + ".sysmline").println();
}

operation main_[%=fileName%](){
	var rootEcore = DSL!EObject.all.first();
	var rootSysMLine = new SysMLine!Namespace;
	var rootPackage = new SysMLine!Package;
	rootPackage.declaredName = "[%=fileName%]_model";
	rootSysMLine.body.add(rootPackage);
	[%for (epackage in ePackages){%]
	rootPackage.addNamespaceImport("[%=epackage.name%]");
	[%}%]
	rootEcore.addNodeTo(rootPackage);
}

operation Sequence init_[%=fileName%](){
	[%for (epackage in ePackages){%]
	[%for (eClass in epackage.eClassifiers.select(s|s.type().name == "EClass")){%]
	//[%=epackage.name%].[%=eClass.name%] -> Instantiation
	var id[%=eClass.name%] = 0;
	for ([%=eClass.name%]_ in DSL!EObject.all.select(s|s.isTypeOf(DSL![%=eClass.name.clearKeyWord(2)%]))){
		var [%=eClass.name%]_Tuple = Tuple{"key"="[%=eClass.name%]_"+(id[%=eClass.name%]++).asString(),"value"= [%=eClass.name%]_};
		self.add([%=eClass.name%]_Tuple);
	}
	[%}%]
	[%}%]
}

@abstract
rule Base
	transform s : DSL!EObject
	to t : SysMLine!ItemUsage{
	t.declaredName = s.getDeclaredName();
	t.featureNote.add(":");
	t.featureSpecialization.add(s.getfeatureSpecialization());
	if (s.eContainingFeature != null and s.eContainingFeature.name != null){
		t.featureNote.add(":>");
		t.featureSpecialization.add(s.eContainingFeature().name);
	}
}

[%for (epackage in ePackages){%]
// [%=epackage.name%].ecore
[%=epackage.main()%]
[%}%]
[% operation Ecore!EClass writeEClass(ePackageName){%]
@lazy
rule [%=self.name.clearKeyWord(2)%]
	transform s : DSL![%=self.name.clearKeyWord(2)%] //[%=ePackageName%].[%=self.name%]
	to t : SysMLine!ItemUsage
	extends Base{
	[%	for (eAttribute in self.eAllAttributes){%]
	//[%=self.name%].[%=eAttribute.name%] -> EAttribute : [%=eAttribute.name.clearKeyWord(0)%]
	if (s.[%=eAttribute.name.clearKeyWord(2)%].getEAttribute() != null) t.addNewAttribute("[%=eAttribute.name%]".clearKeyWord(), s.[%=eAttribute.name.clearKeyWord(2)%].getEAttribute());
	[%}%]
	[%	for (eReference in self.eAllReferences){%]
	//[%=self.name%].[%=eReference.name%] -> EReference : [%=eReference.name.clearKeyWord(0)%]
	if (s.[%=eReference.name.clearKeyWord(2)%].getEReference() != null) t.addNewReference("[%=eReference.name%]".clearKeyWord(), s.[%=eReference.name.clearKeyWord(2)%].getEReference());
	[%}%]
}

[%}%]

[%
operation Ecore!EPackage main(){ 
	var eClassSequence = self.eClassifiers.select(s|s.type().name == "EClass");
	for (eClass in eClassSequence){
		eClass.writeEClass(self.name);
	} 
}

operation String clearKeyWord(i){
	if (KeyWords.includes(self) and i == 0){
		return self+"_";
	}
	else if (KeyWords.includes(self) and i == 1){
		return "'"+self+"'";
	}
	else if (KeyWords.includes(self) and i == 2){
		return "`"+self+"`";
	}
	else{
		return self;
	}
}
%]
