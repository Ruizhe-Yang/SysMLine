[% import "Ecore2ETL-util.eol"; %]
[%var fileName = root.name;%]
[%var KeyWords = Sequence{"default", "import", "from", "to"};%]
import "DSL2SysMLine-util.eol";

pre{
	"------------------ ETL Start ------------------".println();
	var eObjectSequence = new Sequence;
	var KeyWords = Sequence{"about", "abstract", "accept", "action", "actor",
							"after", "alias", "all", "allocate", "allocation",
							"analysis", "and", "as", "assign", "assert",
							"assoc", "assume", "at", "attribute", "bind",
							"binding", "block", "by", "calc", "case",
							"comment", "concern", "connect", "connection", "constraint",
							"crosses", "decide", "def", "default", "defined",
							"dependency", "derived", "do", "doc", "else",
							"end", "entry", "enum", "event", "exhibit",
							"exit", "expose", "filter", "first", "flow",
							"for", "fork", "frame", "from", "hastype",
							"if", "implies", "import", "in", "include",
							"individual", "inout", "interface", "istype", "item",
							"join", "language", "loop", "merge", "message",
							"metadata", "nonunique", "not", "objective", "occurrence",
							"of", "or", "ordered", "out", "package",
							"parallel", "part", "perform", "port", "private",
							"protected", "public", "readonly", "redefines", "ref",
							"references", "render", "rendering", "rep", "require",
							"requirement", "return", "satisfy", "send", "snapshot",
							"specializes", "stakeholder", "state", "subject", "subsets",
							"succession", "terminate", "then", "timeslice", "to",
							"transition", "until", "use", "variant", "variation",
							"verification", "verify", "via", "view", "viewpoint",
							"when", "while", "xor", "value", "any"
	  						};
	init_[%=fileName%]();
	main_[%=fileName%]();
}

post{
	"------------------ ETL Over  ------------------".println();
}

operation main_[%=fileName%](){
	var rootEcore = DSL!EObject.all.first();
	var rootSysMLine = new SysMLine!Namespace;
	var rootPackage = new SysMLine!Package;
	rootPackage.declaredName = "[%=fileName%]_model";
	rootSysMLine.body.add(rootPackage);
	var namespaceImport = new SysMLine!NamespaceImport;
	namespaceImport.declaredName = "[%=fileName%]";
	rootPackage.body.add(namespaceImport);
	rootEcore.addNodeTo(rootPackage);
}

operation init_[%=fileName%](){
	[%for (eClass in root.eClassifiers.select(s|s.type().name == "EClass")){%]
	//[%=eClass.name%] -> Instantiation
	var id[%=eClass.name%] = 0;
	for (e[%=eClass.name%] in DSL!EObject.all.select(s|s.isTypeOf(DSL![%=eClass.name%]))){
		var e[%=eClass.name%]Tuple = Tuple{"key"=e[%=eClass.name%].type().name.asString()+"_"+(id[%=eClass.name%]++).asString(),"value"= e[%=eClass.name%]};
		eObjectSequence.add(e[%=eClass.name%]Tuple);
	}
	[%}%]
}

@abstract
rule Base
	transform s : DSL!EObject
	to t : SysMLine!PartUsage{
	t.declaredName = s.getDeclaredName();
	t.featureNote.add(":");
	t.featureSpecialization.add(s.getfeatureSpecialization());
	if (s.eContainingFeature != null and s.eContainingFeature.name != null){
		t.featureNote.add(":>");
		t.featureSpecialization.add(s.eContainingFeature().name);
	}
}
	
[%=root.main()%]
[% operation Ecore!EClass writeEClass(){%]
@lazy
rule [%=self.name%]
	transform s : DSL![%=self.name%]
	to t : SysMLine!PartUsage
	extends Base{
	[%	for (eAttribute in self.eAllAttributes){%]
	//[%=self.name%] -> EAttribute : [%=eAttribute.name%]
	if (s.[%=eAttribute.name%].getEAttribute() != null){
		var [%=eAttribute.name%] = new SysMLine!AttributeUsage;
		[%=eAttribute.name%].featureNote.add(":>>");
		[%=eAttribute.name%].featureSpecialization.add("[%=eAttribute.name%]");
		[%=eAttribute.name%].valuePart = s.[%=eAttribute.name%].getEAttribute();
		t.body.add([%=eAttribute.name%]);
	}
	[%}%]
	[%	for (eReference in self.eAllReferences){%]
	//[%=self.name%] -> EReference : [%=eReference.name.clearKeyWord(0)%]
	if (s.[%=eReference.name.clearKeyWord(2)%].getEReference() != null){
		var [%=eReference.name.clearKeyWord(0)%] = new SysMLine!PartUsage;
		[%=eReference.name.clearKeyWord(0)%].isReference = true;
		[%=eReference.name.clearKeyWord(0)%].featureNote.add(":>");
		[%=eReference.name.clearKeyWord(0)%].featureSpecialization.add("[%=eReference.name.clearKeyWord(1)%]");
		[%=eReference.name.clearKeyWord(0)%].valuePart = s.[%=eReference.name.clearKeyWord(0)%].getEReference();
		t.body.add([%=eReference.name.clearKeyWord(0)%]);
	}
	[%}%]
}

[%}%]


