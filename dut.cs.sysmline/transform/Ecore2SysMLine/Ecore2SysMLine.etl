import "Ecore2SysMLine-util.eol";

pre{
//	"------------------ ETL Start ------------------".println();
	var KeyWords = Sequence{"about", "abstract", "accept", "action", "actor",
							"after", "alias", "all", "allocate", "allocation",
							"analysis", "and", "as", "assign", "assert",
							"assoc", "assume", "at", "attribute", "bind",
							"binding", "block", "by", "calc", "case",
							"comment", "concern", "connect", "connection", "constraint",
							"crosses", "decide", "def", "default", "defined",
							"dependency", "derived", "do", "doc", "else",
							"end", "entry", "enum", "event", "exhibit",
							"exit", "expose", "filter", "first", "flow",
							"for", "fork", "frame", "from", "hastype",
							"if", "implies", "import", "in", "include",
							"individual", "inout", "interface", "istype", "item",
							"join", "language", "loop", "merge", "message",
							"metadata", "nonunique", "not", "objective", "occurrence",
							"of", "or", "ordered", "out", "package",
							"parallel", "part", "perform", "port", "private",
							"protected", "public", "readonly", "redefines", "ref",
							"references", "render", "rendering", "rep", "require",
							"requirement", "return", "satisfy", "send", "snapshot",
							"specializes", "stakeholder", "state", "subject", "subsets",
							"succession", "terminate", "then", "timeslice", "to",
							"transition", "until", "use", "variant", "variation",
							"verification", "verify", "via", "view", "viewpoint",
							"when", "while", "xor", "value", "any", "library"
	  						};
	main();
}

post{
//	"------------------ ETL Over  ------------------".println();
	("[ETL] Ecore2SysMLine >> " + SysMLine!Package.all.first().declaredName + ".sysmline").println();
}

operation main(){
	var rootEcore = Ecore!EPackage.all.first();
	var rootSysMLine = new SysMLine!Namespace;
	rootEcore.addRootNodeTo(rootSysMLine);
}

@lazy
rule Epackage
	transform s : Ecore!EPackage
	to t : SysMLine!Package{
		t.declaredName = s.name.clearKeyWord();
	}

@lazy
rule EClass
	transform s : Ecore!EClass
	to t : SysMLine!ItemDefinition{
		t.declaredName = s.name.clearKeyWord();
		t.isAbstract = s.Abstract;
		if (s.eContents().getElementOf("EGenericType").size() > 0){
			for (eGenericType in s.eContents().getElementOf("EGenericType")){
				t.SubclassificationPart.add(eGenericType.eClassifier.name);
			}
		}
	}

@lazy
rule EAttribute
	transform s : Ecore!EAttribute
	to t : SysMLine!AttributeUsage{
		eStructuralFeatureTransform(s, t);
	}
	
	
@lazy
rule EReference_val
	transform s : Ecore!EReference
	to t : SysMLine!ItemUsage{
		guard : s.containment==true
		eStructuralFeatureTransform(s, t);
	}

@lazy
rule EReference_ref
	transform s : Ecore!EReference
	to t : SysMLine!ItemUsage{
		guard : s.containment==false
		t.isReference = true;
		eStructuralFeatureTransform(s, t);
	}
	
@lazy
rule EEnum
	transform s : Ecore!EEnum
	to t : SysMLine!EnumerationDefinition{
		t.declaredName = s.name.clearKeyWord();
	}

@lazy
rule EEnumLiteral
	transform s : Ecore!EEnumLiteral
	to t : SysMLine!EnumerationUsage{
		t.declaredName = s.name.clearKeyWord();
	}
	
@lazy
rule EDataType
	transform s : Ecore!EDataType
	to t : SysMLine!AttributeDefinition{
		t.declaredName = s.name.clearKeyWord();
	}