operation Ecore!EObject addRootNodeTo(rootNode : SysMLine!Element){
	if (self.isEntity()){
		var node = self.equivalent();
		rootNode.body.add(node);
		node.addNamespaceImport("ecore", false);
		var namespaceImportPackage = Sequence{"ecore", node.declaredName};
		for (eReference in Ecore!EReference){
			if (eReference.isExtendedEcore(namespaceImportPackage)){
				var newNamespaceImport = "";
				if (eReference.eType.eProxyURI.asString().split("#//").size()>1){
					newNamespaceImport = eReference.eType.eProxyURI.asString().split("#//").first().split('.ecore').first().asString().toLowerCase();
				}
				else{
					newNamespaceImport = eReference.eType.eContainer().name;
				}
				node.addNamespaceImport(newNamespaceImport, true);
				namespaceImportPackage.add(newNamespaceImport);			
			}
		}
		for (eGenericType in Ecore!EGenericType){
			if (eGenericType.isExtendedEcore(namespaceImportPackage)){
				var newNamespaceImport = "";
				if (eGenericType.eClassifier.eProxyURI.asString().split("#//").size()>1){
					newNamespaceImport = eGenericType.eClassifier.eProxyURI.asString().split("#//").first().split('.ecore').first().asString().toLowerCase();
				}
				else{
					newNamespaceImport = eGenericType.eClassifier.eContainer().name;
				}
				node.addNamespaceImport(newNamespaceImport, true);
				namespaceImportPackage.add(newNamespaceImport);			
			}
		}
		for (child in self.eContents()){
			child.addNodeTo(node);
		}
	}
}

operation Ecore!EObject isExtendedEcore(namespaceImportPackage : Sequence){
	var eName = String;
	if (self.isKindOf(Ecore!EReference)){
		if (self.eType.eProxyURI.asString().split("#//").size()>1){
			eName = self.eType.eProxyURI.asString().split("#//").first().split('.ecore').first().asString().toLowerCase();
		}
		else{
			eName = self.eType.eContainer().name.asString();
		}
	}
	else if (self.isTypeOf(Ecore!EGenericType)){
		if (self.eClassifier == null){
			return false;
		}
		if (self.eClassifier.eProxyURI.asString().split("#//").size()>1){
			eName = self.eClassifier.eProxyURI.asString().split("#//").first().split('.ecore').first().asString().toLowerCase();
		}
		else{
			eName = self.eClassifier.eContainer().name.asString();
		}
	}
	if (namespaceImportPackage.includes(eName)){
		return false;
	}
	else{
		return true;
	}
}

operation eStructuralFeatureTransform(s, t){
	t.declaredName = s.name.clearKeyWord();
	t.multiplicityRange = s.getRange();
	t.featureNote.add(":");
	var fsName = s.eContents().select(i|i.isTypeOf(Ecore!EGenericType)).first().eClassifier.name;
	if (fsName.asString() != ""){
		t.featureSpecialization.add(fsName);
	}
	else{
		var eProxyURI = s.eContents().select(i|i.isTypeOf(Ecore!EGenericType)).first().eClassifier.eProxyURI.asString();
		fsName = eProxyURI.split("#//").second();
		t.featureSpecialization.add(fsName);
	}
}


operation SysMLine!Package addNamespaceImport(name:String, isPublic : Boolean){
	var namespaceImport = new SysMLine!NamespaceImport;
	namespaceImport.declaredName = name;
	namespaceImport.hasVisibility = true;
	if (isPublic){
		namespaceImport.visibility = SysMLine!VisibilityKind#public;
	}
	self.body.add(namespaceImport);
}

operation Ecore!EObject addNodeTo(rootNode : SysMLine!Element){
	if (self.isEntity()){
		var node = self.equivalent();
		if (node != null){
			rootNode.body.add(node);
			for (child in self.eContents()){
				child.addNodeTo(node);
			}
		}
	}
}

operation Ecore!EObject isEntity(){
	if (self.isTypeOf(Ecore!EGenericType) or
		self.isTypeOf(Ecore!EOperation) or  
		self.isTypeOf(Ecore!EAnnotation)
		){
		return false;
	}
	else{
		return true;
	}
}

operation Ecore!ETypedElement getRange(){
	if (self.lowerBound == 0 and self.upperBound == 1){
		return "[1]";
	}
	else if (self.lowerBound == 0 and self.upperBound == -1){
		return "[*]";
	}
	else if (self.upperBound == -1){
		return "["+self.lowerBound+"..*]";
	}
	else if (self.lowerBound == self.upperBound){
		return "["+self.lowerBound+"]";
	}
	else if (self.lowerBound < self.upperBound){
		return "["+self.lowerBound+".."+self.upperBound+"]";
	}
	return "";
}

operation Sequence getElementOf(typeName : String){
	return self.select(e|e.type().name == typeName);
}

operation String clearKeyWord(){
	if (KeyWords.includes(self)){
		return "'"+self+"'";
	}
	else{
		return self;
	}
}
